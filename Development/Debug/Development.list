
Development.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008bcc  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000057c  08008d9c  08008d9c  00009d9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009318  08009318  0000b074  2**0
                  CONTENTS
  4 .ARM          00000008  08009318  08009318  0000a318  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009320  08009320  0000b074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009320  08009320  0000a320  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009324  08009324  0000a324  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000074  20000000  08009328  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002888  20000074  0800939c  0000b074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200028fc  0800939c  0000b8fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013c51  00000000  00000000  0000b0a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000032f2  00000000  00000000  0001ecf5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012b0  00000000  00000000  00021fe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e8f  00000000  00000000  00023298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024d16  00000000  00000000  00024127  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001cb46  00000000  00000000  00048e3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d4e78  00000000  00000000  00065983  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013a7fb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000052f0  00000000  00000000  0013a840  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  0013fb30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000074 	.word	0x20000074
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008d84 	.word	0x08008d84

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000078 	.word	0x20000078
 800020c:	08008d84 	.word	0x08008d84

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_dmul>:
 80002b0:	b570      	push	{r4, r5, r6, lr}
 80002b2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80002b6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80002ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002be:	bf1d      	ittte	ne
 80002c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002c4:	ea94 0f0c 	teqne	r4, ip
 80002c8:	ea95 0f0c 	teqne	r5, ip
 80002cc:	f000 f8de 	bleq	800048c <__aeabi_dmul+0x1dc>
 80002d0:	442c      	add	r4, r5
 80002d2:	ea81 0603 	eor.w	r6, r1, r3
 80002d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002e2:	bf18      	it	ne
 80002e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002ec:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80002f0:	d038      	beq.n	8000364 <__aeabi_dmul+0xb4>
 80002f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002f6:	f04f 0500 	mov.w	r5, #0
 80002fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002fe:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000302:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000306:	f04f 0600 	mov.w	r6, #0
 800030a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800030e:	f09c 0f00 	teq	ip, #0
 8000312:	bf18      	it	ne
 8000314:	f04e 0e01 	orrne.w	lr, lr, #1
 8000318:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800031c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000320:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000324:	d204      	bcs.n	8000330 <__aeabi_dmul+0x80>
 8000326:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800032a:	416d      	adcs	r5, r5
 800032c:	eb46 0606 	adc.w	r6, r6, r6
 8000330:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000334:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000338:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800033c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000340:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000344:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000348:	bf88      	it	hi
 800034a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800034e:	d81e      	bhi.n	800038e <__aeabi_dmul+0xde>
 8000350:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000368:	ea46 0101 	orr.w	r1, r6, r1
 800036c:	ea40 0002 	orr.w	r0, r0, r2
 8000370:	ea81 0103 	eor.w	r1, r1, r3
 8000374:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000378:	bfc2      	ittt	gt
 800037a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800037e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000382:	bd70      	popgt	{r4, r5, r6, pc}
 8000384:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000388:	f04f 0e00 	mov.w	lr, #0
 800038c:	3c01      	subs	r4, #1
 800038e:	f300 80ab 	bgt.w	80004e8 <__aeabi_dmul+0x238>
 8000392:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000396:	bfde      	ittt	le
 8000398:	2000      	movle	r0, #0
 800039a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800039e:	bd70      	pople	{r4, r5, r6, pc}
 80003a0:	f1c4 0400 	rsb	r4, r4, #0
 80003a4:	3c20      	subs	r4, #32
 80003a6:	da35      	bge.n	8000414 <__aeabi_dmul+0x164>
 80003a8:	340c      	adds	r4, #12
 80003aa:	dc1b      	bgt.n	80003e4 <__aeabi_dmul+0x134>
 80003ac:	f104 0414 	add.w	r4, r4, #20
 80003b0:	f1c4 0520 	rsb	r5, r4, #32
 80003b4:	fa00 f305 	lsl.w	r3, r0, r5
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f205 	lsl.w	r2, r1, r5
 80003c0:	ea40 0002 	orr.w	r0, r0, r2
 80003c4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80003c8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80003cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d0:	fa21 f604 	lsr.w	r6, r1, r4
 80003d4:	eb42 0106 	adc.w	r1, r2, r6
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 040c 	rsb	r4, r4, #12
 80003e8:	f1c4 0520 	rsb	r5, r4, #32
 80003ec:	fa00 f304 	lsl.w	r3, r0, r4
 80003f0:	fa20 f005 	lsr.w	r0, r0, r5
 80003f4:	fa01 f204 	lsl.w	r2, r1, r4
 80003f8:	ea40 0002 	orr.w	r0, r0, r2
 80003fc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000400:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000404:	f141 0100 	adc.w	r1, r1, #0
 8000408:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800040c:	bf08      	it	eq
 800040e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000412:	bd70      	pop	{r4, r5, r6, pc}
 8000414:	f1c4 0520 	rsb	r5, r4, #32
 8000418:	fa00 f205 	lsl.w	r2, r0, r5
 800041c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000420:	fa20 f304 	lsr.w	r3, r0, r4
 8000424:	fa01 f205 	lsl.w	r2, r1, r5
 8000428:	ea43 0302 	orr.w	r3, r3, r2
 800042c:	fa21 f004 	lsr.w	r0, r1, r4
 8000430:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000434:	fa21 f204 	lsr.w	r2, r1, r4
 8000438:	ea20 0002 	bic.w	r0, r0, r2
 800043c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000440:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000444:	bf08      	it	eq
 8000446:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800044a:	bd70      	pop	{r4, r5, r6, pc}
 800044c:	f094 0f00 	teq	r4, #0
 8000450:	d10f      	bne.n	8000472 <__aeabi_dmul+0x1c2>
 8000452:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000456:	0040      	lsls	r0, r0, #1
 8000458:	eb41 0101 	adc.w	r1, r1, r1
 800045c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000460:	bf08      	it	eq
 8000462:	3c01      	subeq	r4, #1
 8000464:	d0f7      	beq.n	8000456 <__aeabi_dmul+0x1a6>
 8000466:	ea41 0106 	orr.w	r1, r1, r6
 800046a:	f095 0f00 	teq	r5, #0
 800046e:	bf18      	it	ne
 8000470:	4770      	bxne	lr
 8000472:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000476:	0052      	lsls	r2, r2, #1
 8000478:	eb43 0303 	adc.w	r3, r3, r3
 800047c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000480:	bf08      	it	eq
 8000482:	3d01      	subeq	r5, #1
 8000484:	d0f7      	beq.n	8000476 <__aeabi_dmul+0x1c6>
 8000486:	ea43 0306 	orr.w	r3, r3, r6
 800048a:	4770      	bx	lr
 800048c:	ea94 0f0c 	teq	r4, ip
 8000490:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000494:	bf18      	it	ne
 8000496:	ea95 0f0c 	teqne	r5, ip
 800049a:	d00c      	beq.n	80004b6 <__aeabi_dmul+0x206>
 800049c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004a0:	bf18      	it	ne
 80004a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004a6:	d1d1      	bne.n	800044c <__aeabi_dmul+0x19c>
 80004a8:	ea81 0103 	eor.w	r1, r1, r3
 80004ac:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004b0:	f04f 0000 	mov.w	r0, #0
 80004b4:	bd70      	pop	{r4, r5, r6, pc}
 80004b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004ba:	bf06      	itte	eq
 80004bc:	4610      	moveq	r0, r2
 80004be:	4619      	moveq	r1, r3
 80004c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004c4:	d019      	beq.n	80004fa <__aeabi_dmul+0x24a>
 80004c6:	ea94 0f0c 	teq	r4, ip
 80004ca:	d102      	bne.n	80004d2 <__aeabi_dmul+0x222>
 80004cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004d0:	d113      	bne.n	80004fa <__aeabi_dmul+0x24a>
 80004d2:	ea95 0f0c 	teq	r5, ip
 80004d6:	d105      	bne.n	80004e4 <__aeabi_dmul+0x234>
 80004d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004dc:	bf1c      	itt	ne
 80004de:	4610      	movne	r0, r2
 80004e0:	4619      	movne	r1, r3
 80004e2:	d10a      	bne.n	80004fa <__aeabi_dmul+0x24a>
 80004e4:	ea81 0103 	eor.w	r1, r1, r3
 80004e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004ec:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd70      	pop	{r4, r5, r6, pc}
 80004fa:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004fe:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000502:	bd70      	pop	{r4, r5, r6, pc}

08000504 <__aeabi_drsub>:
 8000504:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000508:	e002      	b.n	8000510 <__adddf3>
 800050a:	bf00      	nop

0800050c <__aeabi_dsub>:
 800050c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000510 <__adddf3>:
 8000510:	b530      	push	{r4, r5, lr}
 8000512:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000516:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800051a:	ea94 0f05 	teq	r4, r5
 800051e:	bf08      	it	eq
 8000520:	ea90 0f02 	teqeq	r0, r2
 8000524:	bf1f      	itttt	ne
 8000526:	ea54 0c00 	orrsne.w	ip, r4, r0
 800052a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800052e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000532:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000536:	f000 80e2 	beq.w	80006fe <__adddf3+0x1ee>
 800053a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800053e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000542:	bfb8      	it	lt
 8000544:	426d      	neglt	r5, r5
 8000546:	dd0c      	ble.n	8000562 <__adddf3+0x52>
 8000548:	442c      	add	r4, r5
 800054a:	ea80 0202 	eor.w	r2, r0, r2
 800054e:	ea81 0303 	eor.w	r3, r1, r3
 8000552:	ea82 0000 	eor.w	r0, r2, r0
 8000556:	ea83 0101 	eor.w	r1, r3, r1
 800055a:	ea80 0202 	eor.w	r2, r0, r2
 800055e:	ea81 0303 	eor.w	r3, r1, r3
 8000562:	2d36      	cmp	r5, #54	@ 0x36
 8000564:	bf88      	it	hi
 8000566:	bd30      	pophi	{r4, r5, pc}
 8000568:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800056c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000570:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000574:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000578:	d002      	beq.n	8000580 <__adddf3+0x70>
 800057a:	4240      	negs	r0, r0
 800057c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000580:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000584:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000588:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800058c:	d002      	beq.n	8000594 <__adddf3+0x84>
 800058e:	4252      	negs	r2, r2
 8000590:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000594:	ea94 0f05 	teq	r4, r5
 8000598:	f000 80a7 	beq.w	80006ea <__adddf3+0x1da>
 800059c:	f1a4 0401 	sub.w	r4, r4, #1
 80005a0:	f1d5 0e20 	rsbs	lr, r5, #32
 80005a4:	db0d      	blt.n	80005c2 <__adddf3+0xb2>
 80005a6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80005aa:	fa22 f205 	lsr.w	r2, r2, r5
 80005ae:	1880      	adds	r0, r0, r2
 80005b0:	f141 0100 	adc.w	r1, r1, #0
 80005b4:	fa03 f20e 	lsl.w	r2, r3, lr
 80005b8:	1880      	adds	r0, r0, r2
 80005ba:	fa43 f305 	asr.w	r3, r3, r5
 80005be:	4159      	adcs	r1, r3
 80005c0:	e00e      	b.n	80005e0 <__adddf3+0xd0>
 80005c2:	f1a5 0520 	sub.w	r5, r5, #32
 80005c6:	f10e 0e20 	add.w	lr, lr, #32
 80005ca:	2a01      	cmp	r2, #1
 80005cc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005d0:	bf28      	it	cs
 80005d2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005d6:	fa43 f305 	asr.w	r3, r3, r5
 80005da:	18c0      	adds	r0, r0, r3
 80005dc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005e4:	d507      	bpl.n	80005f6 <__adddf3+0xe6>
 80005e6:	f04f 0e00 	mov.w	lr, #0
 80005ea:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ee:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005f2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005f6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80005fa:	d31b      	bcc.n	8000634 <__adddf3+0x124>
 80005fc:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000600:	d30c      	bcc.n	800061c <__adddf3+0x10c>
 8000602:	0849      	lsrs	r1, r1, #1
 8000604:	ea5f 0030 	movs.w	r0, r0, rrx
 8000608:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800060c:	f104 0401 	add.w	r4, r4, #1
 8000610:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000614:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000618:	f080 809a 	bcs.w	8000750 <__adddf3+0x240>
 800061c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000620:	bf08      	it	eq
 8000622:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000626:	f150 0000 	adcs.w	r0, r0, #0
 800062a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800062e:	ea41 0105 	orr.w	r1, r1, r5
 8000632:	bd30      	pop	{r4, r5, pc}
 8000634:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000638:	4140      	adcs	r0, r0
 800063a:	eb41 0101 	adc.w	r1, r1, r1
 800063e:	3c01      	subs	r4, #1
 8000640:	bf28      	it	cs
 8000642:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000646:	d2e9      	bcs.n	800061c <__adddf3+0x10c>
 8000648:	f091 0f00 	teq	r1, #0
 800064c:	bf04      	itt	eq
 800064e:	4601      	moveq	r1, r0
 8000650:	2000      	moveq	r0, #0
 8000652:	fab1 f381 	clz	r3, r1
 8000656:	bf08      	it	eq
 8000658:	3320      	addeq	r3, #32
 800065a:	f1a3 030b 	sub.w	r3, r3, #11
 800065e:	f1b3 0220 	subs.w	r2, r3, #32
 8000662:	da0c      	bge.n	800067e <__adddf3+0x16e>
 8000664:	320c      	adds	r2, #12
 8000666:	dd08      	ble.n	800067a <__adddf3+0x16a>
 8000668:	f102 0c14 	add.w	ip, r2, #20
 800066c:	f1c2 020c 	rsb	r2, r2, #12
 8000670:	fa01 f00c 	lsl.w	r0, r1, ip
 8000674:	fa21 f102 	lsr.w	r1, r1, r2
 8000678:	e00c      	b.n	8000694 <__adddf3+0x184>
 800067a:	f102 0214 	add.w	r2, r2, #20
 800067e:	bfd8      	it	le
 8000680:	f1c2 0c20 	rsble	ip, r2, #32
 8000684:	fa01 f102 	lsl.w	r1, r1, r2
 8000688:	fa20 fc0c 	lsr.w	ip, r0, ip
 800068c:	bfdc      	itt	le
 800068e:	ea41 010c 	orrle.w	r1, r1, ip
 8000692:	4090      	lslle	r0, r2
 8000694:	1ae4      	subs	r4, r4, r3
 8000696:	bfa2      	ittt	ge
 8000698:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800069c:	4329      	orrge	r1, r5
 800069e:	bd30      	popge	{r4, r5, pc}
 80006a0:	ea6f 0404 	mvn.w	r4, r4
 80006a4:	3c1f      	subs	r4, #31
 80006a6:	da1c      	bge.n	80006e2 <__adddf3+0x1d2>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc0e      	bgt.n	80006ca <__adddf3+0x1ba>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0220 	rsb	r2, r4, #32
 80006b4:	fa20 f004 	lsr.w	r0, r0, r4
 80006b8:	fa01 f302 	lsl.w	r3, r1, r2
 80006bc:	ea40 0003 	orr.w	r0, r0, r3
 80006c0:	fa21 f304 	lsr.w	r3, r1, r4
 80006c4:	ea45 0103 	orr.w	r1, r5, r3
 80006c8:	bd30      	pop	{r4, r5, pc}
 80006ca:	f1c4 040c 	rsb	r4, r4, #12
 80006ce:	f1c4 0220 	rsb	r2, r4, #32
 80006d2:	fa20 f002 	lsr.w	r0, r0, r2
 80006d6:	fa01 f304 	lsl.w	r3, r1, r4
 80006da:	ea40 0003 	orr.w	r0, r0, r3
 80006de:	4629      	mov	r1, r5
 80006e0:	bd30      	pop	{r4, r5, pc}
 80006e2:	fa21 f004 	lsr.w	r0, r1, r4
 80006e6:	4629      	mov	r1, r5
 80006e8:	bd30      	pop	{r4, r5, pc}
 80006ea:	f094 0f00 	teq	r4, #0
 80006ee:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80006f2:	bf06      	itte	eq
 80006f4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80006f8:	3401      	addeq	r4, #1
 80006fa:	3d01      	subne	r5, #1
 80006fc:	e74e      	b.n	800059c <__adddf3+0x8c>
 80006fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000702:	bf18      	it	ne
 8000704:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000708:	d029      	beq.n	800075e <__adddf3+0x24e>
 800070a:	ea94 0f05 	teq	r4, r5
 800070e:	bf08      	it	eq
 8000710:	ea90 0f02 	teqeq	r0, r2
 8000714:	d005      	beq.n	8000722 <__adddf3+0x212>
 8000716:	ea54 0c00 	orrs.w	ip, r4, r0
 800071a:	bf04      	itt	eq
 800071c:	4619      	moveq	r1, r3
 800071e:	4610      	moveq	r0, r2
 8000720:	bd30      	pop	{r4, r5, pc}
 8000722:	ea91 0f03 	teq	r1, r3
 8000726:	bf1e      	ittt	ne
 8000728:	2100      	movne	r1, #0
 800072a:	2000      	movne	r0, #0
 800072c:	bd30      	popne	{r4, r5, pc}
 800072e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000732:	d105      	bne.n	8000740 <__adddf3+0x230>
 8000734:	0040      	lsls	r0, r0, #1
 8000736:	4149      	adcs	r1, r1
 8000738:	bf28      	it	cs
 800073a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800073e:	bd30      	pop	{r4, r5, pc}
 8000740:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000744:	bf3c      	itt	cc
 8000746:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800074a:	bd30      	popcc	{r4, r5, pc}
 800074c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000750:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000754:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd30      	pop	{r4, r5, pc}
 800075e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000762:	bf1a      	itte	ne
 8000764:	4619      	movne	r1, r3
 8000766:	4610      	movne	r0, r2
 8000768:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800076c:	bf1c      	itt	ne
 800076e:	460b      	movne	r3, r1
 8000770:	4602      	movne	r2, r0
 8000772:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000776:	bf06      	itte	eq
 8000778:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800077c:	ea91 0f03 	teqeq	r1, r3
 8000780:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000784:	bd30      	pop	{r4, r5, pc}
 8000786:	bf00      	nop

08000788 <__aeabi_ui2d>:
 8000788:	f090 0f00 	teq	r0, #0
 800078c:	bf04      	itt	eq
 800078e:	2100      	moveq	r1, #0
 8000790:	4770      	bxeq	lr
 8000792:	b530      	push	{r4, r5, lr}
 8000794:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000798:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800079c:	f04f 0500 	mov.w	r5, #0
 80007a0:	f04f 0100 	mov.w	r1, #0
 80007a4:	e750      	b.n	8000648 <__adddf3+0x138>
 80007a6:	bf00      	nop

080007a8 <__aeabi_i2d>:
 80007a8:	f090 0f00 	teq	r0, #0
 80007ac:	bf04      	itt	eq
 80007ae:	2100      	moveq	r1, #0
 80007b0:	4770      	bxeq	lr
 80007b2:	b530      	push	{r4, r5, lr}
 80007b4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007b8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007bc:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80007c0:	bf48      	it	mi
 80007c2:	4240      	negmi	r0, r0
 80007c4:	f04f 0100 	mov.w	r1, #0
 80007c8:	e73e      	b.n	8000648 <__adddf3+0x138>
 80007ca:	bf00      	nop

080007cc <__aeabi_f2d>:
 80007cc:	0042      	lsls	r2, r0, #1
 80007ce:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007d2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007d6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007da:	bf1f      	itttt	ne
 80007dc:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80007e0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80007e4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80007e8:	4770      	bxne	lr
 80007ea:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80007ee:	bf08      	it	eq
 80007f0:	4770      	bxeq	lr
 80007f2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80007f6:	bf04      	itt	eq
 80007f8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80007fc:	4770      	bxeq	lr
 80007fe:	b530      	push	{r4, r5, lr}
 8000800:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000804:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000808:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800080c:	e71c      	b.n	8000648 <__adddf3+0x138>
 800080e:	bf00      	nop

08000810 <__aeabi_ul2d>:
 8000810:	ea50 0201 	orrs.w	r2, r0, r1
 8000814:	bf08      	it	eq
 8000816:	4770      	bxeq	lr
 8000818:	b530      	push	{r4, r5, lr}
 800081a:	f04f 0500 	mov.w	r5, #0
 800081e:	e00a      	b.n	8000836 <__aeabi_l2d+0x16>

08000820 <__aeabi_l2d>:
 8000820:	ea50 0201 	orrs.w	r2, r0, r1
 8000824:	bf08      	it	eq
 8000826:	4770      	bxeq	lr
 8000828:	b530      	push	{r4, r5, lr}
 800082a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800082e:	d502      	bpl.n	8000836 <__aeabi_l2d+0x16>
 8000830:	4240      	negs	r0, r0
 8000832:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000836:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800083a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800083e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000842:	f43f aed8 	beq.w	80005f6 <__adddf3+0xe6>
 8000846:	f04f 0203 	mov.w	r2, #3
 800084a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800084e:	bf18      	it	ne
 8000850:	3203      	addne	r2, #3
 8000852:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000856:	bf18      	it	ne
 8000858:	3203      	addne	r2, #3
 800085a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800085e:	f1c2 0320 	rsb	r3, r2, #32
 8000862:	fa00 fc03 	lsl.w	ip, r0, r3
 8000866:	fa20 f002 	lsr.w	r0, r0, r2
 800086a:	fa01 fe03 	lsl.w	lr, r1, r3
 800086e:	ea40 000e 	orr.w	r0, r0, lr
 8000872:	fa21 f102 	lsr.w	r1, r1, r2
 8000876:	4414      	add	r4, r2
 8000878:	e6bd      	b.n	80005f6 <__adddf3+0xe6>
 800087a:	bf00      	nop

0800087c <__aeabi_d2uiz>:
 800087c:	004a      	lsls	r2, r1, #1
 800087e:	d211      	bcs.n	80008a4 <__aeabi_d2uiz+0x28>
 8000880:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000884:	d211      	bcs.n	80008aa <__aeabi_d2uiz+0x2e>
 8000886:	d50d      	bpl.n	80008a4 <__aeabi_d2uiz+0x28>
 8000888:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800088c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000890:	d40e      	bmi.n	80008b0 <__aeabi_d2uiz+0x34>
 8000892:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000896:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800089a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800089e:	fa23 f002 	lsr.w	r0, r3, r2
 80008a2:	4770      	bx	lr
 80008a4:	f04f 0000 	mov.w	r0, #0
 80008a8:	4770      	bx	lr
 80008aa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80008ae:	d102      	bne.n	80008b6 <__aeabi_d2uiz+0x3a>
 80008b0:	f04f 30ff 	mov.w	r0, #4294967295
 80008b4:	4770      	bx	lr
 80008b6:	f04f 0000 	mov.w	r0, #0
 80008ba:	4770      	bx	lr

080008bc <__aeabi_uldivmod>:
 80008bc:	b953      	cbnz	r3, 80008d4 <__aeabi_uldivmod+0x18>
 80008be:	b94a      	cbnz	r2, 80008d4 <__aeabi_uldivmod+0x18>
 80008c0:	2900      	cmp	r1, #0
 80008c2:	bf08      	it	eq
 80008c4:	2800      	cmpeq	r0, #0
 80008c6:	bf1c      	itt	ne
 80008c8:	f04f 31ff 	movne.w	r1, #4294967295
 80008cc:	f04f 30ff 	movne.w	r0, #4294967295
 80008d0:	f000 b96a 	b.w	8000ba8 <__aeabi_idiv0>
 80008d4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008d8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008dc:	f000 f806 	bl	80008ec <__udivmoddi4>
 80008e0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008e8:	b004      	add	sp, #16
 80008ea:	4770      	bx	lr

080008ec <__udivmoddi4>:
 80008ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008f0:	9d08      	ldr	r5, [sp, #32]
 80008f2:	460c      	mov	r4, r1
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d14e      	bne.n	8000996 <__udivmoddi4+0xaa>
 80008f8:	4694      	mov	ip, r2
 80008fa:	458c      	cmp	ip, r1
 80008fc:	4686      	mov	lr, r0
 80008fe:	fab2 f282 	clz	r2, r2
 8000902:	d962      	bls.n	80009ca <__udivmoddi4+0xde>
 8000904:	b14a      	cbz	r2, 800091a <__udivmoddi4+0x2e>
 8000906:	f1c2 0320 	rsb	r3, r2, #32
 800090a:	4091      	lsls	r1, r2
 800090c:	fa20 f303 	lsr.w	r3, r0, r3
 8000910:	fa0c fc02 	lsl.w	ip, ip, r2
 8000914:	4319      	orrs	r1, r3
 8000916:	fa00 fe02 	lsl.w	lr, r0, r2
 800091a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800091e:	fa1f f68c 	uxth.w	r6, ip
 8000922:	fbb1 f4f7 	udiv	r4, r1, r7
 8000926:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800092a:	fb07 1114 	mls	r1, r7, r4, r1
 800092e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000932:	fb04 f106 	mul.w	r1, r4, r6
 8000936:	4299      	cmp	r1, r3
 8000938:	d90a      	bls.n	8000950 <__udivmoddi4+0x64>
 800093a:	eb1c 0303 	adds.w	r3, ip, r3
 800093e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000942:	f080 8112 	bcs.w	8000b6a <__udivmoddi4+0x27e>
 8000946:	4299      	cmp	r1, r3
 8000948:	f240 810f 	bls.w	8000b6a <__udivmoddi4+0x27e>
 800094c:	3c02      	subs	r4, #2
 800094e:	4463      	add	r3, ip
 8000950:	1a59      	subs	r1, r3, r1
 8000952:	fa1f f38e 	uxth.w	r3, lr
 8000956:	fbb1 f0f7 	udiv	r0, r1, r7
 800095a:	fb07 1110 	mls	r1, r7, r0, r1
 800095e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000962:	fb00 f606 	mul.w	r6, r0, r6
 8000966:	429e      	cmp	r6, r3
 8000968:	d90a      	bls.n	8000980 <__udivmoddi4+0x94>
 800096a:	eb1c 0303 	adds.w	r3, ip, r3
 800096e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000972:	f080 80fc 	bcs.w	8000b6e <__udivmoddi4+0x282>
 8000976:	429e      	cmp	r6, r3
 8000978:	f240 80f9 	bls.w	8000b6e <__udivmoddi4+0x282>
 800097c:	4463      	add	r3, ip
 800097e:	3802      	subs	r0, #2
 8000980:	1b9b      	subs	r3, r3, r6
 8000982:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000986:	2100      	movs	r1, #0
 8000988:	b11d      	cbz	r5, 8000992 <__udivmoddi4+0xa6>
 800098a:	40d3      	lsrs	r3, r2
 800098c:	2200      	movs	r2, #0
 800098e:	e9c5 3200 	strd	r3, r2, [r5]
 8000992:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000996:	428b      	cmp	r3, r1
 8000998:	d905      	bls.n	80009a6 <__udivmoddi4+0xba>
 800099a:	b10d      	cbz	r5, 80009a0 <__udivmoddi4+0xb4>
 800099c:	e9c5 0100 	strd	r0, r1, [r5]
 80009a0:	2100      	movs	r1, #0
 80009a2:	4608      	mov	r0, r1
 80009a4:	e7f5      	b.n	8000992 <__udivmoddi4+0xa6>
 80009a6:	fab3 f183 	clz	r1, r3
 80009aa:	2900      	cmp	r1, #0
 80009ac:	d146      	bne.n	8000a3c <__udivmoddi4+0x150>
 80009ae:	42a3      	cmp	r3, r4
 80009b0:	d302      	bcc.n	80009b8 <__udivmoddi4+0xcc>
 80009b2:	4290      	cmp	r0, r2
 80009b4:	f0c0 80f0 	bcc.w	8000b98 <__udivmoddi4+0x2ac>
 80009b8:	1a86      	subs	r6, r0, r2
 80009ba:	eb64 0303 	sbc.w	r3, r4, r3
 80009be:	2001      	movs	r0, #1
 80009c0:	2d00      	cmp	r5, #0
 80009c2:	d0e6      	beq.n	8000992 <__udivmoddi4+0xa6>
 80009c4:	e9c5 6300 	strd	r6, r3, [r5]
 80009c8:	e7e3      	b.n	8000992 <__udivmoddi4+0xa6>
 80009ca:	2a00      	cmp	r2, #0
 80009cc:	f040 8090 	bne.w	8000af0 <__udivmoddi4+0x204>
 80009d0:	eba1 040c 	sub.w	r4, r1, ip
 80009d4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80009d8:	fa1f f78c 	uxth.w	r7, ip
 80009dc:	2101      	movs	r1, #1
 80009de:	fbb4 f6f8 	udiv	r6, r4, r8
 80009e2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80009e6:	fb08 4416 	mls	r4, r8, r6, r4
 80009ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80009ee:	fb07 f006 	mul.w	r0, r7, r6
 80009f2:	4298      	cmp	r0, r3
 80009f4:	d908      	bls.n	8000a08 <__udivmoddi4+0x11c>
 80009f6:	eb1c 0303 	adds.w	r3, ip, r3
 80009fa:	f106 34ff 	add.w	r4, r6, #4294967295
 80009fe:	d202      	bcs.n	8000a06 <__udivmoddi4+0x11a>
 8000a00:	4298      	cmp	r0, r3
 8000a02:	f200 80cd 	bhi.w	8000ba0 <__udivmoddi4+0x2b4>
 8000a06:	4626      	mov	r6, r4
 8000a08:	1a1c      	subs	r4, r3, r0
 8000a0a:	fa1f f38e 	uxth.w	r3, lr
 8000a0e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000a12:	fb08 4410 	mls	r4, r8, r0, r4
 8000a16:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000a1a:	fb00 f707 	mul.w	r7, r0, r7
 8000a1e:	429f      	cmp	r7, r3
 8000a20:	d908      	bls.n	8000a34 <__udivmoddi4+0x148>
 8000a22:	eb1c 0303 	adds.w	r3, ip, r3
 8000a26:	f100 34ff 	add.w	r4, r0, #4294967295
 8000a2a:	d202      	bcs.n	8000a32 <__udivmoddi4+0x146>
 8000a2c:	429f      	cmp	r7, r3
 8000a2e:	f200 80b0 	bhi.w	8000b92 <__udivmoddi4+0x2a6>
 8000a32:	4620      	mov	r0, r4
 8000a34:	1bdb      	subs	r3, r3, r7
 8000a36:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a3a:	e7a5      	b.n	8000988 <__udivmoddi4+0x9c>
 8000a3c:	f1c1 0620 	rsb	r6, r1, #32
 8000a40:	408b      	lsls	r3, r1
 8000a42:	fa22 f706 	lsr.w	r7, r2, r6
 8000a46:	431f      	orrs	r7, r3
 8000a48:	fa20 fc06 	lsr.w	ip, r0, r6
 8000a4c:	fa04 f301 	lsl.w	r3, r4, r1
 8000a50:	ea43 030c 	orr.w	r3, r3, ip
 8000a54:	40f4      	lsrs	r4, r6
 8000a56:	fa00 f801 	lsl.w	r8, r0, r1
 8000a5a:	0c38      	lsrs	r0, r7, #16
 8000a5c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000a60:	fbb4 fef0 	udiv	lr, r4, r0
 8000a64:	fa1f fc87 	uxth.w	ip, r7
 8000a68:	fb00 441e 	mls	r4, r0, lr, r4
 8000a6c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000a70:	fb0e f90c 	mul.w	r9, lr, ip
 8000a74:	45a1      	cmp	r9, r4
 8000a76:	fa02 f201 	lsl.w	r2, r2, r1
 8000a7a:	d90a      	bls.n	8000a92 <__udivmoddi4+0x1a6>
 8000a7c:	193c      	adds	r4, r7, r4
 8000a7e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000a82:	f080 8084 	bcs.w	8000b8e <__udivmoddi4+0x2a2>
 8000a86:	45a1      	cmp	r9, r4
 8000a88:	f240 8081 	bls.w	8000b8e <__udivmoddi4+0x2a2>
 8000a8c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000a90:	443c      	add	r4, r7
 8000a92:	eba4 0409 	sub.w	r4, r4, r9
 8000a96:	fa1f f983 	uxth.w	r9, r3
 8000a9a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000a9e:	fb00 4413 	mls	r4, r0, r3, r4
 8000aa2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000aa6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000aaa:	45a4      	cmp	ip, r4
 8000aac:	d907      	bls.n	8000abe <__udivmoddi4+0x1d2>
 8000aae:	193c      	adds	r4, r7, r4
 8000ab0:	f103 30ff 	add.w	r0, r3, #4294967295
 8000ab4:	d267      	bcs.n	8000b86 <__udivmoddi4+0x29a>
 8000ab6:	45a4      	cmp	ip, r4
 8000ab8:	d965      	bls.n	8000b86 <__udivmoddi4+0x29a>
 8000aba:	3b02      	subs	r3, #2
 8000abc:	443c      	add	r4, r7
 8000abe:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000ac2:	fba0 9302 	umull	r9, r3, r0, r2
 8000ac6:	eba4 040c 	sub.w	r4, r4, ip
 8000aca:	429c      	cmp	r4, r3
 8000acc:	46ce      	mov	lr, r9
 8000ace:	469c      	mov	ip, r3
 8000ad0:	d351      	bcc.n	8000b76 <__udivmoddi4+0x28a>
 8000ad2:	d04e      	beq.n	8000b72 <__udivmoddi4+0x286>
 8000ad4:	b155      	cbz	r5, 8000aec <__udivmoddi4+0x200>
 8000ad6:	ebb8 030e 	subs.w	r3, r8, lr
 8000ada:	eb64 040c 	sbc.w	r4, r4, ip
 8000ade:	fa04 f606 	lsl.w	r6, r4, r6
 8000ae2:	40cb      	lsrs	r3, r1
 8000ae4:	431e      	orrs	r6, r3
 8000ae6:	40cc      	lsrs	r4, r1
 8000ae8:	e9c5 6400 	strd	r6, r4, [r5]
 8000aec:	2100      	movs	r1, #0
 8000aee:	e750      	b.n	8000992 <__udivmoddi4+0xa6>
 8000af0:	f1c2 0320 	rsb	r3, r2, #32
 8000af4:	fa20 f103 	lsr.w	r1, r0, r3
 8000af8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000afc:	fa24 f303 	lsr.w	r3, r4, r3
 8000b00:	4094      	lsls	r4, r2
 8000b02:	430c      	orrs	r4, r1
 8000b04:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b08:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b0c:	fa1f f78c 	uxth.w	r7, ip
 8000b10:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b14:	fb08 3110 	mls	r1, r8, r0, r3
 8000b18:	0c23      	lsrs	r3, r4, #16
 8000b1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b1e:	fb00 f107 	mul.w	r1, r0, r7
 8000b22:	4299      	cmp	r1, r3
 8000b24:	d908      	bls.n	8000b38 <__udivmoddi4+0x24c>
 8000b26:	eb1c 0303 	adds.w	r3, ip, r3
 8000b2a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000b2e:	d22c      	bcs.n	8000b8a <__udivmoddi4+0x29e>
 8000b30:	4299      	cmp	r1, r3
 8000b32:	d92a      	bls.n	8000b8a <__udivmoddi4+0x29e>
 8000b34:	3802      	subs	r0, #2
 8000b36:	4463      	add	r3, ip
 8000b38:	1a5b      	subs	r3, r3, r1
 8000b3a:	b2a4      	uxth	r4, r4
 8000b3c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000b40:	fb08 3311 	mls	r3, r8, r1, r3
 8000b44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b48:	fb01 f307 	mul.w	r3, r1, r7
 8000b4c:	42a3      	cmp	r3, r4
 8000b4e:	d908      	bls.n	8000b62 <__udivmoddi4+0x276>
 8000b50:	eb1c 0404 	adds.w	r4, ip, r4
 8000b54:	f101 36ff 	add.w	r6, r1, #4294967295
 8000b58:	d213      	bcs.n	8000b82 <__udivmoddi4+0x296>
 8000b5a:	42a3      	cmp	r3, r4
 8000b5c:	d911      	bls.n	8000b82 <__udivmoddi4+0x296>
 8000b5e:	3902      	subs	r1, #2
 8000b60:	4464      	add	r4, ip
 8000b62:	1ae4      	subs	r4, r4, r3
 8000b64:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000b68:	e739      	b.n	80009de <__udivmoddi4+0xf2>
 8000b6a:	4604      	mov	r4, r0
 8000b6c:	e6f0      	b.n	8000950 <__udivmoddi4+0x64>
 8000b6e:	4608      	mov	r0, r1
 8000b70:	e706      	b.n	8000980 <__udivmoddi4+0x94>
 8000b72:	45c8      	cmp	r8, r9
 8000b74:	d2ae      	bcs.n	8000ad4 <__udivmoddi4+0x1e8>
 8000b76:	ebb9 0e02 	subs.w	lr, r9, r2
 8000b7a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000b7e:	3801      	subs	r0, #1
 8000b80:	e7a8      	b.n	8000ad4 <__udivmoddi4+0x1e8>
 8000b82:	4631      	mov	r1, r6
 8000b84:	e7ed      	b.n	8000b62 <__udivmoddi4+0x276>
 8000b86:	4603      	mov	r3, r0
 8000b88:	e799      	b.n	8000abe <__udivmoddi4+0x1d2>
 8000b8a:	4630      	mov	r0, r6
 8000b8c:	e7d4      	b.n	8000b38 <__udivmoddi4+0x24c>
 8000b8e:	46d6      	mov	lr, sl
 8000b90:	e77f      	b.n	8000a92 <__udivmoddi4+0x1a6>
 8000b92:	4463      	add	r3, ip
 8000b94:	3802      	subs	r0, #2
 8000b96:	e74d      	b.n	8000a34 <__udivmoddi4+0x148>
 8000b98:	4606      	mov	r6, r0
 8000b9a:	4623      	mov	r3, r4
 8000b9c:	4608      	mov	r0, r1
 8000b9e:	e70f      	b.n	80009c0 <__udivmoddi4+0xd4>
 8000ba0:	3e02      	subs	r6, #2
 8000ba2:	4463      	add	r3, ip
 8000ba4:	e730      	b.n	8000a08 <__udivmoddi4+0x11c>
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_idiv0>:
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop

08000bac <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b08a      	sub	sp, #40	@ 0x28
 8000bb0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb2:	f107 0314 	add.w	r3, r7, #20
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	601a      	str	r2, [r3, #0]
 8000bba:	605a      	str	r2, [r3, #4]
 8000bbc:	609a      	str	r2, [r3, #8]
 8000bbe:	60da      	str	r2, [r3, #12]
 8000bc0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	613b      	str	r3, [r7, #16]
 8000bc6:	4b38      	ldr	r3, [pc, #224]	@ (8000ca8 <MX_GPIO_Init+0xfc>)
 8000bc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bca:	4a37      	ldr	r2, [pc, #220]	@ (8000ca8 <MX_GPIO_Init+0xfc>)
 8000bcc:	f043 0304 	orr.w	r3, r3, #4
 8000bd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bd2:	4b35      	ldr	r3, [pc, #212]	@ (8000ca8 <MX_GPIO_Init+0xfc>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bd6:	f003 0304 	and.w	r3, r3, #4
 8000bda:	613b      	str	r3, [r7, #16]
 8000bdc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bde:	2300      	movs	r3, #0
 8000be0:	60fb      	str	r3, [r7, #12]
 8000be2:	4b31      	ldr	r3, [pc, #196]	@ (8000ca8 <MX_GPIO_Init+0xfc>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000be6:	4a30      	ldr	r2, [pc, #192]	@ (8000ca8 <MX_GPIO_Init+0xfc>)
 8000be8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000bec:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bee:	4b2e      	ldr	r3, [pc, #184]	@ (8000ca8 <MX_GPIO_Init+0xfc>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bf2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000bf6:	60fb      	str	r3, [r7, #12]
 8000bf8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	60bb      	str	r3, [r7, #8]
 8000bfe:	4b2a      	ldr	r3, [pc, #168]	@ (8000ca8 <MX_GPIO_Init+0xfc>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c02:	4a29      	ldr	r2, [pc, #164]	@ (8000ca8 <MX_GPIO_Init+0xfc>)
 8000c04:	f043 0301 	orr.w	r3, r3, #1
 8000c08:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c0a:	4b27      	ldr	r3, [pc, #156]	@ (8000ca8 <MX_GPIO_Init+0xfc>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c0e:	f003 0301 	and.w	r3, r3, #1
 8000c12:	60bb      	str	r3, [r7, #8]
 8000c14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c16:	2300      	movs	r3, #0
 8000c18:	607b      	str	r3, [r7, #4]
 8000c1a:	4b23      	ldr	r3, [pc, #140]	@ (8000ca8 <MX_GPIO_Init+0xfc>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c1e:	4a22      	ldr	r2, [pc, #136]	@ (8000ca8 <MX_GPIO_Init+0xfc>)
 8000c20:	f043 0302 	orr.w	r3, r3, #2
 8000c24:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c26:	4b20      	ldr	r3, [pc, #128]	@ (8000ca8 <MX_GPIO_Init+0xfc>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c2a:	f003 0302 	and.w	r3, r3, #2
 8000c2e:	607b      	str	r3, [r7, #4]
 8000c30:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|Timer_delay_Pin, GPIO_PIN_RESET);
 8000c32:	2200      	movs	r2, #0
 8000c34:	2160      	movs	r1, #96	@ 0x60
 8000c36:	481d      	ldr	r0, [pc, #116]	@ (8000cac <MX_GPIO_Init+0x100>)
 8000c38:	f000 fefc 	bl	8001a34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000c42:	481b      	ldr	r0, [pc, #108]	@ (8000cb0 <MX_GPIO_Init+0x104>)
 8000c44:	f000 fef6 	bl	8001a34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c48:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c4e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000c52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c54:	2300      	movs	r3, #0
 8000c56:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c58:	f107 0314 	add.w	r3, r7, #20
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	4814      	ldr	r0, [pc, #80]	@ (8000cb0 <MX_GPIO_Init+0x104>)
 8000c60:	f000 fd54 	bl	800170c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|Timer_delay_Pin;
 8000c64:	2360      	movs	r3, #96	@ 0x60
 8000c66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c68:	2301      	movs	r3, #1
 8000c6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c70:	2300      	movs	r3, #0
 8000c72:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c74:	f107 0314 	add.w	r3, r7, #20
 8000c78:	4619      	mov	r1, r3
 8000c7a:	480c      	ldr	r0, [pc, #48]	@ (8000cac <MX_GPIO_Init+0x100>)
 8000c7c:	f000 fd46 	bl	800170c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI3_CS_Pin;
 8000c80:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c86:	2301      	movs	r3, #1
 8000c88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI3_CS_GPIO_Port, &GPIO_InitStruct);
 8000c92:	f107 0314 	add.w	r3, r7, #20
 8000c96:	4619      	mov	r1, r3
 8000c98:	4805      	ldr	r0, [pc, #20]	@ (8000cb0 <MX_GPIO_Init+0x104>)
 8000c9a:	f000 fd37 	bl	800170c <HAL_GPIO_Init>

}
 8000c9e:	bf00      	nop
 8000ca0:	3728      	adds	r7, #40	@ 0x28
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	40023800 	.word	0x40023800
 8000cac:	40020000 	.word	0x40020000
 8000cb0:	40020800 	.word	0x40020800

08000cb4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cb8:	f000 fba4 	bl	8001404 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cbc:	f000 f812 	bl	8000ce4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cc0:	f7ff ff74 	bl	8000bac <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000cc4:	f000 fb02 	bl	80012cc <MX_USART2_UART_Init>
  MX_TIM4_Init();
 8000cc8:	f000 fa20 	bl	800110c <MX_TIM4_Init>
  MX_TIM3_Init();
 8000ccc:	f000 f9ce 	bl	800106c <MX_TIM3_Init>
  MX_SPI3_Init();
 8000cd0:	f000 f87c 	bl	8000dcc <MX_SPI3_Init>
  MX_FATFS_Init();
 8000cd4:	f003 f8aa 	bl	8003e2c <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
	SDCardInit();
 8000cd8:	f007 fa3e 	bl	8008158 <SDCardInit>
	UARTExtendedStreamCSVCreate();
 8000cdc:	f007 faac 	bl	8008238 <UARTExtendedStreamCSVCreate>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 8000ce0:	bf00      	nop
 8000ce2:	e7fd      	b.n	8000ce0 <main+0x2c>

08000ce4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b094      	sub	sp, #80	@ 0x50
 8000ce8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cea:	f107 031c 	add.w	r3, r7, #28
 8000cee:	2234      	movs	r2, #52	@ 0x34
 8000cf0:	2100      	movs	r1, #0
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f007 fbc6 	bl	8008484 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cf8:	f107 0308 	add.w	r3, r7, #8
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	601a      	str	r2, [r3, #0]
 8000d00:	605a      	str	r2, [r3, #4]
 8000d02:	609a      	str	r2, [r3, #8]
 8000d04:	60da      	str	r2, [r3, #12]
 8000d06:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d08:	2300      	movs	r3, #0
 8000d0a:	607b      	str	r3, [r7, #4]
 8000d0c:	4b2a      	ldr	r3, [pc, #168]	@ (8000db8 <SystemClock_Config+0xd4>)
 8000d0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d10:	4a29      	ldr	r2, [pc, #164]	@ (8000db8 <SystemClock_Config+0xd4>)
 8000d12:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d16:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d18:	4b27      	ldr	r3, [pc, #156]	@ (8000db8 <SystemClock_Config+0xd4>)
 8000d1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d1c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d20:	607b      	str	r3, [r7, #4]
 8000d22:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000d24:	2300      	movs	r3, #0
 8000d26:	603b      	str	r3, [r7, #0]
 8000d28:	4b24      	ldr	r3, [pc, #144]	@ (8000dbc <SystemClock_Config+0xd8>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000d30:	4a22      	ldr	r2, [pc, #136]	@ (8000dbc <SystemClock_Config+0xd8>)
 8000d32:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d36:	6013      	str	r3, [r2, #0]
 8000d38:	4b20      	ldr	r3, [pc, #128]	@ (8000dbc <SystemClock_Config+0xd8>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000d40:	603b      	str	r3, [r7, #0]
 8000d42:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d44:	2301      	movs	r3, #1
 8000d46:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d48:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000d4c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d4e:	2302      	movs	r3, #2
 8000d50:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d52:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000d56:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000d58:	2304      	movs	r3, #4
 8000d5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 90;
 8000d5c:	235a      	movs	r3, #90	@ 0x5a
 8000d5e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d60:	2302      	movs	r3, #2
 8000d62:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000d64:	2302      	movs	r3, #2
 8000d66:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000d68:	2302      	movs	r3, #2
 8000d6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d6c:	f107 031c 	add.w	r3, r7, #28
 8000d70:	4618      	mov	r0, r3
 8000d72:	f001 f9c3 	bl	80020fc <HAL_RCC_OscConfig>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000d7c:	f000 f820 	bl	8000dc0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d80:	230f      	movs	r3, #15
 8000d82:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d84:	2302      	movs	r3, #2
 8000d86:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d8c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d90:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000d92:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d96:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d98:	f107 0308 	add.w	r3, r7, #8
 8000d9c:	2102      	movs	r1, #2
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f000 fe62 	bl	8001a68 <HAL_RCC_ClockConfig>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d001      	beq.n	8000dae <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000daa:	f000 f809 	bl	8000dc0 <Error_Handler>
  }
}
 8000dae:	bf00      	nop
 8000db0:	3750      	adds	r7, #80	@ 0x50
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	40023800 	.word	0x40023800
 8000dbc:	40007000 	.word	0x40007000

08000dc0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dc4:	b672      	cpsid	i
}
 8000dc6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000dc8:	bf00      	nop
 8000dca:	e7fd      	b.n	8000dc8 <Error_Handler+0x8>

08000dcc <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8000dd0:	4b17      	ldr	r3, [pc, #92]	@ (8000e30 <MX_SPI3_Init+0x64>)
 8000dd2:	4a18      	ldr	r2, [pc, #96]	@ (8000e34 <MX_SPI3_Init+0x68>)
 8000dd4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000dd6:	4b16      	ldr	r3, [pc, #88]	@ (8000e30 <MX_SPI3_Init+0x64>)
 8000dd8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000ddc:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000dde:	4b14      	ldr	r3, [pc, #80]	@ (8000e30 <MX_SPI3_Init+0x64>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000de4:	4b12      	ldr	r3, [pc, #72]	@ (8000e30 <MX_SPI3_Init+0x64>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000dea:	4b11      	ldr	r3, [pc, #68]	@ (8000e30 <MX_SPI3_Init+0x64>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000df0:	4b0f      	ldr	r3, [pc, #60]	@ (8000e30 <MX_SPI3_Init+0x64>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000df6:	4b0e      	ldr	r3, [pc, #56]	@ (8000e30 <MX_SPI3_Init+0x64>)
 8000df8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000dfc:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000dfe:	4b0c      	ldr	r3, [pc, #48]	@ (8000e30 <MX_SPI3_Init+0x64>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e04:	4b0a      	ldr	r3, [pc, #40]	@ (8000e30 <MX_SPI3_Init+0x64>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e0a:	4b09      	ldr	r3, [pc, #36]	@ (8000e30 <MX_SPI3_Init+0x64>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e10:	4b07      	ldr	r3, [pc, #28]	@ (8000e30 <MX_SPI3_Init+0x64>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 8000e16:	4b06      	ldr	r3, [pc, #24]	@ (8000e30 <MX_SPI3_Init+0x64>)
 8000e18:	220a      	movs	r2, #10
 8000e1a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000e1c:	4804      	ldr	r0, [pc, #16]	@ (8000e30 <MX_SPI3_Init+0x64>)
 8000e1e:	f001 fc0b 	bl	8002638 <HAL_SPI_Init>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d001      	beq.n	8000e2c <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8000e28:	f7ff ffca 	bl	8000dc0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000e2c:	bf00      	nop
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	20000090 	.word	0x20000090
 8000e34:	40003c00 	.word	0x40003c00

08000e38 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b08a      	sub	sp, #40	@ 0x28
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e40:	f107 0314 	add.w	r3, r7, #20
 8000e44:	2200      	movs	r2, #0
 8000e46:	601a      	str	r2, [r3, #0]
 8000e48:	605a      	str	r2, [r3, #4]
 8000e4a:	609a      	str	r2, [r3, #8]
 8000e4c:	60da      	str	r2, [r3, #12]
 8000e4e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4a21      	ldr	r2, [pc, #132]	@ (8000edc <HAL_SPI_MspInit+0xa4>)
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d13c      	bne.n	8000ed4 <HAL_SPI_MspInit+0x9c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	613b      	str	r3, [r7, #16]
 8000e5e:	4b20      	ldr	r3, [pc, #128]	@ (8000ee0 <HAL_SPI_MspInit+0xa8>)
 8000e60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e62:	4a1f      	ldr	r2, [pc, #124]	@ (8000ee0 <HAL_SPI_MspInit+0xa8>)
 8000e64:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000e68:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e6a:	4b1d      	ldr	r3, [pc, #116]	@ (8000ee0 <HAL_SPI_MspInit+0xa8>)
 8000e6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e6e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000e72:	613b      	str	r3, [r7, #16]
 8000e74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e76:	2300      	movs	r3, #0
 8000e78:	60fb      	str	r3, [r7, #12]
 8000e7a:	4b19      	ldr	r3, [pc, #100]	@ (8000ee0 <HAL_SPI_MspInit+0xa8>)
 8000e7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e7e:	4a18      	ldr	r2, [pc, #96]	@ (8000ee0 <HAL_SPI_MspInit+0xa8>)
 8000e80:	f043 0304 	orr.w	r3, r3, #4
 8000e84:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e86:	4b16      	ldr	r3, [pc, #88]	@ (8000ee0 <HAL_SPI_MspInit+0xa8>)
 8000e88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e8a:	f003 0304 	and.w	r3, r3, #4
 8000e8e:	60fb      	str	r3, [r7, #12]
 8000e90:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC1     ------> SPI3_MOSI
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000e92:	2302      	movs	r3, #2
 8000e94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e96:	2302      	movs	r3, #2
 8000e98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e9e:	2303      	movs	r3, #3
 8000ea0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI3;
 8000ea2:	2305      	movs	r3, #5
 8000ea4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ea6:	f107 0314 	add.w	r3, r7, #20
 8000eaa:	4619      	mov	r1, r3
 8000eac:	480d      	ldr	r0, [pc, #52]	@ (8000ee4 <HAL_SPI_MspInit+0xac>)
 8000eae:	f000 fc2d 	bl	800170c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000eb2:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000eb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb8:	2302      	movs	r3, #2
 8000eba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ec0:	2303      	movs	r3, #3
 8000ec2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ec4:	2306      	movs	r3, #6
 8000ec6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ec8:	f107 0314 	add.w	r3, r7, #20
 8000ecc:	4619      	mov	r1, r3
 8000ece:	4805      	ldr	r0, [pc, #20]	@ (8000ee4 <HAL_SPI_MspInit+0xac>)
 8000ed0:	f000 fc1c 	bl	800170c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8000ed4:	bf00      	nop
 8000ed6:	3728      	adds	r7, #40	@ 0x28
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	40003c00 	.word	0x40003c00
 8000ee0:	40023800 	.word	0x40023800
 8000ee4:	40020800 	.word	0x40020800

08000ee8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eee:	2300      	movs	r3, #0
 8000ef0:	607b      	str	r3, [r7, #4]
 8000ef2:	4b10      	ldr	r3, [pc, #64]	@ (8000f34 <HAL_MspInit+0x4c>)
 8000ef4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ef6:	4a0f      	ldr	r2, [pc, #60]	@ (8000f34 <HAL_MspInit+0x4c>)
 8000ef8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000efc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000efe:	4b0d      	ldr	r3, [pc, #52]	@ (8000f34 <HAL_MspInit+0x4c>)
 8000f00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f02:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f06:	607b      	str	r3, [r7, #4]
 8000f08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	603b      	str	r3, [r7, #0]
 8000f0e:	4b09      	ldr	r3, [pc, #36]	@ (8000f34 <HAL_MspInit+0x4c>)
 8000f10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f12:	4a08      	ldr	r2, [pc, #32]	@ (8000f34 <HAL_MspInit+0x4c>)
 8000f14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f18:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f1a:	4b06      	ldr	r3, [pc, #24]	@ (8000f34 <HAL_MspInit+0x4c>)
 8000f1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f22:	603b      	str	r3, [r7, #0]
 8000f24:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000f26:	2007      	movs	r0, #7
 8000f28:	f000 fbae 	bl	8001688 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f2c:	bf00      	nop
 8000f2e:	3708      	adds	r7, #8
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	40023800 	.word	0x40023800

08000f38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f3c:	bf00      	nop
 8000f3e:	e7fd      	b.n	8000f3c <NMI_Handler+0x4>

08000f40 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f44:	bf00      	nop
 8000f46:	e7fd      	b.n	8000f44 <HardFault_Handler+0x4>

08000f48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f4c:	bf00      	nop
 8000f4e:	e7fd      	b.n	8000f4c <MemManage_Handler+0x4>

08000f50 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f54:	bf00      	nop
 8000f56:	e7fd      	b.n	8000f54 <BusFault_Handler+0x4>

08000f58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f5c:	bf00      	nop
 8000f5e:	e7fd      	b.n	8000f5c <UsageFault_Handler+0x4>

08000f60 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f64:	bf00      	nop
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr

08000f6e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f6e:	b480      	push	{r7}
 8000f70:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f72:	bf00      	nop
 8000f74:	46bd      	mov	sp, r7
 8000f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7a:	4770      	bx	lr

08000f7c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f80:	bf00      	nop
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
	...

08000f8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if(Timer1 > 0)
 8000f90:	4b0b      	ldr	r3, [pc, #44]	@ (8000fc0 <SysTick_Handler+0x34>)
 8000f92:	881b      	ldrh	r3, [r3, #0]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d005      	beq.n	8000fa4 <SysTick_Handler+0x18>
	{
		Timer1--;
 8000f98:	4b09      	ldr	r3, [pc, #36]	@ (8000fc0 <SysTick_Handler+0x34>)
 8000f9a:	881b      	ldrh	r3, [r3, #0]
 8000f9c:	3b01      	subs	r3, #1
 8000f9e:	b29a      	uxth	r2, r3
 8000fa0:	4b07      	ldr	r3, [pc, #28]	@ (8000fc0 <SysTick_Handler+0x34>)
 8000fa2:	801a      	strh	r2, [r3, #0]
	}
	if(Timer2 > 0)
 8000fa4:	4b07      	ldr	r3, [pc, #28]	@ (8000fc4 <SysTick_Handler+0x38>)
 8000fa6:	881b      	ldrh	r3, [r3, #0]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d005      	beq.n	8000fb8 <SysTick_Handler+0x2c>
	{
		Timer2--;
 8000fac:	4b05      	ldr	r3, [pc, #20]	@ (8000fc4 <SysTick_Handler+0x38>)
 8000fae:	881b      	ldrh	r3, [r3, #0]
 8000fb0:	3b01      	subs	r3, #1
 8000fb2:	b29a      	uxth	r2, r3
 8000fb4:	4b03      	ldr	r3, [pc, #12]	@ (8000fc4 <SysTick_Handler+0x38>)
 8000fb6:	801a      	strh	r2, [r3, #0]
	}
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fb8:	f000 fa76 	bl	80014a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fbc:	bf00      	nop
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	200001d8 	.word	0x200001d8
 8000fc4:	200001da 	.word	0x200001da

08000fc8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000fcc:	4802      	ldr	r0, [pc, #8]	@ (8000fd8 <TIM3_IRQHandler+0x10>)
 8000fce:	f002 f8b3 	bl	8003138 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000fd2:	bf00      	nop
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	200000ec 	.word	0x200000ec

08000fdc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b086      	sub	sp, #24
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fe4:	4a14      	ldr	r2, [pc, #80]	@ (8001038 <_sbrk+0x5c>)
 8000fe6:	4b15      	ldr	r3, [pc, #84]	@ (800103c <_sbrk+0x60>)
 8000fe8:	1ad3      	subs	r3, r2, r3
 8000fea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ff0:	4b13      	ldr	r3, [pc, #76]	@ (8001040 <_sbrk+0x64>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d102      	bne.n	8000ffe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ff8:	4b11      	ldr	r3, [pc, #68]	@ (8001040 <_sbrk+0x64>)
 8000ffa:	4a12      	ldr	r2, [pc, #72]	@ (8001044 <_sbrk+0x68>)
 8000ffc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ffe:	4b10      	ldr	r3, [pc, #64]	@ (8001040 <_sbrk+0x64>)
 8001000:	681a      	ldr	r2, [r3, #0]
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	4413      	add	r3, r2
 8001006:	693a      	ldr	r2, [r7, #16]
 8001008:	429a      	cmp	r2, r3
 800100a:	d207      	bcs.n	800101c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800100c:	f007 fa42 	bl	8008494 <__errno>
 8001010:	4603      	mov	r3, r0
 8001012:	220c      	movs	r2, #12
 8001014:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001016:	f04f 33ff 	mov.w	r3, #4294967295
 800101a:	e009      	b.n	8001030 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800101c:	4b08      	ldr	r3, [pc, #32]	@ (8001040 <_sbrk+0x64>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001022:	4b07      	ldr	r3, [pc, #28]	@ (8001040 <_sbrk+0x64>)
 8001024:	681a      	ldr	r2, [r3, #0]
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	4413      	add	r3, r2
 800102a:	4a05      	ldr	r2, [pc, #20]	@ (8001040 <_sbrk+0x64>)
 800102c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800102e:	68fb      	ldr	r3, [r7, #12]
}
 8001030:	4618      	mov	r0, r3
 8001032:	3718      	adds	r7, #24
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	20020000 	.word	0x20020000
 800103c:	00000400 	.word	0x00000400
 8001040:	200000e8 	.word	0x200000e8
 8001044:	20002900 	.word	0x20002900

08001048 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800104c:	4b06      	ldr	r3, [pc, #24]	@ (8001068 <SystemInit+0x20>)
 800104e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001052:	4a05      	ldr	r2, [pc, #20]	@ (8001068 <SystemInit+0x20>)
 8001054:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001058:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800105c:	bf00      	nop
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	e000ed00 	.word	0xe000ed00

0800106c <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b086      	sub	sp, #24
 8001070:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001072:	f107 0308 	add.w	r3, r7, #8
 8001076:	2200      	movs	r2, #0
 8001078:	601a      	str	r2, [r3, #0]
 800107a:	605a      	str	r2, [r3, #4]
 800107c:	609a      	str	r2, [r3, #8]
 800107e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001080:	463b      	mov	r3, r7
 8001082:	2200      	movs	r2, #0
 8001084:	601a      	str	r2, [r3, #0]
 8001086:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001088:	4b1e      	ldr	r3, [pc, #120]	@ (8001104 <MX_TIM3_Init+0x98>)
 800108a:	4a1f      	ldr	r2, [pc, #124]	@ (8001108 <MX_TIM3_Init+0x9c>)
 800108c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 800108e:	4b1d      	ldr	r3, [pc, #116]	@ (8001104 <MX_TIM3_Init+0x98>)
 8001090:	2201      	movs	r2, #1
 8001092:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001094:	4b1b      	ldr	r3, [pc, #108]	@ (8001104 <MX_TIM3_Init+0x98>)
 8001096:	2200      	movs	r2, #0
 8001098:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 44999;
 800109a:	4b1a      	ldr	r3, [pc, #104]	@ (8001104 <MX_TIM3_Init+0x98>)
 800109c:	f64a 72c7 	movw	r2, #44999	@ 0xafc7
 80010a0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010a2:	4b18      	ldr	r3, [pc, #96]	@ (8001104 <MX_TIM3_Init+0x98>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010a8:	4b16      	ldr	r3, [pc, #88]	@ (8001104 <MX_TIM3_Init+0x98>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80010ae:	4815      	ldr	r0, [pc, #84]	@ (8001104 <MX_TIM3_Init+0x98>)
 80010b0:	f001 ff1a 	bl	8002ee8 <HAL_TIM_Base_Init>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80010ba:	f7ff fe81 	bl	8000dc0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010be:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010c2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80010c4:	f107 0308 	add.w	r3, r7, #8
 80010c8:	4619      	mov	r1, r3
 80010ca:	480e      	ldr	r0, [pc, #56]	@ (8001104 <MX_TIM3_Init+0x98>)
 80010cc:	f002 f924 	bl	8003318 <HAL_TIM_ConfigClockSource>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80010d6:	f7ff fe73 	bl	8000dc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010da:	2300      	movs	r3, #0
 80010dc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010de:	2300      	movs	r3, #0
 80010e0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80010e2:	463b      	mov	r3, r7
 80010e4:	4619      	mov	r1, r3
 80010e6:	4807      	ldr	r0, [pc, #28]	@ (8001104 <MX_TIM3_Init+0x98>)
 80010e8:	f002 fb4c 	bl	8003784 <HAL_TIMEx_MasterConfigSynchronization>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80010f2:	f7ff fe65 	bl	8000dc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 80010f6:	4803      	ldr	r0, [pc, #12]	@ (8001104 <MX_TIM3_Init+0x98>)
 80010f8:	f001 ffae 	bl	8003058 <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM3_Init 2 */

}
 80010fc:	bf00      	nop
 80010fe:	3718      	adds	r7, #24
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	200000ec 	.word	0x200000ec
 8001108:	40000400 	.word	0x40000400

0800110c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b086      	sub	sp, #24
 8001110:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001112:	f107 0308 	add.w	r3, r7, #8
 8001116:	2200      	movs	r2, #0
 8001118:	601a      	str	r2, [r3, #0]
 800111a:	605a      	str	r2, [r3, #4]
 800111c:	609a      	str	r2, [r3, #8]
 800111e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001120:	463b      	mov	r3, r7
 8001122:	2200      	movs	r2, #0
 8001124:	601a      	str	r2, [r3, #0]
 8001126:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */
  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001128:	4b1e      	ldr	r3, [pc, #120]	@ (80011a4 <MX_TIM4_Init+0x98>)
 800112a:	4a1f      	ldr	r2, [pc, #124]	@ (80011a8 <MX_TIM4_Init+0x9c>)
 800112c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 89;
 800112e:	4b1d      	ldr	r3, [pc, #116]	@ (80011a4 <MX_TIM4_Init+0x98>)
 8001130:	2259      	movs	r2, #89	@ 0x59
 8001132:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001134:	4b1b      	ldr	r3, [pc, #108]	@ (80011a4 <MX_TIM4_Init+0x98>)
 8001136:	2200      	movs	r2, #0
 8001138:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800113a:	4b1a      	ldr	r3, [pc, #104]	@ (80011a4 <MX_TIM4_Init+0x98>)
 800113c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001140:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001142:	4b18      	ldr	r3, [pc, #96]	@ (80011a4 <MX_TIM4_Init+0x98>)
 8001144:	2200      	movs	r2, #0
 8001146:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001148:	4b16      	ldr	r3, [pc, #88]	@ (80011a4 <MX_TIM4_Init+0x98>)
 800114a:	2200      	movs	r2, #0
 800114c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800114e:	4815      	ldr	r0, [pc, #84]	@ (80011a4 <MX_TIM4_Init+0x98>)
 8001150:	f001 feca 	bl	8002ee8 <HAL_TIM_Base_Init>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800115a:	f7ff fe31 	bl	8000dc0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800115e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001162:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001164:	f107 0308 	add.w	r3, r7, #8
 8001168:	4619      	mov	r1, r3
 800116a:	480e      	ldr	r0, [pc, #56]	@ (80011a4 <MX_TIM4_Init+0x98>)
 800116c:	f002 f8d4 	bl	8003318 <HAL_TIM_ConfigClockSource>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8001176:	f7ff fe23 	bl	8000dc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800117a:	2300      	movs	r3, #0
 800117c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800117e:	2300      	movs	r3, #0
 8001180:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001182:	463b      	mov	r3, r7
 8001184:	4619      	mov	r1, r3
 8001186:	4807      	ldr	r0, [pc, #28]	@ (80011a4 <MX_TIM4_Init+0x98>)
 8001188:	f002 fafc 	bl	8003784 <HAL_TIMEx_MasterConfigSynchronization>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d001      	beq.n	8001196 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8001192:	f7ff fe15 	bl	8000dc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */
  HAL_TIM_Base_Start(&htim4);
 8001196:	4803      	ldr	r0, [pc, #12]	@ (80011a4 <MX_TIM4_Init+0x98>)
 8001198:	f001 fef6 	bl	8002f88 <HAL_TIM_Base_Start>
  /* USER CODE END TIM4_Init 2 */

}
 800119c:	bf00      	nop
 800119e:	3718      	adds	r7, #24
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	20000134 	.word	0x20000134
 80011a8:	40000800 	.word	0x40000800

080011ac <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b084      	sub	sp, #16
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a18      	ldr	r2, [pc, #96]	@ (800121c <HAL_TIM_Base_MspInit+0x70>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d116      	bne.n	80011ec <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80011be:	2300      	movs	r3, #0
 80011c0:	60fb      	str	r3, [r7, #12]
 80011c2:	4b17      	ldr	r3, [pc, #92]	@ (8001220 <HAL_TIM_Base_MspInit+0x74>)
 80011c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011c6:	4a16      	ldr	r2, [pc, #88]	@ (8001220 <HAL_TIM_Base_MspInit+0x74>)
 80011c8:	f043 0302 	orr.w	r3, r3, #2
 80011cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80011ce:	4b14      	ldr	r3, [pc, #80]	@ (8001220 <HAL_TIM_Base_MspInit+0x74>)
 80011d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011d2:	f003 0302 	and.w	r3, r3, #2
 80011d6:	60fb      	str	r3, [r7, #12]
 80011d8:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80011da:	2200      	movs	r2, #0
 80011dc:	2100      	movs	r1, #0
 80011de:	201d      	movs	r0, #29
 80011e0:	f000 fa5d 	bl	800169e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80011e4:	201d      	movs	r0, #29
 80011e6:	f000 fa76 	bl	80016d6 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80011ea:	e012      	b.n	8001212 <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM4)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a0c      	ldr	r2, [pc, #48]	@ (8001224 <HAL_TIM_Base_MspInit+0x78>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d10d      	bne.n	8001212 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80011f6:	2300      	movs	r3, #0
 80011f8:	60bb      	str	r3, [r7, #8]
 80011fa:	4b09      	ldr	r3, [pc, #36]	@ (8001220 <HAL_TIM_Base_MspInit+0x74>)
 80011fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011fe:	4a08      	ldr	r2, [pc, #32]	@ (8001220 <HAL_TIM_Base_MspInit+0x74>)
 8001200:	f043 0304 	orr.w	r3, r3, #4
 8001204:	6413      	str	r3, [r2, #64]	@ 0x40
 8001206:	4b06      	ldr	r3, [pc, #24]	@ (8001220 <HAL_TIM_Base_MspInit+0x74>)
 8001208:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800120a:	f003 0304 	and.w	r3, r3, #4
 800120e:	60bb      	str	r3, [r7, #8]
 8001210:	68bb      	ldr	r3, [r7, #8]
}
 8001212:	bf00      	nop
 8001214:	3710      	adds	r7, #16
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	40000400 	.word	0x40000400
 8001220:	40023800 	.word	0x40023800
 8001224:	40000800 	.word	0x40000800

08001228 <HAL_TIM_PeriodElapsedCallback>:
/*-----------------------------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------------------------*
 *								TIM3 + Interrupt callback function - 1ms callback
 *-----------------------------------------------------------------------------------------------------*/
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]

	if(htim->Instance == TIM3)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a20      	ldr	r2, [pc, #128]	@ (80012b8 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d139      	bne.n	80012ae <HAL_TIM_PeriodElapsedCallback+0x86>
	{
		static uint8_t cnt10MS = 0;
		static uint8_t cnt20MS = 0;
		static uint8_t cnt100MS = 0;
		static uint16_t cnt1000MS = 0;
		cnt10MS++; cnt20MS++; cnt100MS++; cnt1000MS++;
 800123a:	4b20      	ldr	r3, [pc, #128]	@ (80012bc <HAL_TIM_PeriodElapsedCallback+0x94>)
 800123c:	781b      	ldrb	r3, [r3, #0]
 800123e:	3301      	adds	r3, #1
 8001240:	b2da      	uxtb	r2, r3
 8001242:	4b1e      	ldr	r3, [pc, #120]	@ (80012bc <HAL_TIM_PeriodElapsedCallback+0x94>)
 8001244:	701a      	strb	r2, [r3, #0]
 8001246:	4b1e      	ldr	r3, [pc, #120]	@ (80012c0 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8001248:	781b      	ldrb	r3, [r3, #0]
 800124a:	3301      	adds	r3, #1
 800124c:	b2da      	uxtb	r2, r3
 800124e:	4b1c      	ldr	r3, [pc, #112]	@ (80012c0 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8001250:	701a      	strb	r2, [r3, #0]
 8001252:	4b1c      	ldr	r3, [pc, #112]	@ (80012c4 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	3301      	adds	r3, #1
 8001258:	b2da      	uxtb	r2, r3
 800125a:	4b1a      	ldr	r3, [pc, #104]	@ (80012c4 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 800125c:	701a      	strb	r2, [r3, #0]
 800125e:	4b1a      	ldr	r3, [pc, #104]	@ (80012c8 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001260:	881b      	ldrh	r3, [r3, #0]
 8001262:	3301      	adds	r3, #1
 8001264:	b29a      	uxth	r2, r3
 8001266:	4b18      	ldr	r3, [pc, #96]	@ (80012c8 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001268:	801a      	strh	r2, [r3, #0]
		if(cnt10MS >= CALLBACK_10MS)
 800126a:	4b14      	ldr	r3, [pc, #80]	@ (80012bc <HAL_TIM_PeriodElapsedCallback+0x94>)
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	2b09      	cmp	r3, #9
 8001270:	d903      	bls.n	800127a <HAL_TIM_PeriodElapsedCallback+0x52>
		{	// 10Ms Callback
			cnt10MS = 0;
 8001272:	4b12      	ldr	r3, [pc, #72]	@ (80012bc <HAL_TIM_PeriodElapsedCallback+0x94>)
 8001274:	2200      	movs	r2, #0
 8001276:	701a      	strb	r2, [r3, #0]
			cnt1000MS = 0;

		}

	}
}
 8001278:	e019      	b.n	80012ae <HAL_TIM_PeriodElapsedCallback+0x86>
		else if(cnt20MS >= CALLBACK_20MS)
 800127a:	4b11      	ldr	r3, [pc, #68]	@ (80012c0 <HAL_TIM_PeriodElapsedCallback+0x98>)
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	2b13      	cmp	r3, #19
 8001280:	d905      	bls.n	800128e <HAL_TIM_PeriodElapsedCallback+0x66>
			UARTSDExtendedStreamWrite();
 8001282:	f007 f885 	bl	8008390 <UARTSDExtendedStreamWrite>
			cnt20MS = 0;
 8001286:	4b0e      	ldr	r3, [pc, #56]	@ (80012c0 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8001288:	2200      	movs	r2, #0
 800128a:	701a      	strb	r2, [r3, #0]
}
 800128c:	e00f      	b.n	80012ae <HAL_TIM_PeriodElapsedCallback+0x86>
		else if(cnt100MS >= CALLBACK_100MS)
 800128e:	4b0d      	ldr	r3, [pc, #52]	@ (80012c4 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8001290:	781b      	ldrb	r3, [r3, #0]
 8001292:	2b63      	cmp	r3, #99	@ 0x63
 8001294:	d903      	bls.n	800129e <HAL_TIM_PeriodElapsedCallback+0x76>
			cnt100MS = 0;
 8001296:	4b0b      	ldr	r3, [pc, #44]	@ (80012c4 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8001298:	2200      	movs	r2, #0
 800129a:	701a      	strb	r2, [r3, #0]
}
 800129c:	e007      	b.n	80012ae <HAL_TIM_PeriodElapsedCallback+0x86>
		else if(cnt1000MS >= CALLBACK_1000MS)
 800129e:	4b0a      	ldr	r3, [pc, #40]	@ (80012c8 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80012a0:	881b      	ldrh	r3, [r3, #0]
 80012a2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80012a6:	d302      	bcc.n	80012ae <HAL_TIM_PeriodElapsedCallback+0x86>
			cnt1000MS = 0;
 80012a8:	4b07      	ldr	r3, [pc, #28]	@ (80012c8 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	801a      	strh	r2, [r3, #0]
}
 80012ae:	bf00      	nop
 80012b0:	3708      	adds	r7, #8
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	40000400 	.word	0x40000400
 80012bc:	2000017c 	.word	0x2000017c
 80012c0:	2000017d 	.word	0x2000017d
 80012c4:	2000017e 	.word	0x2000017e
 80012c8:	20000180 	.word	0x20000180

080012cc <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80012d0:	4b11      	ldr	r3, [pc, #68]	@ (8001318 <MX_USART2_UART_Init+0x4c>)
 80012d2:	4a12      	ldr	r2, [pc, #72]	@ (800131c <MX_USART2_UART_Init+0x50>)
 80012d4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80012d6:	4b10      	ldr	r3, [pc, #64]	@ (8001318 <MX_USART2_UART_Init+0x4c>)
 80012d8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80012dc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80012de:	4b0e      	ldr	r3, [pc, #56]	@ (8001318 <MX_USART2_UART_Init+0x4c>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80012e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001318 <MX_USART2_UART_Init+0x4c>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80012ea:	4b0b      	ldr	r3, [pc, #44]	@ (8001318 <MX_USART2_UART_Init+0x4c>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80012f0:	4b09      	ldr	r3, [pc, #36]	@ (8001318 <MX_USART2_UART_Init+0x4c>)
 80012f2:	220c      	movs	r2, #12
 80012f4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012f6:	4b08      	ldr	r3, [pc, #32]	@ (8001318 <MX_USART2_UART_Init+0x4c>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80012fc:	4b06      	ldr	r3, [pc, #24]	@ (8001318 <MX_USART2_UART_Init+0x4c>)
 80012fe:	2200      	movs	r2, #0
 8001300:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001302:	4805      	ldr	r0, [pc, #20]	@ (8001318 <MX_USART2_UART_Init+0x4c>)
 8001304:	f002 face 	bl	80038a4 <HAL_UART_Init>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800130e:	f7ff fd57 	bl	8000dc0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001312:	bf00      	nop
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	20000184 	.word	0x20000184
 800131c:	40004400 	.word	0x40004400

08001320 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b08a      	sub	sp, #40	@ 0x28
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001328:	f107 0314 	add.w	r3, r7, #20
 800132c:	2200      	movs	r2, #0
 800132e:	601a      	str	r2, [r3, #0]
 8001330:	605a      	str	r2, [r3, #4]
 8001332:	609a      	str	r2, [r3, #8]
 8001334:	60da      	str	r2, [r3, #12]
 8001336:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a19      	ldr	r2, [pc, #100]	@ (80013a4 <HAL_UART_MspInit+0x84>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d12b      	bne.n	800139a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001342:	2300      	movs	r3, #0
 8001344:	613b      	str	r3, [r7, #16]
 8001346:	4b18      	ldr	r3, [pc, #96]	@ (80013a8 <HAL_UART_MspInit+0x88>)
 8001348:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800134a:	4a17      	ldr	r2, [pc, #92]	@ (80013a8 <HAL_UART_MspInit+0x88>)
 800134c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001350:	6413      	str	r3, [r2, #64]	@ 0x40
 8001352:	4b15      	ldr	r3, [pc, #84]	@ (80013a8 <HAL_UART_MspInit+0x88>)
 8001354:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001356:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800135a:	613b      	str	r3, [r7, #16]
 800135c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800135e:	2300      	movs	r3, #0
 8001360:	60fb      	str	r3, [r7, #12]
 8001362:	4b11      	ldr	r3, [pc, #68]	@ (80013a8 <HAL_UART_MspInit+0x88>)
 8001364:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001366:	4a10      	ldr	r2, [pc, #64]	@ (80013a8 <HAL_UART_MspInit+0x88>)
 8001368:	f043 0301 	orr.w	r3, r3, #1
 800136c:	6313      	str	r3, [r2, #48]	@ 0x30
 800136e:	4b0e      	ldr	r3, [pc, #56]	@ (80013a8 <HAL_UART_MspInit+0x88>)
 8001370:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001372:	f003 0301 	and.w	r3, r3, #1
 8001376:	60fb      	str	r3, [r7, #12]
 8001378:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800137a:	230c      	movs	r3, #12
 800137c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800137e:	2302      	movs	r3, #2
 8001380:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001382:	2300      	movs	r3, #0
 8001384:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001386:	2303      	movs	r3, #3
 8001388:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800138a:	2307      	movs	r3, #7
 800138c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800138e:	f107 0314 	add.w	r3, r7, #20
 8001392:	4619      	mov	r1, r3
 8001394:	4805      	ldr	r0, [pc, #20]	@ (80013ac <HAL_UART_MspInit+0x8c>)
 8001396:	f000 f9b9 	bl	800170c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800139a:	bf00      	nop
 800139c:	3728      	adds	r7, #40	@ 0x28
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	40004400 	.word	0x40004400
 80013a8:	40023800 	.word	0x40023800
 80013ac:	40020000 	.word	0x40020000

080013b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80013b0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80013e8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80013b4:	f7ff fe48 	bl	8001048 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80013b8:	480c      	ldr	r0, [pc, #48]	@ (80013ec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80013ba:	490d      	ldr	r1, [pc, #52]	@ (80013f0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80013bc:	4a0d      	ldr	r2, [pc, #52]	@ (80013f4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80013be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013c0:	e002      	b.n	80013c8 <LoopCopyDataInit>

080013c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013c6:	3304      	adds	r3, #4

080013c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013cc:	d3f9      	bcc.n	80013c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013ce:	4a0a      	ldr	r2, [pc, #40]	@ (80013f8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80013d0:	4c0a      	ldr	r4, [pc, #40]	@ (80013fc <LoopFillZerobss+0x22>)
  movs r3, #0
 80013d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013d4:	e001      	b.n	80013da <LoopFillZerobss>

080013d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013d8:	3204      	adds	r2, #4

080013da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013dc:	d3fb      	bcc.n	80013d6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80013de:	f007 f85f 	bl	80084a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013e2:	f7ff fc67 	bl	8000cb4 <main>
  bx  lr    
 80013e6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80013e8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80013ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013f0:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80013f4:	08009328 	.word	0x08009328
  ldr r2, =_sbss
 80013f8:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80013fc:	200028fc 	.word	0x200028fc

08001400 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001400:	e7fe      	b.n	8001400 <ADC_IRQHandler>
	...

08001404 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001408:	4b0e      	ldr	r3, [pc, #56]	@ (8001444 <HAL_Init+0x40>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a0d      	ldr	r2, [pc, #52]	@ (8001444 <HAL_Init+0x40>)
 800140e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001412:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001414:	4b0b      	ldr	r3, [pc, #44]	@ (8001444 <HAL_Init+0x40>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a0a      	ldr	r2, [pc, #40]	@ (8001444 <HAL_Init+0x40>)
 800141a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800141e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001420:	4b08      	ldr	r3, [pc, #32]	@ (8001444 <HAL_Init+0x40>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a07      	ldr	r2, [pc, #28]	@ (8001444 <HAL_Init+0x40>)
 8001426:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800142a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800142c:	2003      	movs	r0, #3
 800142e:	f000 f92b 	bl	8001688 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001432:	2000      	movs	r0, #0
 8001434:	f000 f808 	bl	8001448 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001438:	f7ff fd56 	bl	8000ee8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800143c:	2300      	movs	r3, #0
}
 800143e:	4618      	mov	r0, r3
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	40023c00 	.word	0x40023c00

08001448 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001450:	4b12      	ldr	r3, [pc, #72]	@ (800149c <HAL_InitTick+0x54>)
 8001452:	681a      	ldr	r2, [r3, #0]
 8001454:	4b12      	ldr	r3, [pc, #72]	@ (80014a0 <HAL_InitTick+0x58>)
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	4619      	mov	r1, r3
 800145a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800145e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001462:	fbb2 f3f3 	udiv	r3, r2, r3
 8001466:	4618      	mov	r0, r3
 8001468:	f000 f943 	bl	80016f2 <HAL_SYSTICK_Config>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001472:	2301      	movs	r3, #1
 8001474:	e00e      	b.n	8001494 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	2b0f      	cmp	r3, #15
 800147a:	d80a      	bhi.n	8001492 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800147c:	2200      	movs	r2, #0
 800147e:	6879      	ldr	r1, [r7, #4]
 8001480:	f04f 30ff 	mov.w	r0, #4294967295
 8001484:	f000 f90b 	bl	800169e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001488:	4a06      	ldr	r2, [pc, #24]	@ (80014a4 <HAL_InitTick+0x5c>)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800148e:	2300      	movs	r3, #0
 8001490:	e000      	b.n	8001494 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001492:	2301      	movs	r3, #1
}
 8001494:	4618      	mov	r0, r3
 8001496:	3708      	adds	r7, #8
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	20000000 	.word	0x20000000
 80014a0:	20000008 	.word	0x20000008
 80014a4:	20000004 	.word	0x20000004

080014a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014ac:	4b06      	ldr	r3, [pc, #24]	@ (80014c8 <HAL_IncTick+0x20>)
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	461a      	mov	r2, r3
 80014b2:	4b06      	ldr	r3, [pc, #24]	@ (80014cc <HAL_IncTick+0x24>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4413      	add	r3, r2
 80014b8:	4a04      	ldr	r2, [pc, #16]	@ (80014cc <HAL_IncTick+0x24>)
 80014ba:	6013      	str	r3, [r2, #0]
}
 80014bc:	bf00      	nop
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr
 80014c6:	bf00      	nop
 80014c8:	20000008 	.word	0x20000008
 80014cc:	200001cc 	.word	0x200001cc

080014d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  return uwTick;
 80014d4:	4b03      	ldr	r3, [pc, #12]	@ (80014e4 <HAL_GetTick+0x14>)
 80014d6:	681b      	ldr	r3, [r3, #0]
}
 80014d8:	4618      	mov	r0, r3
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop
 80014e4:	200001cc 	.word	0x200001cc

080014e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b085      	sub	sp, #20
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	f003 0307 	and.w	r3, r3, #7
 80014f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014f8:	4b0c      	ldr	r3, [pc, #48]	@ (800152c <__NVIC_SetPriorityGrouping+0x44>)
 80014fa:	68db      	ldr	r3, [r3, #12]
 80014fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014fe:	68ba      	ldr	r2, [r7, #8]
 8001500:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001504:	4013      	ands	r3, r2
 8001506:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800150c:	68bb      	ldr	r3, [r7, #8]
 800150e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001510:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001514:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001518:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800151a:	4a04      	ldr	r2, [pc, #16]	@ (800152c <__NVIC_SetPriorityGrouping+0x44>)
 800151c:	68bb      	ldr	r3, [r7, #8]
 800151e:	60d3      	str	r3, [r2, #12]
}
 8001520:	bf00      	nop
 8001522:	3714      	adds	r7, #20
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr
 800152c:	e000ed00 	.word	0xe000ed00

08001530 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001534:	4b04      	ldr	r3, [pc, #16]	@ (8001548 <__NVIC_GetPriorityGrouping+0x18>)
 8001536:	68db      	ldr	r3, [r3, #12]
 8001538:	0a1b      	lsrs	r3, r3, #8
 800153a:	f003 0307 	and.w	r3, r3, #7
}
 800153e:	4618      	mov	r0, r3
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr
 8001548:	e000ed00 	.word	0xe000ed00

0800154c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800154c:	b480      	push	{r7}
 800154e:	b083      	sub	sp, #12
 8001550:	af00      	add	r7, sp, #0
 8001552:	4603      	mov	r3, r0
 8001554:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001556:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800155a:	2b00      	cmp	r3, #0
 800155c:	db0b      	blt.n	8001576 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800155e:	79fb      	ldrb	r3, [r7, #7]
 8001560:	f003 021f 	and.w	r2, r3, #31
 8001564:	4907      	ldr	r1, [pc, #28]	@ (8001584 <__NVIC_EnableIRQ+0x38>)
 8001566:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800156a:	095b      	lsrs	r3, r3, #5
 800156c:	2001      	movs	r0, #1
 800156e:	fa00 f202 	lsl.w	r2, r0, r2
 8001572:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001576:	bf00      	nop
 8001578:	370c      	adds	r7, #12
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr
 8001582:	bf00      	nop
 8001584:	e000e100 	.word	0xe000e100

08001588 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001588:	b480      	push	{r7}
 800158a:	b083      	sub	sp, #12
 800158c:	af00      	add	r7, sp, #0
 800158e:	4603      	mov	r3, r0
 8001590:	6039      	str	r1, [r7, #0]
 8001592:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001594:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001598:	2b00      	cmp	r3, #0
 800159a:	db0a      	blt.n	80015b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	b2da      	uxtb	r2, r3
 80015a0:	490c      	ldr	r1, [pc, #48]	@ (80015d4 <__NVIC_SetPriority+0x4c>)
 80015a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a6:	0112      	lsls	r2, r2, #4
 80015a8:	b2d2      	uxtb	r2, r2
 80015aa:	440b      	add	r3, r1
 80015ac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015b0:	e00a      	b.n	80015c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	b2da      	uxtb	r2, r3
 80015b6:	4908      	ldr	r1, [pc, #32]	@ (80015d8 <__NVIC_SetPriority+0x50>)
 80015b8:	79fb      	ldrb	r3, [r7, #7]
 80015ba:	f003 030f 	and.w	r3, r3, #15
 80015be:	3b04      	subs	r3, #4
 80015c0:	0112      	lsls	r2, r2, #4
 80015c2:	b2d2      	uxtb	r2, r2
 80015c4:	440b      	add	r3, r1
 80015c6:	761a      	strb	r2, [r3, #24]
}
 80015c8:	bf00      	nop
 80015ca:	370c      	adds	r7, #12
 80015cc:	46bd      	mov	sp, r7
 80015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d2:	4770      	bx	lr
 80015d4:	e000e100 	.word	0xe000e100
 80015d8:	e000ed00 	.word	0xe000ed00

080015dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015dc:	b480      	push	{r7}
 80015de:	b089      	sub	sp, #36	@ 0x24
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	60f8      	str	r0, [r7, #12]
 80015e4:	60b9      	str	r1, [r7, #8]
 80015e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	f003 0307 	and.w	r3, r3, #7
 80015ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015f0:	69fb      	ldr	r3, [r7, #28]
 80015f2:	f1c3 0307 	rsb	r3, r3, #7
 80015f6:	2b04      	cmp	r3, #4
 80015f8:	bf28      	it	cs
 80015fa:	2304      	movcs	r3, #4
 80015fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015fe:	69fb      	ldr	r3, [r7, #28]
 8001600:	3304      	adds	r3, #4
 8001602:	2b06      	cmp	r3, #6
 8001604:	d902      	bls.n	800160c <NVIC_EncodePriority+0x30>
 8001606:	69fb      	ldr	r3, [r7, #28]
 8001608:	3b03      	subs	r3, #3
 800160a:	e000      	b.n	800160e <NVIC_EncodePriority+0x32>
 800160c:	2300      	movs	r3, #0
 800160e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001610:	f04f 32ff 	mov.w	r2, #4294967295
 8001614:	69bb      	ldr	r3, [r7, #24]
 8001616:	fa02 f303 	lsl.w	r3, r2, r3
 800161a:	43da      	mvns	r2, r3
 800161c:	68bb      	ldr	r3, [r7, #8]
 800161e:	401a      	ands	r2, r3
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001624:	f04f 31ff 	mov.w	r1, #4294967295
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	fa01 f303 	lsl.w	r3, r1, r3
 800162e:	43d9      	mvns	r1, r3
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001634:	4313      	orrs	r3, r2
         );
}
 8001636:	4618      	mov	r0, r3
 8001638:	3724      	adds	r7, #36	@ 0x24
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr
	...

08001644 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b082      	sub	sp, #8
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	3b01      	subs	r3, #1
 8001650:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001654:	d301      	bcc.n	800165a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001656:	2301      	movs	r3, #1
 8001658:	e00f      	b.n	800167a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800165a:	4a0a      	ldr	r2, [pc, #40]	@ (8001684 <SysTick_Config+0x40>)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	3b01      	subs	r3, #1
 8001660:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001662:	210f      	movs	r1, #15
 8001664:	f04f 30ff 	mov.w	r0, #4294967295
 8001668:	f7ff ff8e 	bl	8001588 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800166c:	4b05      	ldr	r3, [pc, #20]	@ (8001684 <SysTick_Config+0x40>)
 800166e:	2200      	movs	r2, #0
 8001670:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001672:	4b04      	ldr	r3, [pc, #16]	@ (8001684 <SysTick_Config+0x40>)
 8001674:	2207      	movs	r2, #7
 8001676:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001678:	2300      	movs	r3, #0
}
 800167a:	4618      	mov	r0, r3
 800167c:	3708      	adds	r7, #8
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	e000e010 	.word	0xe000e010

08001688 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001690:	6878      	ldr	r0, [r7, #4]
 8001692:	f7ff ff29 	bl	80014e8 <__NVIC_SetPriorityGrouping>
}
 8001696:	bf00      	nop
 8001698:	3708      	adds	r7, #8
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}

0800169e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800169e:	b580      	push	{r7, lr}
 80016a0:	b086      	sub	sp, #24
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	4603      	mov	r3, r0
 80016a6:	60b9      	str	r1, [r7, #8]
 80016a8:	607a      	str	r2, [r7, #4]
 80016aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016ac:	2300      	movs	r3, #0
 80016ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016b0:	f7ff ff3e 	bl	8001530 <__NVIC_GetPriorityGrouping>
 80016b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016b6:	687a      	ldr	r2, [r7, #4]
 80016b8:	68b9      	ldr	r1, [r7, #8]
 80016ba:	6978      	ldr	r0, [r7, #20]
 80016bc:	f7ff ff8e 	bl	80015dc <NVIC_EncodePriority>
 80016c0:	4602      	mov	r2, r0
 80016c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016c6:	4611      	mov	r1, r2
 80016c8:	4618      	mov	r0, r3
 80016ca:	f7ff ff5d 	bl	8001588 <__NVIC_SetPriority>
}
 80016ce:	bf00      	nop
 80016d0:	3718      	adds	r7, #24
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}

080016d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016d6:	b580      	push	{r7, lr}
 80016d8:	b082      	sub	sp, #8
 80016da:	af00      	add	r7, sp, #0
 80016dc:	4603      	mov	r3, r0
 80016de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016e4:	4618      	mov	r0, r3
 80016e6:	f7ff ff31 	bl	800154c <__NVIC_EnableIRQ>
}
 80016ea:	bf00      	nop
 80016ec:	3708      	adds	r7, #8
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}

080016f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016f2:	b580      	push	{r7, lr}
 80016f4:	b082      	sub	sp, #8
 80016f6:	af00      	add	r7, sp, #0
 80016f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016fa:	6878      	ldr	r0, [r7, #4]
 80016fc:	f7ff ffa2 	bl	8001644 <SysTick_Config>
 8001700:	4603      	mov	r3, r0
}
 8001702:	4618      	mov	r0, r3
 8001704:	3708      	adds	r7, #8
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
	...

0800170c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800170c:	b480      	push	{r7}
 800170e:	b089      	sub	sp, #36	@ 0x24
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
 8001714:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001716:	2300      	movs	r3, #0
 8001718:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800171a:	2300      	movs	r3, #0
 800171c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800171e:	2300      	movs	r3, #0
 8001720:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001722:	2300      	movs	r3, #0
 8001724:	61fb      	str	r3, [r7, #28]
 8001726:	e165      	b.n	80019f4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001728:	2201      	movs	r2, #1
 800172a:	69fb      	ldr	r3, [r7, #28]
 800172c:	fa02 f303 	lsl.w	r3, r2, r3
 8001730:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	697a      	ldr	r2, [r7, #20]
 8001738:	4013      	ands	r3, r2
 800173a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800173c:	693a      	ldr	r2, [r7, #16]
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	429a      	cmp	r2, r3
 8001742:	f040 8154 	bne.w	80019ee <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	f003 0303 	and.w	r3, r3, #3
 800174e:	2b01      	cmp	r3, #1
 8001750:	d005      	beq.n	800175e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800175a:	2b02      	cmp	r3, #2
 800175c:	d130      	bne.n	80017c0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	689b      	ldr	r3, [r3, #8]
 8001762:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001764:	69fb      	ldr	r3, [r7, #28]
 8001766:	005b      	lsls	r3, r3, #1
 8001768:	2203      	movs	r2, #3
 800176a:	fa02 f303 	lsl.w	r3, r2, r3
 800176e:	43db      	mvns	r3, r3
 8001770:	69ba      	ldr	r2, [r7, #24]
 8001772:	4013      	ands	r3, r2
 8001774:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	68da      	ldr	r2, [r3, #12]
 800177a:	69fb      	ldr	r3, [r7, #28]
 800177c:	005b      	lsls	r3, r3, #1
 800177e:	fa02 f303 	lsl.w	r3, r2, r3
 8001782:	69ba      	ldr	r2, [r7, #24]
 8001784:	4313      	orrs	r3, r2
 8001786:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	69ba      	ldr	r2, [r7, #24]
 800178c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001794:	2201      	movs	r2, #1
 8001796:	69fb      	ldr	r3, [r7, #28]
 8001798:	fa02 f303 	lsl.w	r3, r2, r3
 800179c:	43db      	mvns	r3, r3
 800179e:	69ba      	ldr	r2, [r7, #24]
 80017a0:	4013      	ands	r3, r2
 80017a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	091b      	lsrs	r3, r3, #4
 80017aa:	f003 0201 	and.w	r2, r3, #1
 80017ae:	69fb      	ldr	r3, [r7, #28]
 80017b0:	fa02 f303 	lsl.w	r3, r2, r3
 80017b4:	69ba      	ldr	r2, [r7, #24]
 80017b6:	4313      	orrs	r3, r2
 80017b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	69ba      	ldr	r2, [r7, #24]
 80017be:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	f003 0303 	and.w	r3, r3, #3
 80017c8:	2b03      	cmp	r3, #3
 80017ca:	d017      	beq.n	80017fc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	68db      	ldr	r3, [r3, #12]
 80017d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80017d2:	69fb      	ldr	r3, [r7, #28]
 80017d4:	005b      	lsls	r3, r3, #1
 80017d6:	2203      	movs	r2, #3
 80017d8:	fa02 f303 	lsl.w	r3, r2, r3
 80017dc:	43db      	mvns	r3, r3
 80017de:	69ba      	ldr	r2, [r7, #24]
 80017e0:	4013      	ands	r3, r2
 80017e2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	689a      	ldr	r2, [r3, #8]
 80017e8:	69fb      	ldr	r3, [r7, #28]
 80017ea:	005b      	lsls	r3, r3, #1
 80017ec:	fa02 f303 	lsl.w	r3, r2, r3
 80017f0:	69ba      	ldr	r2, [r7, #24]
 80017f2:	4313      	orrs	r3, r2
 80017f4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	69ba      	ldr	r2, [r7, #24]
 80017fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	f003 0303 	and.w	r3, r3, #3
 8001804:	2b02      	cmp	r3, #2
 8001806:	d123      	bne.n	8001850 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001808:	69fb      	ldr	r3, [r7, #28]
 800180a:	08da      	lsrs	r2, r3, #3
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	3208      	adds	r2, #8
 8001810:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001814:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001816:	69fb      	ldr	r3, [r7, #28]
 8001818:	f003 0307 	and.w	r3, r3, #7
 800181c:	009b      	lsls	r3, r3, #2
 800181e:	220f      	movs	r2, #15
 8001820:	fa02 f303 	lsl.w	r3, r2, r3
 8001824:	43db      	mvns	r3, r3
 8001826:	69ba      	ldr	r2, [r7, #24]
 8001828:	4013      	ands	r3, r2
 800182a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	691a      	ldr	r2, [r3, #16]
 8001830:	69fb      	ldr	r3, [r7, #28]
 8001832:	f003 0307 	and.w	r3, r3, #7
 8001836:	009b      	lsls	r3, r3, #2
 8001838:	fa02 f303 	lsl.w	r3, r2, r3
 800183c:	69ba      	ldr	r2, [r7, #24]
 800183e:	4313      	orrs	r3, r2
 8001840:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001842:	69fb      	ldr	r3, [r7, #28]
 8001844:	08da      	lsrs	r2, r3, #3
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	3208      	adds	r2, #8
 800184a:	69b9      	ldr	r1, [r7, #24]
 800184c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001856:	69fb      	ldr	r3, [r7, #28]
 8001858:	005b      	lsls	r3, r3, #1
 800185a:	2203      	movs	r2, #3
 800185c:	fa02 f303 	lsl.w	r3, r2, r3
 8001860:	43db      	mvns	r3, r3
 8001862:	69ba      	ldr	r2, [r7, #24]
 8001864:	4013      	ands	r3, r2
 8001866:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	f003 0203 	and.w	r2, r3, #3
 8001870:	69fb      	ldr	r3, [r7, #28]
 8001872:	005b      	lsls	r3, r3, #1
 8001874:	fa02 f303 	lsl.w	r3, r2, r3
 8001878:	69ba      	ldr	r2, [r7, #24]
 800187a:	4313      	orrs	r3, r2
 800187c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	69ba      	ldr	r2, [r7, #24]
 8001882:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800188c:	2b00      	cmp	r3, #0
 800188e:	f000 80ae 	beq.w	80019ee <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001892:	2300      	movs	r3, #0
 8001894:	60fb      	str	r3, [r7, #12]
 8001896:	4b5d      	ldr	r3, [pc, #372]	@ (8001a0c <HAL_GPIO_Init+0x300>)
 8001898:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800189a:	4a5c      	ldr	r2, [pc, #368]	@ (8001a0c <HAL_GPIO_Init+0x300>)
 800189c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80018a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80018a2:	4b5a      	ldr	r3, [pc, #360]	@ (8001a0c <HAL_GPIO_Init+0x300>)
 80018a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80018aa:	60fb      	str	r3, [r7, #12]
 80018ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80018ae:	4a58      	ldr	r2, [pc, #352]	@ (8001a10 <HAL_GPIO_Init+0x304>)
 80018b0:	69fb      	ldr	r3, [r7, #28]
 80018b2:	089b      	lsrs	r3, r3, #2
 80018b4:	3302      	adds	r3, #2
 80018b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80018bc:	69fb      	ldr	r3, [r7, #28]
 80018be:	f003 0303 	and.w	r3, r3, #3
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	220f      	movs	r2, #15
 80018c6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ca:	43db      	mvns	r3, r3
 80018cc:	69ba      	ldr	r2, [r7, #24]
 80018ce:	4013      	ands	r3, r2
 80018d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	4a4f      	ldr	r2, [pc, #316]	@ (8001a14 <HAL_GPIO_Init+0x308>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d025      	beq.n	8001926 <HAL_GPIO_Init+0x21a>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	4a4e      	ldr	r2, [pc, #312]	@ (8001a18 <HAL_GPIO_Init+0x30c>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d01f      	beq.n	8001922 <HAL_GPIO_Init+0x216>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	4a4d      	ldr	r2, [pc, #308]	@ (8001a1c <HAL_GPIO_Init+0x310>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d019      	beq.n	800191e <HAL_GPIO_Init+0x212>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	4a4c      	ldr	r2, [pc, #304]	@ (8001a20 <HAL_GPIO_Init+0x314>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d013      	beq.n	800191a <HAL_GPIO_Init+0x20e>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	4a4b      	ldr	r2, [pc, #300]	@ (8001a24 <HAL_GPIO_Init+0x318>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d00d      	beq.n	8001916 <HAL_GPIO_Init+0x20a>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	4a4a      	ldr	r2, [pc, #296]	@ (8001a28 <HAL_GPIO_Init+0x31c>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d007      	beq.n	8001912 <HAL_GPIO_Init+0x206>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	4a49      	ldr	r2, [pc, #292]	@ (8001a2c <HAL_GPIO_Init+0x320>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d101      	bne.n	800190e <HAL_GPIO_Init+0x202>
 800190a:	2306      	movs	r3, #6
 800190c:	e00c      	b.n	8001928 <HAL_GPIO_Init+0x21c>
 800190e:	2307      	movs	r3, #7
 8001910:	e00a      	b.n	8001928 <HAL_GPIO_Init+0x21c>
 8001912:	2305      	movs	r3, #5
 8001914:	e008      	b.n	8001928 <HAL_GPIO_Init+0x21c>
 8001916:	2304      	movs	r3, #4
 8001918:	e006      	b.n	8001928 <HAL_GPIO_Init+0x21c>
 800191a:	2303      	movs	r3, #3
 800191c:	e004      	b.n	8001928 <HAL_GPIO_Init+0x21c>
 800191e:	2302      	movs	r3, #2
 8001920:	e002      	b.n	8001928 <HAL_GPIO_Init+0x21c>
 8001922:	2301      	movs	r3, #1
 8001924:	e000      	b.n	8001928 <HAL_GPIO_Init+0x21c>
 8001926:	2300      	movs	r3, #0
 8001928:	69fa      	ldr	r2, [r7, #28]
 800192a:	f002 0203 	and.w	r2, r2, #3
 800192e:	0092      	lsls	r2, r2, #2
 8001930:	4093      	lsls	r3, r2
 8001932:	69ba      	ldr	r2, [r7, #24]
 8001934:	4313      	orrs	r3, r2
 8001936:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001938:	4935      	ldr	r1, [pc, #212]	@ (8001a10 <HAL_GPIO_Init+0x304>)
 800193a:	69fb      	ldr	r3, [r7, #28]
 800193c:	089b      	lsrs	r3, r3, #2
 800193e:	3302      	adds	r3, #2
 8001940:	69ba      	ldr	r2, [r7, #24]
 8001942:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001946:	4b3a      	ldr	r3, [pc, #232]	@ (8001a30 <HAL_GPIO_Init+0x324>)
 8001948:	689b      	ldr	r3, [r3, #8]
 800194a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800194c:	693b      	ldr	r3, [r7, #16]
 800194e:	43db      	mvns	r3, r3
 8001950:	69ba      	ldr	r2, [r7, #24]
 8001952:	4013      	ands	r3, r2
 8001954:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800195e:	2b00      	cmp	r3, #0
 8001960:	d003      	beq.n	800196a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001962:	69ba      	ldr	r2, [r7, #24]
 8001964:	693b      	ldr	r3, [r7, #16]
 8001966:	4313      	orrs	r3, r2
 8001968:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800196a:	4a31      	ldr	r2, [pc, #196]	@ (8001a30 <HAL_GPIO_Init+0x324>)
 800196c:	69bb      	ldr	r3, [r7, #24]
 800196e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001970:	4b2f      	ldr	r3, [pc, #188]	@ (8001a30 <HAL_GPIO_Init+0x324>)
 8001972:	68db      	ldr	r3, [r3, #12]
 8001974:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	43db      	mvns	r3, r3
 800197a:	69ba      	ldr	r2, [r7, #24]
 800197c:	4013      	ands	r3, r2
 800197e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001988:	2b00      	cmp	r3, #0
 800198a:	d003      	beq.n	8001994 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800198c:	69ba      	ldr	r2, [r7, #24]
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	4313      	orrs	r3, r2
 8001992:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001994:	4a26      	ldr	r2, [pc, #152]	@ (8001a30 <HAL_GPIO_Init+0x324>)
 8001996:	69bb      	ldr	r3, [r7, #24]
 8001998:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800199a:	4b25      	ldr	r3, [pc, #148]	@ (8001a30 <HAL_GPIO_Init+0x324>)
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019a0:	693b      	ldr	r3, [r7, #16]
 80019a2:	43db      	mvns	r3, r3
 80019a4:	69ba      	ldr	r2, [r7, #24]
 80019a6:	4013      	ands	r3, r2
 80019a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d003      	beq.n	80019be <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80019b6:	69ba      	ldr	r2, [r7, #24]
 80019b8:	693b      	ldr	r3, [r7, #16]
 80019ba:	4313      	orrs	r3, r2
 80019bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80019be:	4a1c      	ldr	r2, [pc, #112]	@ (8001a30 <HAL_GPIO_Init+0x324>)
 80019c0:	69bb      	ldr	r3, [r7, #24]
 80019c2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019c4:	4b1a      	ldr	r3, [pc, #104]	@ (8001a30 <HAL_GPIO_Init+0x324>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	43db      	mvns	r3, r3
 80019ce:	69ba      	ldr	r2, [r7, #24]
 80019d0:	4013      	ands	r3, r2
 80019d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d003      	beq.n	80019e8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80019e0:	69ba      	ldr	r2, [r7, #24]
 80019e2:	693b      	ldr	r3, [r7, #16]
 80019e4:	4313      	orrs	r3, r2
 80019e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80019e8:	4a11      	ldr	r2, [pc, #68]	@ (8001a30 <HAL_GPIO_Init+0x324>)
 80019ea:	69bb      	ldr	r3, [r7, #24]
 80019ec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019ee:	69fb      	ldr	r3, [r7, #28]
 80019f0:	3301      	adds	r3, #1
 80019f2:	61fb      	str	r3, [r7, #28]
 80019f4:	69fb      	ldr	r3, [r7, #28]
 80019f6:	2b0f      	cmp	r3, #15
 80019f8:	f67f ae96 	bls.w	8001728 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80019fc:	bf00      	nop
 80019fe:	bf00      	nop
 8001a00:	3724      	adds	r7, #36	@ 0x24
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr
 8001a0a:	bf00      	nop
 8001a0c:	40023800 	.word	0x40023800
 8001a10:	40013800 	.word	0x40013800
 8001a14:	40020000 	.word	0x40020000
 8001a18:	40020400 	.word	0x40020400
 8001a1c:	40020800 	.word	0x40020800
 8001a20:	40020c00 	.word	0x40020c00
 8001a24:	40021000 	.word	0x40021000
 8001a28:	40021400 	.word	0x40021400
 8001a2c:	40021800 	.word	0x40021800
 8001a30:	40013c00 	.word	0x40013c00

08001a34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b083      	sub	sp, #12
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
 8001a3c:	460b      	mov	r3, r1
 8001a3e:	807b      	strh	r3, [r7, #2]
 8001a40:	4613      	mov	r3, r2
 8001a42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a44:	787b      	ldrb	r3, [r7, #1]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d003      	beq.n	8001a52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a4a:	887a      	ldrh	r2, [r7, #2]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001a50:	e003      	b.n	8001a5a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a52:	887b      	ldrh	r3, [r7, #2]
 8001a54:	041a      	lsls	r2, r3, #16
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	619a      	str	r2, [r3, #24]
}
 8001a5a:	bf00      	nop
 8001a5c:	370c      	adds	r7, #12
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr
	...

08001a68 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b084      	sub	sp, #16
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
 8001a70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d101      	bne.n	8001a7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	e0cc      	b.n	8001c16 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a7c:	4b68      	ldr	r3, [pc, #416]	@ (8001c20 <HAL_RCC_ClockConfig+0x1b8>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f003 030f 	and.w	r3, r3, #15
 8001a84:	683a      	ldr	r2, [r7, #0]
 8001a86:	429a      	cmp	r2, r3
 8001a88:	d90c      	bls.n	8001aa4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a8a:	4b65      	ldr	r3, [pc, #404]	@ (8001c20 <HAL_RCC_ClockConfig+0x1b8>)
 8001a8c:	683a      	ldr	r2, [r7, #0]
 8001a8e:	b2d2      	uxtb	r2, r2
 8001a90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a92:	4b63      	ldr	r3, [pc, #396]	@ (8001c20 <HAL_RCC_ClockConfig+0x1b8>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f003 030f 	and.w	r3, r3, #15
 8001a9a:	683a      	ldr	r2, [r7, #0]
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	d001      	beq.n	8001aa4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	e0b8      	b.n	8001c16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f003 0302 	and.w	r3, r3, #2
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d020      	beq.n	8001af2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f003 0304 	and.w	r3, r3, #4
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d005      	beq.n	8001ac8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001abc:	4b59      	ldr	r3, [pc, #356]	@ (8001c24 <HAL_RCC_ClockConfig+0x1bc>)
 8001abe:	689b      	ldr	r3, [r3, #8]
 8001ac0:	4a58      	ldr	r2, [pc, #352]	@ (8001c24 <HAL_RCC_ClockConfig+0x1bc>)
 8001ac2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001ac6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f003 0308 	and.w	r3, r3, #8
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d005      	beq.n	8001ae0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ad4:	4b53      	ldr	r3, [pc, #332]	@ (8001c24 <HAL_RCC_ClockConfig+0x1bc>)
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	4a52      	ldr	r2, [pc, #328]	@ (8001c24 <HAL_RCC_ClockConfig+0x1bc>)
 8001ada:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001ade:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ae0:	4b50      	ldr	r3, [pc, #320]	@ (8001c24 <HAL_RCC_ClockConfig+0x1bc>)
 8001ae2:	689b      	ldr	r3, [r3, #8]
 8001ae4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	494d      	ldr	r1, [pc, #308]	@ (8001c24 <HAL_RCC_ClockConfig+0x1bc>)
 8001aee:	4313      	orrs	r3, r2
 8001af0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f003 0301 	and.w	r3, r3, #1
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d044      	beq.n	8001b88 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	2b01      	cmp	r3, #1
 8001b04:	d107      	bne.n	8001b16 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b06:	4b47      	ldr	r3, [pc, #284]	@ (8001c24 <HAL_RCC_ClockConfig+0x1bc>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d119      	bne.n	8001b46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
 8001b14:	e07f      	b.n	8001c16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	2b02      	cmp	r3, #2
 8001b1c:	d003      	beq.n	8001b26 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b22:	2b03      	cmp	r3, #3
 8001b24:	d107      	bne.n	8001b36 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b26:	4b3f      	ldr	r3, [pc, #252]	@ (8001c24 <HAL_RCC_ClockConfig+0x1bc>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d109      	bne.n	8001b46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	e06f      	b.n	8001c16 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b36:	4b3b      	ldr	r3, [pc, #236]	@ (8001c24 <HAL_RCC_ClockConfig+0x1bc>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f003 0302 	and.w	r3, r3, #2
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d101      	bne.n	8001b46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	e067      	b.n	8001c16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b46:	4b37      	ldr	r3, [pc, #220]	@ (8001c24 <HAL_RCC_ClockConfig+0x1bc>)
 8001b48:	689b      	ldr	r3, [r3, #8]
 8001b4a:	f023 0203 	bic.w	r2, r3, #3
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	4934      	ldr	r1, [pc, #208]	@ (8001c24 <HAL_RCC_ClockConfig+0x1bc>)
 8001b54:	4313      	orrs	r3, r2
 8001b56:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b58:	f7ff fcba 	bl	80014d0 <HAL_GetTick>
 8001b5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b5e:	e00a      	b.n	8001b76 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b60:	f7ff fcb6 	bl	80014d0 <HAL_GetTick>
 8001b64:	4602      	mov	r2, r0
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	1ad3      	subs	r3, r2, r3
 8001b6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d901      	bls.n	8001b76 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b72:	2303      	movs	r3, #3
 8001b74:	e04f      	b.n	8001c16 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b76:	4b2b      	ldr	r3, [pc, #172]	@ (8001c24 <HAL_RCC_ClockConfig+0x1bc>)
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	f003 020c 	and.w	r2, r3, #12
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	009b      	lsls	r3, r3, #2
 8001b84:	429a      	cmp	r2, r3
 8001b86:	d1eb      	bne.n	8001b60 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b88:	4b25      	ldr	r3, [pc, #148]	@ (8001c20 <HAL_RCC_ClockConfig+0x1b8>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f003 030f 	and.w	r3, r3, #15
 8001b90:	683a      	ldr	r2, [r7, #0]
 8001b92:	429a      	cmp	r2, r3
 8001b94:	d20c      	bcs.n	8001bb0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b96:	4b22      	ldr	r3, [pc, #136]	@ (8001c20 <HAL_RCC_ClockConfig+0x1b8>)
 8001b98:	683a      	ldr	r2, [r7, #0]
 8001b9a:	b2d2      	uxtb	r2, r2
 8001b9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b9e:	4b20      	ldr	r3, [pc, #128]	@ (8001c20 <HAL_RCC_ClockConfig+0x1b8>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f003 030f 	and.w	r3, r3, #15
 8001ba6:	683a      	ldr	r2, [r7, #0]
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	d001      	beq.n	8001bb0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001bac:	2301      	movs	r3, #1
 8001bae:	e032      	b.n	8001c16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f003 0304 	and.w	r3, r3, #4
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d008      	beq.n	8001bce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bbc:	4b19      	ldr	r3, [pc, #100]	@ (8001c24 <HAL_RCC_ClockConfig+0x1bc>)
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	68db      	ldr	r3, [r3, #12]
 8001bc8:	4916      	ldr	r1, [pc, #88]	@ (8001c24 <HAL_RCC_ClockConfig+0x1bc>)
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f003 0308 	and.w	r3, r3, #8
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d009      	beq.n	8001bee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001bda:	4b12      	ldr	r3, [pc, #72]	@ (8001c24 <HAL_RCC_ClockConfig+0x1bc>)
 8001bdc:	689b      	ldr	r3, [r3, #8]
 8001bde:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	691b      	ldr	r3, [r3, #16]
 8001be6:	00db      	lsls	r3, r3, #3
 8001be8:	490e      	ldr	r1, [pc, #56]	@ (8001c24 <HAL_RCC_ClockConfig+0x1bc>)
 8001bea:	4313      	orrs	r3, r2
 8001bec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001bee:	f000 f855 	bl	8001c9c <HAL_RCC_GetSysClockFreq>
 8001bf2:	4602      	mov	r2, r0
 8001bf4:	4b0b      	ldr	r3, [pc, #44]	@ (8001c24 <HAL_RCC_ClockConfig+0x1bc>)
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	091b      	lsrs	r3, r3, #4
 8001bfa:	f003 030f 	and.w	r3, r3, #15
 8001bfe:	490a      	ldr	r1, [pc, #40]	@ (8001c28 <HAL_RCC_ClockConfig+0x1c0>)
 8001c00:	5ccb      	ldrb	r3, [r1, r3]
 8001c02:	fa22 f303 	lsr.w	r3, r2, r3
 8001c06:	4a09      	ldr	r2, [pc, #36]	@ (8001c2c <HAL_RCC_ClockConfig+0x1c4>)
 8001c08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001c0a:	4b09      	ldr	r3, [pc, #36]	@ (8001c30 <HAL_RCC_ClockConfig+0x1c8>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f7ff fc1a 	bl	8001448 <HAL_InitTick>

  return HAL_OK;
 8001c14:	2300      	movs	r3, #0
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	3710      	adds	r7, #16
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	40023c00 	.word	0x40023c00
 8001c24:	40023800 	.word	0x40023800
 8001c28:	08008e90 	.word	0x08008e90
 8001c2c:	20000000 	.word	0x20000000
 8001c30:	20000004 	.word	0x20000004

08001c34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c34:	b480      	push	{r7}
 8001c36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c38:	4b03      	ldr	r3, [pc, #12]	@ (8001c48 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr
 8001c46:	bf00      	nop
 8001c48:	20000000 	.word	0x20000000

08001c4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001c50:	f7ff fff0 	bl	8001c34 <HAL_RCC_GetHCLKFreq>
 8001c54:	4602      	mov	r2, r0
 8001c56:	4b05      	ldr	r3, [pc, #20]	@ (8001c6c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	0a9b      	lsrs	r3, r3, #10
 8001c5c:	f003 0307 	and.w	r3, r3, #7
 8001c60:	4903      	ldr	r1, [pc, #12]	@ (8001c70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c62:	5ccb      	ldrb	r3, [r1, r3]
 8001c64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	40023800 	.word	0x40023800
 8001c70:	08008ea0 	.word	0x08008ea0

08001c74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001c78:	f7ff ffdc 	bl	8001c34 <HAL_RCC_GetHCLKFreq>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	4b05      	ldr	r3, [pc, #20]	@ (8001c94 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	0b5b      	lsrs	r3, r3, #13
 8001c84:	f003 0307 	and.w	r3, r3, #7
 8001c88:	4903      	ldr	r1, [pc, #12]	@ (8001c98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c8a:	5ccb      	ldrb	r3, [r1, r3]
 8001c8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	bd80      	pop	{r7, pc}
 8001c94:	40023800 	.word	0x40023800
 8001c98:	08008ea0 	.word	0x08008ea0

08001c9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ca0:	b0ae      	sub	sp, #184	@ 0xb8
 8001ca2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8001caa:	2300      	movs	r3, #0
 8001cac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001cc2:	4bcb      	ldr	r3, [pc, #812]	@ (8001ff0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	f003 030c 	and.w	r3, r3, #12
 8001cca:	2b0c      	cmp	r3, #12
 8001ccc:	f200 8206 	bhi.w	80020dc <HAL_RCC_GetSysClockFreq+0x440>
 8001cd0:	a201      	add	r2, pc, #4	@ (adr r2, 8001cd8 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001cd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cd6:	bf00      	nop
 8001cd8:	08001d0d 	.word	0x08001d0d
 8001cdc:	080020dd 	.word	0x080020dd
 8001ce0:	080020dd 	.word	0x080020dd
 8001ce4:	080020dd 	.word	0x080020dd
 8001ce8:	08001d15 	.word	0x08001d15
 8001cec:	080020dd 	.word	0x080020dd
 8001cf0:	080020dd 	.word	0x080020dd
 8001cf4:	080020dd 	.word	0x080020dd
 8001cf8:	08001d1d 	.word	0x08001d1d
 8001cfc:	080020dd 	.word	0x080020dd
 8001d00:	080020dd 	.word	0x080020dd
 8001d04:	080020dd 	.word	0x080020dd
 8001d08:	08001f0d 	.word	0x08001f0d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001d0c:	4bb9      	ldr	r3, [pc, #740]	@ (8001ff4 <HAL_RCC_GetSysClockFreq+0x358>)
 8001d0e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 8001d12:	e1e7      	b.n	80020e4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001d14:	4bb8      	ldr	r3, [pc, #736]	@ (8001ff8 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001d16:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001d1a:	e1e3      	b.n	80020e4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d1c:	4bb4      	ldr	r3, [pc, #720]	@ (8001ff0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001d24:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d28:	4bb1      	ldr	r3, [pc, #708]	@ (8001ff0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d071      	beq.n	8001e18 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d34:	4bae      	ldr	r3, [pc, #696]	@ (8001ff0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	099b      	lsrs	r3, r3, #6
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001d40:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001d44:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001d48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d4c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001d50:	2300      	movs	r3, #0
 8001d52:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001d56:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8001d5a:	4622      	mov	r2, r4
 8001d5c:	462b      	mov	r3, r5
 8001d5e:	f04f 0000 	mov.w	r0, #0
 8001d62:	f04f 0100 	mov.w	r1, #0
 8001d66:	0159      	lsls	r1, r3, #5
 8001d68:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d6c:	0150      	lsls	r0, r2, #5
 8001d6e:	4602      	mov	r2, r0
 8001d70:	460b      	mov	r3, r1
 8001d72:	4621      	mov	r1, r4
 8001d74:	1a51      	subs	r1, r2, r1
 8001d76:	6439      	str	r1, [r7, #64]	@ 0x40
 8001d78:	4629      	mov	r1, r5
 8001d7a:	eb63 0301 	sbc.w	r3, r3, r1
 8001d7e:	647b      	str	r3, [r7, #68]	@ 0x44
 8001d80:	f04f 0200 	mov.w	r2, #0
 8001d84:	f04f 0300 	mov.w	r3, #0
 8001d88:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8001d8c:	4649      	mov	r1, r9
 8001d8e:	018b      	lsls	r3, r1, #6
 8001d90:	4641      	mov	r1, r8
 8001d92:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001d96:	4641      	mov	r1, r8
 8001d98:	018a      	lsls	r2, r1, #6
 8001d9a:	4641      	mov	r1, r8
 8001d9c:	1a51      	subs	r1, r2, r1
 8001d9e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001da0:	4649      	mov	r1, r9
 8001da2:	eb63 0301 	sbc.w	r3, r3, r1
 8001da6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001da8:	f04f 0200 	mov.w	r2, #0
 8001dac:	f04f 0300 	mov.w	r3, #0
 8001db0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8001db4:	4649      	mov	r1, r9
 8001db6:	00cb      	lsls	r3, r1, #3
 8001db8:	4641      	mov	r1, r8
 8001dba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001dbe:	4641      	mov	r1, r8
 8001dc0:	00ca      	lsls	r2, r1, #3
 8001dc2:	4610      	mov	r0, r2
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	4622      	mov	r2, r4
 8001dca:	189b      	adds	r3, r3, r2
 8001dcc:	633b      	str	r3, [r7, #48]	@ 0x30
 8001dce:	462b      	mov	r3, r5
 8001dd0:	460a      	mov	r2, r1
 8001dd2:	eb42 0303 	adc.w	r3, r2, r3
 8001dd6:	637b      	str	r3, [r7, #52]	@ 0x34
 8001dd8:	f04f 0200 	mov.w	r2, #0
 8001ddc:	f04f 0300 	mov.w	r3, #0
 8001de0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001de4:	4629      	mov	r1, r5
 8001de6:	024b      	lsls	r3, r1, #9
 8001de8:	4621      	mov	r1, r4
 8001dea:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001dee:	4621      	mov	r1, r4
 8001df0:	024a      	lsls	r2, r1, #9
 8001df2:	4610      	mov	r0, r2
 8001df4:	4619      	mov	r1, r3
 8001df6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001e00:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001e04:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8001e08:	f7fe fd58 	bl	80008bc <__aeabi_uldivmod>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	460b      	mov	r3, r1
 8001e10:	4613      	mov	r3, r2
 8001e12:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001e16:	e067      	b.n	8001ee8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e18:	4b75      	ldr	r3, [pc, #468]	@ (8001ff0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	099b      	lsrs	r3, r3, #6
 8001e1e:	2200      	movs	r2, #0
 8001e20:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001e24:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8001e28:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001e2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e30:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001e32:	2300      	movs	r3, #0
 8001e34:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001e36:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8001e3a:	4622      	mov	r2, r4
 8001e3c:	462b      	mov	r3, r5
 8001e3e:	f04f 0000 	mov.w	r0, #0
 8001e42:	f04f 0100 	mov.w	r1, #0
 8001e46:	0159      	lsls	r1, r3, #5
 8001e48:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e4c:	0150      	lsls	r0, r2, #5
 8001e4e:	4602      	mov	r2, r0
 8001e50:	460b      	mov	r3, r1
 8001e52:	4621      	mov	r1, r4
 8001e54:	1a51      	subs	r1, r2, r1
 8001e56:	62b9      	str	r1, [r7, #40]	@ 0x28
 8001e58:	4629      	mov	r1, r5
 8001e5a:	eb63 0301 	sbc.w	r3, r3, r1
 8001e5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001e60:	f04f 0200 	mov.w	r2, #0
 8001e64:	f04f 0300 	mov.w	r3, #0
 8001e68:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8001e6c:	4649      	mov	r1, r9
 8001e6e:	018b      	lsls	r3, r1, #6
 8001e70:	4641      	mov	r1, r8
 8001e72:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001e76:	4641      	mov	r1, r8
 8001e78:	018a      	lsls	r2, r1, #6
 8001e7a:	4641      	mov	r1, r8
 8001e7c:	ebb2 0a01 	subs.w	sl, r2, r1
 8001e80:	4649      	mov	r1, r9
 8001e82:	eb63 0b01 	sbc.w	fp, r3, r1
 8001e86:	f04f 0200 	mov.w	r2, #0
 8001e8a:	f04f 0300 	mov.w	r3, #0
 8001e8e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001e92:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001e96:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001e9a:	4692      	mov	sl, r2
 8001e9c:	469b      	mov	fp, r3
 8001e9e:	4623      	mov	r3, r4
 8001ea0:	eb1a 0303 	adds.w	r3, sl, r3
 8001ea4:	623b      	str	r3, [r7, #32]
 8001ea6:	462b      	mov	r3, r5
 8001ea8:	eb4b 0303 	adc.w	r3, fp, r3
 8001eac:	627b      	str	r3, [r7, #36]	@ 0x24
 8001eae:	f04f 0200 	mov.w	r2, #0
 8001eb2:	f04f 0300 	mov.w	r3, #0
 8001eb6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001eba:	4629      	mov	r1, r5
 8001ebc:	028b      	lsls	r3, r1, #10
 8001ebe:	4621      	mov	r1, r4
 8001ec0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001ec4:	4621      	mov	r1, r4
 8001ec6:	028a      	lsls	r2, r1, #10
 8001ec8:	4610      	mov	r0, r2
 8001eca:	4619      	mov	r1, r3
 8001ecc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	673b      	str	r3, [r7, #112]	@ 0x70
 8001ed4:	677a      	str	r2, [r7, #116]	@ 0x74
 8001ed6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001eda:	f7fe fcef 	bl	80008bc <__aeabi_uldivmod>
 8001ede:	4602      	mov	r2, r0
 8001ee0:	460b      	mov	r3, r1
 8001ee2:	4613      	mov	r3, r2
 8001ee4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001ee8:	4b41      	ldr	r3, [pc, #260]	@ (8001ff0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	0c1b      	lsrs	r3, r3, #16
 8001eee:	f003 0303 	and.w	r3, r3, #3
 8001ef2:	3301      	adds	r3, #1
 8001ef4:	005b      	lsls	r3, r3, #1
 8001ef6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 8001efa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001efe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001f02:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f06:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001f0a:	e0eb      	b.n	80020e4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f0c:	4b38      	ldr	r3, [pc, #224]	@ (8001ff0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001f14:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001f18:	4b35      	ldr	r3, [pc, #212]	@ (8001ff0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d06b      	beq.n	8001ffc <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f24:	4b32      	ldr	r3, [pc, #200]	@ (8001ff0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	099b      	lsrs	r3, r3, #6
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001f2e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001f30:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001f32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f36:	663b      	str	r3, [r7, #96]	@ 0x60
 8001f38:	2300      	movs	r3, #0
 8001f3a:	667b      	str	r3, [r7, #100]	@ 0x64
 8001f3c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001f40:	4622      	mov	r2, r4
 8001f42:	462b      	mov	r3, r5
 8001f44:	f04f 0000 	mov.w	r0, #0
 8001f48:	f04f 0100 	mov.w	r1, #0
 8001f4c:	0159      	lsls	r1, r3, #5
 8001f4e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f52:	0150      	lsls	r0, r2, #5
 8001f54:	4602      	mov	r2, r0
 8001f56:	460b      	mov	r3, r1
 8001f58:	4621      	mov	r1, r4
 8001f5a:	1a51      	subs	r1, r2, r1
 8001f5c:	61b9      	str	r1, [r7, #24]
 8001f5e:	4629      	mov	r1, r5
 8001f60:	eb63 0301 	sbc.w	r3, r3, r1
 8001f64:	61fb      	str	r3, [r7, #28]
 8001f66:	f04f 0200 	mov.w	r2, #0
 8001f6a:	f04f 0300 	mov.w	r3, #0
 8001f6e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001f72:	4659      	mov	r1, fp
 8001f74:	018b      	lsls	r3, r1, #6
 8001f76:	4651      	mov	r1, sl
 8001f78:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001f7c:	4651      	mov	r1, sl
 8001f7e:	018a      	lsls	r2, r1, #6
 8001f80:	4651      	mov	r1, sl
 8001f82:	ebb2 0801 	subs.w	r8, r2, r1
 8001f86:	4659      	mov	r1, fp
 8001f88:	eb63 0901 	sbc.w	r9, r3, r1
 8001f8c:	f04f 0200 	mov.w	r2, #0
 8001f90:	f04f 0300 	mov.w	r3, #0
 8001f94:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001f98:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001f9c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001fa0:	4690      	mov	r8, r2
 8001fa2:	4699      	mov	r9, r3
 8001fa4:	4623      	mov	r3, r4
 8001fa6:	eb18 0303 	adds.w	r3, r8, r3
 8001faa:	613b      	str	r3, [r7, #16]
 8001fac:	462b      	mov	r3, r5
 8001fae:	eb49 0303 	adc.w	r3, r9, r3
 8001fb2:	617b      	str	r3, [r7, #20]
 8001fb4:	f04f 0200 	mov.w	r2, #0
 8001fb8:	f04f 0300 	mov.w	r3, #0
 8001fbc:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001fc0:	4629      	mov	r1, r5
 8001fc2:	024b      	lsls	r3, r1, #9
 8001fc4:	4621      	mov	r1, r4
 8001fc6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001fca:	4621      	mov	r1, r4
 8001fcc:	024a      	lsls	r2, r1, #9
 8001fce:	4610      	mov	r0, r2
 8001fd0:	4619      	mov	r1, r3
 8001fd2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001fda:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001fdc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001fe0:	f7fe fc6c 	bl	80008bc <__aeabi_uldivmod>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	460b      	mov	r3, r1
 8001fe8:	4613      	mov	r3, r2
 8001fea:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001fee:	e065      	b.n	80020bc <HAL_RCC_GetSysClockFreq+0x420>
 8001ff0:	40023800 	.word	0x40023800
 8001ff4:	00f42400 	.word	0x00f42400
 8001ff8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ffc:	4b3d      	ldr	r3, [pc, #244]	@ (80020f4 <HAL_RCC_GetSysClockFreq+0x458>)
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	099b      	lsrs	r3, r3, #6
 8002002:	2200      	movs	r2, #0
 8002004:	4618      	mov	r0, r3
 8002006:	4611      	mov	r1, r2
 8002008:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800200c:	653b      	str	r3, [r7, #80]	@ 0x50
 800200e:	2300      	movs	r3, #0
 8002010:	657b      	str	r3, [r7, #84]	@ 0x54
 8002012:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8002016:	4642      	mov	r2, r8
 8002018:	464b      	mov	r3, r9
 800201a:	f04f 0000 	mov.w	r0, #0
 800201e:	f04f 0100 	mov.w	r1, #0
 8002022:	0159      	lsls	r1, r3, #5
 8002024:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002028:	0150      	lsls	r0, r2, #5
 800202a:	4602      	mov	r2, r0
 800202c:	460b      	mov	r3, r1
 800202e:	4641      	mov	r1, r8
 8002030:	1a51      	subs	r1, r2, r1
 8002032:	60b9      	str	r1, [r7, #8]
 8002034:	4649      	mov	r1, r9
 8002036:	eb63 0301 	sbc.w	r3, r3, r1
 800203a:	60fb      	str	r3, [r7, #12]
 800203c:	f04f 0200 	mov.w	r2, #0
 8002040:	f04f 0300 	mov.w	r3, #0
 8002044:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002048:	4659      	mov	r1, fp
 800204a:	018b      	lsls	r3, r1, #6
 800204c:	4651      	mov	r1, sl
 800204e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002052:	4651      	mov	r1, sl
 8002054:	018a      	lsls	r2, r1, #6
 8002056:	4651      	mov	r1, sl
 8002058:	1a54      	subs	r4, r2, r1
 800205a:	4659      	mov	r1, fp
 800205c:	eb63 0501 	sbc.w	r5, r3, r1
 8002060:	f04f 0200 	mov.w	r2, #0
 8002064:	f04f 0300 	mov.w	r3, #0
 8002068:	00eb      	lsls	r3, r5, #3
 800206a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800206e:	00e2      	lsls	r2, r4, #3
 8002070:	4614      	mov	r4, r2
 8002072:	461d      	mov	r5, r3
 8002074:	4643      	mov	r3, r8
 8002076:	18e3      	adds	r3, r4, r3
 8002078:	603b      	str	r3, [r7, #0]
 800207a:	464b      	mov	r3, r9
 800207c:	eb45 0303 	adc.w	r3, r5, r3
 8002080:	607b      	str	r3, [r7, #4]
 8002082:	f04f 0200 	mov.w	r2, #0
 8002086:	f04f 0300 	mov.w	r3, #0
 800208a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800208e:	4629      	mov	r1, r5
 8002090:	028b      	lsls	r3, r1, #10
 8002092:	4621      	mov	r1, r4
 8002094:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002098:	4621      	mov	r1, r4
 800209a:	028a      	lsls	r2, r1, #10
 800209c:	4610      	mov	r0, r2
 800209e:	4619      	mov	r1, r3
 80020a0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80020a4:	2200      	movs	r2, #0
 80020a6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80020a8:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80020aa:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80020ae:	f7fe fc05 	bl	80008bc <__aeabi_uldivmod>
 80020b2:	4602      	mov	r2, r0
 80020b4:	460b      	mov	r3, r1
 80020b6:	4613      	mov	r3, r2
 80020b8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80020bc:	4b0d      	ldr	r3, [pc, #52]	@ (80020f4 <HAL_RCC_GetSysClockFreq+0x458>)
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	0f1b      	lsrs	r3, r3, #28
 80020c2:	f003 0307 	and.w	r3, r3, #7
 80020c6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 80020ca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80020ce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80020d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80020d6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80020da:	e003      	b.n	80020e4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80020dc:	4b06      	ldr	r3, [pc, #24]	@ (80020f8 <HAL_RCC_GetSysClockFreq+0x45c>)
 80020de:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80020e2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020e4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	37b8      	adds	r7, #184	@ 0xb8
 80020ec:	46bd      	mov	sp, r7
 80020ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80020f2:	bf00      	nop
 80020f4:	40023800 	.word	0x40023800
 80020f8:	00f42400 	.word	0x00f42400

080020fc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b086      	sub	sp, #24
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d101      	bne.n	800210e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	e28d      	b.n	800262a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f003 0301 	and.w	r3, r3, #1
 8002116:	2b00      	cmp	r3, #0
 8002118:	f000 8083 	beq.w	8002222 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800211c:	4b94      	ldr	r3, [pc, #592]	@ (8002370 <HAL_RCC_OscConfig+0x274>)
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	f003 030c 	and.w	r3, r3, #12
 8002124:	2b04      	cmp	r3, #4
 8002126:	d019      	beq.n	800215c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002128:	4b91      	ldr	r3, [pc, #580]	@ (8002370 <HAL_RCC_OscConfig+0x274>)
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002130:	2b08      	cmp	r3, #8
 8002132:	d106      	bne.n	8002142 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002134:	4b8e      	ldr	r3, [pc, #568]	@ (8002370 <HAL_RCC_OscConfig+0x274>)
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800213c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002140:	d00c      	beq.n	800215c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002142:	4b8b      	ldr	r3, [pc, #556]	@ (8002370 <HAL_RCC_OscConfig+0x274>)
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800214a:	2b0c      	cmp	r3, #12
 800214c:	d112      	bne.n	8002174 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800214e:	4b88      	ldr	r3, [pc, #544]	@ (8002370 <HAL_RCC_OscConfig+0x274>)
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002156:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800215a:	d10b      	bne.n	8002174 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800215c:	4b84      	ldr	r3, [pc, #528]	@ (8002370 <HAL_RCC_OscConfig+0x274>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002164:	2b00      	cmp	r3, #0
 8002166:	d05b      	beq.n	8002220 <HAL_RCC_OscConfig+0x124>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d157      	bne.n	8002220 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002170:	2301      	movs	r3, #1
 8002172:	e25a      	b.n	800262a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800217c:	d106      	bne.n	800218c <HAL_RCC_OscConfig+0x90>
 800217e:	4b7c      	ldr	r3, [pc, #496]	@ (8002370 <HAL_RCC_OscConfig+0x274>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a7b      	ldr	r2, [pc, #492]	@ (8002370 <HAL_RCC_OscConfig+0x274>)
 8002184:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002188:	6013      	str	r3, [r2, #0]
 800218a:	e01d      	b.n	80021c8 <HAL_RCC_OscConfig+0xcc>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002194:	d10c      	bne.n	80021b0 <HAL_RCC_OscConfig+0xb4>
 8002196:	4b76      	ldr	r3, [pc, #472]	@ (8002370 <HAL_RCC_OscConfig+0x274>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a75      	ldr	r2, [pc, #468]	@ (8002370 <HAL_RCC_OscConfig+0x274>)
 800219c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80021a0:	6013      	str	r3, [r2, #0]
 80021a2:	4b73      	ldr	r3, [pc, #460]	@ (8002370 <HAL_RCC_OscConfig+0x274>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a72      	ldr	r2, [pc, #456]	@ (8002370 <HAL_RCC_OscConfig+0x274>)
 80021a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021ac:	6013      	str	r3, [r2, #0]
 80021ae:	e00b      	b.n	80021c8 <HAL_RCC_OscConfig+0xcc>
 80021b0:	4b6f      	ldr	r3, [pc, #444]	@ (8002370 <HAL_RCC_OscConfig+0x274>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a6e      	ldr	r2, [pc, #440]	@ (8002370 <HAL_RCC_OscConfig+0x274>)
 80021b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80021ba:	6013      	str	r3, [r2, #0]
 80021bc:	4b6c      	ldr	r3, [pc, #432]	@ (8002370 <HAL_RCC_OscConfig+0x274>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a6b      	ldr	r2, [pc, #428]	@ (8002370 <HAL_RCC_OscConfig+0x274>)
 80021c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80021c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d013      	beq.n	80021f8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021d0:	f7ff f97e 	bl	80014d0 <HAL_GetTick>
 80021d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021d6:	e008      	b.n	80021ea <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021d8:	f7ff f97a 	bl	80014d0 <HAL_GetTick>
 80021dc:	4602      	mov	r2, r0
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	1ad3      	subs	r3, r2, r3
 80021e2:	2b64      	cmp	r3, #100	@ 0x64
 80021e4:	d901      	bls.n	80021ea <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80021e6:	2303      	movs	r3, #3
 80021e8:	e21f      	b.n	800262a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021ea:	4b61      	ldr	r3, [pc, #388]	@ (8002370 <HAL_RCC_OscConfig+0x274>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d0f0      	beq.n	80021d8 <HAL_RCC_OscConfig+0xdc>
 80021f6:	e014      	b.n	8002222 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021f8:	f7ff f96a 	bl	80014d0 <HAL_GetTick>
 80021fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021fe:	e008      	b.n	8002212 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002200:	f7ff f966 	bl	80014d0 <HAL_GetTick>
 8002204:	4602      	mov	r2, r0
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	1ad3      	subs	r3, r2, r3
 800220a:	2b64      	cmp	r3, #100	@ 0x64
 800220c:	d901      	bls.n	8002212 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800220e:	2303      	movs	r3, #3
 8002210:	e20b      	b.n	800262a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002212:	4b57      	ldr	r3, [pc, #348]	@ (8002370 <HAL_RCC_OscConfig+0x274>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800221a:	2b00      	cmp	r3, #0
 800221c:	d1f0      	bne.n	8002200 <HAL_RCC_OscConfig+0x104>
 800221e:	e000      	b.n	8002222 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002220:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 0302 	and.w	r3, r3, #2
 800222a:	2b00      	cmp	r3, #0
 800222c:	d06f      	beq.n	800230e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800222e:	4b50      	ldr	r3, [pc, #320]	@ (8002370 <HAL_RCC_OscConfig+0x274>)
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	f003 030c 	and.w	r3, r3, #12
 8002236:	2b00      	cmp	r3, #0
 8002238:	d017      	beq.n	800226a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800223a:	4b4d      	ldr	r3, [pc, #308]	@ (8002370 <HAL_RCC_OscConfig+0x274>)
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002242:	2b08      	cmp	r3, #8
 8002244:	d105      	bne.n	8002252 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002246:	4b4a      	ldr	r3, [pc, #296]	@ (8002370 <HAL_RCC_OscConfig+0x274>)
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800224e:	2b00      	cmp	r3, #0
 8002250:	d00b      	beq.n	800226a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002252:	4b47      	ldr	r3, [pc, #284]	@ (8002370 <HAL_RCC_OscConfig+0x274>)
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800225a:	2b0c      	cmp	r3, #12
 800225c:	d11c      	bne.n	8002298 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800225e:	4b44      	ldr	r3, [pc, #272]	@ (8002370 <HAL_RCC_OscConfig+0x274>)
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002266:	2b00      	cmp	r3, #0
 8002268:	d116      	bne.n	8002298 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800226a:	4b41      	ldr	r3, [pc, #260]	@ (8002370 <HAL_RCC_OscConfig+0x274>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 0302 	and.w	r3, r3, #2
 8002272:	2b00      	cmp	r3, #0
 8002274:	d005      	beq.n	8002282 <HAL_RCC_OscConfig+0x186>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	68db      	ldr	r3, [r3, #12]
 800227a:	2b01      	cmp	r3, #1
 800227c:	d001      	beq.n	8002282 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	e1d3      	b.n	800262a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002282:	4b3b      	ldr	r3, [pc, #236]	@ (8002370 <HAL_RCC_OscConfig+0x274>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	691b      	ldr	r3, [r3, #16]
 800228e:	00db      	lsls	r3, r3, #3
 8002290:	4937      	ldr	r1, [pc, #220]	@ (8002370 <HAL_RCC_OscConfig+0x274>)
 8002292:	4313      	orrs	r3, r2
 8002294:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002296:	e03a      	b.n	800230e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d020      	beq.n	80022e2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022a0:	4b34      	ldr	r3, [pc, #208]	@ (8002374 <HAL_RCC_OscConfig+0x278>)
 80022a2:	2201      	movs	r2, #1
 80022a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022a6:	f7ff f913 	bl	80014d0 <HAL_GetTick>
 80022aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022ac:	e008      	b.n	80022c0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022ae:	f7ff f90f 	bl	80014d0 <HAL_GetTick>
 80022b2:	4602      	mov	r2, r0
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	1ad3      	subs	r3, r2, r3
 80022b8:	2b02      	cmp	r3, #2
 80022ba:	d901      	bls.n	80022c0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80022bc:	2303      	movs	r3, #3
 80022be:	e1b4      	b.n	800262a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022c0:	4b2b      	ldr	r3, [pc, #172]	@ (8002370 <HAL_RCC_OscConfig+0x274>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f003 0302 	and.w	r3, r3, #2
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d0f0      	beq.n	80022ae <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022cc:	4b28      	ldr	r3, [pc, #160]	@ (8002370 <HAL_RCC_OscConfig+0x274>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	691b      	ldr	r3, [r3, #16]
 80022d8:	00db      	lsls	r3, r3, #3
 80022da:	4925      	ldr	r1, [pc, #148]	@ (8002370 <HAL_RCC_OscConfig+0x274>)
 80022dc:	4313      	orrs	r3, r2
 80022de:	600b      	str	r3, [r1, #0]
 80022e0:	e015      	b.n	800230e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022e2:	4b24      	ldr	r3, [pc, #144]	@ (8002374 <HAL_RCC_OscConfig+0x278>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022e8:	f7ff f8f2 	bl	80014d0 <HAL_GetTick>
 80022ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022ee:	e008      	b.n	8002302 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022f0:	f7ff f8ee 	bl	80014d0 <HAL_GetTick>
 80022f4:	4602      	mov	r2, r0
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	1ad3      	subs	r3, r2, r3
 80022fa:	2b02      	cmp	r3, #2
 80022fc:	d901      	bls.n	8002302 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80022fe:	2303      	movs	r3, #3
 8002300:	e193      	b.n	800262a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002302:	4b1b      	ldr	r3, [pc, #108]	@ (8002370 <HAL_RCC_OscConfig+0x274>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f003 0302 	and.w	r3, r3, #2
 800230a:	2b00      	cmp	r3, #0
 800230c:	d1f0      	bne.n	80022f0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f003 0308 	and.w	r3, r3, #8
 8002316:	2b00      	cmp	r3, #0
 8002318:	d036      	beq.n	8002388 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	695b      	ldr	r3, [r3, #20]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d016      	beq.n	8002350 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002322:	4b15      	ldr	r3, [pc, #84]	@ (8002378 <HAL_RCC_OscConfig+0x27c>)
 8002324:	2201      	movs	r2, #1
 8002326:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002328:	f7ff f8d2 	bl	80014d0 <HAL_GetTick>
 800232c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800232e:	e008      	b.n	8002342 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002330:	f7ff f8ce 	bl	80014d0 <HAL_GetTick>
 8002334:	4602      	mov	r2, r0
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	1ad3      	subs	r3, r2, r3
 800233a:	2b02      	cmp	r3, #2
 800233c:	d901      	bls.n	8002342 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800233e:	2303      	movs	r3, #3
 8002340:	e173      	b.n	800262a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002342:	4b0b      	ldr	r3, [pc, #44]	@ (8002370 <HAL_RCC_OscConfig+0x274>)
 8002344:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002346:	f003 0302 	and.w	r3, r3, #2
 800234a:	2b00      	cmp	r3, #0
 800234c:	d0f0      	beq.n	8002330 <HAL_RCC_OscConfig+0x234>
 800234e:	e01b      	b.n	8002388 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002350:	4b09      	ldr	r3, [pc, #36]	@ (8002378 <HAL_RCC_OscConfig+0x27c>)
 8002352:	2200      	movs	r2, #0
 8002354:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002356:	f7ff f8bb 	bl	80014d0 <HAL_GetTick>
 800235a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800235c:	e00e      	b.n	800237c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800235e:	f7ff f8b7 	bl	80014d0 <HAL_GetTick>
 8002362:	4602      	mov	r2, r0
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	1ad3      	subs	r3, r2, r3
 8002368:	2b02      	cmp	r3, #2
 800236a:	d907      	bls.n	800237c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800236c:	2303      	movs	r3, #3
 800236e:	e15c      	b.n	800262a <HAL_RCC_OscConfig+0x52e>
 8002370:	40023800 	.word	0x40023800
 8002374:	42470000 	.word	0x42470000
 8002378:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800237c:	4b8a      	ldr	r3, [pc, #552]	@ (80025a8 <HAL_RCC_OscConfig+0x4ac>)
 800237e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002380:	f003 0302 	and.w	r3, r3, #2
 8002384:	2b00      	cmp	r3, #0
 8002386:	d1ea      	bne.n	800235e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f003 0304 	and.w	r3, r3, #4
 8002390:	2b00      	cmp	r3, #0
 8002392:	f000 8097 	beq.w	80024c4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002396:	2300      	movs	r3, #0
 8002398:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800239a:	4b83      	ldr	r3, [pc, #524]	@ (80025a8 <HAL_RCC_OscConfig+0x4ac>)
 800239c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800239e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d10f      	bne.n	80023c6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023a6:	2300      	movs	r3, #0
 80023a8:	60bb      	str	r3, [r7, #8]
 80023aa:	4b7f      	ldr	r3, [pc, #508]	@ (80025a8 <HAL_RCC_OscConfig+0x4ac>)
 80023ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ae:	4a7e      	ldr	r2, [pc, #504]	@ (80025a8 <HAL_RCC_OscConfig+0x4ac>)
 80023b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80023b6:	4b7c      	ldr	r3, [pc, #496]	@ (80025a8 <HAL_RCC_OscConfig+0x4ac>)
 80023b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023be:	60bb      	str	r3, [r7, #8]
 80023c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023c2:	2301      	movs	r3, #1
 80023c4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023c6:	4b79      	ldr	r3, [pc, #484]	@ (80025ac <HAL_RCC_OscConfig+0x4b0>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d118      	bne.n	8002404 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023d2:	4b76      	ldr	r3, [pc, #472]	@ (80025ac <HAL_RCC_OscConfig+0x4b0>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a75      	ldr	r2, [pc, #468]	@ (80025ac <HAL_RCC_OscConfig+0x4b0>)
 80023d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023de:	f7ff f877 	bl	80014d0 <HAL_GetTick>
 80023e2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023e4:	e008      	b.n	80023f8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023e6:	f7ff f873 	bl	80014d0 <HAL_GetTick>
 80023ea:	4602      	mov	r2, r0
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	1ad3      	subs	r3, r2, r3
 80023f0:	2b02      	cmp	r3, #2
 80023f2:	d901      	bls.n	80023f8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80023f4:	2303      	movs	r3, #3
 80023f6:	e118      	b.n	800262a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023f8:	4b6c      	ldr	r3, [pc, #432]	@ (80025ac <HAL_RCC_OscConfig+0x4b0>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002400:	2b00      	cmp	r3, #0
 8002402:	d0f0      	beq.n	80023e6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	2b01      	cmp	r3, #1
 800240a:	d106      	bne.n	800241a <HAL_RCC_OscConfig+0x31e>
 800240c:	4b66      	ldr	r3, [pc, #408]	@ (80025a8 <HAL_RCC_OscConfig+0x4ac>)
 800240e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002410:	4a65      	ldr	r2, [pc, #404]	@ (80025a8 <HAL_RCC_OscConfig+0x4ac>)
 8002412:	f043 0301 	orr.w	r3, r3, #1
 8002416:	6713      	str	r3, [r2, #112]	@ 0x70
 8002418:	e01c      	b.n	8002454 <HAL_RCC_OscConfig+0x358>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	2b05      	cmp	r3, #5
 8002420:	d10c      	bne.n	800243c <HAL_RCC_OscConfig+0x340>
 8002422:	4b61      	ldr	r3, [pc, #388]	@ (80025a8 <HAL_RCC_OscConfig+0x4ac>)
 8002424:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002426:	4a60      	ldr	r2, [pc, #384]	@ (80025a8 <HAL_RCC_OscConfig+0x4ac>)
 8002428:	f043 0304 	orr.w	r3, r3, #4
 800242c:	6713      	str	r3, [r2, #112]	@ 0x70
 800242e:	4b5e      	ldr	r3, [pc, #376]	@ (80025a8 <HAL_RCC_OscConfig+0x4ac>)
 8002430:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002432:	4a5d      	ldr	r2, [pc, #372]	@ (80025a8 <HAL_RCC_OscConfig+0x4ac>)
 8002434:	f043 0301 	orr.w	r3, r3, #1
 8002438:	6713      	str	r3, [r2, #112]	@ 0x70
 800243a:	e00b      	b.n	8002454 <HAL_RCC_OscConfig+0x358>
 800243c:	4b5a      	ldr	r3, [pc, #360]	@ (80025a8 <HAL_RCC_OscConfig+0x4ac>)
 800243e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002440:	4a59      	ldr	r2, [pc, #356]	@ (80025a8 <HAL_RCC_OscConfig+0x4ac>)
 8002442:	f023 0301 	bic.w	r3, r3, #1
 8002446:	6713      	str	r3, [r2, #112]	@ 0x70
 8002448:	4b57      	ldr	r3, [pc, #348]	@ (80025a8 <HAL_RCC_OscConfig+0x4ac>)
 800244a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800244c:	4a56      	ldr	r2, [pc, #344]	@ (80025a8 <HAL_RCC_OscConfig+0x4ac>)
 800244e:	f023 0304 	bic.w	r3, r3, #4
 8002452:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d015      	beq.n	8002488 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800245c:	f7ff f838 	bl	80014d0 <HAL_GetTick>
 8002460:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002462:	e00a      	b.n	800247a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002464:	f7ff f834 	bl	80014d0 <HAL_GetTick>
 8002468:	4602      	mov	r2, r0
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	1ad3      	subs	r3, r2, r3
 800246e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002472:	4293      	cmp	r3, r2
 8002474:	d901      	bls.n	800247a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002476:	2303      	movs	r3, #3
 8002478:	e0d7      	b.n	800262a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800247a:	4b4b      	ldr	r3, [pc, #300]	@ (80025a8 <HAL_RCC_OscConfig+0x4ac>)
 800247c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800247e:	f003 0302 	and.w	r3, r3, #2
 8002482:	2b00      	cmp	r3, #0
 8002484:	d0ee      	beq.n	8002464 <HAL_RCC_OscConfig+0x368>
 8002486:	e014      	b.n	80024b2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002488:	f7ff f822 	bl	80014d0 <HAL_GetTick>
 800248c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800248e:	e00a      	b.n	80024a6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002490:	f7ff f81e 	bl	80014d0 <HAL_GetTick>
 8002494:	4602      	mov	r2, r0
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	1ad3      	subs	r3, r2, r3
 800249a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800249e:	4293      	cmp	r3, r2
 80024a0:	d901      	bls.n	80024a6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80024a2:	2303      	movs	r3, #3
 80024a4:	e0c1      	b.n	800262a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024a6:	4b40      	ldr	r3, [pc, #256]	@ (80025a8 <HAL_RCC_OscConfig+0x4ac>)
 80024a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024aa:	f003 0302 	and.w	r3, r3, #2
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d1ee      	bne.n	8002490 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80024b2:	7dfb      	ldrb	r3, [r7, #23]
 80024b4:	2b01      	cmp	r3, #1
 80024b6:	d105      	bne.n	80024c4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024b8:	4b3b      	ldr	r3, [pc, #236]	@ (80025a8 <HAL_RCC_OscConfig+0x4ac>)
 80024ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024bc:	4a3a      	ldr	r2, [pc, #232]	@ (80025a8 <HAL_RCC_OscConfig+0x4ac>)
 80024be:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80024c2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	699b      	ldr	r3, [r3, #24]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	f000 80ad 	beq.w	8002628 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80024ce:	4b36      	ldr	r3, [pc, #216]	@ (80025a8 <HAL_RCC_OscConfig+0x4ac>)
 80024d0:	689b      	ldr	r3, [r3, #8]
 80024d2:	f003 030c 	and.w	r3, r3, #12
 80024d6:	2b08      	cmp	r3, #8
 80024d8:	d060      	beq.n	800259c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	699b      	ldr	r3, [r3, #24]
 80024de:	2b02      	cmp	r3, #2
 80024e0:	d145      	bne.n	800256e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024e2:	4b33      	ldr	r3, [pc, #204]	@ (80025b0 <HAL_RCC_OscConfig+0x4b4>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024e8:	f7fe fff2 	bl	80014d0 <HAL_GetTick>
 80024ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024ee:	e008      	b.n	8002502 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024f0:	f7fe ffee 	bl	80014d0 <HAL_GetTick>
 80024f4:	4602      	mov	r2, r0
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	1ad3      	subs	r3, r2, r3
 80024fa:	2b02      	cmp	r3, #2
 80024fc:	d901      	bls.n	8002502 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80024fe:	2303      	movs	r3, #3
 8002500:	e093      	b.n	800262a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002502:	4b29      	ldr	r3, [pc, #164]	@ (80025a8 <HAL_RCC_OscConfig+0x4ac>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800250a:	2b00      	cmp	r3, #0
 800250c:	d1f0      	bne.n	80024f0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	69da      	ldr	r2, [r3, #28]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6a1b      	ldr	r3, [r3, #32]
 8002516:	431a      	orrs	r2, r3
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800251c:	019b      	lsls	r3, r3, #6
 800251e:	431a      	orrs	r2, r3
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002524:	085b      	lsrs	r3, r3, #1
 8002526:	3b01      	subs	r3, #1
 8002528:	041b      	lsls	r3, r3, #16
 800252a:	431a      	orrs	r2, r3
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002530:	061b      	lsls	r3, r3, #24
 8002532:	431a      	orrs	r2, r3
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002538:	071b      	lsls	r3, r3, #28
 800253a:	491b      	ldr	r1, [pc, #108]	@ (80025a8 <HAL_RCC_OscConfig+0x4ac>)
 800253c:	4313      	orrs	r3, r2
 800253e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002540:	4b1b      	ldr	r3, [pc, #108]	@ (80025b0 <HAL_RCC_OscConfig+0x4b4>)
 8002542:	2201      	movs	r2, #1
 8002544:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002546:	f7fe ffc3 	bl	80014d0 <HAL_GetTick>
 800254a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800254c:	e008      	b.n	8002560 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800254e:	f7fe ffbf 	bl	80014d0 <HAL_GetTick>
 8002552:	4602      	mov	r2, r0
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	1ad3      	subs	r3, r2, r3
 8002558:	2b02      	cmp	r3, #2
 800255a:	d901      	bls.n	8002560 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800255c:	2303      	movs	r3, #3
 800255e:	e064      	b.n	800262a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002560:	4b11      	ldr	r3, [pc, #68]	@ (80025a8 <HAL_RCC_OscConfig+0x4ac>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002568:	2b00      	cmp	r3, #0
 800256a:	d0f0      	beq.n	800254e <HAL_RCC_OscConfig+0x452>
 800256c:	e05c      	b.n	8002628 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800256e:	4b10      	ldr	r3, [pc, #64]	@ (80025b0 <HAL_RCC_OscConfig+0x4b4>)
 8002570:	2200      	movs	r2, #0
 8002572:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002574:	f7fe ffac 	bl	80014d0 <HAL_GetTick>
 8002578:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800257a:	e008      	b.n	800258e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800257c:	f7fe ffa8 	bl	80014d0 <HAL_GetTick>
 8002580:	4602      	mov	r2, r0
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	1ad3      	subs	r3, r2, r3
 8002586:	2b02      	cmp	r3, #2
 8002588:	d901      	bls.n	800258e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800258a:	2303      	movs	r3, #3
 800258c:	e04d      	b.n	800262a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800258e:	4b06      	ldr	r3, [pc, #24]	@ (80025a8 <HAL_RCC_OscConfig+0x4ac>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002596:	2b00      	cmp	r3, #0
 8002598:	d1f0      	bne.n	800257c <HAL_RCC_OscConfig+0x480>
 800259a:	e045      	b.n	8002628 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	699b      	ldr	r3, [r3, #24]
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d107      	bne.n	80025b4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80025a4:	2301      	movs	r3, #1
 80025a6:	e040      	b.n	800262a <HAL_RCC_OscConfig+0x52e>
 80025a8:	40023800 	.word	0x40023800
 80025ac:	40007000 	.word	0x40007000
 80025b0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80025b4:	4b1f      	ldr	r3, [pc, #124]	@ (8002634 <HAL_RCC_OscConfig+0x538>)
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	699b      	ldr	r3, [r3, #24]
 80025be:	2b01      	cmp	r3, #1
 80025c0:	d030      	beq.n	8002624 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025cc:	429a      	cmp	r2, r3
 80025ce:	d129      	bne.n	8002624 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025da:	429a      	cmp	r2, r3
 80025dc:	d122      	bne.n	8002624 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80025de:	68fa      	ldr	r2, [r7, #12]
 80025e0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80025e4:	4013      	ands	r3, r2
 80025e6:	687a      	ldr	r2, [r7, #4]
 80025e8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80025ea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d119      	bne.n	8002624 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025fa:	085b      	lsrs	r3, r3, #1
 80025fc:	3b01      	subs	r3, #1
 80025fe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002600:	429a      	cmp	r2, r3
 8002602:	d10f      	bne.n	8002624 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800260e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002610:	429a      	cmp	r2, r3
 8002612:	d107      	bne.n	8002624 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800261e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002620:	429a      	cmp	r2, r3
 8002622:	d001      	beq.n	8002628 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	e000      	b.n	800262a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002628:	2300      	movs	r3, #0
}
 800262a:	4618      	mov	r0, r3
 800262c:	3718      	adds	r7, #24
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}
 8002632:	bf00      	nop
 8002634:	40023800 	.word	0x40023800

08002638 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b082      	sub	sp, #8
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d101      	bne.n	800264a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	e07b      	b.n	8002742 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800264e:	2b00      	cmp	r3, #0
 8002650:	d108      	bne.n	8002664 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800265a:	d009      	beq.n	8002670 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2200      	movs	r2, #0
 8002660:	61da      	str	r2, [r3, #28]
 8002662:	e005      	b.n	8002670 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2200      	movs	r2, #0
 8002668:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2200      	movs	r2, #0
 800266e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2200      	movs	r2, #0
 8002674:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800267c:	b2db      	uxtb	r3, r3
 800267e:	2b00      	cmp	r3, #0
 8002680:	d106      	bne.n	8002690 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2200      	movs	r2, #0
 8002686:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	f7fe fbd4 	bl	8000e38 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2202      	movs	r2, #2
 8002694:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	681a      	ldr	r2, [r3, #0]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80026a6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80026b8:	431a      	orrs	r2, r3
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	68db      	ldr	r3, [r3, #12]
 80026be:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80026c2:	431a      	orrs	r2, r3
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	691b      	ldr	r3, [r3, #16]
 80026c8:	f003 0302 	and.w	r3, r3, #2
 80026cc:	431a      	orrs	r2, r3
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	695b      	ldr	r3, [r3, #20]
 80026d2:	f003 0301 	and.w	r3, r3, #1
 80026d6:	431a      	orrs	r2, r3
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	699b      	ldr	r3, [r3, #24]
 80026dc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80026e0:	431a      	orrs	r2, r3
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	69db      	ldr	r3, [r3, #28]
 80026e6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80026ea:	431a      	orrs	r2, r3
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6a1b      	ldr	r3, [r3, #32]
 80026f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026f4:	ea42 0103 	orr.w	r1, r2, r3
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026fc:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	430a      	orrs	r2, r1
 8002706:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	699b      	ldr	r3, [r3, #24]
 800270c:	0c1b      	lsrs	r3, r3, #16
 800270e:	f003 0104 	and.w	r1, r3, #4
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002716:	f003 0210 	and.w	r2, r3, #16
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	430a      	orrs	r2, r1
 8002720:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	69da      	ldr	r2, [r3, #28]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002730:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2200      	movs	r2, #0
 8002736:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2201      	movs	r2, #1
 800273c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002740:	2300      	movs	r3, #0
}
 8002742:	4618      	mov	r0, r3
 8002744:	3708      	adds	r7, #8
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}

0800274a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800274a:	b580      	push	{r7, lr}
 800274c:	b088      	sub	sp, #32
 800274e:	af00      	add	r7, sp, #0
 8002750:	60f8      	str	r0, [r7, #12]
 8002752:	60b9      	str	r1, [r7, #8]
 8002754:	603b      	str	r3, [r7, #0]
 8002756:	4613      	mov	r3, r2
 8002758:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800275a:	2300      	movs	r3, #0
 800275c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002764:	2b01      	cmp	r3, #1
 8002766:	d101      	bne.n	800276c <HAL_SPI_Transmit+0x22>
 8002768:	2302      	movs	r3, #2
 800276a:	e12d      	b.n	80029c8 <HAL_SPI_Transmit+0x27e>
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	2201      	movs	r2, #1
 8002770:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002774:	f7fe feac 	bl	80014d0 <HAL_GetTick>
 8002778:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800277a:	88fb      	ldrh	r3, [r7, #6]
 800277c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002784:	b2db      	uxtb	r3, r3
 8002786:	2b01      	cmp	r3, #1
 8002788:	d002      	beq.n	8002790 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800278a:	2302      	movs	r3, #2
 800278c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800278e:	e116      	b.n	80029be <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d002      	beq.n	800279c <HAL_SPI_Transmit+0x52>
 8002796:	88fb      	ldrh	r3, [r7, #6]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d102      	bne.n	80027a2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800279c:	2301      	movs	r3, #1
 800279e:	77fb      	strb	r3, [r7, #31]
    goto error;
 80027a0:	e10d      	b.n	80029be <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	2203      	movs	r2, #3
 80027a6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	2200      	movs	r2, #0
 80027ae:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	68ba      	ldr	r2, [r7, #8]
 80027b4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	88fa      	ldrh	r2, [r7, #6]
 80027ba:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	88fa      	ldrh	r2, [r7, #6]
 80027c0:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	2200      	movs	r2, #0
 80027c6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	2200      	movs	r2, #0
 80027cc:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	2200      	movs	r2, #0
 80027d2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	2200      	movs	r2, #0
 80027d8:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	2200      	movs	r2, #0
 80027de:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80027e8:	d10f      	bne.n	800280a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	681a      	ldr	r2, [r3, #0]
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80027f8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	681a      	ldr	r2, [r3, #0]
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002808:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002814:	2b40      	cmp	r3, #64	@ 0x40
 8002816:	d007      	beq.n	8002828 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	681a      	ldr	r2, [r3, #0]
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002826:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	68db      	ldr	r3, [r3, #12]
 800282c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002830:	d14f      	bne.n	80028d2 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d002      	beq.n	8002840 <HAL_SPI_Transmit+0xf6>
 800283a:	8afb      	ldrh	r3, [r7, #22]
 800283c:	2b01      	cmp	r3, #1
 800283e:	d142      	bne.n	80028c6 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002844:	881a      	ldrh	r2, [r3, #0]
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002850:	1c9a      	adds	r2, r3, #2
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800285a:	b29b      	uxth	r3, r3
 800285c:	3b01      	subs	r3, #1
 800285e:	b29a      	uxth	r2, r3
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002864:	e02f      	b.n	80028c6 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	f003 0302 	and.w	r3, r3, #2
 8002870:	2b02      	cmp	r3, #2
 8002872:	d112      	bne.n	800289a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002878:	881a      	ldrh	r2, [r3, #0]
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002884:	1c9a      	adds	r2, r3, #2
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800288e:	b29b      	uxth	r3, r3
 8002890:	3b01      	subs	r3, #1
 8002892:	b29a      	uxth	r2, r3
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002898:	e015      	b.n	80028c6 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800289a:	f7fe fe19 	bl	80014d0 <HAL_GetTick>
 800289e:	4602      	mov	r2, r0
 80028a0:	69bb      	ldr	r3, [r7, #24]
 80028a2:	1ad3      	subs	r3, r2, r3
 80028a4:	683a      	ldr	r2, [r7, #0]
 80028a6:	429a      	cmp	r2, r3
 80028a8:	d803      	bhi.n	80028b2 <HAL_SPI_Transmit+0x168>
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028b0:	d102      	bne.n	80028b8 <HAL_SPI_Transmit+0x16e>
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d106      	bne.n	80028c6 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 80028b8:	2303      	movs	r3, #3
 80028ba:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	2201      	movs	r2, #1
 80028c0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 80028c4:	e07b      	b.n	80029be <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80028ca:	b29b      	uxth	r3, r3
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d1ca      	bne.n	8002866 <HAL_SPI_Transmit+0x11c>
 80028d0:	e050      	b.n	8002974 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d002      	beq.n	80028e0 <HAL_SPI_Transmit+0x196>
 80028da:	8afb      	ldrh	r3, [r7, #22]
 80028dc:	2b01      	cmp	r3, #1
 80028de:	d144      	bne.n	800296a <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	330c      	adds	r3, #12
 80028ea:	7812      	ldrb	r2, [r2, #0]
 80028ec:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028f2:	1c5a      	adds	r2, r3, #1
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80028fc:	b29b      	uxth	r3, r3
 80028fe:	3b01      	subs	r3, #1
 8002900:	b29a      	uxth	r2, r3
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002906:	e030      	b.n	800296a <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	f003 0302 	and.w	r3, r3, #2
 8002912:	2b02      	cmp	r3, #2
 8002914:	d113      	bne.n	800293e <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	330c      	adds	r3, #12
 8002920:	7812      	ldrb	r2, [r2, #0]
 8002922:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002928:	1c5a      	adds	r2, r3, #1
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002932:	b29b      	uxth	r3, r3
 8002934:	3b01      	subs	r3, #1
 8002936:	b29a      	uxth	r2, r3
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800293c:	e015      	b.n	800296a <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800293e:	f7fe fdc7 	bl	80014d0 <HAL_GetTick>
 8002942:	4602      	mov	r2, r0
 8002944:	69bb      	ldr	r3, [r7, #24]
 8002946:	1ad3      	subs	r3, r2, r3
 8002948:	683a      	ldr	r2, [r7, #0]
 800294a:	429a      	cmp	r2, r3
 800294c:	d803      	bhi.n	8002956 <HAL_SPI_Transmit+0x20c>
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002954:	d102      	bne.n	800295c <HAL_SPI_Transmit+0x212>
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d106      	bne.n	800296a <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 800295c:	2303      	movs	r3, #3
 800295e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	2201      	movs	r2, #1
 8002964:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8002968:	e029      	b.n	80029be <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800296e:	b29b      	uxth	r3, r3
 8002970:	2b00      	cmp	r3, #0
 8002972:	d1c9      	bne.n	8002908 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002974:	69ba      	ldr	r2, [r7, #24]
 8002976:	6839      	ldr	r1, [r7, #0]
 8002978:	68f8      	ldr	r0, [r7, #12]
 800297a:	f000 fa61 	bl	8002e40 <SPI_EndRxTxTransaction>
 800297e:	4603      	mov	r3, r0
 8002980:	2b00      	cmp	r3, #0
 8002982:	d002      	beq.n	800298a <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	2220      	movs	r2, #32
 8002988:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d10a      	bne.n	80029a8 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002992:	2300      	movs	r3, #0
 8002994:	613b      	str	r3, [r7, #16]
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	68db      	ldr	r3, [r3, #12]
 800299c:	613b      	str	r3, [r7, #16]
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	613b      	str	r3, [r7, #16]
 80029a6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d002      	beq.n	80029b6 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 80029b0:	2301      	movs	r3, #1
 80029b2:	77fb      	strb	r3, [r7, #31]
 80029b4:	e003      	b.n	80029be <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	2201      	movs	r2, #1
 80029ba:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	2200      	movs	r2, #0
 80029c2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80029c6:	7ffb      	ldrb	r3, [r7, #31]
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	3720      	adds	r7, #32
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}

080029d0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b08c      	sub	sp, #48	@ 0x30
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	60f8      	str	r0, [r7, #12]
 80029d8:	60b9      	str	r1, [r7, #8]
 80029da:	607a      	str	r2, [r7, #4]
 80029dc:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80029de:	2301      	movs	r3, #1
 80029e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80029e2:	2300      	movs	r3, #0
 80029e4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80029ee:	2b01      	cmp	r3, #1
 80029f0:	d101      	bne.n	80029f6 <HAL_SPI_TransmitReceive+0x26>
 80029f2:	2302      	movs	r3, #2
 80029f4:	e198      	b.n	8002d28 <HAL_SPI_TransmitReceive+0x358>
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	2201      	movs	r2, #1
 80029fa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80029fe:	f7fe fd67 	bl	80014d0 <HAL_GetTick>
 8002a02:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002a0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002a14:	887b      	ldrh	r3, [r7, #2]
 8002a16:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002a18:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	d00f      	beq.n	8002a40 <HAL_SPI_TransmitReceive+0x70>
 8002a20:	69fb      	ldr	r3, [r7, #28]
 8002a22:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002a26:	d107      	bne.n	8002a38 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d103      	bne.n	8002a38 <HAL_SPI_TransmitReceive+0x68>
 8002a30:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002a34:	2b04      	cmp	r3, #4
 8002a36:	d003      	beq.n	8002a40 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002a38:	2302      	movs	r3, #2
 8002a3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8002a3e:	e16d      	b.n	8002d1c <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d005      	beq.n	8002a52 <HAL_SPI_TransmitReceive+0x82>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d002      	beq.n	8002a52 <HAL_SPI_TransmitReceive+0x82>
 8002a4c:	887b      	ldrh	r3, [r7, #2]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d103      	bne.n	8002a5a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8002a58:	e160      	b.n	8002d1c <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002a60:	b2db      	uxtb	r3, r3
 8002a62:	2b04      	cmp	r3, #4
 8002a64:	d003      	beq.n	8002a6e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	2205      	movs	r2, #5
 8002a6a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	2200      	movs	r2, #0
 8002a72:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	687a      	ldr	r2, [r7, #4]
 8002a78:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	887a      	ldrh	r2, [r7, #2]
 8002a7e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	887a      	ldrh	r2, [r7, #2]
 8002a84:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	68ba      	ldr	r2, [r7, #8]
 8002a8a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	887a      	ldrh	r2, [r7, #2]
 8002a90:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	887a      	ldrh	r2, [r7, #2]
 8002a96:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002aae:	2b40      	cmp	r3, #64	@ 0x40
 8002ab0:	d007      	beq.n	8002ac2 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	681a      	ldr	r2, [r3, #0]
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002ac0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	68db      	ldr	r3, [r3, #12]
 8002ac6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002aca:	d17c      	bne.n	8002bc6 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d002      	beq.n	8002ada <HAL_SPI_TransmitReceive+0x10a>
 8002ad4:	8b7b      	ldrh	r3, [r7, #26]
 8002ad6:	2b01      	cmp	r3, #1
 8002ad8:	d16a      	bne.n	8002bb0 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ade:	881a      	ldrh	r2, [r3, #0]
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aea:	1c9a      	adds	r2, r3, #2
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002af4:	b29b      	uxth	r3, r3
 8002af6:	3b01      	subs	r3, #1
 8002af8:	b29a      	uxth	r2, r3
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002afe:	e057      	b.n	8002bb0 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	f003 0302 	and.w	r3, r3, #2
 8002b0a:	2b02      	cmp	r3, #2
 8002b0c:	d11b      	bne.n	8002b46 <HAL_SPI_TransmitReceive+0x176>
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002b12:	b29b      	uxth	r3, r3
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d016      	beq.n	8002b46 <HAL_SPI_TransmitReceive+0x176>
 8002b18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d113      	bne.n	8002b46 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b22:	881a      	ldrh	r2, [r3, #0]
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b2e:	1c9a      	adds	r2, r3, #2
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002b38:	b29b      	uxth	r3, r3
 8002b3a:	3b01      	subs	r3, #1
 8002b3c:	b29a      	uxth	r2, r3
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002b42:	2300      	movs	r3, #0
 8002b44:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	f003 0301 	and.w	r3, r3, #1
 8002b50:	2b01      	cmp	r3, #1
 8002b52:	d119      	bne.n	8002b88 <HAL_SPI_TransmitReceive+0x1b8>
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002b58:	b29b      	uxth	r3, r3
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d014      	beq.n	8002b88 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	68da      	ldr	r2, [r3, #12]
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b68:	b292      	uxth	r2, r2
 8002b6a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b70:	1c9a      	adds	r2, r3, #2
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002b7a:	b29b      	uxth	r3, r3
 8002b7c:	3b01      	subs	r3, #1
 8002b7e:	b29a      	uxth	r2, r3
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002b84:	2301      	movs	r3, #1
 8002b86:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002b88:	f7fe fca2 	bl	80014d0 <HAL_GetTick>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b90:	1ad3      	subs	r3, r2, r3
 8002b92:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d80b      	bhi.n	8002bb0 <HAL_SPI_TransmitReceive+0x1e0>
 8002b98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b9e:	d007      	beq.n	8002bb0 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8002ba0:	2303      	movs	r3, #3
 8002ba2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	2201      	movs	r2, #1
 8002baa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8002bae:	e0b5      	b.n	8002d1c <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002bb4:	b29b      	uxth	r3, r3
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d1a2      	bne.n	8002b00 <HAL_SPI_TransmitReceive+0x130>
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002bbe:	b29b      	uxth	r3, r3
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d19d      	bne.n	8002b00 <HAL_SPI_TransmitReceive+0x130>
 8002bc4:	e080      	b.n	8002cc8 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d002      	beq.n	8002bd4 <HAL_SPI_TransmitReceive+0x204>
 8002bce:	8b7b      	ldrh	r3, [r7, #26]
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d16f      	bne.n	8002cb4 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	330c      	adds	r3, #12
 8002bde:	7812      	ldrb	r2, [r2, #0]
 8002be0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002be6:	1c5a      	adds	r2, r3, #1
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002bf0:	b29b      	uxth	r3, r3
 8002bf2:	3b01      	subs	r3, #1
 8002bf4:	b29a      	uxth	r2, r3
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002bfa:	e05b      	b.n	8002cb4 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	f003 0302 	and.w	r3, r3, #2
 8002c06:	2b02      	cmp	r3, #2
 8002c08:	d11c      	bne.n	8002c44 <HAL_SPI_TransmitReceive+0x274>
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002c0e:	b29b      	uxth	r3, r3
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d017      	beq.n	8002c44 <HAL_SPI_TransmitReceive+0x274>
 8002c14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c16:	2b01      	cmp	r3, #1
 8002c18:	d114      	bne.n	8002c44 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	330c      	adds	r3, #12
 8002c24:	7812      	ldrb	r2, [r2, #0]
 8002c26:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c2c:	1c5a      	adds	r2, r3, #1
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002c36:	b29b      	uxth	r3, r3
 8002c38:	3b01      	subs	r3, #1
 8002c3a:	b29a      	uxth	r2, r3
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002c40:	2300      	movs	r3, #0
 8002c42:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	f003 0301 	and.w	r3, r3, #1
 8002c4e:	2b01      	cmp	r3, #1
 8002c50:	d119      	bne.n	8002c86 <HAL_SPI_TransmitReceive+0x2b6>
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002c56:	b29b      	uxth	r3, r3
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d014      	beq.n	8002c86 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	68da      	ldr	r2, [r3, #12]
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c66:	b2d2      	uxtb	r2, r2
 8002c68:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c6e:	1c5a      	adds	r2, r3, #1
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002c78:	b29b      	uxth	r3, r3
 8002c7a:	3b01      	subs	r3, #1
 8002c7c:	b29a      	uxth	r2, r3
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002c82:	2301      	movs	r3, #1
 8002c84:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002c86:	f7fe fc23 	bl	80014d0 <HAL_GetTick>
 8002c8a:	4602      	mov	r2, r0
 8002c8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c8e:	1ad3      	subs	r3, r2, r3
 8002c90:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002c92:	429a      	cmp	r2, r3
 8002c94:	d803      	bhi.n	8002c9e <HAL_SPI_TransmitReceive+0x2ce>
 8002c96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c9c:	d102      	bne.n	8002ca4 <HAL_SPI_TransmitReceive+0x2d4>
 8002c9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d107      	bne.n	8002cb4 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8002ca4:	2303      	movs	r3, #3
 8002ca6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	2201      	movs	r2, #1
 8002cae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8002cb2:	e033      	b.n	8002d1c <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002cb8:	b29b      	uxth	r3, r3
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d19e      	bne.n	8002bfc <HAL_SPI_TransmitReceive+0x22c>
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002cc2:	b29b      	uxth	r3, r3
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d199      	bne.n	8002bfc <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002cc8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002cca:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002ccc:	68f8      	ldr	r0, [r7, #12]
 8002cce:	f000 f8b7 	bl	8002e40 <SPI_EndRxTxTransaction>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d006      	beq.n	8002ce6 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	2220      	movs	r2, #32
 8002ce2:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8002ce4:	e01a      	b.n	8002d1c <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d10a      	bne.n	8002d04 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002cee:	2300      	movs	r3, #0
 8002cf0:	617b      	str	r3, [r7, #20]
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	68db      	ldr	r3, [r3, #12]
 8002cf8:	617b      	str	r3, [r7, #20]
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	617b      	str	r3, [r7, #20]
 8002d02:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d003      	beq.n	8002d14 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002d12:	e003      	b.n	8002d1c <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	2201      	movs	r2, #1
 8002d18:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8002d24:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	3730      	adds	r7, #48	@ 0x30
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}

08002d30 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b088      	sub	sp, #32
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	60f8      	str	r0, [r7, #12]
 8002d38:	60b9      	str	r1, [r7, #8]
 8002d3a:	603b      	str	r3, [r7, #0]
 8002d3c:	4613      	mov	r3, r2
 8002d3e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002d40:	f7fe fbc6 	bl	80014d0 <HAL_GetTick>
 8002d44:	4602      	mov	r2, r0
 8002d46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d48:	1a9b      	subs	r3, r3, r2
 8002d4a:	683a      	ldr	r2, [r7, #0]
 8002d4c:	4413      	add	r3, r2
 8002d4e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002d50:	f7fe fbbe 	bl	80014d0 <HAL_GetTick>
 8002d54:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002d56:	4b39      	ldr	r3, [pc, #228]	@ (8002e3c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	015b      	lsls	r3, r3, #5
 8002d5c:	0d1b      	lsrs	r3, r3, #20
 8002d5e:	69fa      	ldr	r2, [r7, #28]
 8002d60:	fb02 f303 	mul.w	r3, r2, r3
 8002d64:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002d66:	e054      	b.n	8002e12 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d6e:	d050      	beq.n	8002e12 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002d70:	f7fe fbae 	bl	80014d0 <HAL_GetTick>
 8002d74:	4602      	mov	r2, r0
 8002d76:	69bb      	ldr	r3, [r7, #24]
 8002d78:	1ad3      	subs	r3, r2, r3
 8002d7a:	69fa      	ldr	r2, [r7, #28]
 8002d7c:	429a      	cmp	r2, r3
 8002d7e:	d902      	bls.n	8002d86 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002d80:	69fb      	ldr	r3, [r7, #28]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d13d      	bne.n	8002e02 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	685a      	ldr	r2, [r3, #4]
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002d94:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002d9e:	d111      	bne.n	8002dc4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002da8:	d004      	beq.n	8002db4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002db2:	d107      	bne.n	8002dc4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002dc2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dc8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002dcc:	d10f      	bne.n	8002dee <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	681a      	ldr	r2, [r3, #0]
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002ddc:	601a      	str	r2, [r3, #0]
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002dec:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	2201      	movs	r2, #1
 8002df2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8002dfe:	2303      	movs	r3, #3
 8002e00:	e017      	b.n	8002e32 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d101      	bne.n	8002e0c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	3b01      	subs	r3, #1
 8002e10:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	689a      	ldr	r2, [r3, #8]
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	4013      	ands	r3, r2
 8002e1c:	68ba      	ldr	r2, [r7, #8]
 8002e1e:	429a      	cmp	r2, r3
 8002e20:	bf0c      	ite	eq
 8002e22:	2301      	moveq	r3, #1
 8002e24:	2300      	movne	r3, #0
 8002e26:	b2db      	uxtb	r3, r3
 8002e28:	461a      	mov	r2, r3
 8002e2a:	79fb      	ldrb	r3, [r7, #7]
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	d19b      	bne.n	8002d68 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002e30:	2300      	movs	r3, #0
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	3720      	adds	r7, #32
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}
 8002e3a:	bf00      	nop
 8002e3c:	20000000 	.word	0x20000000

08002e40 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b088      	sub	sp, #32
 8002e44:	af02      	add	r7, sp, #8
 8002e46:	60f8      	str	r0, [r7, #12]
 8002e48:	60b9      	str	r1, [r7, #8]
 8002e4a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	9300      	str	r3, [sp, #0]
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	2201      	movs	r2, #1
 8002e54:	2102      	movs	r1, #2
 8002e56:	68f8      	ldr	r0, [r7, #12]
 8002e58:	f7ff ff6a 	bl	8002d30 <SPI_WaitFlagStateUntilTimeout>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d007      	beq.n	8002e72 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e66:	f043 0220 	orr.w	r2, r3, #32
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002e6e:	2303      	movs	r3, #3
 8002e70:	e032      	b.n	8002ed8 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002e72:	4b1b      	ldr	r3, [pc, #108]	@ (8002ee0 <SPI_EndRxTxTransaction+0xa0>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a1b      	ldr	r2, [pc, #108]	@ (8002ee4 <SPI_EndRxTxTransaction+0xa4>)
 8002e78:	fba2 2303 	umull	r2, r3, r2, r3
 8002e7c:	0d5b      	lsrs	r3, r3, #21
 8002e7e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002e82:	fb02 f303 	mul.w	r3, r2, r3
 8002e86:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002e90:	d112      	bne.n	8002eb8 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	9300      	str	r3, [sp, #0]
 8002e96:	68bb      	ldr	r3, [r7, #8]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	2180      	movs	r1, #128	@ 0x80
 8002e9c:	68f8      	ldr	r0, [r7, #12]
 8002e9e:	f7ff ff47 	bl	8002d30 <SPI_WaitFlagStateUntilTimeout>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d016      	beq.n	8002ed6 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002eac:	f043 0220 	orr.w	r2, r3, #32
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8002eb4:	2303      	movs	r3, #3
 8002eb6:	e00f      	b.n	8002ed8 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d00a      	beq.n	8002ed4 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	3b01      	subs	r3, #1
 8002ec2:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ece:	2b80      	cmp	r3, #128	@ 0x80
 8002ed0:	d0f2      	beq.n	8002eb8 <SPI_EndRxTxTransaction+0x78>
 8002ed2:	e000      	b.n	8002ed6 <SPI_EndRxTxTransaction+0x96>
        break;
 8002ed4:	bf00      	nop
  }

  return HAL_OK;
 8002ed6:	2300      	movs	r3, #0
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	3718      	adds	r7, #24
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}
 8002ee0:	20000000 	.word	0x20000000
 8002ee4:	165e9f81 	.word	0x165e9f81

08002ee8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b082      	sub	sp, #8
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d101      	bne.n	8002efa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e041      	b.n	8002f7e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f00:	b2db      	uxtb	r3, r3
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d106      	bne.n	8002f14 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f0e:	6878      	ldr	r0, [r7, #4]
 8002f10:	f7fe f94c 	bl	80011ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2202      	movs	r2, #2
 8002f18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681a      	ldr	r2, [r3, #0]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	3304      	adds	r3, #4
 8002f24:	4619      	mov	r1, r3
 8002f26:	4610      	mov	r0, r2
 8002f28:	f000 fae6 	bl	80034f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2201      	movs	r2, #1
 8002f30:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2201      	movs	r2, #1
 8002f38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2201      	movs	r2, #1
 8002f40:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2201      	movs	r2, #1
 8002f48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2201      	movs	r2, #1
 8002f50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2201      	movs	r2, #1
 8002f58:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2201      	movs	r2, #1
 8002f60:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2201      	movs	r2, #1
 8002f68:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2201      	movs	r2, #1
 8002f70:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2201      	movs	r2, #1
 8002f78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002f7c:	2300      	movs	r3, #0
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	3708      	adds	r7, #8
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}
	...

08002f88 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b085      	sub	sp, #20
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f96:	b2db      	uxtb	r3, r3
 8002f98:	2b01      	cmp	r3, #1
 8002f9a:	d001      	beq.n	8002fa0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	e046      	b.n	800302e <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2202      	movs	r2, #2
 8002fa4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a23      	ldr	r2, [pc, #140]	@ (800303c <HAL_TIM_Base_Start+0xb4>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d022      	beq.n	8002ff8 <HAL_TIM_Base_Start+0x70>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002fba:	d01d      	beq.n	8002ff8 <HAL_TIM_Base_Start+0x70>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a1f      	ldr	r2, [pc, #124]	@ (8003040 <HAL_TIM_Base_Start+0xb8>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d018      	beq.n	8002ff8 <HAL_TIM_Base_Start+0x70>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a1e      	ldr	r2, [pc, #120]	@ (8003044 <HAL_TIM_Base_Start+0xbc>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d013      	beq.n	8002ff8 <HAL_TIM_Base_Start+0x70>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a1c      	ldr	r2, [pc, #112]	@ (8003048 <HAL_TIM_Base_Start+0xc0>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d00e      	beq.n	8002ff8 <HAL_TIM_Base_Start+0x70>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a1b      	ldr	r2, [pc, #108]	@ (800304c <HAL_TIM_Base_Start+0xc4>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d009      	beq.n	8002ff8 <HAL_TIM_Base_Start+0x70>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a19      	ldr	r2, [pc, #100]	@ (8003050 <HAL_TIM_Base_Start+0xc8>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d004      	beq.n	8002ff8 <HAL_TIM_Base_Start+0x70>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a18      	ldr	r2, [pc, #96]	@ (8003054 <HAL_TIM_Base_Start+0xcc>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d111      	bne.n	800301c <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	f003 0307 	and.w	r3, r3, #7
 8003002:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2b06      	cmp	r3, #6
 8003008:	d010      	beq.n	800302c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f042 0201 	orr.w	r2, r2, #1
 8003018:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800301a:	e007      	b.n	800302c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	681a      	ldr	r2, [r3, #0]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f042 0201 	orr.w	r2, r2, #1
 800302a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800302c:	2300      	movs	r3, #0
}
 800302e:	4618      	mov	r0, r3
 8003030:	3714      	adds	r7, #20
 8003032:	46bd      	mov	sp, r7
 8003034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003038:	4770      	bx	lr
 800303a:	bf00      	nop
 800303c:	40010000 	.word	0x40010000
 8003040:	40000400 	.word	0x40000400
 8003044:	40000800 	.word	0x40000800
 8003048:	40000c00 	.word	0x40000c00
 800304c:	40010400 	.word	0x40010400
 8003050:	40014000 	.word	0x40014000
 8003054:	40001800 	.word	0x40001800

08003058 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003058:	b480      	push	{r7}
 800305a:	b085      	sub	sp, #20
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003066:	b2db      	uxtb	r3, r3
 8003068:	2b01      	cmp	r3, #1
 800306a:	d001      	beq.n	8003070 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	e04e      	b.n	800310e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2202      	movs	r2, #2
 8003074:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	68da      	ldr	r2, [r3, #12]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f042 0201 	orr.w	r2, r2, #1
 8003086:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a23      	ldr	r2, [pc, #140]	@ (800311c <HAL_TIM_Base_Start_IT+0xc4>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d022      	beq.n	80030d8 <HAL_TIM_Base_Start_IT+0x80>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800309a:	d01d      	beq.n	80030d8 <HAL_TIM_Base_Start_IT+0x80>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a1f      	ldr	r2, [pc, #124]	@ (8003120 <HAL_TIM_Base_Start_IT+0xc8>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d018      	beq.n	80030d8 <HAL_TIM_Base_Start_IT+0x80>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a1e      	ldr	r2, [pc, #120]	@ (8003124 <HAL_TIM_Base_Start_IT+0xcc>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d013      	beq.n	80030d8 <HAL_TIM_Base_Start_IT+0x80>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a1c      	ldr	r2, [pc, #112]	@ (8003128 <HAL_TIM_Base_Start_IT+0xd0>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d00e      	beq.n	80030d8 <HAL_TIM_Base_Start_IT+0x80>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a1b      	ldr	r2, [pc, #108]	@ (800312c <HAL_TIM_Base_Start_IT+0xd4>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d009      	beq.n	80030d8 <HAL_TIM_Base_Start_IT+0x80>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a19      	ldr	r2, [pc, #100]	@ (8003130 <HAL_TIM_Base_Start_IT+0xd8>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d004      	beq.n	80030d8 <HAL_TIM_Base_Start_IT+0x80>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a18      	ldr	r2, [pc, #96]	@ (8003134 <HAL_TIM_Base_Start_IT+0xdc>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d111      	bne.n	80030fc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	f003 0307 	and.w	r3, r3, #7
 80030e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	2b06      	cmp	r3, #6
 80030e8:	d010      	beq.n	800310c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	681a      	ldr	r2, [r3, #0]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f042 0201 	orr.w	r2, r2, #1
 80030f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030fa:	e007      	b.n	800310c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	681a      	ldr	r2, [r3, #0]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f042 0201 	orr.w	r2, r2, #1
 800310a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800310c:	2300      	movs	r3, #0
}
 800310e:	4618      	mov	r0, r3
 8003110:	3714      	adds	r7, #20
 8003112:	46bd      	mov	sp, r7
 8003114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003118:	4770      	bx	lr
 800311a:	bf00      	nop
 800311c:	40010000 	.word	0x40010000
 8003120:	40000400 	.word	0x40000400
 8003124:	40000800 	.word	0x40000800
 8003128:	40000c00 	.word	0x40000c00
 800312c:	40010400 	.word	0x40010400
 8003130:	40014000 	.word	0x40014000
 8003134:	40001800 	.word	0x40001800

08003138 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b084      	sub	sp, #16
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	68db      	ldr	r3, [r3, #12]
 8003146:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	691b      	ldr	r3, [r3, #16]
 800314e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	f003 0302 	and.w	r3, r3, #2
 8003156:	2b00      	cmp	r3, #0
 8003158:	d020      	beq.n	800319c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	f003 0302 	and.w	r3, r3, #2
 8003160:	2b00      	cmp	r3, #0
 8003162:	d01b      	beq.n	800319c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f06f 0202 	mvn.w	r2, #2
 800316c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2201      	movs	r2, #1
 8003172:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	699b      	ldr	r3, [r3, #24]
 800317a:	f003 0303 	and.w	r3, r3, #3
 800317e:	2b00      	cmp	r3, #0
 8003180:	d003      	beq.n	800318a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003182:	6878      	ldr	r0, [r7, #4]
 8003184:	f000 f999 	bl	80034ba <HAL_TIM_IC_CaptureCallback>
 8003188:	e005      	b.n	8003196 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800318a:	6878      	ldr	r0, [r7, #4]
 800318c:	f000 f98b 	bl	80034a6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003190:	6878      	ldr	r0, [r7, #4]
 8003192:	f000 f99c 	bl	80034ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2200      	movs	r2, #0
 800319a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	f003 0304 	and.w	r3, r3, #4
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d020      	beq.n	80031e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	f003 0304 	and.w	r3, r3, #4
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d01b      	beq.n	80031e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f06f 0204 	mvn.w	r2, #4
 80031b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2202      	movs	r2, #2
 80031be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	699b      	ldr	r3, [r3, #24]
 80031c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d003      	beq.n	80031d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031ce:	6878      	ldr	r0, [r7, #4]
 80031d0:	f000 f973 	bl	80034ba <HAL_TIM_IC_CaptureCallback>
 80031d4:	e005      	b.n	80031e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031d6:	6878      	ldr	r0, [r7, #4]
 80031d8:	f000 f965 	bl	80034a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031dc:	6878      	ldr	r0, [r7, #4]
 80031de:	f000 f976 	bl	80034ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2200      	movs	r2, #0
 80031e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	f003 0308 	and.w	r3, r3, #8
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d020      	beq.n	8003234 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	f003 0308 	and.w	r3, r3, #8
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d01b      	beq.n	8003234 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f06f 0208 	mvn.w	r2, #8
 8003204:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2204      	movs	r2, #4
 800320a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	69db      	ldr	r3, [r3, #28]
 8003212:	f003 0303 	and.w	r3, r3, #3
 8003216:	2b00      	cmp	r3, #0
 8003218:	d003      	beq.n	8003222 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800321a:	6878      	ldr	r0, [r7, #4]
 800321c:	f000 f94d 	bl	80034ba <HAL_TIM_IC_CaptureCallback>
 8003220:	e005      	b.n	800322e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	f000 f93f 	bl	80034a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003228:	6878      	ldr	r0, [r7, #4]
 800322a:	f000 f950 	bl	80034ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2200      	movs	r2, #0
 8003232:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	f003 0310 	and.w	r3, r3, #16
 800323a:	2b00      	cmp	r3, #0
 800323c:	d020      	beq.n	8003280 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	f003 0310 	and.w	r3, r3, #16
 8003244:	2b00      	cmp	r3, #0
 8003246:	d01b      	beq.n	8003280 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f06f 0210 	mvn.w	r2, #16
 8003250:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2208      	movs	r2, #8
 8003256:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	69db      	ldr	r3, [r3, #28]
 800325e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003262:	2b00      	cmp	r3, #0
 8003264:	d003      	beq.n	800326e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003266:	6878      	ldr	r0, [r7, #4]
 8003268:	f000 f927 	bl	80034ba <HAL_TIM_IC_CaptureCallback>
 800326c:	e005      	b.n	800327a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800326e:	6878      	ldr	r0, [r7, #4]
 8003270:	f000 f919 	bl	80034a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003274:	6878      	ldr	r0, [r7, #4]
 8003276:	f000 f92a 	bl	80034ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2200      	movs	r2, #0
 800327e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	f003 0301 	and.w	r3, r3, #1
 8003286:	2b00      	cmp	r3, #0
 8003288:	d00c      	beq.n	80032a4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	f003 0301 	and.w	r3, r3, #1
 8003290:	2b00      	cmp	r3, #0
 8003292:	d007      	beq.n	80032a4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f06f 0201 	mvn.w	r2, #1
 800329c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	f7fd ffc2 	bl	8001228 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d00c      	beq.n	80032c8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d007      	beq.n	80032c8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80032c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80032c2:	6878      	ldr	r0, [r7, #4]
 80032c4:	f000 fae4 	bl	8003890 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d00c      	beq.n	80032ec <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d007      	beq.n	80032ec <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80032e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80032e6:	6878      	ldr	r0, [r7, #4]
 80032e8:	f000 f8fb 	bl	80034e2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	f003 0320 	and.w	r3, r3, #32
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d00c      	beq.n	8003310 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	f003 0320 	and.w	r3, r3, #32
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d007      	beq.n	8003310 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f06f 0220 	mvn.w	r2, #32
 8003308:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800330a:	6878      	ldr	r0, [r7, #4]
 800330c:	f000 fab6 	bl	800387c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003310:	bf00      	nop
 8003312:	3710      	adds	r7, #16
 8003314:	46bd      	mov	sp, r7
 8003316:	bd80      	pop	{r7, pc}

08003318 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b084      	sub	sp, #16
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
 8003320:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003322:	2300      	movs	r3, #0
 8003324:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800332c:	2b01      	cmp	r3, #1
 800332e:	d101      	bne.n	8003334 <HAL_TIM_ConfigClockSource+0x1c>
 8003330:	2302      	movs	r3, #2
 8003332:	e0b4      	b.n	800349e <HAL_TIM_ConfigClockSource+0x186>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2201      	movs	r2, #1
 8003338:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2202      	movs	r2, #2
 8003340:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003352:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800335a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	68ba      	ldr	r2, [r7, #8]
 8003362:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800336c:	d03e      	beq.n	80033ec <HAL_TIM_ConfigClockSource+0xd4>
 800336e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003372:	f200 8087 	bhi.w	8003484 <HAL_TIM_ConfigClockSource+0x16c>
 8003376:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800337a:	f000 8086 	beq.w	800348a <HAL_TIM_ConfigClockSource+0x172>
 800337e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003382:	d87f      	bhi.n	8003484 <HAL_TIM_ConfigClockSource+0x16c>
 8003384:	2b70      	cmp	r3, #112	@ 0x70
 8003386:	d01a      	beq.n	80033be <HAL_TIM_ConfigClockSource+0xa6>
 8003388:	2b70      	cmp	r3, #112	@ 0x70
 800338a:	d87b      	bhi.n	8003484 <HAL_TIM_ConfigClockSource+0x16c>
 800338c:	2b60      	cmp	r3, #96	@ 0x60
 800338e:	d050      	beq.n	8003432 <HAL_TIM_ConfigClockSource+0x11a>
 8003390:	2b60      	cmp	r3, #96	@ 0x60
 8003392:	d877      	bhi.n	8003484 <HAL_TIM_ConfigClockSource+0x16c>
 8003394:	2b50      	cmp	r3, #80	@ 0x50
 8003396:	d03c      	beq.n	8003412 <HAL_TIM_ConfigClockSource+0xfa>
 8003398:	2b50      	cmp	r3, #80	@ 0x50
 800339a:	d873      	bhi.n	8003484 <HAL_TIM_ConfigClockSource+0x16c>
 800339c:	2b40      	cmp	r3, #64	@ 0x40
 800339e:	d058      	beq.n	8003452 <HAL_TIM_ConfigClockSource+0x13a>
 80033a0:	2b40      	cmp	r3, #64	@ 0x40
 80033a2:	d86f      	bhi.n	8003484 <HAL_TIM_ConfigClockSource+0x16c>
 80033a4:	2b30      	cmp	r3, #48	@ 0x30
 80033a6:	d064      	beq.n	8003472 <HAL_TIM_ConfigClockSource+0x15a>
 80033a8:	2b30      	cmp	r3, #48	@ 0x30
 80033aa:	d86b      	bhi.n	8003484 <HAL_TIM_ConfigClockSource+0x16c>
 80033ac:	2b20      	cmp	r3, #32
 80033ae:	d060      	beq.n	8003472 <HAL_TIM_ConfigClockSource+0x15a>
 80033b0:	2b20      	cmp	r3, #32
 80033b2:	d867      	bhi.n	8003484 <HAL_TIM_ConfigClockSource+0x16c>
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d05c      	beq.n	8003472 <HAL_TIM_ConfigClockSource+0x15a>
 80033b8:	2b10      	cmp	r3, #16
 80033ba:	d05a      	beq.n	8003472 <HAL_TIM_ConfigClockSource+0x15a>
 80033bc:	e062      	b.n	8003484 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80033ce:	f000 f9b9 	bl	8003744 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	689b      	ldr	r3, [r3, #8]
 80033d8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80033e0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	68ba      	ldr	r2, [r7, #8]
 80033e8:	609a      	str	r2, [r3, #8]
      break;
 80033ea:	e04f      	b.n	800348c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80033fc:	f000 f9a2 	bl	8003744 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	689a      	ldr	r2, [r3, #8]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800340e:	609a      	str	r2, [r3, #8]
      break;
 8003410:	e03c      	b.n	800348c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800341e:	461a      	mov	r2, r3
 8003420:	f000 f916 	bl	8003650 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	2150      	movs	r1, #80	@ 0x50
 800342a:	4618      	mov	r0, r3
 800342c:	f000 f96f 	bl	800370e <TIM_ITRx_SetConfig>
      break;
 8003430:	e02c      	b.n	800348c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800343e:	461a      	mov	r2, r3
 8003440:	f000 f935 	bl	80036ae <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	2160      	movs	r1, #96	@ 0x60
 800344a:	4618      	mov	r0, r3
 800344c:	f000 f95f 	bl	800370e <TIM_ITRx_SetConfig>
      break;
 8003450:	e01c      	b.n	800348c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800345e:	461a      	mov	r2, r3
 8003460:	f000 f8f6 	bl	8003650 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	2140      	movs	r1, #64	@ 0x40
 800346a:	4618      	mov	r0, r3
 800346c:	f000 f94f 	bl	800370e <TIM_ITRx_SetConfig>
      break;
 8003470:	e00c      	b.n	800348c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681a      	ldr	r2, [r3, #0]
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4619      	mov	r1, r3
 800347c:	4610      	mov	r0, r2
 800347e:	f000 f946 	bl	800370e <TIM_ITRx_SetConfig>
      break;
 8003482:	e003      	b.n	800348c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003484:	2301      	movs	r3, #1
 8003486:	73fb      	strb	r3, [r7, #15]
      break;
 8003488:	e000      	b.n	800348c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800348a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2201      	movs	r2, #1
 8003490:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2200      	movs	r2, #0
 8003498:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800349c:	7bfb      	ldrb	r3, [r7, #15]
}
 800349e:	4618      	mov	r0, r3
 80034a0:	3710      	adds	r7, #16
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}

080034a6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80034a6:	b480      	push	{r7}
 80034a8:	b083      	sub	sp, #12
 80034aa:	af00      	add	r7, sp, #0
 80034ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80034ae:	bf00      	nop
 80034b0:	370c      	adds	r7, #12
 80034b2:	46bd      	mov	sp, r7
 80034b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b8:	4770      	bx	lr

080034ba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80034ba:	b480      	push	{r7}
 80034bc:	b083      	sub	sp, #12
 80034be:	af00      	add	r7, sp, #0
 80034c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80034c2:	bf00      	nop
 80034c4:	370c      	adds	r7, #12
 80034c6:	46bd      	mov	sp, r7
 80034c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034cc:	4770      	bx	lr

080034ce <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80034ce:	b480      	push	{r7}
 80034d0:	b083      	sub	sp, #12
 80034d2:	af00      	add	r7, sp, #0
 80034d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80034d6:	bf00      	nop
 80034d8:	370c      	adds	r7, #12
 80034da:	46bd      	mov	sp, r7
 80034dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e0:	4770      	bx	lr

080034e2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80034e2:	b480      	push	{r7}
 80034e4:	b083      	sub	sp, #12
 80034e6:	af00      	add	r7, sp, #0
 80034e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80034ea:	bf00      	nop
 80034ec:	370c      	adds	r7, #12
 80034ee:	46bd      	mov	sp, r7
 80034f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f4:	4770      	bx	lr
	...

080034f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b085      	sub	sp, #20
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
 8003500:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	4a46      	ldr	r2, [pc, #280]	@ (8003624 <TIM_Base_SetConfig+0x12c>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d013      	beq.n	8003538 <TIM_Base_SetConfig+0x40>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003516:	d00f      	beq.n	8003538 <TIM_Base_SetConfig+0x40>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	4a43      	ldr	r2, [pc, #268]	@ (8003628 <TIM_Base_SetConfig+0x130>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d00b      	beq.n	8003538 <TIM_Base_SetConfig+0x40>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	4a42      	ldr	r2, [pc, #264]	@ (800362c <TIM_Base_SetConfig+0x134>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d007      	beq.n	8003538 <TIM_Base_SetConfig+0x40>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	4a41      	ldr	r2, [pc, #260]	@ (8003630 <TIM_Base_SetConfig+0x138>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d003      	beq.n	8003538 <TIM_Base_SetConfig+0x40>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	4a40      	ldr	r2, [pc, #256]	@ (8003634 <TIM_Base_SetConfig+0x13c>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d108      	bne.n	800354a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800353e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	68fa      	ldr	r2, [r7, #12]
 8003546:	4313      	orrs	r3, r2
 8003548:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	4a35      	ldr	r2, [pc, #212]	@ (8003624 <TIM_Base_SetConfig+0x12c>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d02b      	beq.n	80035aa <TIM_Base_SetConfig+0xb2>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003558:	d027      	beq.n	80035aa <TIM_Base_SetConfig+0xb2>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	4a32      	ldr	r2, [pc, #200]	@ (8003628 <TIM_Base_SetConfig+0x130>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d023      	beq.n	80035aa <TIM_Base_SetConfig+0xb2>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	4a31      	ldr	r2, [pc, #196]	@ (800362c <TIM_Base_SetConfig+0x134>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d01f      	beq.n	80035aa <TIM_Base_SetConfig+0xb2>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	4a30      	ldr	r2, [pc, #192]	@ (8003630 <TIM_Base_SetConfig+0x138>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d01b      	beq.n	80035aa <TIM_Base_SetConfig+0xb2>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	4a2f      	ldr	r2, [pc, #188]	@ (8003634 <TIM_Base_SetConfig+0x13c>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d017      	beq.n	80035aa <TIM_Base_SetConfig+0xb2>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	4a2e      	ldr	r2, [pc, #184]	@ (8003638 <TIM_Base_SetConfig+0x140>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d013      	beq.n	80035aa <TIM_Base_SetConfig+0xb2>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	4a2d      	ldr	r2, [pc, #180]	@ (800363c <TIM_Base_SetConfig+0x144>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d00f      	beq.n	80035aa <TIM_Base_SetConfig+0xb2>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	4a2c      	ldr	r2, [pc, #176]	@ (8003640 <TIM_Base_SetConfig+0x148>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d00b      	beq.n	80035aa <TIM_Base_SetConfig+0xb2>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	4a2b      	ldr	r2, [pc, #172]	@ (8003644 <TIM_Base_SetConfig+0x14c>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d007      	beq.n	80035aa <TIM_Base_SetConfig+0xb2>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	4a2a      	ldr	r2, [pc, #168]	@ (8003648 <TIM_Base_SetConfig+0x150>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d003      	beq.n	80035aa <TIM_Base_SetConfig+0xb2>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	4a29      	ldr	r2, [pc, #164]	@ (800364c <TIM_Base_SetConfig+0x154>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d108      	bne.n	80035bc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80035b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	68db      	ldr	r3, [r3, #12]
 80035b6:	68fa      	ldr	r2, [r7, #12]
 80035b8:	4313      	orrs	r3, r2
 80035ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	695b      	ldr	r3, [r3, #20]
 80035c6:	4313      	orrs	r3, r2
 80035c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	68fa      	ldr	r2, [r7, #12]
 80035ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	689a      	ldr	r2, [r3, #8]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	681a      	ldr	r2, [r3, #0]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	4a10      	ldr	r2, [pc, #64]	@ (8003624 <TIM_Base_SetConfig+0x12c>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d003      	beq.n	80035f0 <TIM_Base_SetConfig+0xf8>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	4a12      	ldr	r2, [pc, #72]	@ (8003634 <TIM_Base_SetConfig+0x13c>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d103      	bne.n	80035f8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	691a      	ldr	r2, [r3, #16]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2201      	movs	r2, #1
 80035fc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	691b      	ldr	r3, [r3, #16]
 8003602:	f003 0301 	and.w	r3, r3, #1
 8003606:	2b01      	cmp	r3, #1
 8003608:	d105      	bne.n	8003616 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	691b      	ldr	r3, [r3, #16]
 800360e:	f023 0201 	bic.w	r2, r3, #1
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	611a      	str	r2, [r3, #16]
  }
}
 8003616:	bf00      	nop
 8003618:	3714      	adds	r7, #20
 800361a:	46bd      	mov	sp, r7
 800361c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003620:	4770      	bx	lr
 8003622:	bf00      	nop
 8003624:	40010000 	.word	0x40010000
 8003628:	40000400 	.word	0x40000400
 800362c:	40000800 	.word	0x40000800
 8003630:	40000c00 	.word	0x40000c00
 8003634:	40010400 	.word	0x40010400
 8003638:	40014000 	.word	0x40014000
 800363c:	40014400 	.word	0x40014400
 8003640:	40014800 	.word	0x40014800
 8003644:	40001800 	.word	0x40001800
 8003648:	40001c00 	.word	0x40001c00
 800364c:	40002000 	.word	0x40002000

08003650 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003650:	b480      	push	{r7}
 8003652:	b087      	sub	sp, #28
 8003654:	af00      	add	r7, sp, #0
 8003656:	60f8      	str	r0, [r7, #12]
 8003658:	60b9      	str	r1, [r7, #8]
 800365a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	6a1b      	ldr	r3, [r3, #32]
 8003660:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	6a1b      	ldr	r3, [r3, #32]
 8003666:	f023 0201 	bic.w	r2, r3, #1
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	699b      	ldr	r3, [r3, #24]
 8003672:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800367a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	011b      	lsls	r3, r3, #4
 8003680:	693a      	ldr	r2, [r7, #16]
 8003682:	4313      	orrs	r3, r2
 8003684:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	f023 030a 	bic.w	r3, r3, #10
 800368c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800368e:	697a      	ldr	r2, [r7, #20]
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	4313      	orrs	r3, r2
 8003694:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	693a      	ldr	r2, [r7, #16]
 800369a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	697a      	ldr	r2, [r7, #20]
 80036a0:	621a      	str	r2, [r3, #32]
}
 80036a2:	bf00      	nop
 80036a4:	371c      	adds	r7, #28
 80036a6:	46bd      	mov	sp, r7
 80036a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ac:	4770      	bx	lr

080036ae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80036ae:	b480      	push	{r7}
 80036b0:	b087      	sub	sp, #28
 80036b2:	af00      	add	r7, sp, #0
 80036b4:	60f8      	str	r0, [r7, #12]
 80036b6:	60b9      	str	r1, [r7, #8]
 80036b8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	6a1b      	ldr	r3, [r3, #32]
 80036be:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	6a1b      	ldr	r3, [r3, #32]
 80036c4:	f023 0210 	bic.w	r2, r3, #16
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	699b      	ldr	r3, [r3, #24]
 80036d0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80036d8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	031b      	lsls	r3, r3, #12
 80036de:	693a      	ldr	r2, [r7, #16]
 80036e0:	4313      	orrs	r3, r2
 80036e2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80036e4:	697b      	ldr	r3, [r7, #20]
 80036e6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80036ea:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	011b      	lsls	r3, r3, #4
 80036f0:	697a      	ldr	r2, [r7, #20]
 80036f2:	4313      	orrs	r3, r2
 80036f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	693a      	ldr	r2, [r7, #16]
 80036fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	697a      	ldr	r2, [r7, #20]
 8003700:	621a      	str	r2, [r3, #32]
}
 8003702:	bf00      	nop
 8003704:	371c      	adds	r7, #28
 8003706:	46bd      	mov	sp, r7
 8003708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370c:	4770      	bx	lr

0800370e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800370e:	b480      	push	{r7}
 8003710:	b085      	sub	sp, #20
 8003712:	af00      	add	r7, sp, #0
 8003714:	6078      	str	r0, [r7, #4]
 8003716:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003724:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003726:	683a      	ldr	r2, [r7, #0]
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	4313      	orrs	r3, r2
 800372c:	f043 0307 	orr.w	r3, r3, #7
 8003730:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	68fa      	ldr	r2, [r7, #12]
 8003736:	609a      	str	r2, [r3, #8]
}
 8003738:	bf00      	nop
 800373a:	3714      	adds	r7, #20
 800373c:	46bd      	mov	sp, r7
 800373e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003742:	4770      	bx	lr

08003744 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003744:	b480      	push	{r7}
 8003746:	b087      	sub	sp, #28
 8003748:	af00      	add	r7, sp, #0
 800374a:	60f8      	str	r0, [r7, #12]
 800374c:	60b9      	str	r1, [r7, #8]
 800374e:	607a      	str	r2, [r7, #4]
 8003750:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003758:	697b      	ldr	r3, [r7, #20]
 800375a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800375e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	021a      	lsls	r2, r3, #8
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	431a      	orrs	r2, r3
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	4313      	orrs	r3, r2
 800376c:	697a      	ldr	r2, [r7, #20]
 800376e:	4313      	orrs	r3, r2
 8003770:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	697a      	ldr	r2, [r7, #20]
 8003776:	609a      	str	r2, [r3, #8]
}
 8003778:	bf00      	nop
 800377a:	371c      	adds	r7, #28
 800377c:	46bd      	mov	sp, r7
 800377e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003782:	4770      	bx	lr

08003784 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003784:	b480      	push	{r7}
 8003786:	b085      	sub	sp, #20
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
 800378c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003794:	2b01      	cmp	r3, #1
 8003796:	d101      	bne.n	800379c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003798:	2302      	movs	r3, #2
 800379a:	e05a      	b.n	8003852 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2201      	movs	r2, #1
 80037a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2202      	movs	r2, #2
 80037a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80037c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	68fa      	ldr	r2, [r7, #12]
 80037ca:	4313      	orrs	r3, r2
 80037cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	68fa      	ldr	r2, [r7, #12]
 80037d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a21      	ldr	r2, [pc, #132]	@ (8003860 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d022      	beq.n	8003826 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037e8:	d01d      	beq.n	8003826 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a1d      	ldr	r2, [pc, #116]	@ (8003864 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d018      	beq.n	8003826 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a1b      	ldr	r2, [pc, #108]	@ (8003868 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d013      	beq.n	8003826 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a1a      	ldr	r2, [pc, #104]	@ (800386c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d00e      	beq.n	8003826 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a18      	ldr	r2, [pc, #96]	@ (8003870 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d009      	beq.n	8003826 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a17      	ldr	r2, [pc, #92]	@ (8003874 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d004      	beq.n	8003826 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a15      	ldr	r2, [pc, #84]	@ (8003878 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d10c      	bne.n	8003840 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800382c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	68ba      	ldr	r2, [r7, #8]
 8003834:	4313      	orrs	r3, r2
 8003836:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	68ba      	ldr	r2, [r7, #8]
 800383e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2201      	movs	r2, #1
 8003844:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2200      	movs	r2, #0
 800384c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003850:	2300      	movs	r3, #0
}
 8003852:	4618      	mov	r0, r3
 8003854:	3714      	adds	r7, #20
 8003856:	46bd      	mov	sp, r7
 8003858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385c:	4770      	bx	lr
 800385e:	bf00      	nop
 8003860:	40010000 	.word	0x40010000
 8003864:	40000400 	.word	0x40000400
 8003868:	40000800 	.word	0x40000800
 800386c:	40000c00 	.word	0x40000c00
 8003870:	40010400 	.word	0x40010400
 8003874:	40014000 	.word	0x40014000
 8003878:	40001800 	.word	0x40001800

0800387c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800387c:	b480      	push	{r7}
 800387e:	b083      	sub	sp, #12
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003884:	bf00      	nop
 8003886:	370c      	adds	r7, #12
 8003888:	46bd      	mov	sp, r7
 800388a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388e:	4770      	bx	lr

08003890 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003890:	b480      	push	{r7}
 8003892:	b083      	sub	sp, #12
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003898:	bf00      	nop
 800389a:	370c      	adds	r7, #12
 800389c:	46bd      	mov	sp, r7
 800389e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a2:	4770      	bx	lr

080038a4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b082      	sub	sp, #8
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d101      	bne.n	80038b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	e042      	b.n	800393c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80038bc:	b2db      	uxtb	r3, r3
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d106      	bne.n	80038d0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2200      	movs	r2, #0
 80038c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	f7fd fd28 	bl	8001320 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2224      	movs	r2, #36	@ 0x24
 80038d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	68da      	ldr	r2, [r3, #12]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80038e6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80038e8:	6878      	ldr	r0, [r7, #4]
 80038ea:	f000 f82b 	bl	8003944 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	691a      	ldr	r2, [r3, #16]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80038fc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	695a      	ldr	r2, [r3, #20]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800390c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	68da      	ldr	r2, [r3, #12]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800391c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2200      	movs	r2, #0
 8003922:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2220      	movs	r2, #32
 8003928:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2220      	movs	r2, #32
 8003930:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2200      	movs	r2, #0
 8003938:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800393a:	2300      	movs	r3, #0
}
 800393c:	4618      	mov	r0, r3
 800393e:	3708      	adds	r7, #8
 8003940:	46bd      	mov	sp, r7
 8003942:	bd80      	pop	{r7, pc}

08003944 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003944:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003948:	b0c0      	sub	sp, #256	@ 0x100
 800394a:	af00      	add	r7, sp, #0
 800394c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003950:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	691b      	ldr	r3, [r3, #16]
 8003958:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800395c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003960:	68d9      	ldr	r1, [r3, #12]
 8003962:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003966:	681a      	ldr	r2, [r3, #0]
 8003968:	ea40 0301 	orr.w	r3, r0, r1
 800396c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800396e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003972:	689a      	ldr	r2, [r3, #8]
 8003974:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003978:	691b      	ldr	r3, [r3, #16]
 800397a:	431a      	orrs	r2, r3
 800397c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003980:	695b      	ldr	r3, [r3, #20]
 8003982:	431a      	orrs	r2, r3
 8003984:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003988:	69db      	ldr	r3, [r3, #28]
 800398a:	4313      	orrs	r3, r2
 800398c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003990:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	68db      	ldr	r3, [r3, #12]
 8003998:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800399c:	f021 010c 	bic.w	r1, r1, #12
 80039a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039a4:	681a      	ldr	r2, [r3, #0]
 80039a6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80039aa:	430b      	orrs	r3, r1
 80039ac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80039ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	695b      	ldr	r3, [r3, #20]
 80039b6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80039ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039be:	6999      	ldr	r1, [r3, #24]
 80039c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039c4:	681a      	ldr	r2, [r3, #0]
 80039c6:	ea40 0301 	orr.w	r3, r0, r1
 80039ca:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80039cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039d0:	681a      	ldr	r2, [r3, #0]
 80039d2:	4b8f      	ldr	r3, [pc, #572]	@ (8003c10 <UART_SetConfig+0x2cc>)
 80039d4:	429a      	cmp	r2, r3
 80039d6:	d005      	beq.n	80039e4 <UART_SetConfig+0xa0>
 80039d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039dc:	681a      	ldr	r2, [r3, #0]
 80039de:	4b8d      	ldr	r3, [pc, #564]	@ (8003c14 <UART_SetConfig+0x2d0>)
 80039e0:	429a      	cmp	r2, r3
 80039e2:	d104      	bne.n	80039ee <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80039e4:	f7fe f946 	bl	8001c74 <HAL_RCC_GetPCLK2Freq>
 80039e8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80039ec:	e003      	b.n	80039f6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80039ee:	f7fe f92d 	bl	8001c4c <HAL_RCC_GetPCLK1Freq>
 80039f2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80039f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039fa:	69db      	ldr	r3, [r3, #28]
 80039fc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003a00:	f040 810c 	bne.w	8003c1c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003a04:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003a08:	2200      	movs	r2, #0
 8003a0a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003a0e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003a12:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003a16:	4622      	mov	r2, r4
 8003a18:	462b      	mov	r3, r5
 8003a1a:	1891      	adds	r1, r2, r2
 8003a1c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003a1e:	415b      	adcs	r3, r3
 8003a20:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003a22:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003a26:	4621      	mov	r1, r4
 8003a28:	eb12 0801 	adds.w	r8, r2, r1
 8003a2c:	4629      	mov	r1, r5
 8003a2e:	eb43 0901 	adc.w	r9, r3, r1
 8003a32:	f04f 0200 	mov.w	r2, #0
 8003a36:	f04f 0300 	mov.w	r3, #0
 8003a3a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003a3e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003a42:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003a46:	4690      	mov	r8, r2
 8003a48:	4699      	mov	r9, r3
 8003a4a:	4623      	mov	r3, r4
 8003a4c:	eb18 0303 	adds.w	r3, r8, r3
 8003a50:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003a54:	462b      	mov	r3, r5
 8003a56:	eb49 0303 	adc.w	r3, r9, r3
 8003a5a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003a5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	2200      	movs	r2, #0
 8003a66:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003a6a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003a6e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003a72:	460b      	mov	r3, r1
 8003a74:	18db      	adds	r3, r3, r3
 8003a76:	653b      	str	r3, [r7, #80]	@ 0x50
 8003a78:	4613      	mov	r3, r2
 8003a7a:	eb42 0303 	adc.w	r3, r2, r3
 8003a7e:	657b      	str	r3, [r7, #84]	@ 0x54
 8003a80:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003a84:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003a88:	f7fc ff18 	bl	80008bc <__aeabi_uldivmod>
 8003a8c:	4602      	mov	r2, r0
 8003a8e:	460b      	mov	r3, r1
 8003a90:	4b61      	ldr	r3, [pc, #388]	@ (8003c18 <UART_SetConfig+0x2d4>)
 8003a92:	fba3 2302 	umull	r2, r3, r3, r2
 8003a96:	095b      	lsrs	r3, r3, #5
 8003a98:	011c      	lsls	r4, r3, #4
 8003a9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003aa4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003aa8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003aac:	4642      	mov	r2, r8
 8003aae:	464b      	mov	r3, r9
 8003ab0:	1891      	adds	r1, r2, r2
 8003ab2:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003ab4:	415b      	adcs	r3, r3
 8003ab6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003ab8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003abc:	4641      	mov	r1, r8
 8003abe:	eb12 0a01 	adds.w	sl, r2, r1
 8003ac2:	4649      	mov	r1, r9
 8003ac4:	eb43 0b01 	adc.w	fp, r3, r1
 8003ac8:	f04f 0200 	mov.w	r2, #0
 8003acc:	f04f 0300 	mov.w	r3, #0
 8003ad0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003ad4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003ad8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003adc:	4692      	mov	sl, r2
 8003ade:	469b      	mov	fp, r3
 8003ae0:	4643      	mov	r3, r8
 8003ae2:	eb1a 0303 	adds.w	r3, sl, r3
 8003ae6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003aea:	464b      	mov	r3, r9
 8003aec:	eb4b 0303 	adc.w	r3, fp, r3
 8003af0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003af4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	2200      	movs	r2, #0
 8003afc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003b00:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003b04:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003b08:	460b      	mov	r3, r1
 8003b0a:	18db      	adds	r3, r3, r3
 8003b0c:	643b      	str	r3, [r7, #64]	@ 0x40
 8003b0e:	4613      	mov	r3, r2
 8003b10:	eb42 0303 	adc.w	r3, r2, r3
 8003b14:	647b      	str	r3, [r7, #68]	@ 0x44
 8003b16:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003b1a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003b1e:	f7fc fecd 	bl	80008bc <__aeabi_uldivmod>
 8003b22:	4602      	mov	r2, r0
 8003b24:	460b      	mov	r3, r1
 8003b26:	4611      	mov	r1, r2
 8003b28:	4b3b      	ldr	r3, [pc, #236]	@ (8003c18 <UART_SetConfig+0x2d4>)
 8003b2a:	fba3 2301 	umull	r2, r3, r3, r1
 8003b2e:	095b      	lsrs	r3, r3, #5
 8003b30:	2264      	movs	r2, #100	@ 0x64
 8003b32:	fb02 f303 	mul.w	r3, r2, r3
 8003b36:	1acb      	subs	r3, r1, r3
 8003b38:	00db      	lsls	r3, r3, #3
 8003b3a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003b3e:	4b36      	ldr	r3, [pc, #216]	@ (8003c18 <UART_SetConfig+0x2d4>)
 8003b40:	fba3 2302 	umull	r2, r3, r3, r2
 8003b44:	095b      	lsrs	r3, r3, #5
 8003b46:	005b      	lsls	r3, r3, #1
 8003b48:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003b4c:	441c      	add	r4, r3
 8003b4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003b52:	2200      	movs	r2, #0
 8003b54:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003b58:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003b5c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003b60:	4642      	mov	r2, r8
 8003b62:	464b      	mov	r3, r9
 8003b64:	1891      	adds	r1, r2, r2
 8003b66:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003b68:	415b      	adcs	r3, r3
 8003b6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003b6c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003b70:	4641      	mov	r1, r8
 8003b72:	1851      	adds	r1, r2, r1
 8003b74:	6339      	str	r1, [r7, #48]	@ 0x30
 8003b76:	4649      	mov	r1, r9
 8003b78:	414b      	adcs	r3, r1
 8003b7a:	637b      	str	r3, [r7, #52]	@ 0x34
 8003b7c:	f04f 0200 	mov.w	r2, #0
 8003b80:	f04f 0300 	mov.w	r3, #0
 8003b84:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003b88:	4659      	mov	r1, fp
 8003b8a:	00cb      	lsls	r3, r1, #3
 8003b8c:	4651      	mov	r1, sl
 8003b8e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b92:	4651      	mov	r1, sl
 8003b94:	00ca      	lsls	r2, r1, #3
 8003b96:	4610      	mov	r0, r2
 8003b98:	4619      	mov	r1, r3
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	4642      	mov	r2, r8
 8003b9e:	189b      	adds	r3, r3, r2
 8003ba0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003ba4:	464b      	mov	r3, r9
 8003ba6:	460a      	mov	r2, r1
 8003ba8:	eb42 0303 	adc.w	r3, r2, r3
 8003bac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003bb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003bbc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003bc0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003bc4:	460b      	mov	r3, r1
 8003bc6:	18db      	adds	r3, r3, r3
 8003bc8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003bca:	4613      	mov	r3, r2
 8003bcc:	eb42 0303 	adc.w	r3, r2, r3
 8003bd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003bd2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003bd6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003bda:	f7fc fe6f 	bl	80008bc <__aeabi_uldivmod>
 8003bde:	4602      	mov	r2, r0
 8003be0:	460b      	mov	r3, r1
 8003be2:	4b0d      	ldr	r3, [pc, #52]	@ (8003c18 <UART_SetConfig+0x2d4>)
 8003be4:	fba3 1302 	umull	r1, r3, r3, r2
 8003be8:	095b      	lsrs	r3, r3, #5
 8003bea:	2164      	movs	r1, #100	@ 0x64
 8003bec:	fb01 f303 	mul.w	r3, r1, r3
 8003bf0:	1ad3      	subs	r3, r2, r3
 8003bf2:	00db      	lsls	r3, r3, #3
 8003bf4:	3332      	adds	r3, #50	@ 0x32
 8003bf6:	4a08      	ldr	r2, [pc, #32]	@ (8003c18 <UART_SetConfig+0x2d4>)
 8003bf8:	fba2 2303 	umull	r2, r3, r2, r3
 8003bfc:	095b      	lsrs	r3, r3, #5
 8003bfe:	f003 0207 	and.w	r2, r3, #7
 8003c02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4422      	add	r2, r4
 8003c0a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003c0c:	e106      	b.n	8003e1c <UART_SetConfig+0x4d8>
 8003c0e:	bf00      	nop
 8003c10:	40011000 	.word	0x40011000
 8003c14:	40011400 	.word	0x40011400
 8003c18:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003c1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003c20:	2200      	movs	r2, #0
 8003c22:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003c26:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003c2a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003c2e:	4642      	mov	r2, r8
 8003c30:	464b      	mov	r3, r9
 8003c32:	1891      	adds	r1, r2, r2
 8003c34:	6239      	str	r1, [r7, #32]
 8003c36:	415b      	adcs	r3, r3
 8003c38:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c3a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003c3e:	4641      	mov	r1, r8
 8003c40:	1854      	adds	r4, r2, r1
 8003c42:	4649      	mov	r1, r9
 8003c44:	eb43 0501 	adc.w	r5, r3, r1
 8003c48:	f04f 0200 	mov.w	r2, #0
 8003c4c:	f04f 0300 	mov.w	r3, #0
 8003c50:	00eb      	lsls	r3, r5, #3
 8003c52:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c56:	00e2      	lsls	r2, r4, #3
 8003c58:	4614      	mov	r4, r2
 8003c5a:	461d      	mov	r5, r3
 8003c5c:	4643      	mov	r3, r8
 8003c5e:	18e3      	adds	r3, r4, r3
 8003c60:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003c64:	464b      	mov	r3, r9
 8003c66:	eb45 0303 	adc.w	r3, r5, r3
 8003c6a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003c6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	2200      	movs	r2, #0
 8003c76:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003c7a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003c7e:	f04f 0200 	mov.w	r2, #0
 8003c82:	f04f 0300 	mov.w	r3, #0
 8003c86:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003c8a:	4629      	mov	r1, r5
 8003c8c:	008b      	lsls	r3, r1, #2
 8003c8e:	4621      	mov	r1, r4
 8003c90:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c94:	4621      	mov	r1, r4
 8003c96:	008a      	lsls	r2, r1, #2
 8003c98:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003c9c:	f7fc fe0e 	bl	80008bc <__aeabi_uldivmod>
 8003ca0:	4602      	mov	r2, r0
 8003ca2:	460b      	mov	r3, r1
 8003ca4:	4b60      	ldr	r3, [pc, #384]	@ (8003e28 <UART_SetConfig+0x4e4>)
 8003ca6:	fba3 2302 	umull	r2, r3, r3, r2
 8003caa:	095b      	lsrs	r3, r3, #5
 8003cac:	011c      	lsls	r4, r3, #4
 8003cae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003cb8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003cbc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003cc0:	4642      	mov	r2, r8
 8003cc2:	464b      	mov	r3, r9
 8003cc4:	1891      	adds	r1, r2, r2
 8003cc6:	61b9      	str	r1, [r7, #24]
 8003cc8:	415b      	adcs	r3, r3
 8003cca:	61fb      	str	r3, [r7, #28]
 8003ccc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003cd0:	4641      	mov	r1, r8
 8003cd2:	1851      	adds	r1, r2, r1
 8003cd4:	6139      	str	r1, [r7, #16]
 8003cd6:	4649      	mov	r1, r9
 8003cd8:	414b      	adcs	r3, r1
 8003cda:	617b      	str	r3, [r7, #20]
 8003cdc:	f04f 0200 	mov.w	r2, #0
 8003ce0:	f04f 0300 	mov.w	r3, #0
 8003ce4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003ce8:	4659      	mov	r1, fp
 8003cea:	00cb      	lsls	r3, r1, #3
 8003cec:	4651      	mov	r1, sl
 8003cee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003cf2:	4651      	mov	r1, sl
 8003cf4:	00ca      	lsls	r2, r1, #3
 8003cf6:	4610      	mov	r0, r2
 8003cf8:	4619      	mov	r1, r3
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	4642      	mov	r2, r8
 8003cfe:	189b      	adds	r3, r3, r2
 8003d00:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003d04:	464b      	mov	r3, r9
 8003d06:	460a      	mov	r2, r1
 8003d08:	eb42 0303 	adc.w	r3, r2, r3
 8003d0c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003d10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	2200      	movs	r2, #0
 8003d18:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003d1a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003d1c:	f04f 0200 	mov.w	r2, #0
 8003d20:	f04f 0300 	mov.w	r3, #0
 8003d24:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003d28:	4649      	mov	r1, r9
 8003d2a:	008b      	lsls	r3, r1, #2
 8003d2c:	4641      	mov	r1, r8
 8003d2e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d32:	4641      	mov	r1, r8
 8003d34:	008a      	lsls	r2, r1, #2
 8003d36:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003d3a:	f7fc fdbf 	bl	80008bc <__aeabi_uldivmod>
 8003d3e:	4602      	mov	r2, r0
 8003d40:	460b      	mov	r3, r1
 8003d42:	4611      	mov	r1, r2
 8003d44:	4b38      	ldr	r3, [pc, #224]	@ (8003e28 <UART_SetConfig+0x4e4>)
 8003d46:	fba3 2301 	umull	r2, r3, r3, r1
 8003d4a:	095b      	lsrs	r3, r3, #5
 8003d4c:	2264      	movs	r2, #100	@ 0x64
 8003d4e:	fb02 f303 	mul.w	r3, r2, r3
 8003d52:	1acb      	subs	r3, r1, r3
 8003d54:	011b      	lsls	r3, r3, #4
 8003d56:	3332      	adds	r3, #50	@ 0x32
 8003d58:	4a33      	ldr	r2, [pc, #204]	@ (8003e28 <UART_SetConfig+0x4e4>)
 8003d5a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d5e:	095b      	lsrs	r3, r3, #5
 8003d60:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003d64:	441c      	add	r4, r3
 8003d66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	673b      	str	r3, [r7, #112]	@ 0x70
 8003d6e:	677a      	str	r2, [r7, #116]	@ 0x74
 8003d70:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003d74:	4642      	mov	r2, r8
 8003d76:	464b      	mov	r3, r9
 8003d78:	1891      	adds	r1, r2, r2
 8003d7a:	60b9      	str	r1, [r7, #8]
 8003d7c:	415b      	adcs	r3, r3
 8003d7e:	60fb      	str	r3, [r7, #12]
 8003d80:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003d84:	4641      	mov	r1, r8
 8003d86:	1851      	adds	r1, r2, r1
 8003d88:	6039      	str	r1, [r7, #0]
 8003d8a:	4649      	mov	r1, r9
 8003d8c:	414b      	adcs	r3, r1
 8003d8e:	607b      	str	r3, [r7, #4]
 8003d90:	f04f 0200 	mov.w	r2, #0
 8003d94:	f04f 0300 	mov.w	r3, #0
 8003d98:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003d9c:	4659      	mov	r1, fp
 8003d9e:	00cb      	lsls	r3, r1, #3
 8003da0:	4651      	mov	r1, sl
 8003da2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003da6:	4651      	mov	r1, sl
 8003da8:	00ca      	lsls	r2, r1, #3
 8003daa:	4610      	mov	r0, r2
 8003dac:	4619      	mov	r1, r3
 8003dae:	4603      	mov	r3, r0
 8003db0:	4642      	mov	r2, r8
 8003db2:	189b      	adds	r3, r3, r2
 8003db4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003db6:	464b      	mov	r3, r9
 8003db8:	460a      	mov	r2, r1
 8003dba:	eb42 0303 	adc.w	r3, r2, r3
 8003dbe:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003dc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	663b      	str	r3, [r7, #96]	@ 0x60
 8003dca:	667a      	str	r2, [r7, #100]	@ 0x64
 8003dcc:	f04f 0200 	mov.w	r2, #0
 8003dd0:	f04f 0300 	mov.w	r3, #0
 8003dd4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003dd8:	4649      	mov	r1, r9
 8003dda:	008b      	lsls	r3, r1, #2
 8003ddc:	4641      	mov	r1, r8
 8003dde:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003de2:	4641      	mov	r1, r8
 8003de4:	008a      	lsls	r2, r1, #2
 8003de6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003dea:	f7fc fd67 	bl	80008bc <__aeabi_uldivmod>
 8003dee:	4602      	mov	r2, r0
 8003df0:	460b      	mov	r3, r1
 8003df2:	4b0d      	ldr	r3, [pc, #52]	@ (8003e28 <UART_SetConfig+0x4e4>)
 8003df4:	fba3 1302 	umull	r1, r3, r3, r2
 8003df8:	095b      	lsrs	r3, r3, #5
 8003dfa:	2164      	movs	r1, #100	@ 0x64
 8003dfc:	fb01 f303 	mul.w	r3, r1, r3
 8003e00:	1ad3      	subs	r3, r2, r3
 8003e02:	011b      	lsls	r3, r3, #4
 8003e04:	3332      	adds	r3, #50	@ 0x32
 8003e06:	4a08      	ldr	r2, [pc, #32]	@ (8003e28 <UART_SetConfig+0x4e4>)
 8003e08:	fba2 2303 	umull	r2, r3, r2, r3
 8003e0c:	095b      	lsrs	r3, r3, #5
 8003e0e:	f003 020f 	and.w	r2, r3, #15
 8003e12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4422      	add	r2, r4
 8003e1a:	609a      	str	r2, [r3, #8]
}
 8003e1c:	bf00      	nop
 8003e1e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003e22:	46bd      	mov	sp, r7
 8003e24:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e28:	51eb851f 	.word	0x51eb851f

08003e2c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8003e30:	4904      	ldr	r1, [pc, #16]	@ (8003e44 <MX_FATFS_Init+0x18>)
 8003e32:	4805      	ldr	r0, [pc, #20]	@ (8003e48 <MX_FATFS_Init+0x1c>)
 8003e34:	f004 f8fa 	bl	800802c <FATFS_LinkDriver>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	461a      	mov	r2, r3
 8003e3c:	4b03      	ldr	r3, [pc, #12]	@ (8003e4c <MX_FATFS_Init+0x20>)
 8003e3e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8003e40:	bf00      	nop
 8003e42:	bd80      	pop	{r7, pc}
 8003e44:	200001d4 	.word	0x200001d4
 8003e48:	2000000c 	.word	0x2000000c
 8003e4c:	200001d0 	.word	0x200001d0

08003e50 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8003e50:	b480      	push	{r7}
 8003e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8003e54:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8003e56:	4618      	mov	r0, r3
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5e:	4770      	bx	lr

08003e60 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b082      	sub	sp, #8
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	4603      	mov	r3, r0
 8003e68:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = SD_disk_initialize(pdrv);;
 8003e6a:	79fb      	ldrb	r3, [r7, #7]
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	f000 fa0f 	bl	8004290 <SD_disk_initialize>
 8003e72:	4603      	mov	r3, r0
 8003e74:	461a      	mov	r2, r3
 8003e76:	4b04      	ldr	r3, [pc, #16]	@ (8003e88 <USER_initialize+0x28>)
 8003e78:	701a      	strb	r2, [r3, #0]
    return Stat;
 8003e7a:	4b03      	ldr	r3, [pc, #12]	@ (8003e88 <USER_initialize+0x28>)
 8003e7c:	781b      	ldrb	r3, [r3, #0]
 8003e7e:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8003e80:	4618      	mov	r0, r3
 8003e82:	3708      	adds	r7, #8
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bd80      	pop	{r7, pc}
 8003e88:	20000009 	.word	0x20000009

08003e8c <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b082      	sub	sp, #8
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	4603      	mov	r3, r0
 8003e94:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = SD_disk_status(pdrv);
 8003e96:	79fb      	ldrb	r3, [r7, #7]
 8003e98:	4618      	mov	r0, r3
 8003e9a:	f000 fadf 	bl	800445c <SD_disk_status>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	461a      	mov	r2, r3
 8003ea2:	4b04      	ldr	r3, [pc, #16]	@ (8003eb4 <USER_status+0x28>)
 8003ea4:	701a      	strb	r2, [r3, #0]
    return Stat;
 8003ea6:	4b03      	ldr	r3, [pc, #12]	@ (8003eb4 <USER_status+0x28>)
 8003ea8:	781b      	ldrb	r3, [r3, #0]
 8003eaa:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8003eac:	4618      	mov	r0, r3
 8003eae:	3708      	adds	r7, #8
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bd80      	pop	{r7, pc}
 8003eb4:	20000009 	.word	0x20000009

08003eb8 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b084      	sub	sp, #16
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	60b9      	str	r1, [r7, #8]
 8003ec0:	607a      	str	r2, [r7, #4]
 8003ec2:	603b      	str	r3, [r7, #0]
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 8003ec8:	7bf8      	ldrb	r0, [r7, #15]
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	687a      	ldr	r2, [r7, #4]
 8003ece:	68b9      	ldr	r1, [r7, #8]
 8003ed0:	f000 fada 	bl	8004488 <SD_disk_read>
 8003ed4:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	3710      	adds	r7, #16
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd80      	pop	{r7, pc}

08003ede <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8003ede:	b580      	push	{r7, lr}
 8003ee0:	b084      	sub	sp, #16
 8003ee2:	af00      	add	r7, sp, #0
 8003ee4:	60b9      	str	r1, [r7, #8]
 8003ee6:	607a      	str	r2, [r7, #4]
 8003ee8:	603b      	str	r3, [r7, #0]
 8003eea:	4603      	mov	r3, r0
 8003eec:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 8003eee:	7bf8      	ldrb	r0, [r7, #15]
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	687a      	ldr	r2, [r7, #4]
 8003ef4:	68b9      	ldr	r1, [r7, #8]
 8003ef6:	f000 fb31 	bl	800455c <SD_disk_write>
 8003efa:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	3710      	adds	r7, #16
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bd80      	pop	{r7, pc}

08003f04 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b084      	sub	sp, #16
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	603a      	str	r2, [r7, #0]
 8003f0e:	71fb      	strb	r3, [r7, #7]
 8003f10:	460b      	mov	r3, r1
 8003f12:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = SD_disk_ioctl(pdrv, cmd, buff);
 8003f14:	79b9      	ldrb	r1, [r7, #6]
 8003f16:	79fb      	ldrb	r3, [r7, #7]
 8003f18:	683a      	ldr	r2, [r7, #0]
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	f000 fba2 	bl	8004664 <SD_disk_ioctl>
 8003f20:	4603      	mov	r3, r0
 8003f22:	73fb      	strb	r3, [r7, #15]
    return res;
 8003f24:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 8003f26:	4618      	mov	r0, r3
 8003f28:	3710      	adds	r7, #16
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}
	...

08003f30 <SELECT>:

//-----[ SPI Functions ]-----

/* slave select */
static void SELECT(void)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8003f34:	2200      	movs	r2, #0
 8003f36:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003f3a:	4802      	ldr	r0, [pc, #8]	@ (8003f44 <SELECT+0x14>)
 8003f3c:	f7fd fd7a 	bl	8001a34 <HAL_GPIO_WritePin>
}
 8003f40:	bf00      	nop
 8003f42:	bd80      	pop	{r7, pc}
 8003f44:	40020800 	.word	0x40020800

08003f48 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8003f4c:	2201      	movs	r2, #1
 8003f4e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003f52:	4802      	ldr	r0, [pc, #8]	@ (8003f5c <DESELECT+0x14>)
 8003f54:	f7fd fd6e 	bl	8001a34 <HAL_GPIO_WritePin>
}
 8003f58:	bf00      	nop
 8003f5a:	bd80      	pop	{r7, pc}
 8003f5c:	40020800 	.word	0x40020800

08003f60 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b082      	sub	sp, #8
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	4603      	mov	r3, r0
 8003f68:	71fb      	strb	r3, [r7, #7]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8003f6a:	bf00      	nop
 8003f6c:	4b08      	ldr	r3, [pc, #32]	@ (8003f90 <SPI_TxByte+0x30>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	f003 0302 	and.w	r3, r3, #2
 8003f76:	2b02      	cmp	r3, #2
 8003f78:	d1f8      	bne.n	8003f6c <SPI_TxByte+0xc>
  HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8003f7a:	1df9      	adds	r1, r7, #7
 8003f7c:	2364      	movs	r3, #100	@ 0x64
 8003f7e:	2201      	movs	r2, #1
 8003f80:	4803      	ldr	r0, [pc, #12]	@ (8003f90 <SPI_TxByte+0x30>)
 8003f82:	f7fe fbe2 	bl	800274a <HAL_SPI_Transmit>
}
 8003f86:	bf00      	nop
 8003f88:	3708      	adds	r7, #8
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}
 8003f8e:	bf00      	nop
 8003f90:	20000090 	.word	0x20000090

08003f94 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b082      	sub	sp, #8
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
 8003f9c:	460b      	mov	r3, r1
 8003f9e:	807b      	strh	r3, [r7, #2]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8003fa0:	bf00      	nop
 8003fa2:	4b08      	ldr	r3, [pc, #32]	@ (8003fc4 <SPI_TxBuffer+0x30>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	f003 0302 	and.w	r3, r3, #2
 8003fac:	2b02      	cmp	r3, #2
 8003fae:	d1f8      	bne.n	8003fa2 <SPI_TxBuffer+0xe>
  HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8003fb0:	887a      	ldrh	r2, [r7, #2]
 8003fb2:	2364      	movs	r3, #100	@ 0x64
 8003fb4:	6879      	ldr	r1, [r7, #4]
 8003fb6:	4803      	ldr	r0, [pc, #12]	@ (8003fc4 <SPI_TxBuffer+0x30>)
 8003fb8:	f7fe fbc7 	bl	800274a <HAL_SPI_Transmit>
}
 8003fbc:	bf00      	nop
 8003fbe:	3708      	adds	r7, #8
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bd80      	pop	{r7, pc}
 8003fc4:	20000090 	.word	0x20000090

08003fc8 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b084      	sub	sp, #16
 8003fcc:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 8003fce:	23ff      	movs	r3, #255	@ 0xff
 8003fd0:	71fb      	strb	r3, [r7, #7]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8003fd2:	bf00      	nop
 8003fd4:	4b09      	ldr	r3, [pc, #36]	@ (8003ffc <SPI_RxByte+0x34>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	689b      	ldr	r3, [r3, #8]
 8003fda:	f003 0302 	and.w	r3, r3, #2
 8003fde:	2b02      	cmp	r3, #2
 8003fe0:	d1f8      	bne.n	8003fd4 <SPI_RxByte+0xc>
  HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8003fe2:	1dba      	adds	r2, r7, #6
 8003fe4:	1df9      	adds	r1, r7, #7
 8003fe6:	2364      	movs	r3, #100	@ 0x64
 8003fe8:	9300      	str	r3, [sp, #0]
 8003fea:	2301      	movs	r3, #1
 8003fec:	4803      	ldr	r0, [pc, #12]	@ (8003ffc <SPI_RxByte+0x34>)
 8003fee:	f7fe fcef 	bl	80029d0 <HAL_SPI_TransmitReceive>
  return data;
 8003ff2:	79bb      	ldrb	r3, [r7, #6]
}
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	3708      	adds	r7, #8
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bd80      	pop	{r7, pc}
 8003ffc:	20000090 	.word	0x20000090

08004000 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b082      	sub	sp, #8
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8004008:	f7ff ffde 	bl	8003fc8 <SPI_RxByte>
 800400c:	4603      	mov	r3, r0
 800400e:	461a      	mov	r2, r3
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	701a      	strb	r2, [r3, #0]
}
 8004014:	bf00      	nop
 8004016:	3708      	adds	r7, #8
 8004018:	46bd      	mov	sp, r7
 800401a:	bd80      	pop	{r7, pc}

0800401c <SD_ReadyWait>:

//-----[ SD Card Functions ]-----

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b082      	sub	sp, #8
 8004020:	af00      	add	r7, sp, #0
  uint8_t res;
  /* timeout 500ms */
  Timer2 = 500;
 8004022:	4b0a      	ldr	r3, [pc, #40]	@ (800404c <SD_ReadyWait+0x30>)
 8004024:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8004028:	801a      	strh	r2, [r3, #0]
  /* if SD goes ready, receives 0xFF */
  do {
    res = SPI_RxByte();
 800402a:	f7ff ffcd 	bl	8003fc8 <SPI_RxByte>
 800402e:	4603      	mov	r3, r0
 8004030:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 8004032:	79fb      	ldrb	r3, [r7, #7]
 8004034:	2bff      	cmp	r3, #255	@ 0xff
 8004036:	d003      	beq.n	8004040 <SD_ReadyWait+0x24>
 8004038:	4b04      	ldr	r3, [pc, #16]	@ (800404c <SD_ReadyWait+0x30>)
 800403a:	881b      	ldrh	r3, [r3, #0]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d1f4      	bne.n	800402a <SD_ReadyWait+0xe>
  return res;
 8004040:	79fb      	ldrb	r3, [r7, #7]
}
 8004042:	4618      	mov	r0, r3
 8004044:	3708      	adds	r7, #8
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}
 800404a:	bf00      	nop
 800404c:	200001da 	.word	0x200001da

08004050 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b084      	sub	sp, #16
 8004054:	af00      	add	r7, sp, #0
  uint8_t args[6];
  uint32_t cnt = 0x1FFF;
 8004056:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 800405a:	60fb      	str	r3, [r7, #12]
  /* transmit bytes to wake up */
  DESELECT();
 800405c:	f7ff ff74 	bl	8003f48 <DESELECT>
  for(int i = 0; i < 10; i++)
 8004060:	2300      	movs	r3, #0
 8004062:	60bb      	str	r3, [r7, #8]
 8004064:	e005      	b.n	8004072 <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 8004066:	20ff      	movs	r0, #255	@ 0xff
 8004068:	f7ff ff7a 	bl	8003f60 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	3301      	adds	r3, #1
 8004070:	60bb      	str	r3, [r7, #8]
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	2b09      	cmp	r3, #9
 8004076:	ddf6      	ble.n	8004066 <SD_PowerOn+0x16>
  }
  /* slave select */
  SELECT();
 8004078:	f7ff ff5a 	bl	8003f30 <SELECT>
  /* make idle state */
  args[0] = CMD0;   /* CMD0:GO_IDLE_STATE */
 800407c:	2340      	movs	r3, #64	@ 0x40
 800407e:	703b      	strb	r3, [r7, #0]
  args[1] = 0;
 8004080:	2300      	movs	r3, #0
 8004082:	707b      	strb	r3, [r7, #1]
  args[2] = 0;
 8004084:	2300      	movs	r3, #0
 8004086:	70bb      	strb	r3, [r7, #2]
  args[3] = 0;
 8004088:	2300      	movs	r3, #0
 800408a:	70fb      	strb	r3, [r7, #3]
  args[4] = 0;
 800408c:	2300      	movs	r3, #0
 800408e:	713b      	strb	r3, [r7, #4]
  args[5] = 0x95;
 8004090:	2395      	movs	r3, #149	@ 0x95
 8004092:	717b      	strb	r3, [r7, #5]
  SPI_TxBuffer(args, sizeof(args));
 8004094:	463b      	mov	r3, r7
 8004096:	2106      	movs	r1, #6
 8004098:	4618      	mov	r0, r3
 800409a:	f7ff ff7b 	bl	8003f94 <SPI_TxBuffer>
  /* wait response */
  while ((SPI_RxByte() != 0x01) && cnt)
 800409e:	e002      	b.n	80040a6 <SD_PowerOn+0x56>
  {
    cnt--;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	3b01      	subs	r3, #1
 80040a4:	60fb      	str	r3, [r7, #12]
  while ((SPI_RxByte() != 0x01) && cnt)
 80040a6:	f7ff ff8f 	bl	8003fc8 <SPI_RxByte>
 80040aa:	4603      	mov	r3, r0
 80040ac:	2b01      	cmp	r3, #1
 80040ae:	d002      	beq.n	80040b6 <SD_PowerOn+0x66>
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d1f4      	bne.n	80040a0 <SD_PowerOn+0x50>
  }
  DESELECT();
 80040b6:	f7ff ff47 	bl	8003f48 <DESELECT>
  SPI_TxByte(0XFF);
 80040ba:	20ff      	movs	r0, #255	@ 0xff
 80040bc:	f7ff ff50 	bl	8003f60 <SPI_TxByte>
  PowerFlag = 1;
 80040c0:	4b03      	ldr	r3, [pc, #12]	@ (80040d0 <SD_PowerOn+0x80>)
 80040c2:	2201      	movs	r2, #1
 80040c4:	701a      	strb	r2, [r3, #0]
}
 80040c6:	bf00      	nop
 80040c8:	3710      	adds	r7, #16
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}
 80040ce:	bf00      	nop
 80040d0:	200001dd 	.word	0x200001dd

080040d4 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 80040d4:	b480      	push	{r7}
 80040d6:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 80040d8:	4b03      	ldr	r3, [pc, #12]	@ (80040e8 <SD_PowerOff+0x14>)
 80040da:	2200      	movs	r2, #0
 80040dc:	701a      	strb	r2, [r3, #0]
}
 80040de:	bf00      	nop
 80040e0:	46bd      	mov	sp, r7
 80040e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e6:	4770      	bx	lr
 80040e8:	200001dd 	.word	0x200001dd

080040ec <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 80040ec:	b480      	push	{r7}
 80040ee:	af00      	add	r7, sp, #0
  return PowerFlag;
 80040f0:	4b03      	ldr	r3, [pc, #12]	@ (8004100 <SD_CheckPower+0x14>)
 80040f2:	781b      	ldrb	r3, [r3, #0]
}
 80040f4:	4618      	mov	r0, r3
 80040f6:	46bd      	mov	sp, r7
 80040f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fc:	4770      	bx	lr
 80040fe:	bf00      	nop
 8004100:	200001dd 	.word	0x200001dd

08004104 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b084      	sub	sp, #16
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
 800410c:	6039      	str	r1, [r7, #0]
  uint8_t token;
  /* timeout 200ms */
  Timer1 = 200;
 800410e:	4b13      	ldr	r3, [pc, #76]	@ (800415c <SD_RxDataBlock+0x58>)
 8004110:	22c8      	movs	r2, #200	@ 0xc8
 8004112:	801a      	strh	r2, [r3, #0]
  /* loop until receive a response or timeout */
  do {
    token = SPI_RxByte();
 8004114:	f7ff ff58 	bl	8003fc8 <SPI_RxByte>
 8004118:	4603      	mov	r3, r0
 800411a:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 800411c:	7bfb      	ldrb	r3, [r7, #15]
 800411e:	2bff      	cmp	r3, #255	@ 0xff
 8004120:	d103      	bne.n	800412a <SD_RxDataBlock+0x26>
 8004122:	4b0e      	ldr	r3, [pc, #56]	@ (800415c <SD_RxDataBlock+0x58>)
 8004124:	881b      	ldrh	r3, [r3, #0]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d1f4      	bne.n	8004114 <SD_RxDataBlock+0x10>
  /* invalid response */
  if(token != 0xFE) return FALSE;
 800412a:	7bfb      	ldrb	r3, [r7, #15]
 800412c:	2bfe      	cmp	r3, #254	@ 0xfe
 800412e:	d001      	beq.n	8004134 <SD_RxDataBlock+0x30>
 8004130:	2300      	movs	r3, #0
 8004132:	e00f      	b.n	8004154 <SD_RxDataBlock+0x50>
  /* receive data */
  do {
    SPI_RxBytePtr(buff++);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	1c5a      	adds	r2, r3, #1
 8004138:	607a      	str	r2, [r7, #4]
 800413a:	4618      	mov	r0, r3
 800413c:	f7ff ff60 	bl	8004000 <SPI_RxBytePtr>
  } while(len--);
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	1e5a      	subs	r2, r3, #1
 8004144:	603a      	str	r2, [r7, #0]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d1f4      	bne.n	8004134 <SD_RxDataBlock+0x30>
  /* discard CRC */
  SPI_RxByte();
 800414a:	f7ff ff3d 	bl	8003fc8 <SPI_RxByte>
  SPI_RxByte();
 800414e:	f7ff ff3b 	bl	8003fc8 <SPI_RxByte>
  return TRUE;
 8004152:	2301      	movs	r3, #1
}
 8004154:	4618      	mov	r0, r3
 8004156:	3710      	adds	r7, #16
 8004158:	46bd      	mov	sp, r7
 800415a:	bd80      	pop	{r7, pc}
 800415c:	200001d8 	.word	0x200001d8

08004160 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b084      	sub	sp, #16
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
 8004168:	460b      	mov	r3, r1
 800416a:	70fb      	strb	r3, [r7, #3]
  uint8_t resp;
  uint8_t i = 0;
 800416c:	2300      	movs	r3, #0
 800416e:	73bb      	strb	r3, [r7, #14]
  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return FALSE;
 8004170:	f7ff ff54 	bl	800401c <SD_ReadyWait>
 8004174:	4603      	mov	r3, r0
 8004176:	2bff      	cmp	r3, #255	@ 0xff
 8004178:	d001      	beq.n	800417e <SD_TxDataBlock+0x1e>
 800417a:	2300      	movs	r3, #0
 800417c:	e02f      	b.n	80041de <SD_TxDataBlock+0x7e>
  /* transmit token */
  SPI_TxByte(token);
 800417e:	78fb      	ldrb	r3, [r7, #3]
 8004180:	4618      	mov	r0, r3
 8004182:	f7ff feed 	bl	8003f60 <SPI_TxByte>
  /* if it's not STOP token, transmit data */
  if (token != 0xFD)
 8004186:	78fb      	ldrb	r3, [r7, #3]
 8004188:	2bfd      	cmp	r3, #253	@ 0xfd
 800418a:	d020      	beq.n	80041ce <SD_TxDataBlock+0x6e>
  {
    SPI_TxBuffer((uint8_t*)buff, 512);
 800418c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004190:	6878      	ldr	r0, [r7, #4]
 8004192:	f7ff feff 	bl	8003f94 <SPI_TxBuffer>
    /* discard CRC */
    SPI_RxByte();
 8004196:	f7ff ff17 	bl	8003fc8 <SPI_RxByte>
    SPI_RxByte();
 800419a:	f7ff ff15 	bl	8003fc8 <SPI_RxByte>
    /* receive response */
    while (i <= 64)
 800419e:	e00b      	b.n	80041b8 <SD_TxDataBlock+0x58>
    {
      resp = SPI_RxByte();
 80041a0:	f7ff ff12 	bl	8003fc8 <SPI_RxByte>
 80041a4:	4603      	mov	r3, r0
 80041a6:	73fb      	strb	r3, [r7, #15]
      /* transmit 0x05 accepted */
      if ((resp & 0x1F) == 0x05) break;
 80041a8:	7bfb      	ldrb	r3, [r7, #15]
 80041aa:	f003 031f 	and.w	r3, r3, #31
 80041ae:	2b05      	cmp	r3, #5
 80041b0:	d006      	beq.n	80041c0 <SD_TxDataBlock+0x60>
      i++;
 80041b2:	7bbb      	ldrb	r3, [r7, #14]
 80041b4:	3301      	adds	r3, #1
 80041b6:	73bb      	strb	r3, [r7, #14]
    while (i <= 64)
 80041b8:	7bbb      	ldrb	r3, [r7, #14]
 80041ba:	2b40      	cmp	r3, #64	@ 0x40
 80041bc:	d9f0      	bls.n	80041a0 <SD_TxDataBlock+0x40>
 80041be:	e000      	b.n	80041c2 <SD_TxDataBlock+0x62>
      if ((resp & 0x1F) == 0x05) break;
 80041c0:	bf00      	nop
    }
    /* recv buffer clear */
    while (SPI_RxByte() == 0);
 80041c2:	bf00      	nop
 80041c4:	f7ff ff00 	bl	8003fc8 <SPI_RxByte>
 80041c8:	4603      	mov	r3, r0
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d0fa      	beq.n	80041c4 <SD_TxDataBlock+0x64>
  }
  /* transmit 0x05 accepted */
  if ((resp & 0x1F) == 0x05) return TRUE;
 80041ce:	7bfb      	ldrb	r3, [r7, #15]
 80041d0:	f003 031f 	and.w	r3, r3, #31
 80041d4:	2b05      	cmp	r3, #5
 80041d6:	d101      	bne.n	80041dc <SD_TxDataBlock+0x7c>
 80041d8:	2301      	movs	r3, #1
 80041da:	e000      	b.n	80041de <SD_TxDataBlock+0x7e>

  return FALSE;
 80041dc:	2300      	movs	r3, #0
}
 80041de:	4618      	mov	r0, r3
 80041e0:	3710      	adds	r7, #16
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bd80      	pop	{r7, pc}

080041e6 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 80041e6:	b580      	push	{r7, lr}
 80041e8:	b084      	sub	sp, #16
 80041ea:	af00      	add	r7, sp, #0
 80041ec:	4603      	mov	r3, r0
 80041ee:	6039      	str	r1, [r7, #0]
 80041f0:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;
  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return 0xFF;
 80041f2:	f7ff ff13 	bl	800401c <SD_ReadyWait>
 80041f6:	4603      	mov	r3, r0
 80041f8:	2bff      	cmp	r3, #255	@ 0xff
 80041fa:	d001      	beq.n	8004200 <SD_SendCmd+0x1a>
 80041fc:	23ff      	movs	r3, #255	@ 0xff
 80041fe:	e042      	b.n	8004286 <SD_SendCmd+0xa0>
  /* transmit command */
  SPI_TxByte(cmd);          /* Command */
 8004200:	79fb      	ldrb	r3, [r7, #7]
 8004202:	4618      	mov	r0, r3
 8004204:	f7ff feac 	bl	8003f60 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 24));   /* Argument[31..24] */
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	0e1b      	lsrs	r3, r3, #24
 800420c:	b2db      	uxtb	r3, r3
 800420e:	4618      	mov	r0, r3
 8004210:	f7ff fea6 	bl	8003f60 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 16));   /* Argument[23..16] */
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	0c1b      	lsrs	r3, r3, #16
 8004218:	b2db      	uxtb	r3, r3
 800421a:	4618      	mov	r0, r3
 800421c:	f7ff fea0 	bl	8003f60 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 8));  /* Argument[15..8] */
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	0a1b      	lsrs	r3, r3, #8
 8004224:	b2db      	uxtb	r3, r3
 8004226:	4618      	mov	r0, r3
 8004228:	f7ff fe9a 	bl	8003f60 <SPI_TxByte>
  SPI_TxByte((uint8_t)arg);       /* Argument[7..0] */
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	b2db      	uxtb	r3, r3
 8004230:	4618      	mov	r0, r3
 8004232:	f7ff fe95 	bl	8003f60 <SPI_TxByte>
  /* prepare CRC */
  if(cmd == CMD0) crc = 0x95; /* CRC for CMD0(0) */
 8004236:	79fb      	ldrb	r3, [r7, #7]
 8004238:	2b40      	cmp	r3, #64	@ 0x40
 800423a:	d102      	bne.n	8004242 <SD_SendCmd+0x5c>
 800423c:	2395      	movs	r3, #149	@ 0x95
 800423e:	73fb      	strb	r3, [r7, #15]
 8004240:	e007      	b.n	8004252 <SD_SendCmd+0x6c>
  else if(cmd == CMD8) crc = 0x87;  /* CRC for CMD8(0x1AA) */
 8004242:	79fb      	ldrb	r3, [r7, #7]
 8004244:	2b48      	cmp	r3, #72	@ 0x48
 8004246:	d102      	bne.n	800424e <SD_SendCmd+0x68>
 8004248:	2387      	movs	r3, #135	@ 0x87
 800424a:	73fb      	strb	r3, [r7, #15]
 800424c:	e001      	b.n	8004252 <SD_SendCmd+0x6c>
  else crc = 1;
 800424e:	2301      	movs	r3, #1
 8004250:	73fb      	strb	r3, [r7, #15]
  /* transmit CRC */
  SPI_TxByte(crc);
 8004252:	7bfb      	ldrb	r3, [r7, #15]
 8004254:	4618      	mov	r0, r3
 8004256:	f7ff fe83 	bl	8003f60 <SPI_TxByte>
  /* Skip a stuff byte when STOP_TRANSMISSION */
  if (cmd == CMD12) SPI_RxByte();
 800425a:	79fb      	ldrb	r3, [r7, #7]
 800425c:	2b4c      	cmp	r3, #76	@ 0x4c
 800425e:	d101      	bne.n	8004264 <SD_SendCmd+0x7e>
 8004260:	f7ff feb2 	bl	8003fc8 <SPI_RxByte>
  /* receive response */
  uint8_t n = 10;
 8004264:	230a      	movs	r3, #10
 8004266:	73bb      	strb	r3, [r7, #14]
  do {
    res = SPI_RxByte();
 8004268:	f7ff feae 	bl	8003fc8 <SPI_RxByte>
 800426c:	4603      	mov	r3, r0
 800426e:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 8004270:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8004274:	2b00      	cmp	r3, #0
 8004276:	da05      	bge.n	8004284 <SD_SendCmd+0x9e>
 8004278:	7bbb      	ldrb	r3, [r7, #14]
 800427a:	3b01      	subs	r3, #1
 800427c:	73bb      	strb	r3, [r7, #14]
 800427e:	7bbb      	ldrb	r3, [r7, #14]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d1f1      	bne.n	8004268 <SD_SendCmd+0x82>

  return res;
 8004284:	7b7b      	ldrb	r3, [r7, #13]
}
 8004286:	4618      	mov	r0, r3
 8004288:	3710      	adds	r7, #16
 800428a:	46bd      	mov	sp, r7
 800428c:	bd80      	pop	{r7, pc}
	...

08004290 <SD_disk_initialize>:

//-----[ user_diskio.c Functions ]-----

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8004290:	b590      	push	{r4, r7, lr}
 8004292:	b085      	sub	sp, #20
 8004294:	af00      	add	r7, sp, #0
 8004296:	4603      	mov	r3, r0
 8004298:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];
  /* single drive, drv should be 0 */
  if(drv) return STA_NOINIT;
 800429a:	79fb      	ldrb	r3, [r7, #7]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d001      	beq.n	80042a4 <SD_disk_initialize+0x14>
 80042a0:	2301      	movs	r3, #1
 80042a2:	e0d1      	b.n	8004448 <SD_disk_initialize+0x1b8>
  /* no disk */
  if(Stat & STA_NODISK) return Stat;
 80042a4:	4b6a      	ldr	r3, [pc, #424]	@ (8004450 <SD_disk_initialize+0x1c0>)
 80042a6:	781b      	ldrb	r3, [r3, #0]
 80042a8:	b2db      	uxtb	r3, r3
 80042aa:	f003 0302 	and.w	r3, r3, #2
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d003      	beq.n	80042ba <SD_disk_initialize+0x2a>
 80042b2:	4b67      	ldr	r3, [pc, #412]	@ (8004450 <SD_disk_initialize+0x1c0>)
 80042b4:	781b      	ldrb	r3, [r3, #0]
 80042b6:	b2db      	uxtb	r3, r3
 80042b8:	e0c6      	b.n	8004448 <SD_disk_initialize+0x1b8>
  /* power on */
  SD_PowerOn();
 80042ba:	f7ff fec9 	bl	8004050 <SD_PowerOn>
  /* slave select */
  SELECT();
 80042be:	f7ff fe37 	bl	8003f30 <SELECT>
  /* check disk type */
  type = 0;
 80042c2:	2300      	movs	r3, #0
 80042c4:	73bb      	strb	r3, [r7, #14]
  /* send GO_IDLE_STATE command */
  if (SD_SendCmd(CMD0, 0) == 1)
 80042c6:	2100      	movs	r1, #0
 80042c8:	2040      	movs	r0, #64	@ 0x40
 80042ca:	f7ff ff8c 	bl	80041e6 <SD_SendCmd>
 80042ce:	4603      	mov	r3, r0
 80042d0:	2b01      	cmp	r3, #1
 80042d2:	f040 80a1 	bne.w	8004418 <SD_disk_initialize+0x188>
  {
    /* timeout 1 sec */
    Timer1 = 1000;
 80042d6:	4b5f      	ldr	r3, [pc, #380]	@ (8004454 <SD_disk_initialize+0x1c4>)
 80042d8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80042dc:	801a      	strh	r2, [r3, #0]
    /* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 80042de:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 80042e2:	2048      	movs	r0, #72	@ 0x48
 80042e4:	f7ff ff7f 	bl	80041e6 <SD_SendCmd>
 80042e8:	4603      	mov	r3, r0
 80042ea:	2b01      	cmp	r3, #1
 80042ec:	d155      	bne.n	800439a <SD_disk_initialize+0x10a>
    {
      /* operation condition register */
      for (n = 0; n < 4; n++)
 80042ee:	2300      	movs	r3, #0
 80042f0:	73fb      	strb	r3, [r7, #15]
 80042f2:	e00c      	b.n	800430e <SD_disk_initialize+0x7e>
      {
        ocr[n] = SPI_RxByte();
 80042f4:	7bfc      	ldrb	r4, [r7, #15]
 80042f6:	f7ff fe67 	bl	8003fc8 <SPI_RxByte>
 80042fa:	4603      	mov	r3, r0
 80042fc:	461a      	mov	r2, r3
 80042fe:	f104 0310 	add.w	r3, r4, #16
 8004302:	443b      	add	r3, r7
 8004304:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 8004308:	7bfb      	ldrb	r3, [r7, #15]
 800430a:	3301      	adds	r3, #1
 800430c:	73fb      	strb	r3, [r7, #15]
 800430e:	7bfb      	ldrb	r3, [r7, #15]
 8004310:	2b03      	cmp	r3, #3
 8004312:	d9ef      	bls.n	80042f4 <SD_disk_initialize+0x64>
      }
      /* voltage range 2.7-3.6V */
      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8004314:	7abb      	ldrb	r3, [r7, #10]
 8004316:	2b01      	cmp	r3, #1
 8004318:	d17e      	bne.n	8004418 <SD_disk_initialize+0x188>
 800431a:	7afb      	ldrb	r3, [r7, #11]
 800431c:	2baa      	cmp	r3, #170	@ 0xaa
 800431e:	d17b      	bne.n	8004418 <SD_disk_initialize+0x188>
      {
        /* ACMD41 with HCS bit */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8004320:	2100      	movs	r1, #0
 8004322:	2077      	movs	r0, #119	@ 0x77
 8004324:	f7ff ff5f 	bl	80041e6 <SD_SendCmd>
 8004328:	4603      	mov	r3, r0
 800432a:	2b01      	cmp	r3, #1
 800432c:	d807      	bhi.n	800433e <SD_disk_initialize+0xae>
 800432e:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8004332:	2069      	movs	r0, #105	@ 0x69
 8004334:	f7ff ff57 	bl	80041e6 <SD_SendCmd>
 8004338:	4603      	mov	r3, r0
 800433a:	2b00      	cmp	r3, #0
 800433c:	d004      	beq.n	8004348 <SD_disk_initialize+0xb8>
        } while (Timer1);
 800433e:	4b45      	ldr	r3, [pc, #276]	@ (8004454 <SD_disk_initialize+0x1c4>)
 8004340:	881b      	ldrh	r3, [r3, #0]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d1ec      	bne.n	8004320 <SD_disk_initialize+0x90>
 8004346:	e000      	b.n	800434a <SD_disk_initialize+0xba>
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8004348:	bf00      	nop

        /* READ_OCR */
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 800434a:	4b42      	ldr	r3, [pc, #264]	@ (8004454 <SD_disk_initialize+0x1c4>)
 800434c:	881b      	ldrh	r3, [r3, #0]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d062      	beq.n	8004418 <SD_disk_initialize+0x188>
 8004352:	2100      	movs	r1, #0
 8004354:	207a      	movs	r0, #122	@ 0x7a
 8004356:	f7ff ff46 	bl	80041e6 <SD_SendCmd>
 800435a:	4603      	mov	r3, r0
 800435c:	2b00      	cmp	r3, #0
 800435e:	d15b      	bne.n	8004418 <SD_disk_initialize+0x188>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 8004360:	2300      	movs	r3, #0
 8004362:	73fb      	strb	r3, [r7, #15]
 8004364:	e00c      	b.n	8004380 <SD_disk_initialize+0xf0>
          {
            ocr[n] = SPI_RxByte();
 8004366:	7bfc      	ldrb	r4, [r7, #15]
 8004368:	f7ff fe2e 	bl	8003fc8 <SPI_RxByte>
 800436c:	4603      	mov	r3, r0
 800436e:	461a      	mov	r2, r3
 8004370:	f104 0310 	add.w	r3, r4, #16
 8004374:	443b      	add	r3, r7
 8004376:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 800437a:	7bfb      	ldrb	r3, [r7, #15]
 800437c:	3301      	adds	r3, #1
 800437e:	73fb      	strb	r3, [r7, #15]
 8004380:	7bfb      	ldrb	r3, [r7, #15]
 8004382:	2b03      	cmp	r3, #3
 8004384:	d9ef      	bls.n	8004366 <SD_disk_initialize+0xd6>
          }

          /* SDv2 (HC or SC) */
          type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8004386:	7a3b      	ldrb	r3, [r7, #8]
 8004388:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800438c:	2b00      	cmp	r3, #0
 800438e:	d001      	beq.n	8004394 <SD_disk_initialize+0x104>
 8004390:	230c      	movs	r3, #12
 8004392:	e000      	b.n	8004396 <SD_disk_initialize+0x106>
 8004394:	2304      	movs	r3, #4
 8004396:	73bb      	strb	r3, [r7, #14]
 8004398:	e03e      	b.n	8004418 <SD_disk_initialize+0x188>
      }
    }
    else
    {
      /* SDC V1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 800439a:	2100      	movs	r1, #0
 800439c:	2077      	movs	r0, #119	@ 0x77
 800439e:	f7ff ff22 	bl	80041e6 <SD_SendCmd>
 80043a2:	4603      	mov	r3, r0
 80043a4:	2b01      	cmp	r3, #1
 80043a6:	d808      	bhi.n	80043ba <SD_disk_initialize+0x12a>
 80043a8:	2100      	movs	r1, #0
 80043aa:	2069      	movs	r0, #105	@ 0x69
 80043ac:	f7ff ff1b 	bl	80041e6 <SD_SendCmd>
 80043b0:	4603      	mov	r3, r0
 80043b2:	2b01      	cmp	r3, #1
 80043b4:	d801      	bhi.n	80043ba <SD_disk_initialize+0x12a>
 80043b6:	2302      	movs	r3, #2
 80043b8:	e000      	b.n	80043bc <SD_disk_initialize+0x12c>
 80043ba:	2301      	movs	r3, #1
 80043bc:	73bb      	strb	r3, [r7, #14]
      do
      {
        if (type == CT_SD1)
 80043be:	7bbb      	ldrb	r3, [r7, #14]
 80043c0:	2b02      	cmp	r3, #2
 80043c2:	d10e      	bne.n	80043e2 <SD_disk_initialize+0x152>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 80043c4:	2100      	movs	r1, #0
 80043c6:	2077      	movs	r0, #119	@ 0x77
 80043c8:	f7ff ff0d 	bl	80041e6 <SD_SendCmd>
 80043cc:	4603      	mov	r3, r0
 80043ce:	2b01      	cmp	r3, #1
 80043d0:	d80e      	bhi.n	80043f0 <SD_disk_initialize+0x160>
 80043d2:	2100      	movs	r1, #0
 80043d4:	2069      	movs	r0, #105	@ 0x69
 80043d6:	f7ff ff06 	bl	80041e6 <SD_SendCmd>
 80043da:	4603      	mov	r3, r0
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d107      	bne.n	80043f0 <SD_disk_initialize+0x160>
 80043e0:	e00c      	b.n	80043fc <SD_disk_initialize+0x16c>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80043e2:	2100      	movs	r1, #0
 80043e4:	2041      	movs	r0, #65	@ 0x41
 80043e6:	f7ff fefe 	bl	80041e6 <SD_SendCmd>
 80043ea:	4603      	mov	r3, r0
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d004      	beq.n	80043fa <SD_disk_initialize+0x16a>
        }
      } while (Timer1);
 80043f0:	4b18      	ldr	r3, [pc, #96]	@ (8004454 <SD_disk_initialize+0x1c4>)
 80043f2:	881b      	ldrh	r3, [r3, #0]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d1e2      	bne.n	80043be <SD_disk_initialize+0x12e>
 80043f8:	e000      	b.n	80043fc <SD_disk_initialize+0x16c>
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80043fa:	bf00      	nop
      /* SET_BLOCKLEN */
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 80043fc:	4b15      	ldr	r3, [pc, #84]	@ (8004454 <SD_disk_initialize+0x1c4>)
 80043fe:	881b      	ldrh	r3, [r3, #0]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d007      	beq.n	8004414 <SD_disk_initialize+0x184>
 8004404:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004408:	2050      	movs	r0, #80	@ 0x50
 800440a:	f7ff feec 	bl	80041e6 <SD_SendCmd>
 800440e:	4603      	mov	r3, r0
 8004410:	2b00      	cmp	r3, #0
 8004412:	d001      	beq.n	8004418 <SD_disk_initialize+0x188>
 8004414:	2300      	movs	r3, #0
 8004416:	73bb      	strb	r3, [r7, #14]
    }
  }
  CardType = type;
 8004418:	4a0f      	ldr	r2, [pc, #60]	@ (8004458 <SD_disk_initialize+0x1c8>)
 800441a:	7bbb      	ldrb	r3, [r7, #14]
 800441c:	7013      	strb	r3, [r2, #0]
  /* Idle */
  DESELECT();
 800441e:	f7ff fd93 	bl	8003f48 <DESELECT>
  SPI_RxByte();
 8004422:	f7ff fdd1 	bl	8003fc8 <SPI_RxByte>
  /* Clear STA_NOINIT */
  if (type)
 8004426:	7bbb      	ldrb	r3, [r7, #14]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d008      	beq.n	800443e <SD_disk_initialize+0x1ae>
  {
    Stat &= ~STA_NOINIT;
 800442c:	4b08      	ldr	r3, [pc, #32]	@ (8004450 <SD_disk_initialize+0x1c0>)
 800442e:	781b      	ldrb	r3, [r3, #0]
 8004430:	b2db      	uxtb	r3, r3
 8004432:	f023 0301 	bic.w	r3, r3, #1
 8004436:	b2da      	uxtb	r2, r3
 8004438:	4b05      	ldr	r3, [pc, #20]	@ (8004450 <SD_disk_initialize+0x1c0>)
 800443a:	701a      	strb	r2, [r3, #0]
 800443c:	e001      	b.n	8004442 <SD_disk_initialize+0x1b2>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 800443e:	f7ff fe49 	bl	80040d4 <SD_PowerOff>
  }
  return Stat;
 8004442:	4b03      	ldr	r3, [pc, #12]	@ (8004450 <SD_disk_initialize+0x1c0>)
 8004444:	781b      	ldrb	r3, [r3, #0]
 8004446:	b2db      	uxtb	r3, r3
}
 8004448:	4618      	mov	r0, r3
 800444a:	3714      	adds	r7, #20
 800444c:	46bd      	mov	sp, r7
 800444e:	bd90      	pop	{r4, r7, pc}
 8004450:	20000020 	.word	0x20000020
 8004454:	200001d8 	.word	0x200001d8
 8004458:	200001dc 	.word	0x200001dc

0800445c <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 800445c:	b480      	push	{r7}
 800445e:	b083      	sub	sp, #12
 8004460:	af00      	add	r7, sp, #0
 8004462:	4603      	mov	r3, r0
 8004464:	71fb      	strb	r3, [r7, #7]
  if (drv) return STA_NOINIT;
 8004466:	79fb      	ldrb	r3, [r7, #7]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d001      	beq.n	8004470 <SD_disk_status+0x14>
 800446c:	2301      	movs	r3, #1
 800446e:	e002      	b.n	8004476 <SD_disk_status+0x1a>
  return Stat;
 8004470:	4b04      	ldr	r3, [pc, #16]	@ (8004484 <SD_disk_status+0x28>)
 8004472:	781b      	ldrb	r3, [r3, #0]
 8004474:	b2db      	uxtb	r3, r3
}
 8004476:	4618      	mov	r0, r3
 8004478:	370c      	adds	r7, #12
 800447a:	46bd      	mov	sp, r7
 800447c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004480:	4770      	bx	lr
 8004482:	bf00      	nop
 8004484:	20000020 	.word	0x20000020

08004488 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b084      	sub	sp, #16
 800448c:	af00      	add	r7, sp, #0
 800448e:	60b9      	str	r1, [r7, #8]
 8004490:	607a      	str	r2, [r7, #4]
 8004492:	603b      	str	r3, [r7, #0]
 8004494:	4603      	mov	r3, r0
 8004496:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 8004498:	7bfb      	ldrb	r3, [r7, #15]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d102      	bne.n	80044a4 <SD_disk_read+0x1c>
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d101      	bne.n	80044a8 <SD_disk_read+0x20>
 80044a4:	2304      	movs	r3, #4
 80044a6:	e051      	b.n	800454c <SD_disk_read+0xc4>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80044a8:	4b2a      	ldr	r3, [pc, #168]	@ (8004554 <SD_disk_read+0xcc>)
 80044aa:	781b      	ldrb	r3, [r3, #0]
 80044ac:	b2db      	uxtb	r3, r3
 80044ae:	f003 0301 	and.w	r3, r3, #1
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d001      	beq.n	80044ba <SD_disk_read+0x32>
 80044b6:	2303      	movs	r3, #3
 80044b8:	e048      	b.n	800454c <SD_disk_read+0xc4>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 80044ba:	4b27      	ldr	r3, [pc, #156]	@ (8004558 <SD_disk_read+0xd0>)
 80044bc:	781b      	ldrb	r3, [r3, #0]
 80044be:	f003 0304 	and.w	r3, r3, #4
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d102      	bne.n	80044cc <SD_disk_read+0x44>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	025b      	lsls	r3, r3, #9
 80044ca:	607b      	str	r3, [r7, #4]

  SELECT();
 80044cc:	f7ff fd30 	bl	8003f30 <SELECT>

  if (count == 1)
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	2b01      	cmp	r3, #1
 80044d4:	d111      	bne.n	80044fa <SD_disk_read+0x72>
  {
    /* READ_SINGLE_BLOCK */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 80044d6:	6879      	ldr	r1, [r7, #4]
 80044d8:	2051      	movs	r0, #81	@ 0x51
 80044da:	f7ff fe84 	bl	80041e6 <SD_SendCmd>
 80044de:	4603      	mov	r3, r0
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d129      	bne.n	8004538 <SD_disk_read+0xb0>
 80044e4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80044e8:	68b8      	ldr	r0, [r7, #8]
 80044ea:	f7ff fe0b 	bl	8004104 <SD_RxDataBlock>
 80044ee:	4603      	mov	r3, r0
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d021      	beq.n	8004538 <SD_disk_read+0xb0>
 80044f4:	2300      	movs	r3, #0
 80044f6:	603b      	str	r3, [r7, #0]
 80044f8:	e01e      	b.n	8004538 <SD_disk_read+0xb0>
  }
  else
  {
    /* READ_MULTIPLE_BLOCK */
    if (SD_SendCmd(CMD18, sector) == 0)
 80044fa:	6879      	ldr	r1, [r7, #4]
 80044fc:	2052      	movs	r0, #82	@ 0x52
 80044fe:	f7ff fe72 	bl	80041e6 <SD_SendCmd>
 8004502:	4603      	mov	r3, r0
 8004504:	2b00      	cmp	r3, #0
 8004506:	d117      	bne.n	8004538 <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512)) break;
 8004508:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800450c:	68b8      	ldr	r0, [r7, #8]
 800450e:	f7ff fdf9 	bl	8004104 <SD_RxDataBlock>
 8004512:	4603      	mov	r3, r0
 8004514:	2b00      	cmp	r3, #0
 8004516:	d00a      	beq.n	800452e <SD_disk_read+0xa6>
        buff += 512;
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800451e:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	3b01      	subs	r3, #1
 8004524:	603b      	str	r3, [r7, #0]
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d1ed      	bne.n	8004508 <SD_disk_read+0x80>
 800452c:	e000      	b.n	8004530 <SD_disk_read+0xa8>
        if (!SD_RxDataBlock(buff, 512)) break;
 800452e:	bf00      	nop

      /* STOP_TRANSMISSION */
      SD_SendCmd(CMD12, 0);
 8004530:	2100      	movs	r1, #0
 8004532:	204c      	movs	r0, #76	@ 0x4c
 8004534:	f7ff fe57 	bl	80041e6 <SD_SendCmd>
    }
  }

  /* Idle */
  DESELECT();
 8004538:	f7ff fd06 	bl	8003f48 <DESELECT>
  SPI_RxByte();
 800453c:	f7ff fd44 	bl	8003fc8 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	2b00      	cmp	r3, #0
 8004544:	bf14      	ite	ne
 8004546:	2301      	movne	r3, #1
 8004548:	2300      	moveq	r3, #0
 800454a:	b2db      	uxtb	r3, r3
}
 800454c:	4618      	mov	r0, r3
 800454e:	3710      	adds	r7, #16
 8004550:	46bd      	mov	sp, r7
 8004552:	bd80      	pop	{r7, pc}
 8004554:	20000020 	.word	0x20000020
 8004558:	200001dc 	.word	0x200001dc

0800455c <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b084      	sub	sp, #16
 8004560:	af00      	add	r7, sp, #0
 8004562:	60b9      	str	r1, [r7, #8]
 8004564:	607a      	str	r2, [r7, #4]
 8004566:	603b      	str	r3, [r7, #0]
 8004568:	4603      	mov	r3, r0
 800456a:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 800456c:	7bfb      	ldrb	r3, [r7, #15]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d102      	bne.n	8004578 <SD_disk_write+0x1c>
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d101      	bne.n	800457c <SD_disk_write+0x20>
 8004578:	2304      	movs	r3, #4
 800457a:	e06b      	b.n	8004654 <SD_disk_write+0xf8>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800457c:	4b37      	ldr	r3, [pc, #220]	@ (800465c <SD_disk_write+0x100>)
 800457e:	781b      	ldrb	r3, [r3, #0]
 8004580:	b2db      	uxtb	r3, r3
 8004582:	f003 0301 	and.w	r3, r3, #1
 8004586:	2b00      	cmp	r3, #0
 8004588:	d001      	beq.n	800458e <SD_disk_write+0x32>
 800458a:	2303      	movs	r3, #3
 800458c:	e062      	b.n	8004654 <SD_disk_write+0xf8>

  /* write protection */
  if (Stat & STA_PROTECT) return RES_WRPRT;
 800458e:	4b33      	ldr	r3, [pc, #204]	@ (800465c <SD_disk_write+0x100>)
 8004590:	781b      	ldrb	r3, [r3, #0]
 8004592:	b2db      	uxtb	r3, r3
 8004594:	f003 0304 	and.w	r3, r3, #4
 8004598:	2b00      	cmp	r3, #0
 800459a:	d001      	beq.n	80045a0 <SD_disk_write+0x44>
 800459c:	2302      	movs	r3, #2
 800459e:	e059      	b.n	8004654 <SD_disk_write+0xf8>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 80045a0:	4b2f      	ldr	r3, [pc, #188]	@ (8004660 <SD_disk_write+0x104>)
 80045a2:	781b      	ldrb	r3, [r3, #0]
 80045a4:	f003 0304 	and.w	r3, r3, #4
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d102      	bne.n	80045b2 <SD_disk_write+0x56>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	025b      	lsls	r3, r3, #9
 80045b0:	607b      	str	r3, [r7, #4]

  SELECT();
 80045b2:	f7ff fcbd 	bl	8003f30 <SELECT>

  if (count == 1)
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	2b01      	cmp	r3, #1
 80045ba:	d110      	bne.n	80045de <SD_disk_write+0x82>
  {
    /* WRITE_BLOCK */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 80045bc:	6879      	ldr	r1, [r7, #4]
 80045be:	2058      	movs	r0, #88	@ 0x58
 80045c0:	f7ff fe11 	bl	80041e6 <SD_SendCmd>
 80045c4:	4603      	mov	r3, r0
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d13a      	bne.n	8004640 <SD_disk_write+0xe4>
 80045ca:	21fe      	movs	r1, #254	@ 0xfe
 80045cc:	68b8      	ldr	r0, [r7, #8]
 80045ce:	f7ff fdc7 	bl	8004160 <SD_TxDataBlock>
 80045d2:	4603      	mov	r3, r0
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d033      	beq.n	8004640 <SD_disk_write+0xe4>
      count = 0;
 80045d8:	2300      	movs	r3, #0
 80045da:	603b      	str	r3, [r7, #0]
 80045dc:	e030      	b.n	8004640 <SD_disk_write+0xe4>
  }
  else
  {
    /* WRITE_MULTIPLE_BLOCK */
    if (CardType & CT_SD1)
 80045de:	4b20      	ldr	r3, [pc, #128]	@ (8004660 <SD_disk_write+0x104>)
 80045e0:	781b      	ldrb	r3, [r3, #0]
 80045e2:	f003 0302 	and.w	r3, r3, #2
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d007      	beq.n	80045fa <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 80045ea:	2100      	movs	r1, #0
 80045ec:	2077      	movs	r0, #119	@ 0x77
 80045ee:	f7ff fdfa 	bl	80041e6 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 80045f2:	6839      	ldr	r1, [r7, #0]
 80045f4:	2057      	movs	r0, #87	@ 0x57
 80045f6:	f7ff fdf6 	bl	80041e6 <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 80045fa:	6879      	ldr	r1, [r7, #4]
 80045fc:	2059      	movs	r0, #89	@ 0x59
 80045fe:	f7ff fdf2 	bl	80041e6 <SD_SendCmd>
 8004602:	4603      	mov	r3, r0
 8004604:	2b00      	cmp	r3, #0
 8004606:	d11b      	bne.n	8004640 <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 8004608:	21fc      	movs	r1, #252	@ 0xfc
 800460a:	68b8      	ldr	r0, [r7, #8]
 800460c:	f7ff fda8 	bl	8004160 <SD_TxDataBlock>
 8004610:	4603      	mov	r3, r0
 8004612:	2b00      	cmp	r3, #0
 8004614:	d00a      	beq.n	800462c <SD_disk_write+0xd0>
        buff += 512;
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800461c:	60bb      	str	r3, [r7, #8]
      } while (--count);
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	3b01      	subs	r3, #1
 8004622:	603b      	str	r3, [r7, #0]
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d1ee      	bne.n	8004608 <SD_disk_write+0xac>
 800462a:	e000      	b.n	800462e <SD_disk_write+0xd2>
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 800462c:	bf00      	nop

      /* STOP_TRAN token */
      if(!SD_TxDataBlock(0, 0xFD))
 800462e:	21fd      	movs	r1, #253	@ 0xfd
 8004630:	2000      	movs	r0, #0
 8004632:	f7ff fd95 	bl	8004160 <SD_TxDataBlock>
 8004636:	4603      	mov	r3, r0
 8004638:	2b00      	cmp	r3, #0
 800463a:	d101      	bne.n	8004640 <SD_disk_write+0xe4>
      {
        count = 1;
 800463c:	2301      	movs	r3, #1
 800463e:	603b      	str	r3, [r7, #0]
      }
    }
  }

  /* Idle */
  DESELECT();
 8004640:	f7ff fc82 	bl	8003f48 <DESELECT>
  SPI_RxByte();
 8004644:	f7ff fcc0 	bl	8003fc8 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	2b00      	cmp	r3, #0
 800464c:	bf14      	ite	ne
 800464e:	2301      	movne	r3, #1
 8004650:	2300      	moveq	r3, #0
 8004652:	b2db      	uxtb	r3, r3
}
 8004654:	4618      	mov	r0, r3
 8004656:	3710      	adds	r7, #16
 8004658:	46bd      	mov	sp, r7
 800465a:	bd80      	pop	{r7, pc}
 800465c:	20000020 	.word	0x20000020
 8004660:	200001dc 	.word	0x200001dc

08004664 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8004664:	b590      	push	{r4, r7, lr}
 8004666:	b08b      	sub	sp, #44	@ 0x2c
 8004668:	af00      	add	r7, sp, #0
 800466a:	4603      	mov	r3, r0
 800466c:	603a      	str	r2, [r7, #0]
 800466e:	71fb      	strb	r3, [r7, #7]
 8004670:	460b      	mov	r3, r1
 8004672:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  uint8_t n, csd[16], *ptr = buff;
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	623b      	str	r3, [r7, #32]
  WORD csize;

  /* pdrv should be 0 */
  if (drv) return RES_PARERR;
 8004678:	79fb      	ldrb	r3, [r7, #7]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d001      	beq.n	8004682 <SD_disk_ioctl+0x1e>
 800467e:	2304      	movs	r3, #4
 8004680:	e113      	b.n	80048aa <SD_disk_ioctl+0x246>
  res = RES_ERROR;
 8004682:	2301      	movs	r3, #1
 8004684:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  if (ctrl == CTRL_POWER)
 8004688:	79bb      	ldrb	r3, [r7, #6]
 800468a:	2b05      	cmp	r3, #5
 800468c:	d124      	bne.n	80046d8 <SD_disk_ioctl+0x74>
  {
    switch (*ptr)
 800468e:	6a3b      	ldr	r3, [r7, #32]
 8004690:	781b      	ldrb	r3, [r3, #0]
 8004692:	2b02      	cmp	r3, #2
 8004694:	d012      	beq.n	80046bc <SD_disk_ioctl+0x58>
 8004696:	2b02      	cmp	r3, #2
 8004698:	dc1a      	bgt.n	80046d0 <SD_disk_ioctl+0x6c>
 800469a:	2b00      	cmp	r3, #0
 800469c:	d002      	beq.n	80046a4 <SD_disk_ioctl+0x40>
 800469e:	2b01      	cmp	r3, #1
 80046a0:	d006      	beq.n	80046b0 <SD_disk_ioctl+0x4c>
 80046a2:	e015      	b.n	80046d0 <SD_disk_ioctl+0x6c>
    {
    case 0:
      SD_PowerOff();    /* Power Off */
 80046a4:	f7ff fd16 	bl	80040d4 <SD_PowerOff>
      res = RES_OK;
 80046a8:	2300      	movs	r3, #0
 80046aa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80046ae:	e0fa      	b.n	80048a6 <SD_disk_ioctl+0x242>
    case 1:
      SD_PowerOn();   /* Power On */
 80046b0:	f7ff fcce 	bl	8004050 <SD_PowerOn>
      res = RES_OK;
 80046b4:	2300      	movs	r3, #0
 80046b6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80046ba:	e0f4      	b.n	80048a6 <SD_disk_ioctl+0x242>
    case 2:
      *(ptr + 1) = SD_CheckPower();
 80046bc:	6a3b      	ldr	r3, [r7, #32]
 80046be:	1c5c      	adds	r4, r3, #1
 80046c0:	f7ff fd14 	bl	80040ec <SD_CheckPower>
 80046c4:	4603      	mov	r3, r0
 80046c6:	7023      	strb	r3, [r4, #0]
      res = RES_OK;   /* Power Check */
 80046c8:	2300      	movs	r3, #0
 80046ca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80046ce:	e0ea      	b.n	80048a6 <SD_disk_ioctl+0x242>
    default:
      res = RES_PARERR;
 80046d0:	2304      	movs	r3, #4
 80046d2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80046d6:	e0e6      	b.n	80048a6 <SD_disk_ioctl+0x242>
    }
  }
  else
  {
    /* no disk */
    if (Stat & STA_NOINIT){
 80046d8:	4b76      	ldr	r3, [pc, #472]	@ (80048b4 <SD_disk_ioctl+0x250>)
 80046da:	781b      	ldrb	r3, [r3, #0]
 80046dc:	b2db      	uxtb	r3, r3
 80046de:	f003 0301 	and.w	r3, r3, #1
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d001      	beq.n	80046ea <SD_disk_ioctl+0x86>
    	return RES_NOTRDY;
 80046e6:	2303      	movs	r3, #3
 80046e8:	e0df      	b.n	80048aa <SD_disk_ioctl+0x246>
    }
    SELECT();
 80046ea:	f7ff fc21 	bl	8003f30 <SELECT>
    switch (ctrl)
 80046ee:	79bb      	ldrb	r3, [r7, #6]
 80046f0:	2b0d      	cmp	r3, #13
 80046f2:	f200 80c9 	bhi.w	8004888 <SD_disk_ioctl+0x224>
 80046f6:	a201      	add	r2, pc, #4	@ (adr r2, 80046fc <SD_disk_ioctl+0x98>)
 80046f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046fc:	080047f3 	.word	0x080047f3
 8004700:	08004735 	.word	0x08004735
 8004704:	080047e3 	.word	0x080047e3
 8004708:	08004889 	.word	0x08004889
 800470c:	08004889 	.word	0x08004889
 8004710:	08004889 	.word	0x08004889
 8004714:	08004889 	.word	0x08004889
 8004718:	08004889 	.word	0x08004889
 800471c:	08004889 	.word	0x08004889
 8004720:	08004889 	.word	0x08004889
 8004724:	08004889 	.word	0x08004889
 8004728:	08004805 	.word	0x08004805
 800472c:	08004829 	.word	0x08004829
 8004730:	0800484d 	.word	0x0800484d
    {
    case GET_SECTOR_COUNT:
      /* SEND_CSD */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8004734:	2100      	movs	r1, #0
 8004736:	2049      	movs	r0, #73	@ 0x49
 8004738:	f7ff fd55 	bl	80041e6 <SD_SendCmd>
 800473c:	4603      	mov	r3, r0
 800473e:	2b00      	cmp	r3, #0
 8004740:	f040 80a6 	bne.w	8004890 <SD_disk_ioctl+0x22c>
 8004744:	f107 030c 	add.w	r3, r7, #12
 8004748:	2110      	movs	r1, #16
 800474a:	4618      	mov	r0, r3
 800474c:	f7ff fcda 	bl	8004104 <SD_RxDataBlock>
 8004750:	4603      	mov	r3, r0
 8004752:	2b00      	cmp	r3, #0
 8004754:	f000 809c 	beq.w	8004890 <SD_disk_ioctl+0x22c>
      {
        if ((csd[0] >> 6) == 1)
 8004758:	7b3b      	ldrb	r3, [r7, #12]
 800475a:	099b      	lsrs	r3, r3, #6
 800475c:	b2db      	uxtb	r3, r3
 800475e:	2b01      	cmp	r3, #1
 8004760:	d10d      	bne.n	800477e <SD_disk_ioctl+0x11a>
        {
          /* SDC V2 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8004762:	7d7b      	ldrb	r3, [r7, #21]
 8004764:	461a      	mov	r2, r3
 8004766:	7d3b      	ldrb	r3, [r7, #20]
 8004768:	021b      	lsls	r3, r3, #8
 800476a:	b29b      	uxth	r3, r3
 800476c:	4413      	add	r3, r2
 800476e:	b29b      	uxth	r3, r3
 8004770:	3301      	adds	r3, #1
 8004772:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 8004774:	8bfb      	ldrh	r3, [r7, #30]
 8004776:	029a      	lsls	r2, r3, #10
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	601a      	str	r2, [r3, #0]
 800477c:	e02d      	b.n	80047da <SD_disk_ioctl+0x176>
        }
        else
        {
          /* MMC or SDC V1 */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800477e:	7c7b      	ldrb	r3, [r7, #17]
 8004780:	f003 030f 	and.w	r3, r3, #15
 8004784:	b2da      	uxtb	r2, r3
 8004786:	7dbb      	ldrb	r3, [r7, #22]
 8004788:	09db      	lsrs	r3, r3, #7
 800478a:	b2db      	uxtb	r3, r3
 800478c:	4413      	add	r3, r2
 800478e:	b2da      	uxtb	r2, r3
 8004790:	7d7b      	ldrb	r3, [r7, #21]
 8004792:	005b      	lsls	r3, r3, #1
 8004794:	b2db      	uxtb	r3, r3
 8004796:	f003 0306 	and.w	r3, r3, #6
 800479a:	b2db      	uxtb	r3, r3
 800479c:	4413      	add	r3, r2
 800479e:	b2db      	uxtb	r3, r3
 80047a0:	3302      	adds	r3, #2
 80047a2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 80047a6:	7d3b      	ldrb	r3, [r7, #20]
 80047a8:	099b      	lsrs	r3, r3, #6
 80047aa:	b2db      	uxtb	r3, r3
 80047ac:	461a      	mov	r2, r3
 80047ae:	7cfb      	ldrb	r3, [r7, #19]
 80047b0:	009b      	lsls	r3, r3, #2
 80047b2:	b29b      	uxth	r3, r3
 80047b4:	4413      	add	r3, r2
 80047b6:	b29a      	uxth	r2, r3
 80047b8:	7cbb      	ldrb	r3, [r7, #18]
 80047ba:	029b      	lsls	r3, r3, #10
 80047bc:	b29b      	uxth	r3, r3
 80047be:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80047c2:	b29b      	uxth	r3, r3
 80047c4:	4413      	add	r3, r2
 80047c6:	b29b      	uxth	r3, r3
 80047c8:	3301      	adds	r3, #1
 80047ca:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 80047cc:	8bfa      	ldrh	r2, [r7, #30]
 80047ce:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80047d2:	3b09      	subs	r3, #9
 80047d4:	409a      	lsls	r2, r3
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	601a      	str	r2, [r3, #0]
        }
        res = RES_OK;
 80047da:	2300      	movs	r3, #0
 80047dc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
      break;
 80047e0:	e056      	b.n	8004890 <SD_disk_ioctl+0x22c>
    case GET_SECTOR_SIZE:
      *(WORD*) buff = 512;
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80047e8:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 80047ea:	2300      	movs	r3, #0
 80047ec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80047f0:	e055      	b.n	800489e <SD_disk_ioctl+0x23a>
    case CTRL_SYNC:
      if (SD_ReadyWait() == 0xFF) res = RES_OK;
 80047f2:	f7ff fc13 	bl	800401c <SD_ReadyWait>
 80047f6:	4603      	mov	r3, r0
 80047f8:	2bff      	cmp	r3, #255	@ 0xff
 80047fa:	d14b      	bne.n	8004894 <SD_disk_ioctl+0x230>
 80047fc:	2300      	movs	r3, #0
 80047fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8004802:	e047      	b.n	8004894 <SD_disk_ioctl+0x230>
    case MMC_GET_CSD:
      /* SEND_CSD */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8004804:	2100      	movs	r1, #0
 8004806:	2049      	movs	r0, #73	@ 0x49
 8004808:	f7ff fced 	bl	80041e6 <SD_SendCmd>
 800480c:	4603      	mov	r3, r0
 800480e:	2b00      	cmp	r3, #0
 8004810:	d142      	bne.n	8004898 <SD_disk_ioctl+0x234>
 8004812:	2110      	movs	r1, #16
 8004814:	6a38      	ldr	r0, [r7, #32]
 8004816:	f7ff fc75 	bl	8004104 <SD_RxDataBlock>
 800481a:	4603      	mov	r3, r0
 800481c:	2b00      	cmp	r3, #0
 800481e:	d03b      	beq.n	8004898 <SD_disk_ioctl+0x234>
 8004820:	2300      	movs	r3, #0
 8004822:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8004826:	e037      	b.n	8004898 <SD_disk_ioctl+0x234>
    case MMC_GET_CID:
      /* SEND_CID */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8004828:	2100      	movs	r1, #0
 800482a:	204a      	movs	r0, #74	@ 0x4a
 800482c:	f7ff fcdb 	bl	80041e6 <SD_SendCmd>
 8004830:	4603      	mov	r3, r0
 8004832:	2b00      	cmp	r3, #0
 8004834:	d132      	bne.n	800489c <SD_disk_ioctl+0x238>
 8004836:	2110      	movs	r1, #16
 8004838:	6a38      	ldr	r0, [r7, #32]
 800483a:	f7ff fc63 	bl	8004104 <SD_RxDataBlock>
 800483e:	4603      	mov	r3, r0
 8004840:	2b00      	cmp	r3, #0
 8004842:	d02b      	beq.n	800489c <SD_disk_ioctl+0x238>
 8004844:	2300      	movs	r3, #0
 8004846:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800484a:	e027      	b.n	800489c <SD_disk_ioctl+0x238>
    case MMC_GET_OCR:
      /* READ_OCR */
      if (SD_SendCmd(CMD58, 0) == 0)
 800484c:	2100      	movs	r1, #0
 800484e:	207a      	movs	r0, #122	@ 0x7a
 8004850:	f7ff fcc9 	bl	80041e6 <SD_SendCmd>
 8004854:	4603      	mov	r3, r0
 8004856:	2b00      	cmp	r3, #0
 8004858:	d116      	bne.n	8004888 <SD_disk_ioctl+0x224>
      {
        for (n = 0; n < 4; n++)
 800485a:	2300      	movs	r3, #0
 800485c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8004860:	e00b      	b.n	800487a <SD_disk_ioctl+0x216>
        {
          *ptr++ = SPI_RxByte();
 8004862:	6a3c      	ldr	r4, [r7, #32]
 8004864:	1c63      	adds	r3, r4, #1
 8004866:	623b      	str	r3, [r7, #32]
 8004868:	f7ff fbae 	bl	8003fc8 <SPI_RxByte>
 800486c:	4603      	mov	r3, r0
 800486e:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8004870:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004874:	3301      	adds	r3, #1
 8004876:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800487a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800487e:	2b03      	cmp	r3, #3
 8004880:	d9ef      	bls.n	8004862 <SD_disk_ioctl+0x1fe>
        }
        res = RES_OK;
 8004882:	2300      	movs	r3, #0
 8004884:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
    default:
      res = RES_PARERR;
 8004888:	2304      	movs	r3, #4
 800488a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800488e:	e006      	b.n	800489e <SD_disk_ioctl+0x23a>
      break;
 8004890:	bf00      	nop
 8004892:	e004      	b.n	800489e <SD_disk_ioctl+0x23a>
      break;
 8004894:	bf00      	nop
 8004896:	e002      	b.n	800489e <SD_disk_ioctl+0x23a>
      break;
 8004898:	bf00      	nop
 800489a:	e000      	b.n	800489e <SD_disk_ioctl+0x23a>
      break;
 800489c:	bf00      	nop
    }
    DESELECT();
 800489e:	f7ff fb53 	bl	8003f48 <DESELECT>
    SPI_RxByte();
 80048a2:	f7ff fb91 	bl	8003fc8 <SPI_RxByte>
  }
  return res;
 80048a6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80048aa:	4618      	mov	r0, r3
 80048ac:	372c      	adds	r7, #44	@ 0x2c
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bd90      	pop	{r4, r7, pc}
 80048b2:	bf00      	nop
 80048b4:	20000020 	.word	0x20000020

080048b8 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 80048b8:	b480      	push	{r7}
 80048ba:	b085      	sub	sp, #20
 80048bc:	af00      	add	r7, sp, #0
 80048be:	4603      	mov	r3, r0
 80048c0:	6039      	str	r1, [r7, #0]
 80048c2:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 80048c4:	88fb      	ldrh	r3, [r7, #6]
 80048c6:	2b7f      	cmp	r3, #127	@ 0x7f
 80048c8:	d802      	bhi.n	80048d0 <ff_convert+0x18>
		c = chr;
 80048ca:	88fb      	ldrh	r3, [r7, #6]
 80048cc:	81fb      	strh	r3, [r7, #14]
 80048ce:	e025      	b.n	800491c <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d00b      	beq.n	80048ee <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 80048d6:	88fb      	ldrh	r3, [r7, #6]
 80048d8:	2bff      	cmp	r3, #255	@ 0xff
 80048da:	d805      	bhi.n	80048e8 <ff_convert+0x30>
 80048dc:	88fb      	ldrh	r3, [r7, #6]
 80048de:	3b80      	subs	r3, #128	@ 0x80
 80048e0:	4a12      	ldr	r2, [pc, #72]	@ (800492c <ff_convert+0x74>)
 80048e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80048e6:	e000      	b.n	80048ea <ff_convert+0x32>
 80048e8:	2300      	movs	r3, #0
 80048ea:	81fb      	strh	r3, [r7, #14]
 80048ec:	e016      	b.n	800491c <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 80048ee:	2300      	movs	r3, #0
 80048f0:	81fb      	strh	r3, [r7, #14]
 80048f2:	e009      	b.n	8004908 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 80048f4:	89fb      	ldrh	r3, [r7, #14]
 80048f6:	4a0d      	ldr	r2, [pc, #52]	@ (800492c <ff_convert+0x74>)
 80048f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80048fc:	88fa      	ldrh	r2, [r7, #6]
 80048fe:	429a      	cmp	r2, r3
 8004900:	d006      	beq.n	8004910 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8004902:	89fb      	ldrh	r3, [r7, #14]
 8004904:	3301      	adds	r3, #1
 8004906:	81fb      	strh	r3, [r7, #14]
 8004908:	89fb      	ldrh	r3, [r7, #14]
 800490a:	2b7f      	cmp	r3, #127	@ 0x7f
 800490c:	d9f2      	bls.n	80048f4 <ff_convert+0x3c>
 800490e:	e000      	b.n	8004912 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8004910:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8004912:	89fb      	ldrh	r3, [r7, #14]
 8004914:	3380      	adds	r3, #128	@ 0x80
 8004916:	b29b      	uxth	r3, r3
 8004918:	b2db      	uxtb	r3, r3
 800491a:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800491c:	89fb      	ldrh	r3, [r7, #14]
}
 800491e:	4618      	mov	r0, r3
 8004920:	3714      	adds	r7, #20
 8004922:	46bd      	mov	sp, r7
 8004924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004928:	4770      	bx	lr
 800492a:	bf00      	nop
 800492c:	08008ea8 	.word	0x08008ea8

08004930 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8004930:	b480      	push	{r7}
 8004932:	b087      	sub	sp, #28
 8004934:	af00      	add	r7, sp, #0
 8004936:	4603      	mov	r3, r0
 8004938:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800493a:	88fb      	ldrh	r3, [r7, #6]
 800493c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004940:	d201      	bcs.n	8004946 <ff_wtoupper+0x16>
 8004942:	4b3e      	ldr	r3, [pc, #248]	@ (8004a3c <ff_wtoupper+0x10c>)
 8004944:	e000      	b.n	8004948 <ff_wtoupper+0x18>
 8004946:	4b3e      	ldr	r3, [pc, #248]	@ (8004a40 <ff_wtoupper+0x110>)
 8004948:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800494a:	697b      	ldr	r3, [r7, #20]
 800494c:	1c9a      	adds	r2, r3, #2
 800494e:	617a      	str	r2, [r7, #20]
 8004950:	881b      	ldrh	r3, [r3, #0]
 8004952:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8004954:	8a7b      	ldrh	r3, [r7, #18]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d068      	beq.n	8004a2c <ff_wtoupper+0xfc>
 800495a:	88fa      	ldrh	r2, [r7, #6]
 800495c:	8a7b      	ldrh	r3, [r7, #18]
 800495e:	429a      	cmp	r2, r3
 8004960:	d364      	bcc.n	8004a2c <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	1c9a      	adds	r2, r3, #2
 8004966:	617a      	str	r2, [r7, #20]
 8004968:	881b      	ldrh	r3, [r3, #0]
 800496a:	823b      	strh	r3, [r7, #16]
 800496c:	8a3b      	ldrh	r3, [r7, #16]
 800496e:	0a1b      	lsrs	r3, r3, #8
 8004970:	81fb      	strh	r3, [r7, #14]
 8004972:	8a3b      	ldrh	r3, [r7, #16]
 8004974:	b2db      	uxtb	r3, r3
 8004976:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8004978:	88fa      	ldrh	r2, [r7, #6]
 800497a:	8a79      	ldrh	r1, [r7, #18]
 800497c:	8a3b      	ldrh	r3, [r7, #16]
 800497e:	440b      	add	r3, r1
 8004980:	429a      	cmp	r2, r3
 8004982:	da49      	bge.n	8004a18 <ff_wtoupper+0xe8>
			switch (cmd) {
 8004984:	89fb      	ldrh	r3, [r7, #14]
 8004986:	2b08      	cmp	r3, #8
 8004988:	d84f      	bhi.n	8004a2a <ff_wtoupper+0xfa>
 800498a:	a201      	add	r2, pc, #4	@ (adr r2, 8004990 <ff_wtoupper+0x60>)
 800498c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004990:	080049b5 	.word	0x080049b5
 8004994:	080049c7 	.word	0x080049c7
 8004998:	080049dd 	.word	0x080049dd
 800499c:	080049e5 	.word	0x080049e5
 80049a0:	080049ed 	.word	0x080049ed
 80049a4:	080049f5 	.word	0x080049f5
 80049a8:	080049fd 	.word	0x080049fd
 80049ac:	08004a05 	.word	0x08004a05
 80049b0:	08004a0d 	.word	0x08004a0d
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 80049b4:	88fa      	ldrh	r2, [r7, #6]
 80049b6:	8a7b      	ldrh	r3, [r7, #18]
 80049b8:	1ad3      	subs	r3, r2, r3
 80049ba:	005b      	lsls	r3, r3, #1
 80049bc:	697a      	ldr	r2, [r7, #20]
 80049be:	4413      	add	r3, r2
 80049c0:	881b      	ldrh	r3, [r3, #0]
 80049c2:	80fb      	strh	r3, [r7, #6]
 80049c4:	e027      	b.n	8004a16 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 80049c6:	88fa      	ldrh	r2, [r7, #6]
 80049c8:	8a7b      	ldrh	r3, [r7, #18]
 80049ca:	1ad3      	subs	r3, r2, r3
 80049cc:	b29b      	uxth	r3, r3
 80049ce:	f003 0301 	and.w	r3, r3, #1
 80049d2:	b29b      	uxth	r3, r3
 80049d4:	88fa      	ldrh	r2, [r7, #6]
 80049d6:	1ad3      	subs	r3, r2, r3
 80049d8:	80fb      	strh	r3, [r7, #6]
 80049da:	e01c      	b.n	8004a16 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 80049dc:	88fb      	ldrh	r3, [r7, #6]
 80049de:	3b10      	subs	r3, #16
 80049e0:	80fb      	strh	r3, [r7, #6]
 80049e2:	e018      	b.n	8004a16 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 80049e4:	88fb      	ldrh	r3, [r7, #6]
 80049e6:	3b20      	subs	r3, #32
 80049e8:	80fb      	strh	r3, [r7, #6]
 80049ea:	e014      	b.n	8004a16 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 80049ec:	88fb      	ldrh	r3, [r7, #6]
 80049ee:	3b30      	subs	r3, #48	@ 0x30
 80049f0:	80fb      	strh	r3, [r7, #6]
 80049f2:	e010      	b.n	8004a16 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 80049f4:	88fb      	ldrh	r3, [r7, #6]
 80049f6:	3b1a      	subs	r3, #26
 80049f8:	80fb      	strh	r3, [r7, #6]
 80049fa:	e00c      	b.n	8004a16 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 80049fc:	88fb      	ldrh	r3, [r7, #6]
 80049fe:	3308      	adds	r3, #8
 8004a00:	80fb      	strh	r3, [r7, #6]
 8004a02:	e008      	b.n	8004a16 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8004a04:	88fb      	ldrh	r3, [r7, #6]
 8004a06:	3b50      	subs	r3, #80	@ 0x50
 8004a08:	80fb      	strh	r3, [r7, #6]
 8004a0a:	e004      	b.n	8004a16 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8004a0c:	88fb      	ldrh	r3, [r7, #6]
 8004a0e:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 8004a12:	80fb      	strh	r3, [r7, #6]
 8004a14:	bf00      	nop
			}
			break;
 8004a16:	e008      	b.n	8004a2a <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8004a18:	89fb      	ldrh	r3, [r7, #14]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d195      	bne.n	800494a <ff_wtoupper+0x1a>
 8004a1e:	8a3b      	ldrh	r3, [r7, #16]
 8004a20:	005b      	lsls	r3, r3, #1
 8004a22:	697a      	ldr	r2, [r7, #20]
 8004a24:	4413      	add	r3, r2
 8004a26:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8004a28:	e78f      	b.n	800494a <ff_wtoupper+0x1a>
			break;
 8004a2a:	bf00      	nop
	}

	return chr;
 8004a2c:	88fb      	ldrh	r3, [r7, #6]
}
 8004a2e:	4618      	mov	r0, r3
 8004a30:	371c      	adds	r7, #28
 8004a32:	46bd      	mov	sp, r7
 8004a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a38:	4770      	bx	lr
 8004a3a:	bf00      	nop
 8004a3c:	08008fa8 	.word	0x08008fa8
 8004a40:	0800919c 	.word	0x0800919c

08004a44 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b084      	sub	sp, #16
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	4603      	mov	r3, r0
 8004a4c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8004a4e:	79fb      	ldrb	r3, [r7, #7]
 8004a50:	4a08      	ldr	r2, [pc, #32]	@ (8004a74 <disk_status+0x30>)
 8004a52:	009b      	lsls	r3, r3, #2
 8004a54:	4413      	add	r3, r2
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	79fa      	ldrb	r2, [r7, #7]
 8004a5c:	4905      	ldr	r1, [pc, #20]	@ (8004a74 <disk_status+0x30>)
 8004a5e:	440a      	add	r2, r1
 8004a60:	7a12      	ldrb	r2, [r2, #8]
 8004a62:	4610      	mov	r0, r2
 8004a64:	4798      	blx	r3
 8004a66:	4603      	mov	r3, r0
 8004a68:	73fb      	strb	r3, [r7, #15]
  return stat;
 8004a6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	3710      	adds	r7, #16
 8004a70:	46bd      	mov	sp, r7
 8004a72:	bd80      	pop	{r7, pc}
 8004a74:	20000408 	.word	0x20000408

08004a78 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b084      	sub	sp, #16
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	4603      	mov	r3, r0
 8004a80:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8004a82:	2300      	movs	r3, #0
 8004a84:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8004a86:	79fb      	ldrb	r3, [r7, #7]
 8004a88:	4a0e      	ldr	r2, [pc, #56]	@ (8004ac4 <disk_initialize+0x4c>)
 8004a8a:	5cd3      	ldrb	r3, [r2, r3]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d114      	bne.n	8004aba <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8004a90:	79fb      	ldrb	r3, [r7, #7]
 8004a92:	4a0c      	ldr	r2, [pc, #48]	@ (8004ac4 <disk_initialize+0x4c>)
 8004a94:	009b      	lsls	r3, r3, #2
 8004a96:	4413      	add	r3, r2
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	79fa      	ldrb	r2, [r7, #7]
 8004a9e:	4909      	ldr	r1, [pc, #36]	@ (8004ac4 <disk_initialize+0x4c>)
 8004aa0:	440a      	add	r2, r1
 8004aa2:	7a12      	ldrb	r2, [r2, #8]
 8004aa4:	4610      	mov	r0, r2
 8004aa6:	4798      	blx	r3
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 8004aac:	7bfb      	ldrb	r3, [r7, #15]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d103      	bne.n	8004aba <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 8004ab2:	79fb      	ldrb	r3, [r7, #7]
 8004ab4:	4a03      	ldr	r2, [pc, #12]	@ (8004ac4 <disk_initialize+0x4c>)
 8004ab6:	2101      	movs	r1, #1
 8004ab8:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 8004aba:	7bfb      	ldrb	r3, [r7, #15]
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	3710      	adds	r7, #16
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bd80      	pop	{r7, pc}
 8004ac4:	20000408 	.word	0x20000408

08004ac8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8004ac8:	b590      	push	{r4, r7, lr}
 8004aca:	b087      	sub	sp, #28
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	60b9      	str	r1, [r7, #8]
 8004ad0:	607a      	str	r2, [r7, #4]
 8004ad2:	603b      	str	r3, [r7, #0]
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8004ad8:	7bfb      	ldrb	r3, [r7, #15]
 8004ada:	4a0a      	ldr	r2, [pc, #40]	@ (8004b04 <disk_read+0x3c>)
 8004adc:	009b      	lsls	r3, r3, #2
 8004ade:	4413      	add	r3, r2
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	689c      	ldr	r4, [r3, #8]
 8004ae4:	7bfb      	ldrb	r3, [r7, #15]
 8004ae6:	4a07      	ldr	r2, [pc, #28]	@ (8004b04 <disk_read+0x3c>)
 8004ae8:	4413      	add	r3, r2
 8004aea:	7a18      	ldrb	r0, [r3, #8]
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	687a      	ldr	r2, [r7, #4]
 8004af0:	68b9      	ldr	r1, [r7, #8]
 8004af2:	47a0      	blx	r4
 8004af4:	4603      	mov	r3, r0
 8004af6:	75fb      	strb	r3, [r7, #23]
  return res;
 8004af8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004afa:	4618      	mov	r0, r3
 8004afc:	371c      	adds	r7, #28
 8004afe:	46bd      	mov	sp, r7
 8004b00:	bd90      	pop	{r4, r7, pc}
 8004b02:	bf00      	nop
 8004b04:	20000408 	.word	0x20000408

08004b08 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8004b08:	b590      	push	{r4, r7, lr}
 8004b0a:	b087      	sub	sp, #28
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	60b9      	str	r1, [r7, #8]
 8004b10:	607a      	str	r2, [r7, #4]
 8004b12:	603b      	str	r3, [r7, #0]
 8004b14:	4603      	mov	r3, r0
 8004b16:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8004b18:	7bfb      	ldrb	r3, [r7, #15]
 8004b1a:	4a0a      	ldr	r2, [pc, #40]	@ (8004b44 <disk_write+0x3c>)
 8004b1c:	009b      	lsls	r3, r3, #2
 8004b1e:	4413      	add	r3, r2
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	68dc      	ldr	r4, [r3, #12]
 8004b24:	7bfb      	ldrb	r3, [r7, #15]
 8004b26:	4a07      	ldr	r2, [pc, #28]	@ (8004b44 <disk_write+0x3c>)
 8004b28:	4413      	add	r3, r2
 8004b2a:	7a18      	ldrb	r0, [r3, #8]
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	687a      	ldr	r2, [r7, #4]
 8004b30:	68b9      	ldr	r1, [r7, #8]
 8004b32:	47a0      	blx	r4
 8004b34:	4603      	mov	r3, r0
 8004b36:	75fb      	strb	r3, [r7, #23]
  return res;
 8004b38:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	371c      	adds	r7, #28
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	bd90      	pop	{r4, r7, pc}
 8004b42:	bf00      	nop
 8004b44:	20000408 	.word	0x20000408

08004b48 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b084      	sub	sp, #16
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	4603      	mov	r3, r0
 8004b50:	603a      	str	r2, [r7, #0]
 8004b52:	71fb      	strb	r3, [r7, #7]
 8004b54:	460b      	mov	r3, r1
 8004b56:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8004b58:	79fb      	ldrb	r3, [r7, #7]
 8004b5a:	4a09      	ldr	r2, [pc, #36]	@ (8004b80 <disk_ioctl+0x38>)
 8004b5c:	009b      	lsls	r3, r3, #2
 8004b5e:	4413      	add	r3, r2
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	691b      	ldr	r3, [r3, #16]
 8004b64:	79fa      	ldrb	r2, [r7, #7]
 8004b66:	4906      	ldr	r1, [pc, #24]	@ (8004b80 <disk_ioctl+0x38>)
 8004b68:	440a      	add	r2, r1
 8004b6a:	7a10      	ldrb	r0, [r2, #8]
 8004b6c:	79b9      	ldrb	r1, [r7, #6]
 8004b6e:	683a      	ldr	r2, [r7, #0]
 8004b70:	4798      	blx	r3
 8004b72:	4603      	mov	r3, r0
 8004b74:	73fb      	strb	r3, [r7, #15]
  return res;
 8004b76:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	3710      	adds	r7, #16
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bd80      	pop	{r7, pc}
 8004b80:	20000408 	.word	0x20000408

08004b84 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8004b84:	b480      	push	{r7}
 8004b86:	b085      	sub	sp, #20
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	3301      	adds	r3, #1
 8004b90:	781b      	ldrb	r3, [r3, #0]
 8004b92:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8004b94:	89fb      	ldrh	r3, [r7, #14]
 8004b96:	021b      	lsls	r3, r3, #8
 8004b98:	b21a      	sxth	r2, r3
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	781b      	ldrb	r3, [r3, #0]
 8004b9e:	b21b      	sxth	r3, r3
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	b21b      	sxth	r3, r3
 8004ba4:	81fb      	strh	r3, [r7, #14]
	return rv;
 8004ba6:	89fb      	ldrh	r3, [r7, #14]
}
 8004ba8:	4618      	mov	r0, r3
 8004baa:	3714      	adds	r7, #20
 8004bac:	46bd      	mov	sp, r7
 8004bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb2:	4770      	bx	lr

08004bb4 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	b085      	sub	sp, #20
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	3303      	adds	r3, #3
 8004bc0:	781b      	ldrb	r3, [r3, #0]
 8004bc2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	021b      	lsls	r3, r3, #8
 8004bc8:	687a      	ldr	r2, [r7, #4]
 8004bca:	3202      	adds	r2, #2
 8004bcc:	7812      	ldrb	r2, [r2, #0]
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	021b      	lsls	r3, r3, #8
 8004bd6:	687a      	ldr	r2, [r7, #4]
 8004bd8:	3201      	adds	r2, #1
 8004bda:	7812      	ldrb	r2, [r2, #0]
 8004bdc:	4313      	orrs	r3, r2
 8004bde:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	021b      	lsls	r3, r3, #8
 8004be4:	687a      	ldr	r2, [r7, #4]
 8004be6:	7812      	ldrb	r2, [r2, #0]
 8004be8:	4313      	orrs	r3, r2
 8004bea:	60fb      	str	r3, [r7, #12]
	return rv;
 8004bec:	68fb      	ldr	r3, [r7, #12]
}
 8004bee:	4618      	mov	r0, r3
 8004bf0:	3714      	adds	r7, #20
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf8:	4770      	bx	lr

08004bfa <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8004bfa:	b480      	push	{r7}
 8004bfc:	b083      	sub	sp, #12
 8004bfe:	af00      	add	r7, sp, #0
 8004c00:	6078      	str	r0, [r7, #4]
 8004c02:	460b      	mov	r3, r1
 8004c04:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	1c5a      	adds	r2, r3, #1
 8004c0a:	607a      	str	r2, [r7, #4]
 8004c0c:	887a      	ldrh	r2, [r7, #2]
 8004c0e:	b2d2      	uxtb	r2, r2
 8004c10:	701a      	strb	r2, [r3, #0]
 8004c12:	887b      	ldrh	r3, [r7, #2]
 8004c14:	0a1b      	lsrs	r3, r3, #8
 8004c16:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	1c5a      	adds	r2, r3, #1
 8004c1c:	607a      	str	r2, [r7, #4]
 8004c1e:	887a      	ldrh	r2, [r7, #2]
 8004c20:	b2d2      	uxtb	r2, r2
 8004c22:	701a      	strb	r2, [r3, #0]
}
 8004c24:	bf00      	nop
 8004c26:	370c      	adds	r7, #12
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2e:	4770      	bx	lr

08004c30 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8004c30:	b480      	push	{r7}
 8004c32:	b083      	sub	sp, #12
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
 8004c38:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	1c5a      	adds	r2, r3, #1
 8004c3e:	607a      	str	r2, [r7, #4]
 8004c40:	683a      	ldr	r2, [r7, #0]
 8004c42:	b2d2      	uxtb	r2, r2
 8004c44:	701a      	strb	r2, [r3, #0]
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	0a1b      	lsrs	r3, r3, #8
 8004c4a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	1c5a      	adds	r2, r3, #1
 8004c50:	607a      	str	r2, [r7, #4]
 8004c52:	683a      	ldr	r2, [r7, #0]
 8004c54:	b2d2      	uxtb	r2, r2
 8004c56:	701a      	strb	r2, [r3, #0]
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	0a1b      	lsrs	r3, r3, #8
 8004c5c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	1c5a      	adds	r2, r3, #1
 8004c62:	607a      	str	r2, [r7, #4]
 8004c64:	683a      	ldr	r2, [r7, #0]
 8004c66:	b2d2      	uxtb	r2, r2
 8004c68:	701a      	strb	r2, [r3, #0]
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	0a1b      	lsrs	r3, r3, #8
 8004c6e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	1c5a      	adds	r2, r3, #1
 8004c74:	607a      	str	r2, [r7, #4]
 8004c76:	683a      	ldr	r2, [r7, #0]
 8004c78:	b2d2      	uxtb	r2, r2
 8004c7a:	701a      	strb	r2, [r3, #0]
}
 8004c7c:	bf00      	nop
 8004c7e:	370c      	adds	r7, #12
 8004c80:	46bd      	mov	sp, r7
 8004c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c86:	4770      	bx	lr

08004c88 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8004c88:	b480      	push	{r7}
 8004c8a:	b087      	sub	sp, #28
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	60f8      	str	r0, [r7, #12]
 8004c90:	60b9      	str	r1, [r7, #8]
 8004c92:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d00d      	beq.n	8004cbe <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8004ca2:	693a      	ldr	r2, [r7, #16]
 8004ca4:	1c53      	adds	r3, r2, #1
 8004ca6:	613b      	str	r3, [r7, #16]
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	1c59      	adds	r1, r3, #1
 8004cac:	6179      	str	r1, [r7, #20]
 8004cae:	7812      	ldrb	r2, [r2, #0]
 8004cb0:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	3b01      	subs	r3, #1
 8004cb6:	607b      	str	r3, [r7, #4]
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d1f1      	bne.n	8004ca2 <mem_cpy+0x1a>
	}
}
 8004cbe:	bf00      	nop
 8004cc0:	371c      	adds	r7, #28
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc8:	4770      	bx	lr

08004cca <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8004cca:	b480      	push	{r7}
 8004ccc:	b087      	sub	sp, #28
 8004cce:	af00      	add	r7, sp, #0
 8004cd0:	60f8      	str	r0, [r7, #12]
 8004cd2:	60b9      	str	r1, [r7, #8]
 8004cd4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8004cda:	697b      	ldr	r3, [r7, #20]
 8004cdc:	1c5a      	adds	r2, r3, #1
 8004cde:	617a      	str	r2, [r7, #20]
 8004ce0:	68ba      	ldr	r2, [r7, #8]
 8004ce2:	b2d2      	uxtb	r2, r2
 8004ce4:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	3b01      	subs	r3, #1
 8004cea:	607b      	str	r3, [r7, #4]
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d1f3      	bne.n	8004cda <mem_set+0x10>
}
 8004cf2:	bf00      	nop
 8004cf4:	bf00      	nop
 8004cf6:	371c      	adds	r7, #28
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfe:	4770      	bx	lr

08004d00 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8004d00:	b480      	push	{r7}
 8004d02:	b089      	sub	sp, #36	@ 0x24
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	60f8      	str	r0, [r7, #12]
 8004d08:	60b9      	str	r1, [r7, #8]
 8004d0a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	61fb      	str	r3, [r7, #28]
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8004d14:	2300      	movs	r3, #0
 8004d16:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8004d18:	69fb      	ldr	r3, [r7, #28]
 8004d1a:	1c5a      	adds	r2, r3, #1
 8004d1c:	61fa      	str	r2, [r7, #28]
 8004d1e:	781b      	ldrb	r3, [r3, #0]
 8004d20:	4619      	mov	r1, r3
 8004d22:	69bb      	ldr	r3, [r7, #24]
 8004d24:	1c5a      	adds	r2, r3, #1
 8004d26:	61ba      	str	r2, [r7, #24]
 8004d28:	781b      	ldrb	r3, [r3, #0]
 8004d2a:	1acb      	subs	r3, r1, r3
 8004d2c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	3b01      	subs	r3, #1
 8004d32:	607b      	str	r3, [r7, #4]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d002      	beq.n	8004d40 <mem_cmp+0x40>
 8004d3a:	697b      	ldr	r3, [r7, #20]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d0eb      	beq.n	8004d18 <mem_cmp+0x18>

	return r;
 8004d40:	697b      	ldr	r3, [r7, #20]
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	3724      	adds	r7, #36	@ 0x24
 8004d46:	46bd      	mov	sp, r7
 8004d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4c:	4770      	bx	lr

08004d4e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8004d4e:	b480      	push	{r7}
 8004d50:	b083      	sub	sp, #12
 8004d52:	af00      	add	r7, sp, #0
 8004d54:	6078      	str	r0, [r7, #4]
 8004d56:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8004d58:	e002      	b.n	8004d60 <chk_chr+0x12>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	3301      	adds	r3, #1
 8004d5e:	607b      	str	r3, [r7, #4]
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	781b      	ldrb	r3, [r3, #0]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d005      	beq.n	8004d74 <chk_chr+0x26>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	781b      	ldrb	r3, [r3, #0]
 8004d6c:	461a      	mov	r2, r3
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d1f2      	bne.n	8004d5a <chk_chr+0xc>
	return *str;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	781b      	ldrb	r3, [r3, #0]
}
 8004d78:	4618      	mov	r0, r3
 8004d7a:	370c      	adds	r7, #12
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d82:	4770      	bx	lr

08004d84 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004d84:	b480      	push	{r7}
 8004d86:	b085      	sub	sp, #20
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
 8004d8c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004d8e:	2300      	movs	r3, #0
 8004d90:	60bb      	str	r3, [r7, #8]
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	60fb      	str	r3, [r7, #12]
 8004d96:	e029      	b.n	8004dec <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8004d98:	4a27      	ldr	r2, [pc, #156]	@ (8004e38 <chk_lock+0xb4>)
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	011b      	lsls	r3, r3, #4
 8004d9e:	4413      	add	r3, r2
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d01d      	beq.n	8004de2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8004da6:	4a24      	ldr	r2, [pc, #144]	@ (8004e38 <chk_lock+0xb4>)
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	011b      	lsls	r3, r3, #4
 8004dac:	4413      	add	r3, r2
 8004dae:	681a      	ldr	r2, [r3, #0]
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	429a      	cmp	r2, r3
 8004db6:	d116      	bne.n	8004de6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8004db8:	4a1f      	ldr	r2, [pc, #124]	@ (8004e38 <chk_lock+0xb4>)
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	011b      	lsls	r3, r3, #4
 8004dbe:	4413      	add	r3, r2
 8004dc0:	3304      	adds	r3, #4
 8004dc2:	681a      	ldr	r2, [r3, #0]
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8004dc8:	429a      	cmp	r2, r3
 8004dca:	d10c      	bne.n	8004de6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8004dcc:	4a1a      	ldr	r2, [pc, #104]	@ (8004e38 <chk_lock+0xb4>)
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	011b      	lsls	r3, r3, #4
 8004dd2:	4413      	add	r3, r2
 8004dd4:	3308      	adds	r3, #8
 8004dd6:	681a      	ldr	r2, [r3, #0]
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8004ddc:	429a      	cmp	r2, r3
 8004dde:	d102      	bne.n	8004de6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8004de0:	e007      	b.n	8004df2 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8004de2:	2301      	movs	r3, #1
 8004de4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	3301      	adds	r3, #1
 8004dea:	60fb      	str	r3, [r7, #12]
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	2b01      	cmp	r3, #1
 8004df0:	d9d2      	bls.n	8004d98 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	2b02      	cmp	r3, #2
 8004df6:	d109      	bne.n	8004e0c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d102      	bne.n	8004e04 <chk_lock+0x80>
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	2b02      	cmp	r3, #2
 8004e02:	d101      	bne.n	8004e08 <chk_lock+0x84>
 8004e04:	2300      	movs	r3, #0
 8004e06:	e010      	b.n	8004e2a <chk_lock+0xa6>
 8004e08:	2312      	movs	r3, #18
 8004e0a:	e00e      	b.n	8004e2a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d108      	bne.n	8004e24 <chk_lock+0xa0>
 8004e12:	4a09      	ldr	r2, [pc, #36]	@ (8004e38 <chk_lock+0xb4>)
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	011b      	lsls	r3, r3, #4
 8004e18:	4413      	add	r3, r2
 8004e1a:	330c      	adds	r3, #12
 8004e1c:	881b      	ldrh	r3, [r3, #0]
 8004e1e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004e22:	d101      	bne.n	8004e28 <chk_lock+0xa4>
 8004e24:	2310      	movs	r3, #16
 8004e26:	e000      	b.n	8004e2a <chk_lock+0xa6>
 8004e28:	2300      	movs	r3, #0
}
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	3714      	adds	r7, #20
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e34:	4770      	bx	lr
 8004e36:	bf00      	nop
 8004e38:	200001e8 	.word	0x200001e8

08004e3c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	b083      	sub	sp, #12
 8004e40:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004e42:	2300      	movs	r3, #0
 8004e44:	607b      	str	r3, [r7, #4]
 8004e46:	e002      	b.n	8004e4e <enq_lock+0x12>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	3301      	adds	r3, #1
 8004e4c:	607b      	str	r3, [r7, #4]
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2b01      	cmp	r3, #1
 8004e52:	d806      	bhi.n	8004e62 <enq_lock+0x26>
 8004e54:	4a09      	ldr	r2, [pc, #36]	@ (8004e7c <enq_lock+0x40>)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	011b      	lsls	r3, r3, #4
 8004e5a:	4413      	add	r3, r2
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d1f2      	bne.n	8004e48 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2b02      	cmp	r3, #2
 8004e66:	bf14      	ite	ne
 8004e68:	2301      	movne	r3, #1
 8004e6a:	2300      	moveq	r3, #0
 8004e6c:	b2db      	uxtb	r3, r3
}
 8004e6e:	4618      	mov	r0, r3
 8004e70:	370c      	adds	r7, #12
 8004e72:	46bd      	mov	sp, r7
 8004e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e78:	4770      	bx	lr
 8004e7a:	bf00      	nop
 8004e7c:	200001e8 	.word	0x200001e8

08004e80 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004e80:	b480      	push	{r7}
 8004e82:	b085      	sub	sp, #20
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
 8004e88:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	60fb      	str	r3, [r7, #12]
 8004e8e:	e01f      	b.n	8004ed0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8004e90:	4a41      	ldr	r2, [pc, #260]	@ (8004f98 <inc_lock+0x118>)
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	011b      	lsls	r3, r3, #4
 8004e96:	4413      	add	r3, r2
 8004e98:	681a      	ldr	r2, [r3, #0]
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	429a      	cmp	r2, r3
 8004ea0:	d113      	bne.n	8004eca <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8004ea2:	4a3d      	ldr	r2, [pc, #244]	@ (8004f98 <inc_lock+0x118>)
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	011b      	lsls	r3, r3, #4
 8004ea8:	4413      	add	r3, r2
 8004eaa:	3304      	adds	r3, #4
 8004eac:	681a      	ldr	r2, [r3, #0]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8004eb2:	429a      	cmp	r2, r3
 8004eb4:	d109      	bne.n	8004eca <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8004eb6:	4a38      	ldr	r2, [pc, #224]	@ (8004f98 <inc_lock+0x118>)
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	011b      	lsls	r3, r3, #4
 8004ebc:	4413      	add	r3, r2
 8004ebe:	3308      	adds	r3, #8
 8004ec0:	681a      	ldr	r2, [r3, #0]
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8004ec6:	429a      	cmp	r2, r3
 8004ec8:	d006      	beq.n	8004ed8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	3301      	adds	r3, #1
 8004ece:	60fb      	str	r3, [r7, #12]
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	2b01      	cmp	r3, #1
 8004ed4:	d9dc      	bls.n	8004e90 <inc_lock+0x10>
 8004ed6:	e000      	b.n	8004eda <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8004ed8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	2b02      	cmp	r3, #2
 8004ede:	d132      	bne.n	8004f46 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	60fb      	str	r3, [r7, #12]
 8004ee4:	e002      	b.n	8004eec <inc_lock+0x6c>
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	3301      	adds	r3, #1
 8004eea:	60fb      	str	r3, [r7, #12]
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	2b01      	cmp	r3, #1
 8004ef0:	d806      	bhi.n	8004f00 <inc_lock+0x80>
 8004ef2:	4a29      	ldr	r2, [pc, #164]	@ (8004f98 <inc_lock+0x118>)
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	011b      	lsls	r3, r3, #4
 8004ef8:	4413      	add	r3, r2
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d1f2      	bne.n	8004ee6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	2b02      	cmp	r3, #2
 8004f04:	d101      	bne.n	8004f0a <inc_lock+0x8a>
 8004f06:	2300      	movs	r3, #0
 8004f08:	e040      	b.n	8004f8c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681a      	ldr	r2, [r3, #0]
 8004f0e:	4922      	ldr	r1, [pc, #136]	@ (8004f98 <inc_lock+0x118>)
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	011b      	lsls	r3, r3, #4
 8004f14:	440b      	add	r3, r1
 8004f16:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	689a      	ldr	r2, [r3, #8]
 8004f1c:	491e      	ldr	r1, [pc, #120]	@ (8004f98 <inc_lock+0x118>)
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	011b      	lsls	r3, r3, #4
 8004f22:	440b      	add	r3, r1
 8004f24:	3304      	adds	r3, #4
 8004f26:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	695a      	ldr	r2, [r3, #20]
 8004f2c:	491a      	ldr	r1, [pc, #104]	@ (8004f98 <inc_lock+0x118>)
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	011b      	lsls	r3, r3, #4
 8004f32:	440b      	add	r3, r1
 8004f34:	3308      	adds	r3, #8
 8004f36:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8004f38:	4a17      	ldr	r2, [pc, #92]	@ (8004f98 <inc_lock+0x118>)
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	011b      	lsls	r3, r3, #4
 8004f3e:	4413      	add	r3, r2
 8004f40:	330c      	adds	r3, #12
 8004f42:	2200      	movs	r2, #0
 8004f44:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d009      	beq.n	8004f60 <inc_lock+0xe0>
 8004f4c:	4a12      	ldr	r2, [pc, #72]	@ (8004f98 <inc_lock+0x118>)
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	011b      	lsls	r3, r3, #4
 8004f52:	4413      	add	r3, r2
 8004f54:	330c      	adds	r3, #12
 8004f56:	881b      	ldrh	r3, [r3, #0]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d001      	beq.n	8004f60 <inc_lock+0xe0>
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	e015      	b.n	8004f8c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d108      	bne.n	8004f78 <inc_lock+0xf8>
 8004f66:	4a0c      	ldr	r2, [pc, #48]	@ (8004f98 <inc_lock+0x118>)
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	011b      	lsls	r3, r3, #4
 8004f6c:	4413      	add	r3, r2
 8004f6e:	330c      	adds	r3, #12
 8004f70:	881b      	ldrh	r3, [r3, #0]
 8004f72:	3301      	adds	r3, #1
 8004f74:	b29a      	uxth	r2, r3
 8004f76:	e001      	b.n	8004f7c <inc_lock+0xfc>
 8004f78:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004f7c:	4906      	ldr	r1, [pc, #24]	@ (8004f98 <inc_lock+0x118>)
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	011b      	lsls	r3, r3, #4
 8004f82:	440b      	add	r3, r1
 8004f84:	330c      	adds	r3, #12
 8004f86:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	3301      	adds	r3, #1
}
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	3714      	adds	r7, #20
 8004f90:	46bd      	mov	sp, r7
 8004f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f96:	4770      	bx	lr
 8004f98:	200001e8 	.word	0x200001e8

08004f9c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	b085      	sub	sp, #20
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	3b01      	subs	r3, #1
 8004fa8:	607b      	str	r3, [r7, #4]
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2b01      	cmp	r3, #1
 8004fae:	d825      	bhi.n	8004ffc <dec_lock+0x60>
		n = Files[i].ctr;
 8004fb0:	4a17      	ldr	r2, [pc, #92]	@ (8005010 <dec_lock+0x74>)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	011b      	lsls	r3, r3, #4
 8004fb6:	4413      	add	r3, r2
 8004fb8:	330c      	adds	r3, #12
 8004fba:	881b      	ldrh	r3, [r3, #0]
 8004fbc:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8004fbe:	89fb      	ldrh	r3, [r7, #14]
 8004fc0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004fc4:	d101      	bne.n	8004fca <dec_lock+0x2e>
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8004fca:	89fb      	ldrh	r3, [r7, #14]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d002      	beq.n	8004fd6 <dec_lock+0x3a>
 8004fd0:	89fb      	ldrh	r3, [r7, #14]
 8004fd2:	3b01      	subs	r3, #1
 8004fd4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8004fd6:	4a0e      	ldr	r2, [pc, #56]	@ (8005010 <dec_lock+0x74>)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	011b      	lsls	r3, r3, #4
 8004fdc:	4413      	add	r3, r2
 8004fde:	330c      	adds	r3, #12
 8004fe0:	89fa      	ldrh	r2, [r7, #14]
 8004fe2:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8004fe4:	89fb      	ldrh	r3, [r7, #14]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d105      	bne.n	8004ff6 <dec_lock+0x5a>
 8004fea:	4a09      	ldr	r2, [pc, #36]	@ (8005010 <dec_lock+0x74>)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	011b      	lsls	r3, r3, #4
 8004ff0:	4413      	add	r3, r2
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	737b      	strb	r3, [r7, #13]
 8004ffa:	e001      	b.n	8005000 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8004ffc:	2302      	movs	r3, #2
 8004ffe:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8005000:	7b7b      	ldrb	r3, [r7, #13]
}
 8005002:	4618      	mov	r0, r3
 8005004:	3714      	adds	r7, #20
 8005006:	46bd      	mov	sp, r7
 8005008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500c:	4770      	bx	lr
 800500e:	bf00      	nop
 8005010:	200001e8 	.word	0x200001e8

08005014 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8005014:	b480      	push	{r7}
 8005016:	b085      	sub	sp, #20
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800501c:	2300      	movs	r3, #0
 800501e:	60fb      	str	r3, [r7, #12]
 8005020:	e010      	b.n	8005044 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8005022:	4a0d      	ldr	r2, [pc, #52]	@ (8005058 <clear_lock+0x44>)
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	011b      	lsls	r3, r3, #4
 8005028:	4413      	add	r3, r2
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	687a      	ldr	r2, [r7, #4]
 800502e:	429a      	cmp	r2, r3
 8005030:	d105      	bne.n	800503e <clear_lock+0x2a>
 8005032:	4a09      	ldr	r2, [pc, #36]	@ (8005058 <clear_lock+0x44>)
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	011b      	lsls	r3, r3, #4
 8005038:	4413      	add	r3, r2
 800503a:	2200      	movs	r2, #0
 800503c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	3301      	adds	r3, #1
 8005042:	60fb      	str	r3, [r7, #12]
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	2b01      	cmp	r3, #1
 8005048:	d9eb      	bls.n	8005022 <clear_lock+0xe>
	}
}
 800504a:	bf00      	nop
 800504c:	bf00      	nop
 800504e:	3714      	adds	r7, #20
 8005050:	46bd      	mov	sp, r7
 8005052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005056:	4770      	bx	lr
 8005058:	200001e8 	.word	0x200001e8

0800505c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b086      	sub	sp, #24
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8005064:	2300      	movs	r3, #0
 8005066:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	78db      	ldrb	r3, [r3, #3]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d034      	beq.n	80050da <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005074:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	7858      	ldrb	r0, [r3, #1]
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8005080:	2301      	movs	r3, #1
 8005082:	697a      	ldr	r2, [r7, #20]
 8005084:	f7ff fd40 	bl	8004b08 <disk_write>
 8005088:	4603      	mov	r3, r0
 800508a:	2b00      	cmp	r3, #0
 800508c:	d002      	beq.n	8005094 <sync_window+0x38>
			res = FR_DISK_ERR;
 800508e:	2301      	movs	r3, #1
 8005090:	73fb      	strb	r3, [r7, #15]
 8005092:	e022      	b.n	80050da <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2200      	movs	r2, #0
 8005098:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800509e:	697a      	ldr	r2, [r7, #20]
 80050a0:	1ad2      	subs	r2, r2, r3
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6a1b      	ldr	r3, [r3, #32]
 80050a6:	429a      	cmp	r2, r3
 80050a8:	d217      	bcs.n	80050da <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	789b      	ldrb	r3, [r3, #2]
 80050ae:	613b      	str	r3, [r7, #16]
 80050b0:	e010      	b.n	80050d4 <sync_window+0x78>
					wsect += fs->fsize;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6a1b      	ldr	r3, [r3, #32]
 80050b6:	697a      	ldr	r2, [r7, #20]
 80050b8:	4413      	add	r3, r2
 80050ba:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	7858      	ldrb	r0, [r3, #1]
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80050c6:	2301      	movs	r3, #1
 80050c8:	697a      	ldr	r2, [r7, #20]
 80050ca:	f7ff fd1d 	bl	8004b08 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80050ce:	693b      	ldr	r3, [r7, #16]
 80050d0:	3b01      	subs	r3, #1
 80050d2:	613b      	str	r3, [r7, #16]
 80050d4:	693b      	ldr	r3, [r7, #16]
 80050d6:	2b01      	cmp	r3, #1
 80050d8:	d8eb      	bhi.n	80050b2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80050da:	7bfb      	ldrb	r3, [r7, #15]
}
 80050dc:	4618      	mov	r0, r3
 80050de:	3718      	adds	r7, #24
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bd80      	pop	{r7, pc}

080050e4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b084      	sub	sp, #16
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
 80050ec:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80050ee:	2300      	movs	r3, #0
 80050f0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050f6:	683a      	ldr	r2, [r7, #0]
 80050f8:	429a      	cmp	r2, r3
 80050fa:	d01b      	beq.n	8005134 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80050fc:	6878      	ldr	r0, [r7, #4]
 80050fe:	f7ff ffad 	bl	800505c <sync_window>
 8005102:	4603      	mov	r3, r0
 8005104:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8005106:	7bfb      	ldrb	r3, [r7, #15]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d113      	bne.n	8005134 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	7858      	ldrb	r0, [r3, #1]
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8005116:	2301      	movs	r3, #1
 8005118:	683a      	ldr	r2, [r7, #0]
 800511a:	f7ff fcd5 	bl	8004ac8 <disk_read>
 800511e:	4603      	mov	r3, r0
 8005120:	2b00      	cmp	r3, #0
 8005122:	d004      	beq.n	800512e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8005124:	f04f 33ff 	mov.w	r3, #4294967295
 8005128:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800512a:	2301      	movs	r3, #1
 800512c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	683a      	ldr	r2, [r7, #0]
 8005132:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 8005134:	7bfb      	ldrb	r3, [r7, #15]
}
 8005136:	4618      	mov	r0, r3
 8005138:	3710      	adds	r7, #16
 800513a:	46bd      	mov	sp, r7
 800513c:	bd80      	pop	{r7, pc}
	...

08005140 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b084      	sub	sp, #16
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8005148:	6878      	ldr	r0, [r7, #4]
 800514a:	f7ff ff87 	bl	800505c <sync_window>
 800514e:	4603      	mov	r3, r0
 8005150:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8005152:	7bfb      	ldrb	r3, [r7, #15]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d159      	bne.n	800520c <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	781b      	ldrb	r3, [r3, #0]
 800515c:	2b03      	cmp	r3, #3
 800515e:	d149      	bne.n	80051f4 <sync_fs+0xb4>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	791b      	ldrb	r3, [r3, #4]
 8005164:	2b01      	cmp	r3, #1
 8005166:	d145      	bne.n	80051f4 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	899b      	ldrh	r3, [r3, #12]
 8005172:	461a      	mov	r2, r3
 8005174:	2100      	movs	r1, #0
 8005176:	f7ff fda8 	bl	8004cca <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	3338      	adds	r3, #56	@ 0x38
 800517e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8005182:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8005186:	4618      	mov	r0, r3
 8005188:	f7ff fd37 	bl	8004bfa <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	3338      	adds	r3, #56	@ 0x38
 8005190:	4921      	ldr	r1, [pc, #132]	@ (8005218 <sync_fs+0xd8>)
 8005192:	4618      	mov	r0, r3
 8005194:	f7ff fd4c 	bl	8004c30 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	3338      	adds	r3, #56	@ 0x38
 800519c:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80051a0:	491e      	ldr	r1, [pc, #120]	@ (800521c <sync_fs+0xdc>)
 80051a2:	4618      	mov	r0, r3
 80051a4:	f7ff fd44 	bl	8004c30 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	3338      	adds	r3, #56	@ 0x38
 80051ac:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	699b      	ldr	r3, [r3, #24]
 80051b4:	4619      	mov	r1, r3
 80051b6:	4610      	mov	r0, r2
 80051b8:	f7ff fd3a 	bl	8004c30 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	3338      	adds	r3, #56	@ 0x38
 80051c0:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	695b      	ldr	r3, [r3, #20]
 80051c8:	4619      	mov	r1, r3
 80051ca:	4610      	mov	r0, r2
 80051cc:	f7ff fd30 	bl	8004c30 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051d4:	1c5a      	adds	r2, r3, #1
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	635a      	str	r2, [r3, #52]	@ 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	7858      	ldrb	r0, [r3, #1]
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80051e8:	2301      	movs	r3, #1
 80051ea:	f7ff fc8d 	bl	8004b08 <disk_write>
			fs->fsi_flag = 0;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2200      	movs	r2, #0
 80051f2:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	785b      	ldrb	r3, [r3, #1]
 80051f8:	2200      	movs	r2, #0
 80051fa:	2100      	movs	r1, #0
 80051fc:	4618      	mov	r0, r3
 80051fe:	f7ff fca3 	bl	8004b48 <disk_ioctl>
 8005202:	4603      	mov	r3, r0
 8005204:	2b00      	cmp	r3, #0
 8005206:	d001      	beq.n	800520c <sync_fs+0xcc>
 8005208:	2301      	movs	r3, #1
 800520a:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800520c:	7bfb      	ldrb	r3, [r7, #15]
}
 800520e:	4618      	mov	r0, r3
 8005210:	3710      	adds	r7, #16
 8005212:	46bd      	mov	sp, r7
 8005214:	bd80      	pop	{r7, pc}
 8005216:	bf00      	nop
 8005218:	41615252 	.word	0x41615252
 800521c:	61417272 	.word	0x61417272

08005220 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8005220:	b480      	push	{r7}
 8005222:	b083      	sub	sp, #12
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
 8005228:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	3b02      	subs	r3, #2
 800522e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	69db      	ldr	r3, [r3, #28]
 8005234:	3b02      	subs	r3, #2
 8005236:	683a      	ldr	r2, [r7, #0]
 8005238:	429a      	cmp	r2, r3
 800523a:	d301      	bcc.n	8005240 <clust2sect+0x20>
 800523c:	2300      	movs	r3, #0
 800523e:	e008      	b.n	8005252 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	895b      	ldrh	r3, [r3, #10]
 8005244:	461a      	mov	r2, r3
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	fb03 f202 	mul.w	r2, r3, r2
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005250:	4413      	add	r3, r2
}
 8005252:	4618      	mov	r0, r3
 8005254:	370c      	adds	r7, #12
 8005256:	46bd      	mov	sp, r7
 8005258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525c:	4770      	bx	lr

0800525e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800525e:	b580      	push	{r7, lr}
 8005260:	b086      	sub	sp, #24
 8005262:	af00      	add	r7, sp, #0
 8005264:	6078      	str	r0, [r7, #4]
 8005266:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	2b01      	cmp	r3, #1
 8005272:	d904      	bls.n	800527e <get_fat+0x20>
 8005274:	693b      	ldr	r3, [r7, #16]
 8005276:	69db      	ldr	r3, [r3, #28]
 8005278:	683a      	ldr	r2, [r7, #0]
 800527a:	429a      	cmp	r2, r3
 800527c:	d302      	bcc.n	8005284 <get_fat+0x26>
		val = 1;	/* Internal error */
 800527e:	2301      	movs	r3, #1
 8005280:	617b      	str	r3, [r7, #20]
 8005282:	e0ba      	b.n	80053fa <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8005284:	f04f 33ff 	mov.w	r3, #4294967295
 8005288:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800528a:	693b      	ldr	r3, [r7, #16]
 800528c:	781b      	ldrb	r3, [r3, #0]
 800528e:	2b03      	cmp	r3, #3
 8005290:	f000 8082 	beq.w	8005398 <get_fat+0x13a>
 8005294:	2b03      	cmp	r3, #3
 8005296:	f300 80a6 	bgt.w	80053e6 <get_fat+0x188>
 800529a:	2b01      	cmp	r3, #1
 800529c:	d002      	beq.n	80052a4 <get_fat+0x46>
 800529e:	2b02      	cmp	r3, #2
 80052a0:	d055      	beq.n	800534e <get_fat+0xf0>
 80052a2:	e0a0      	b.n	80053e6 <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	60fb      	str	r3, [r7, #12]
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	085b      	lsrs	r3, r3, #1
 80052ac:	68fa      	ldr	r2, [r7, #12]
 80052ae:	4413      	add	r3, r2
 80052b0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80052b2:	693b      	ldr	r3, [r7, #16]
 80052b4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80052b6:	693b      	ldr	r3, [r7, #16]
 80052b8:	899b      	ldrh	r3, [r3, #12]
 80052ba:	4619      	mov	r1, r3
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	fbb3 f3f1 	udiv	r3, r3, r1
 80052c2:	4413      	add	r3, r2
 80052c4:	4619      	mov	r1, r3
 80052c6:	6938      	ldr	r0, [r7, #16]
 80052c8:	f7ff ff0c 	bl	80050e4 <move_window>
 80052cc:	4603      	mov	r3, r0
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	f040 808c 	bne.w	80053ec <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	1c5a      	adds	r2, r3, #1
 80052d8:	60fa      	str	r2, [r7, #12]
 80052da:	693a      	ldr	r2, [r7, #16]
 80052dc:	8992      	ldrh	r2, [r2, #12]
 80052de:	fbb3 f1f2 	udiv	r1, r3, r2
 80052e2:	fb01 f202 	mul.w	r2, r1, r2
 80052e6:	1a9b      	subs	r3, r3, r2
 80052e8:	693a      	ldr	r2, [r7, #16]
 80052ea:	4413      	add	r3, r2
 80052ec:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80052f0:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80052f2:	693b      	ldr	r3, [r7, #16]
 80052f4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80052f6:	693b      	ldr	r3, [r7, #16]
 80052f8:	899b      	ldrh	r3, [r3, #12]
 80052fa:	4619      	mov	r1, r3
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8005302:	4413      	add	r3, r2
 8005304:	4619      	mov	r1, r3
 8005306:	6938      	ldr	r0, [r7, #16]
 8005308:	f7ff feec 	bl	80050e4 <move_window>
 800530c:	4603      	mov	r3, r0
 800530e:	2b00      	cmp	r3, #0
 8005310:	d16e      	bne.n	80053f0 <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 8005312:	693b      	ldr	r3, [r7, #16]
 8005314:	899b      	ldrh	r3, [r3, #12]
 8005316:	461a      	mov	r2, r3
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	fbb3 f1f2 	udiv	r1, r3, r2
 800531e:	fb01 f202 	mul.w	r2, r1, r2
 8005322:	1a9b      	subs	r3, r3, r2
 8005324:	693a      	ldr	r2, [r7, #16]
 8005326:	4413      	add	r3, r2
 8005328:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800532c:	021b      	lsls	r3, r3, #8
 800532e:	68ba      	ldr	r2, [r7, #8]
 8005330:	4313      	orrs	r3, r2
 8005332:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	f003 0301 	and.w	r3, r3, #1
 800533a:	2b00      	cmp	r3, #0
 800533c:	d002      	beq.n	8005344 <get_fat+0xe6>
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	091b      	lsrs	r3, r3, #4
 8005342:	e002      	b.n	800534a <get_fat+0xec>
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800534a:	617b      	str	r3, [r7, #20]
			break;
 800534c:	e055      	b.n	80053fa <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800534e:	693b      	ldr	r3, [r7, #16]
 8005350:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005352:	693b      	ldr	r3, [r7, #16]
 8005354:	899b      	ldrh	r3, [r3, #12]
 8005356:	085b      	lsrs	r3, r3, #1
 8005358:	b29b      	uxth	r3, r3
 800535a:	4619      	mov	r1, r3
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005362:	4413      	add	r3, r2
 8005364:	4619      	mov	r1, r3
 8005366:	6938      	ldr	r0, [r7, #16]
 8005368:	f7ff febc 	bl	80050e4 <move_window>
 800536c:	4603      	mov	r3, r0
 800536e:	2b00      	cmp	r3, #0
 8005370:	d140      	bne.n	80053f4 <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8005372:	693b      	ldr	r3, [r7, #16]
 8005374:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	005b      	lsls	r3, r3, #1
 800537c:	693a      	ldr	r2, [r7, #16]
 800537e:	8992      	ldrh	r2, [r2, #12]
 8005380:	fbb3 f0f2 	udiv	r0, r3, r2
 8005384:	fb00 f202 	mul.w	r2, r0, r2
 8005388:	1a9b      	subs	r3, r3, r2
 800538a:	440b      	add	r3, r1
 800538c:	4618      	mov	r0, r3
 800538e:	f7ff fbf9 	bl	8004b84 <ld_word>
 8005392:	4603      	mov	r3, r0
 8005394:	617b      	str	r3, [r7, #20]
			break;
 8005396:	e030      	b.n	80053fa <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005398:	693b      	ldr	r3, [r7, #16]
 800539a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800539c:	693b      	ldr	r3, [r7, #16]
 800539e:	899b      	ldrh	r3, [r3, #12]
 80053a0:	089b      	lsrs	r3, r3, #2
 80053a2:	b29b      	uxth	r3, r3
 80053a4:	4619      	mov	r1, r3
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	fbb3 f3f1 	udiv	r3, r3, r1
 80053ac:	4413      	add	r3, r2
 80053ae:	4619      	mov	r1, r3
 80053b0:	6938      	ldr	r0, [r7, #16]
 80053b2:	f7ff fe97 	bl	80050e4 <move_window>
 80053b6:	4603      	mov	r3, r0
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d11d      	bne.n	80053f8 <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80053bc:	693b      	ldr	r3, [r7, #16]
 80053be:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	009b      	lsls	r3, r3, #2
 80053c6:	693a      	ldr	r2, [r7, #16]
 80053c8:	8992      	ldrh	r2, [r2, #12]
 80053ca:	fbb3 f0f2 	udiv	r0, r3, r2
 80053ce:	fb00 f202 	mul.w	r2, r0, r2
 80053d2:	1a9b      	subs	r3, r3, r2
 80053d4:	440b      	add	r3, r1
 80053d6:	4618      	mov	r0, r3
 80053d8:	f7ff fbec 	bl	8004bb4 <ld_dword>
 80053dc:	4603      	mov	r3, r0
 80053de:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80053e2:	617b      	str	r3, [r7, #20]
			break;
 80053e4:	e009      	b.n	80053fa <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80053e6:	2301      	movs	r3, #1
 80053e8:	617b      	str	r3, [r7, #20]
 80053ea:	e006      	b.n	80053fa <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80053ec:	bf00      	nop
 80053ee:	e004      	b.n	80053fa <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80053f0:	bf00      	nop
 80053f2:	e002      	b.n	80053fa <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80053f4:	bf00      	nop
 80053f6:	e000      	b.n	80053fa <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80053f8:	bf00      	nop
		}
	}

	return val;
 80053fa:	697b      	ldr	r3, [r7, #20]
}
 80053fc:	4618      	mov	r0, r3
 80053fe:	3718      	adds	r7, #24
 8005400:	46bd      	mov	sp, r7
 8005402:	bd80      	pop	{r7, pc}

08005404 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8005404:	b590      	push	{r4, r7, lr}
 8005406:	b089      	sub	sp, #36	@ 0x24
 8005408:	af00      	add	r7, sp, #0
 800540a:	60f8      	str	r0, [r7, #12]
 800540c:	60b9      	str	r1, [r7, #8]
 800540e:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8005410:	2302      	movs	r3, #2
 8005412:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	2b01      	cmp	r3, #1
 8005418:	f240 8109 	bls.w	800562e <put_fat+0x22a>
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	69db      	ldr	r3, [r3, #28]
 8005420:	68ba      	ldr	r2, [r7, #8]
 8005422:	429a      	cmp	r2, r3
 8005424:	f080 8103 	bcs.w	800562e <put_fat+0x22a>
		switch (fs->fs_type) {
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	781b      	ldrb	r3, [r3, #0]
 800542c:	2b03      	cmp	r3, #3
 800542e:	f000 80b6 	beq.w	800559e <put_fat+0x19a>
 8005432:	2b03      	cmp	r3, #3
 8005434:	f300 80fb 	bgt.w	800562e <put_fat+0x22a>
 8005438:	2b01      	cmp	r3, #1
 800543a:	d003      	beq.n	8005444 <put_fat+0x40>
 800543c:	2b02      	cmp	r3, #2
 800543e:	f000 8083 	beq.w	8005548 <put_fat+0x144>
 8005442:	e0f4      	b.n	800562e <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	61bb      	str	r3, [r7, #24]
 8005448:	69bb      	ldr	r3, [r7, #24]
 800544a:	085b      	lsrs	r3, r3, #1
 800544c:	69ba      	ldr	r2, [r7, #24]
 800544e:	4413      	add	r3, r2
 8005450:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	899b      	ldrh	r3, [r3, #12]
 800545a:	4619      	mov	r1, r3
 800545c:	69bb      	ldr	r3, [r7, #24]
 800545e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005462:	4413      	add	r3, r2
 8005464:	4619      	mov	r1, r3
 8005466:	68f8      	ldr	r0, [r7, #12]
 8005468:	f7ff fe3c 	bl	80050e4 <move_window>
 800546c:	4603      	mov	r3, r0
 800546e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005470:	7ffb      	ldrb	r3, [r7, #31]
 8005472:	2b00      	cmp	r3, #0
 8005474:	f040 80d4 	bne.w	8005620 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800547e:	69bb      	ldr	r3, [r7, #24]
 8005480:	1c5a      	adds	r2, r3, #1
 8005482:	61ba      	str	r2, [r7, #24]
 8005484:	68fa      	ldr	r2, [r7, #12]
 8005486:	8992      	ldrh	r2, [r2, #12]
 8005488:	fbb3 f0f2 	udiv	r0, r3, r2
 800548c:	fb00 f202 	mul.w	r2, r0, r2
 8005490:	1a9b      	subs	r3, r3, r2
 8005492:	440b      	add	r3, r1
 8005494:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8005496:	68bb      	ldr	r3, [r7, #8]
 8005498:	f003 0301 	and.w	r3, r3, #1
 800549c:	2b00      	cmp	r3, #0
 800549e:	d00d      	beq.n	80054bc <put_fat+0xb8>
 80054a0:	697b      	ldr	r3, [r7, #20]
 80054a2:	781b      	ldrb	r3, [r3, #0]
 80054a4:	b25b      	sxtb	r3, r3
 80054a6:	f003 030f 	and.w	r3, r3, #15
 80054aa:	b25a      	sxtb	r2, r3
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	b2db      	uxtb	r3, r3
 80054b0:	011b      	lsls	r3, r3, #4
 80054b2:	b25b      	sxtb	r3, r3
 80054b4:	4313      	orrs	r3, r2
 80054b6:	b25b      	sxtb	r3, r3
 80054b8:	b2db      	uxtb	r3, r3
 80054ba:	e001      	b.n	80054c0 <put_fat+0xbc>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	b2db      	uxtb	r3, r3
 80054c0:	697a      	ldr	r2, [r7, #20]
 80054c2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	2201      	movs	r2, #1
 80054c8:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	899b      	ldrh	r3, [r3, #12]
 80054d2:	4619      	mov	r1, r3
 80054d4:	69bb      	ldr	r3, [r7, #24]
 80054d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80054da:	4413      	add	r3, r2
 80054dc:	4619      	mov	r1, r3
 80054de:	68f8      	ldr	r0, [r7, #12]
 80054e0:	f7ff fe00 	bl	80050e4 <move_window>
 80054e4:	4603      	mov	r3, r0
 80054e6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80054e8:	7ffb      	ldrb	r3, [r7, #31]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	f040 809a 	bne.w	8005624 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	899b      	ldrh	r3, [r3, #12]
 80054fa:	461a      	mov	r2, r3
 80054fc:	69bb      	ldr	r3, [r7, #24]
 80054fe:	fbb3 f0f2 	udiv	r0, r3, r2
 8005502:	fb00 f202 	mul.w	r2, r0, r2
 8005506:	1a9b      	subs	r3, r3, r2
 8005508:	440b      	add	r3, r1
 800550a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800550c:	68bb      	ldr	r3, [r7, #8]
 800550e:	f003 0301 	and.w	r3, r3, #1
 8005512:	2b00      	cmp	r3, #0
 8005514:	d003      	beq.n	800551e <put_fat+0x11a>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	091b      	lsrs	r3, r3, #4
 800551a:	b2db      	uxtb	r3, r3
 800551c:	e00e      	b.n	800553c <put_fat+0x138>
 800551e:	697b      	ldr	r3, [r7, #20]
 8005520:	781b      	ldrb	r3, [r3, #0]
 8005522:	b25b      	sxtb	r3, r3
 8005524:	f023 030f 	bic.w	r3, r3, #15
 8005528:	b25a      	sxtb	r2, r3
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	0a1b      	lsrs	r3, r3, #8
 800552e:	b25b      	sxtb	r3, r3
 8005530:	f003 030f 	and.w	r3, r3, #15
 8005534:	b25b      	sxtb	r3, r3
 8005536:	4313      	orrs	r3, r2
 8005538:	b25b      	sxtb	r3, r3
 800553a:	b2db      	uxtb	r3, r3
 800553c:	697a      	ldr	r2, [r7, #20]
 800553e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	2201      	movs	r2, #1
 8005544:	70da      	strb	r2, [r3, #3]
			break;
 8005546:	e072      	b.n	800562e <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	899b      	ldrh	r3, [r3, #12]
 8005550:	085b      	lsrs	r3, r3, #1
 8005552:	b29b      	uxth	r3, r3
 8005554:	4619      	mov	r1, r3
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	fbb3 f3f1 	udiv	r3, r3, r1
 800555c:	4413      	add	r3, r2
 800555e:	4619      	mov	r1, r3
 8005560:	68f8      	ldr	r0, [r7, #12]
 8005562:	f7ff fdbf 	bl	80050e4 <move_window>
 8005566:	4603      	mov	r3, r0
 8005568:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800556a:	7ffb      	ldrb	r3, [r7, #31]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d15b      	bne.n	8005628 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8005576:	68bb      	ldr	r3, [r7, #8]
 8005578:	005b      	lsls	r3, r3, #1
 800557a:	68fa      	ldr	r2, [r7, #12]
 800557c:	8992      	ldrh	r2, [r2, #12]
 800557e:	fbb3 f0f2 	udiv	r0, r3, r2
 8005582:	fb00 f202 	mul.w	r2, r0, r2
 8005586:	1a9b      	subs	r3, r3, r2
 8005588:	440b      	add	r3, r1
 800558a:	687a      	ldr	r2, [r7, #4]
 800558c:	b292      	uxth	r2, r2
 800558e:	4611      	mov	r1, r2
 8005590:	4618      	mov	r0, r3
 8005592:	f7ff fb32 	bl	8004bfa <st_word>
			fs->wflag = 1;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	2201      	movs	r2, #1
 800559a:	70da      	strb	r2, [r3, #3]
			break;
 800559c:	e047      	b.n	800562e <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	899b      	ldrh	r3, [r3, #12]
 80055a6:	089b      	lsrs	r3, r3, #2
 80055a8:	b29b      	uxth	r3, r3
 80055aa:	4619      	mov	r1, r3
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80055b2:	4413      	add	r3, r2
 80055b4:	4619      	mov	r1, r3
 80055b6:	68f8      	ldr	r0, [r7, #12]
 80055b8:	f7ff fd94 	bl	80050e4 <move_window>
 80055bc:	4603      	mov	r3, r0
 80055be:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80055c0:	7ffb      	ldrb	r3, [r7, #31]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d132      	bne.n	800562c <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	009b      	lsls	r3, r3, #2
 80055d6:	68fa      	ldr	r2, [r7, #12]
 80055d8:	8992      	ldrh	r2, [r2, #12]
 80055da:	fbb3 f0f2 	udiv	r0, r3, r2
 80055de:	fb00 f202 	mul.w	r2, r0, r2
 80055e2:	1a9b      	subs	r3, r3, r2
 80055e4:	440b      	add	r3, r1
 80055e6:	4618      	mov	r0, r3
 80055e8:	f7ff fae4 	bl	8004bb4 <ld_dword>
 80055ec:	4603      	mov	r3, r0
 80055ee:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80055f2:	4323      	orrs	r3, r4
 80055f4:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	009b      	lsls	r3, r3, #2
 8005600:	68fa      	ldr	r2, [r7, #12]
 8005602:	8992      	ldrh	r2, [r2, #12]
 8005604:	fbb3 f0f2 	udiv	r0, r3, r2
 8005608:	fb00 f202 	mul.w	r2, r0, r2
 800560c:	1a9b      	subs	r3, r3, r2
 800560e:	440b      	add	r3, r1
 8005610:	6879      	ldr	r1, [r7, #4]
 8005612:	4618      	mov	r0, r3
 8005614:	f7ff fb0c 	bl	8004c30 <st_dword>
			fs->wflag = 1;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	2201      	movs	r2, #1
 800561c:	70da      	strb	r2, [r3, #3]
			break;
 800561e:	e006      	b.n	800562e <put_fat+0x22a>
			if (res != FR_OK) break;
 8005620:	bf00      	nop
 8005622:	e004      	b.n	800562e <put_fat+0x22a>
			if (res != FR_OK) break;
 8005624:	bf00      	nop
 8005626:	e002      	b.n	800562e <put_fat+0x22a>
			if (res != FR_OK) break;
 8005628:	bf00      	nop
 800562a:	e000      	b.n	800562e <put_fat+0x22a>
			if (res != FR_OK) break;
 800562c:	bf00      	nop
		}
	}
	return res;
 800562e:	7ffb      	ldrb	r3, [r7, #31]
}
 8005630:	4618      	mov	r0, r3
 8005632:	3724      	adds	r7, #36	@ 0x24
 8005634:	46bd      	mov	sp, r7
 8005636:	bd90      	pop	{r4, r7, pc}

08005638 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b088      	sub	sp, #32
 800563c:	af00      	add	r7, sp, #0
 800563e:	60f8      	str	r0, [r7, #12]
 8005640:	60b9      	str	r1, [r7, #8]
 8005642:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8005644:	2300      	movs	r3, #0
 8005646:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	2b01      	cmp	r3, #1
 8005652:	d904      	bls.n	800565e <remove_chain+0x26>
 8005654:	69bb      	ldr	r3, [r7, #24]
 8005656:	69db      	ldr	r3, [r3, #28]
 8005658:	68ba      	ldr	r2, [r7, #8]
 800565a:	429a      	cmp	r2, r3
 800565c:	d301      	bcc.n	8005662 <remove_chain+0x2a>
 800565e:	2302      	movs	r3, #2
 8005660:	e04b      	b.n	80056fa <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d00c      	beq.n	8005682 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8005668:	f04f 32ff 	mov.w	r2, #4294967295
 800566c:	6879      	ldr	r1, [r7, #4]
 800566e:	69b8      	ldr	r0, [r7, #24]
 8005670:	f7ff fec8 	bl	8005404 <put_fat>
 8005674:	4603      	mov	r3, r0
 8005676:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8005678:	7ffb      	ldrb	r3, [r7, #31]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d001      	beq.n	8005682 <remove_chain+0x4a>
 800567e:	7ffb      	ldrb	r3, [r7, #31]
 8005680:	e03b      	b.n	80056fa <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8005682:	68b9      	ldr	r1, [r7, #8]
 8005684:	68f8      	ldr	r0, [r7, #12]
 8005686:	f7ff fdea 	bl	800525e <get_fat>
 800568a:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800568c:	697b      	ldr	r3, [r7, #20]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d031      	beq.n	80056f6 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8005692:	697b      	ldr	r3, [r7, #20]
 8005694:	2b01      	cmp	r3, #1
 8005696:	d101      	bne.n	800569c <remove_chain+0x64>
 8005698:	2302      	movs	r3, #2
 800569a:	e02e      	b.n	80056fa <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800569c:	697b      	ldr	r3, [r7, #20]
 800569e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056a2:	d101      	bne.n	80056a8 <remove_chain+0x70>
 80056a4:	2301      	movs	r3, #1
 80056a6:	e028      	b.n	80056fa <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80056a8:	2200      	movs	r2, #0
 80056aa:	68b9      	ldr	r1, [r7, #8]
 80056ac:	69b8      	ldr	r0, [r7, #24]
 80056ae:	f7ff fea9 	bl	8005404 <put_fat>
 80056b2:	4603      	mov	r3, r0
 80056b4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80056b6:	7ffb      	ldrb	r3, [r7, #31]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d001      	beq.n	80056c0 <remove_chain+0x88>
 80056bc:	7ffb      	ldrb	r3, [r7, #31]
 80056be:	e01c      	b.n	80056fa <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80056c0:	69bb      	ldr	r3, [r7, #24]
 80056c2:	699a      	ldr	r2, [r3, #24]
 80056c4:	69bb      	ldr	r3, [r7, #24]
 80056c6:	69db      	ldr	r3, [r3, #28]
 80056c8:	3b02      	subs	r3, #2
 80056ca:	429a      	cmp	r2, r3
 80056cc:	d20b      	bcs.n	80056e6 <remove_chain+0xae>
			fs->free_clst++;
 80056ce:	69bb      	ldr	r3, [r7, #24]
 80056d0:	699b      	ldr	r3, [r3, #24]
 80056d2:	1c5a      	adds	r2, r3, #1
 80056d4:	69bb      	ldr	r3, [r7, #24]
 80056d6:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 80056d8:	69bb      	ldr	r3, [r7, #24]
 80056da:	791b      	ldrb	r3, [r3, #4]
 80056dc:	f043 0301 	orr.w	r3, r3, #1
 80056e0:	b2da      	uxtb	r2, r3
 80056e2:	69bb      	ldr	r3, [r7, #24]
 80056e4:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80056e6:	697b      	ldr	r3, [r7, #20]
 80056e8:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80056ea:	69bb      	ldr	r3, [r7, #24]
 80056ec:	69db      	ldr	r3, [r3, #28]
 80056ee:	68ba      	ldr	r2, [r7, #8]
 80056f0:	429a      	cmp	r2, r3
 80056f2:	d3c6      	bcc.n	8005682 <remove_chain+0x4a>
 80056f4:	e000      	b.n	80056f8 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80056f6:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80056f8:	2300      	movs	r3, #0
}
 80056fa:	4618      	mov	r0, r3
 80056fc:	3720      	adds	r7, #32
 80056fe:	46bd      	mov	sp, r7
 8005700:	bd80      	pop	{r7, pc}

08005702 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8005702:	b580      	push	{r7, lr}
 8005704:	b088      	sub	sp, #32
 8005706:	af00      	add	r7, sp, #0
 8005708:	6078      	str	r0, [r7, #4]
 800570a:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d10d      	bne.n	8005734 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8005718:	693b      	ldr	r3, [r7, #16]
 800571a:	695b      	ldr	r3, [r3, #20]
 800571c:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800571e:	69bb      	ldr	r3, [r7, #24]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d004      	beq.n	800572e <create_chain+0x2c>
 8005724:	693b      	ldr	r3, [r7, #16]
 8005726:	69db      	ldr	r3, [r3, #28]
 8005728:	69ba      	ldr	r2, [r7, #24]
 800572a:	429a      	cmp	r2, r3
 800572c:	d31b      	bcc.n	8005766 <create_chain+0x64>
 800572e:	2301      	movs	r3, #1
 8005730:	61bb      	str	r3, [r7, #24]
 8005732:	e018      	b.n	8005766 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8005734:	6839      	ldr	r1, [r7, #0]
 8005736:	6878      	ldr	r0, [r7, #4]
 8005738:	f7ff fd91 	bl	800525e <get_fat>
 800573c:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	2b01      	cmp	r3, #1
 8005742:	d801      	bhi.n	8005748 <create_chain+0x46>
 8005744:	2301      	movs	r3, #1
 8005746:	e070      	b.n	800582a <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800574e:	d101      	bne.n	8005754 <create_chain+0x52>
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	e06a      	b.n	800582a <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8005754:	693b      	ldr	r3, [r7, #16]
 8005756:	69db      	ldr	r3, [r3, #28]
 8005758:	68fa      	ldr	r2, [r7, #12]
 800575a:	429a      	cmp	r2, r3
 800575c:	d201      	bcs.n	8005762 <create_chain+0x60>
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	e063      	b.n	800582a <create_chain+0x128>
		scl = clst;
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8005766:	69bb      	ldr	r3, [r7, #24]
 8005768:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800576a:	69fb      	ldr	r3, [r7, #28]
 800576c:	3301      	adds	r3, #1
 800576e:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8005770:	693b      	ldr	r3, [r7, #16]
 8005772:	69db      	ldr	r3, [r3, #28]
 8005774:	69fa      	ldr	r2, [r7, #28]
 8005776:	429a      	cmp	r2, r3
 8005778:	d307      	bcc.n	800578a <create_chain+0x88>
				ncl = 2;
 800577a:	2302      	movs	r3, #2
 800577c:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800577e:	69fa      	ldr	r2, [r7, #28]
 8005780:	69bb      	ldr	r3, [r7, #24]
 8005782:	429a      	cmp	r2, r3
 8005784:	d901      	bls.n	800578a <create_chain+0x88>
 8005786:	2300      	movs	r3, #0
 8005788:	e04f      	b.n	800582a <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800578a:	69f9      	ldr	r1, [r7, #28]
 800578c:	6878      	ldr	r0, [r7, #4]
 800578e:	f7ff fd66 	bl	800525e <get_fat>
 8005792:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d00e      	beq.n	80057b8 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	2b01      	cmp	r3, #1
 800579e:	d003      	beq.n	80057a8 <create_chain+0xa6>
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057a6:	d101      	bne.n	80057ac <create_chain+0xaa>
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	e03e      	b.n	800582a <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80057ac:	69fa      	ldr	r2, [r7, #28]
 80057ae:	69bb      	ldr	r3, [r7, #24]
 80057b0:	429a      	cmp	r2, r3
 80057b2:	d1da      	bne.n	800576a <create_chain+0x68>
 80057b4:	2300      	movs	r3, #0
 80057b6:	e038      	b.n	800582a <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80057b8:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80057ba:	f04f 32ff 	mov.w	r2, #4294967295
 80057be:	69f9      	ldr	r1, [r7, #28]
 80057c0:	6938      	ldr	r0, [r7, #16]
 80057c2:	f7ff fe1f 	bl	8005404 <put_fat>
 80057c6:	4603      	mov	r3, r0
 80057c8:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80057ca:	7dfb      	ldrb	r3, [r7, #23]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d109      	bne.n	80057e4 <create_chain+0xe2>
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d006      	beq.n	80057e4 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80057d6:	69fa      	ldr	r2, [r7, #28]
 80057d8:	6839      	ldr	r1, [r7, #0]
 80057da:	6938      	ldr	r0, [r7, #16]
 80057dc:	f7ff fe12 	bl	8005404 <put_fat>
 80057e0:	4603      	mov	r3, r0
 80057e2:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80057e4:	7dfb      	ldrb	r3, [r7, #23]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d116      	bne.n	8005818 <create_chain+0x116>
		fs->last_clst = ncl;
 80057ea:	693b      	ldr	r3, [r7, #16]
 80057ec:	69fa      	ldr	r2, [r7, #28]
 80057ee:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80057f0:	693b      	ldr	r3, [r7, #16]
 80057f2:	699a      	ldr	r2, [r3, #24]
 80057f4:	693b      	ldr	r3, [r7, #16]
 80057f6:	69db      	ldr	r3, [r3, #28]
 80057f8:	3b02      	subs	r3, #2
 80057fa:	429a      	cmp	r2, r3
 80057fc:	d804      	bhi.n	8005808 <create_chain+0x106>
 80057fe:	693b      	ldr	r3, [r7, #16]
 8005800:	699b      	ldr	r3, [r3, #24]
 8005802:	1e5a      	subs	r2, r3, #1
 8005804:	693b      	ldr	r3, [r7, #16]
 8005806:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8005808:	693b      	ldr	r3, [r7, #16]
 800580a:	791b      	ldrb	r3, [r3, #4]
 800580c:	f043 0301 	orr.w	r3, r3, #1
 8005810:	b2da      	uxtb	r2, r3
 8005812:	693b      	ldr	r3, [r7, #16]
 8005814:	711a      	strb	r2, [r3, #4]
 8005816:	e007      	b.n	8005828 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8005818:	7dfb      	ldrb	r3, [r7, #23]
 800581a:	2b01      	cmp	r3, #1
 800581c:	d102      	bne.n	8005824 <create_chain+0x122>
 800581e:	f04f 33ff 	mov.w	r3, #4294967295
 8005822:	e000      	b.n	8005826 <create_chain+0x124>
 8005824:	2301      	movs	r3, #1
 8005826:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8005828:	69fb      	ldr	r3, [r7, #28]
}
 800582a:	4618      	mov	r0, r3
 800582c:	3720      	adds	r7, #32
 800582e:	46bd      	mov	sp, r7
 8005830:	bd80      	pop	{r7, pc}

08005832 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8005832:	b480      	push	{r7}
 8005834:	b087      	sub	sp, #28
 8005836:	af00      	add	r7, sp, #0
 8005838:	6078      	str	r0, [r7, #4]
 800583a:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005846:	3304      	adds	r3, #4
 8005848:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	899b      	ldrh	r3, [r3, #12]
 800584e:	461a      	mov	r2, r3
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	fbb3 f3f2 	udiv	r3, r3, r2
 8005856:	68fa      	ldr	r2, [r7, #12]
 8005858:	8952      	ldrh	r2, [r2, #10]
 800585a:	fbb3 f3f2 	udiv	r3, r3, r2
 800585e:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005860:	693b      	ldr	r3, [r7, #16]
 8005862:	1d1a      	adds	r2, r3, #4
 8005864:	613a      	str	r2, [r7, #16]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800586a:	68bb      	ldr	r3, [r7, #8]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d101      	bne.n	8005874 <clmt_clust+0x42>
 8005870:	2300      	movs	r3, #0
 8005872:	e010      	b.n	8005896 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8005874:	697a      	ldr	r2, [r7, #20]
 8005876:	68bb      	ldr	r3, [r7, #8]
 8005878:	429a      	cmp	r2, r3
 800587a:	d307      	bcc.n	800588c <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800587c:	697a      	ldr	r2, [r7, #20]
 800587e:	68bb      	ldr	r3, [r7, #8]
 8005880:	1ad3      	subs	r3, r2, r3
 8005882:	617b      	str	r3, [r7, #20]
 8005884:	693b      	ldr	r3, [r7, #16]
 8005886:	3304      	adds	r3, #4
 8005888:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800588a:	e7e9      	b.n	8005860 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800588c:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800588e:	693b      	ldr	r3, [r7, #16]
 8005890:	681a      	ldr	r2, [r3, #0]
 8005892:	697b      	ldr	r3, [r7, #20]
 8005894:	4413      	add	r3, r2
}
 8005896:	4618      	mov	r0, r3
 8005898:	371c      	adds	r7, #28
 800589a:	46bd      	mov	sp, r7
 800589c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a0:	4770      	bx	lr

080058a2 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80058a2:	b580      	push	{r7, lr}
 80058a4:	b086      	sub	sp, #24
 80058a6:	af00      	add	r7, sp, #0
 80058a8:	6078      	str	r0, [r7, #4]
 80058aa:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80058b8:	d204      	bcs.n	80058c4 <dir_sdi+0x22>
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	f003 031f 	and.w	r3, r3, #31
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d001      	beq.n	80058c8 <dir_sdi+0x26>
		return FR_INT_ERR;
 80058c4:	2302      	movs	r3, #2
 80058c6:	e071      	b.n	80059ac <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	683a      	ldr	r2, [r7, #0]
 80058cc:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	689b      	ldr	r3, [r3, #8]
 80058d2:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80058d4:	697b      	ldr	r3, [r7, #20]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d106      	bne.n	80058e8 <dir_sdi+0x46>
 80058da:	693b      	ldr	r3, [r7, #16]
 80058dc:	781b      	ldrb	r3, [r3, #0]
 80058de:	2b02      	cmp	r3, #2
 80058e0:	d902      	bls.n	80058e8 <dir_sdi+0x46>
		clst = fs->dirbase;
 80058e2:	693b      	ldr	r3, [r7, #16]
 80058e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058e6:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80058e8:	697b      	ldr	r3, [r7, #20]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d10c      	bne.n	8005908 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	095b      	lsrs	r3, r3, #5
 80058f2:	693a      	ldr	r2, [r7, #16]
 80058f4:	8912      	ldrh	r2, [r2, #8]
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d301      	bcc.n	80058fe <dir_sdi+0x5c>
 80058fa:	2302      	movs	r3, #2
 80058fc:	e056      	b.n	80059ac <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 80058fe:	693b      	ldr	r3, [r7, #16]
 8005900:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	61da      	str	r2, [r3, #28]
 8005906:	e02d      	b.n	8005964 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8005908:	693b      	ldr	r3, [r7, #16]
 800590a:	895b      	ldrh	r3, [r3, #10]
 800590c:	461a      	mov	r2, r3
 800590e:	693b      	ldr	r3, [r7, #16]
 8005910:	899b      	ldrh	r3, [r3, #12]
 8005912:	fb02 f303 	mul.w	r3, r2, r3
 8005916:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8005918:	e019      	b.n	800594e <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6979      	ldr	r1, [r7, #20]
 800591e:	4618      	mov	r0, r3
 8005920:	f7ff fc9d 	bl	800525e <get_fat>
 8005924:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005926:	697b      	ldr	r3, [r7, #20]
 8005928:	f1b3 3fff 	cmp.w	r3, #4294967295
 800592c:	d101      	bne.n	8005932 <dir_sdi+0x90>
 800592e:	2301      	movs	r3, #1
 8005930:	e03c      	b.n	80059ac <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8005932:	697b      	ldr	r3, [r7, #20]
 8005934:	2b01      	cmp	r3, #1
 8005936:	d904      	bls.n	8005942 <dir_sdi+0xa0>
 8005938:	693b      	ldr	r3, [r7, #16]
 800593a:	69db      	ldr	r3, [r3, #28]
 800593c:	697a      	ldr	r2, [r7, #20]
 800593e:	429a      	cmp	r2, r3
 8005940:	d301      	bcc.n	8005946 <dir_sdi+0xa4>
 8005942:	2302      	movs	r3, #2
 8005944:	e032      	b.n	80059ac <dir_sdi+0x10a>
			ofs -= csz;
 8005946:	683a      	ldr	r2, [r7, #0]
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	1ad3      	subs	r3, r2, r3
 800594c:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800594e:	683a      	ldr	r2, [r7, #0]
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	429a      	cmp	r2, r3
 8005954:	d2e1      	bcs.n	800591a <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8005956:	6979      	ldr	r1, [r7, #20]
 8005958:	6938      	ldr	r0, [r7, #16]
 800595a:	f7ff fc61 	bl	8005220 <clust2sect>
 800595e:	4602      	mov	r2, r0
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	697a      	ldr	r2, [r7, #20]
 8005968:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	69db      	ldr	r3, [r3, #28]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d101      	bne.n	8005976 <dir_sdi+0xd4>
 8005972:	2302      	movs	r3, #2
 8005974:	e01a      	b.n	80059ac <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	69da      	ldr	r2, [r3, #28]
 800597a:	693b      	ldr	r3, [r7, #16]
 800597c:	899b      	ldrh	r3, [r3, #12]
 800597e:	4619      	mov	r1, r3
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	fbb3 f3f1 	udiv	r3, r3, r1
 8005986:	441a      	add	r2, r3
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800598c:	693b      	ldr	r3, [r7, #16]
 800598e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8005992:	693b      	ldr	r3, [r7, #16]
 8005994:	899b      	ldrh	r3, [r3, #12]
 8005996:	461a      	mov	r2, r3
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	fbb3 f0f2 	udiv	r0, r3, r2
 800599e:	fb00 f202 	mul.w	r2, r0, r2
 80059a2:	1a9b      	subs	r3, r3, r2
 80059a4:	18ca      	adds	r2, r1, r3
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80059aa:	2300      	movs	r3, #0
}
 80059ac:	4618      	mov	r0, r3
 80059ae:	3718      	adds	r7, #24
 80059b0:	46bd      	mov	sp, r7
 80059b2:	bd80      	pop	{r7, pc}

080059b4 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b086      	sub	sp, #24
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
 80059bc:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	695b      	ldr	r3, [r3, #20]
 80059c8:	3320      	adds	r3, #32
 80059ca:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	69db      	ldr	r3, [r3, #28]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d003      	beq.n	80059dc <dir_next+0x28>
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80059da:	d301      	bcc.n	80059e0 <dir_next+0x2c>
 80059dc:	2304      	movs	r3, #4
 80059de:	e0bb      	b.n	8005b58 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	899b      	ldrh	r3, [r3, #12]
 80059e4:	461a      	mov	r2, r3
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	fbb3 f1f2 	udiv	r1, r3, r2
 80059ec:	fb01 f202 	mul.w	r2, r1, r2
 80059f0:	1a9b      	subs	r3, r3, r2
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	f040 809d 	bne.w	8005b32 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	69db      	ldr	r3, [r3, #28]
 80059fc:	1c5a      	adds	r2, r3, #1
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	699b      	ldr	r3, [r3, #24]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d10b      	bne.n	8005a22 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	095b      	lsrs	r3, r3, #5
 8005a0e:	68fa      	ldr	r2, [r7, #12]
 8005a10:	8912      	ldrh	r2, [r2, #8]
 8005a12:	4293      	cmp	r3, r2
 8005a14:	f0c0 808d 	bcc.w	8005b32 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	61da      	str	r2, [r3, #28]
 8005a1e:	2304      	movs	r3, #4
 8005a20:	e09a      	b.n	8005b58 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	899b      	ldrh	r3, [r3, #12]
 8005a26:	461a      	mov	r2, r3
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	fbb3 f3f2 	udiv	r3, r3, r2
 8005a2e:	68fa      	ldr	r2, [r7, #12]
 8005a30:	8952      	ldrh	r2, [r2, #10]
 8005a32:	3a01      	subs	r2, #1
 8005a34:	4013      	ands	r3, r2
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d17b      	bne.n	8005b32 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8005a3a:	687a      	ldr	r2, [r7, #4]
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	699b      	ldr	r3, [r3, #24]
 8005a40:	4619      	mov	r1, r3
 8005a42:	4610      	mov	r0, r2
 8005a44:	f7ff fc0b 	bl	800525e <get_fat>
 8005a48:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8005a4a:	697b      	ldr	r3, [r7, #20]
 8005a4c:	2b01      	cmp	r3, #1
 8005a4e:	d801      	bhi.n	8005a54 <dir_next+0xa0>
 8005a50:	2302      	movs	r3, #2
 8005a52:	e081      	b.n	8005b58 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8005a54:	697b      	ldr	r3, [r7, #20]
 8005a56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a5a:	d101      	bne.n	8005a60 <dir_next+0xac>
 8005a5c:	2301      	movs	r3, #1
 8005a5e:	e07b      	b.n	8005b58 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	69db      	ldr	r3, [r3, #28]
 8005a64:	697a      	ldr	r2, [r7, #20]
 8005a66:	429a      	cmp	r2, r3
 8005a68:	d359      	bcc.n	8005b1e <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d104      	bne.n	8005a7a <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2200      	movs	r2, #0
 8005a74:	61da      	str	r2, [r3, #28]
 8005a76:	2304      	movs	r3, #4
 8005a78:	e06e      	b.n	8005b58 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8005a7a:	687a      	ldr	r2, [r7, #4]
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	699b      	ldr	r3, [r3, #24]
 8005a80:	4619      	mov	r1, r3
 8005a82:	4610      	mov	r0, r2
 8005a84:	f7ff fe3d 	bl	8005702 <create_chain>
 8005a88:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8005a8a:	697b      	ldr	r3, [r7, #20]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d101      	bne.n	8005a94 <dir_next+0xe0>
 8005a90:	2307      	movs	r3, #7
 8005a92:	e061      	b.n	8005b58 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8005a94:	697b      	ldr	r3, [r7, #20]
 8005a96:	2b01      	cmp	r3, #1
 8005a98:	d101      	bne.n	8005a9e <dir_next+0xea>
 8005a9a:	2302      	movs	r3, #2
 8005a9c:	e05c      	b.n	8005b58 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005a9e:	697b      	ldr	r3, [r7, #20]
 8005aa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005aa4:	d101      	bne.n	8005aaa <dir_next+0xf6>
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	e056      	b.n	8005b58 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8005aaa:	68f8      	ldr	r0, [r7, #12]
 8005aac:	f7ff fad6 	bl	800505c <sync_window>
 8005ab0:	4603      	mov	r3, r0
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d001      	beq.n	8005aba <dir_next+0x106>
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	e04e      	b.n	8005b58 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	899b      	ldrh	r3, [r3, #12]
 8005ac4:	461a      	mov	r2, r3
 8005ac6:	2100      	movs	r1, #0
 8005ac8:	f7ff f8ff 	bl	8004cca <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8005acc:	2300      	movs	r3, #0
 8005ace:	613b      	str	r3, [r7, #16]
 8005ad0:	6979      	ldr	r1, [r7, #20]
 8005ad2:	68f8      	ldr	r0, [r7, #12]
 8005ad4:	f7ff fba4 	bl	8005220 <clust2sect>
 8005ad8:	4602      	mov	r2, r0
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	635a      	str	r2, [r3, #52]	@ 0x34
 8005ade:	e012      	b.n	8005b06 <dir_next+0x152>
						fs->wflag = 1;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	2201      	movs	r2, #1
 8005ae4:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8005ae6:	68f8      	ldr	r0, [r7, #12]
 8005ae8:	f7ff fab8 	bl	800505c <sync_window>
 8005aec:	4603      	mov	r3, r0
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d001      	beq.n	8005af6 <dir_next+0x142>
 8005af2:	2301      	movs	r3, #1
 8005af4:	e030      	b.n	8005b58 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8005af6:	693b      	ldr	r3, [r7, #16]
 8005af8:	3301      	adds	r3, #1
 8005afa:	613b      	str	r3, [r7, #16]
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b00:	1c5a      	adds	r2, r3, #1
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	635a      	str	r2, [r3, #52]	@ 0x34
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	895b      	ldrh	r3, [r3, #10]
 8005b0a:	461a      	mov	r2, r3
 8005b0c:	693b      	ldr	r3, [r7, #16]
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d3e6      	bcc.n	8005ae0 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005b16:	693b      	ldr	r3, [r7, #16]
 8005b18:	1ad2      	subs	r2, r2, r3
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	635a      	str	r2, [r3, #52]	@ 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	697a      	ldr	r2, [r7, #20]
 8005b22:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8005b24:	6979      	ldr	r1, [r7, #20]
 8005b26:	68f8      	ldr	r0, [r7, #12]
 8005b28:	f7ff fb7a 	bl	8005220 <clust2sect>
 8005b2c:	4602      	mov	r2, r0
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	68ba      	ldr	r2, [r7, #8]
 8005b36:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	899b      	ldrh	r3, [r3, #12]
 8005b42:	461a      	mov	r2, r3
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	fbb3 f0f2 	udiv	r0, r3, r2
 8005b4a:	fb00 f202 	mul.w	r2, r0, r2
 8005b4e:	1a9b      	subs	r3, r3, r2
 8005b50:	18ca      	adds	r2, r1, r3
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8005b56:	2300      	movs	r3, #0
}
 8005b58:	4618      	mov	r0, r3
 8005b5a:	3718      	adds	r7, #24
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	bd80      	pop	{r7, pc}

08005b60 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b086      	sub	sp, #24
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
 8005b68:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8005b70:	2100      	movs	r1, #0
 8005b72:	6878      	ldr	r0, [r7, #4]
 8005b74:	f7ff fe95 	bl	80058a2 <dir_sdi>
 8005b78:	4603      	mov	r3, r0
 8005b7a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8005b7c:	7dfb      	ldrb	r3, [r7, #23]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d12b      	bne.n	8005bda <dir_alloc+0x7a>
		n = 0;
 8005b82:	2300      	movs	r3, #0
 8005b84:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	69db      	ldr	r3, [r3, #28]
 8005b8a:	4619      	mov	r1, r3
 8005b8c:	68f8      	ldr	r0, [r7, #12]
 8005b8e:	f7ff faa9 	bl	80050e4 <move_window>
 8005b92:	4603      	mov	r3, r0
 8005b94:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8005b96:	7dfb      	ldrb	r3, [r7, #23]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d11d      	bne.n	8005bd8 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6a1b      	ldr	r3, [r3, #32]
 8005ba0:	781b      	ldrb	r3, [r3, #0]
 8005ba2:	2be5      	cmp	r3, #229	@ 0xe5
 8005ba4:	d004      	beq.n	8005bb0 <dir_alloc+0x50>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6a1b      	ldr	r3, [r3, #32]
 8005baa:	781b      	ldrb	r3, [r3, #0]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d107      	bne.n	8005bc0 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8005bb0:	693b      	ldr	r3, [r7, #16]
 8005bb2:	3301      	adds	r3, #1
 8005bb4:	613b      	str	r3, [r7, #16]
 8005bb6:	693a      	ldr	r2, [r7, #16]
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	429a      	cmp	r2, r3
 8005bbc:	d102      	bne.n	8005bc4 <dir_alloc+0x64>
 8005bbe:	e00c      	b.n	8005bda <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8005bc4:	2101      	movs	r1, #1
 8005bc6:	6878      	ldr	r0, [r7, #4]
 8005bc8:	f7ff fef4 	bl	80059b4 <dir_next>
 8005bcc:	4603      	mov	r3, r0
 8005bce:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8005bd0:	7dfb      	ldrb	r3, [r7, #23]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d0d7      	beq.n	8005b86 <dir_alloc+0x26>
 8005bd6:	e000      	b.n	8005bda <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8005bd8:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8005bda:	7dfb      	ldrb	r3, [r7, #23]
 8005bdc:	2b04      	cmp	r3, #4
 8005bde:	d101      	bne.n	8005be4 <dir_alloc+0x84>
 8005be0:	2307      	movs	r3, #7
 8005be2:	75fb      	strb	r3, [r7, #23]
	return res;
 8005be4:	7dfb      	ldrb	r3, [r7, #23]
}
 8005be6:	4618      	mov	r0, r3
 8005be8:	3718      	adds	r7, #24
 8005bea:	46bd      	mov	sp, r7
 8005bec:	bd80      	pop	{r7, pc}

08005bee <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8005bee:	b580      	push	{r7, lr}
 8005bf0:	b084      	sub	sp, #16
 8005bf2:	af00      	add	r7, sp, #0
 8005bf4:	6078      	str	r0, [r7, #4]
 8005bf6:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	331a      	adds	r3, #26
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	f7fe ffc1 	bl	8004b84 <ld_word>
 8005c02:	4603      	mov	r3, r0
 8005c04:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	781b      	ldrb	r3, [r3, #0]
 8005c0a:	2b03      	cmp	r3, #3
 8005c0c:	d109      	bne.n	8005c22 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	3314      	adds	r3, #20
 8005c12:	4618      	mov	r0, r3
 8005c14:	f7fe ffb6 	bl	8004b84 <ld_word>
 8005c18:	4603      	mov	r3, r0
 8005c1a:	041b      	lsls	r3, r3, #16
 8005c1c:	68fa      	ldr	r2, [r7, #12]
 8005c1e:	4313      	orrs	r3, r2
 8005c20:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8005c22:	68fb      	ldr	r3, [r7, #12]
}
 8005c24:	4618      	mov	r0, r3
 8005c26:	3710      	adds	r7, #16
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	bd80      	pop	{r7, pc}

08005c2c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b084      	sub	sp, #16
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	60f8      	str	r0, [r7, #12]
 8005c34:	60b9      	str	r1, [r7, #8]
 8005c36:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8005c38:	68bb      	ldr	r3, [r7, #8]
 8005c3a:	331a      	adds	r3, #26
 8005c3c:	687a      	ldr	r2, [r7, #4]
 8005c3e:	b292      	uxth	r2, r2
 8005c40:	4611      	mov	r1, r2
 8005c42:	4618      	mov	r0, r3
 8005c44:	f7fe ffd9 	bl	8004bfa <st_word>
	if (fs->fs_type == FS_FAT32) {
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	781b      	ldrb	r3, [r3, #0]
 8005c4c:	2b03      	cmp	r3, #3
 8005c4e:	d109      	bne.n	8005c64 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8005c50:	68bb      	ldr	r3, [r7, #8]
 8005c52:	f103 0214 	add.w	r2, r3, #20
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	0c1b      	lsrs	r3, r3, #16
 8005c5a:	b29b      	uxth	r3, r3
 8005c5c:	4619      	mov	r1, r3
 8005c5e:	4610      	mov	r0, r2
 8005c60:	f7fe ffcb 	bl	8004bfa <st_word>
	}
}
 8005c64:	bf00      	nop
 8005c66:	3710      	adds	r7, #16
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	bd80      	pop	{r7, pc}

08005c6c <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8005c6c:	b590      	push	{r4, r7, lr}
 8005c6e:	b087      	sub	sp, #28
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
 8005c74:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	331a      	adds	r3, #26
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	f7fe ff82 	bl	8004b84 <ld_word>
 8005c80:	4603      	mov	r3, r0
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d001      	beq.n	8005c8a <cmp_lfn+0x1e>
 8005c86:	2300      	movs	r3, #0
 8005c88:	e059      	b.n	8005d3e <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	781b      	ldrb	r3, [r3, #0]
 8005c8e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005c92:	1e5a      	subs	r2, r3, #1
 8005c94:	4613      	mov	r3, r2
 8005c96:	005b      	lsls	r3, r3, #1
 8005c98:	4413      	add	r3, r2
 8005c9a:	009b      	lsls	r3, r3, #2
 8005c9c:	4413      	add	r3, r2
 8005c9e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8005ca0:	2301      	movs	r3, #1
 8005ca2:	81fb      	strh	r3, [r7, #14]
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	613b      	str	r3, [r7, #16]
 8005ca8:	e033      	b.n	8005d12 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8005caa:	4a27      	ldr	r2, [pc, #156]	@ (8005d48 <cmp_lfn+0xdc>)
 8005cac:	693b      	ldr	r3, [r7, #16]
 8005cae:	4413      	add	r3, r2
 8005cb0:	781b      	ldrb	r3, [r3, #0]
 8005cb2:	461a      	mov	r2, r3
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	4413      	add	r3, r2
 8005cb8:	4618      	mov	r0, r3
 8005cba:	f7fe ff63 	bl	8004b84 <ld_word>
 8005cbe:	4603      	mov	r3, r0
 8005cc0:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8005cc2:	89fb      	ldrh	r3, [r7, #14]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d01a      	beq.n	8005cfe <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8005cc8:	697b      	ldr	r3, [r7, #20]
 8005cca:	2bfe      	cmp	r3, #254	@ 0xfe
 8005ccc:	d812      	bhi.n	8005cf4 <cmp_lfn+0x88>
 8005cce:	89bb      	ldrh	r3, [r7, #12]
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	f7fe fe2d 	bl	8004930 <ff_wtoupper>
 8005cd6:	4603      	mov	r3, r0
 8005cd8:	461c      	mov	r4, r3
 8005cda:	697b      	ldr	r3, [r7, #20]
 8005cdc:	1c5a      	adds	r2, r3, #1
 8005cde:	617a      	str	r2, [r7, #20]
 8005ce0:	005b      	lsls	r3, r3, #1
 8005ce2:	687a      	ldr	r2, [r7, #4]
 8005ce4:	4413      	add	r3, r2
 8005ce6:	881b      	ldrh	r3, [r3, #0]
 8005ce8:	4618      	mov	r0, r3
 8005cea:	f7fe fe21 	bl	8004930 <ff_wtoupper>
 8005cee:	4603      	mov	r3, r0
 8005cf0:	429c      	cmp	r4, r3
 8005cf2:	d001      	beq.n	8005cf8 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	e022      	b.n	8005d3e <cmp_lfn+0xd2>
			}
			wc = uc;
 8005cf8:	89bb      	ldrh	r3, [r7, #12]
 8005cfa:	81fb      	strh	r3, [r7, #14]
 8005cfc:	e006      	b.n	8005d0c <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8005cfe:	89bb      	ldrh	r3, [r7, #12]
 8005d00:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d001      	beq.n	8005d0c <cmp_lfn+0xa0>
 8005d08:	2300      	movs	r3, #0
 8005d0a:	e018      	b.n	8005d3e <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8005d0c:	693b      	ldr	r3, [r7, #16]
 8005d0e:	3301      	adds	r3, #1
 8005d10:	613b      	str	r3, [r7, #16]
 8005d12:	693b      	ldr	r3, [r7, #16]
 8005d14:	2b0c      	cmp	r3, #12
 8005d16:	d9c8      	bls.n	8005caa <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	781b      	ldrb	r3, [r3, #0]
 8005d1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d00b      	beq.n	8005d3c <cmp_lfn+0xd0>
 8005d24:	89fb      	ldrh	r3, [r7, #14]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d008      	beq.n	8005d3c <cmp_lfn+0xd0>
 8005d2a:	697b      	ldr	r3, [r7, #20]
 8005d2c:	005b      	lsls	r3, r3, #1
 8005d2e:	687a      	ldr	r2, [r7, #4]
 8005d30:	4413      	add	r3, r2
 8005d32:	881b      	ldrh	r3, [r3, #0]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d001      	beq.n	8005d3c <cmp_lfn+0xd0>
 8005d38:	2300      	movs	r3, #0
 8005d3a:	e000      	b.n	8005d3e <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8005d3c:	2301      	movs	r3, #1
}
 8005d3e:	4618      	mov	r0, r3
 8005d40:	371c      	adds	r7, #28
 8005d42:	46bd      	mov	sp, r7
 8005d44:	bd90      	pop	{r4, r7, pc}
 8005d46:	bf00      	nop
 8005d48:	080092d8 	.word	0x080092d8

08005d4c <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b088      	sub	sp, #32
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	60f8      	str	r0, [r7, #12]
 8005d54:	60b9      	str	r1, [r7, #8]
 8005d56:	4611      	mov	r1, r2
 8005d58:	461a      	mov	r2, r3
 8005d5a:	460b      	mov	r3, r1
 8005d5c:	71fb      	strb	r3, [r7, #7]
 8005d5e:	4613      	mov	r3, r2
 8005d60:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8005d62:	68bb      	ldr	r3, [r7, #8]
 8005d64:	330d      	adds	r3, #13
 8005d66:	79ba      	ldrb	r2, [r7, #6]
 8005d68:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8005d6a:	68bb      	ldr	r3, [r7, #8]
 8005d6c:	330b      	adds	r3, #11
 8005d6e:	220f      	movs	r2, #15
 8005d70:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8005d72:	68bb      	ldr	r3, [r7, #8]
 8005d74:	330c      	adds	r3, #12
 8005d76:	2200      	movs	r2, #0
 8005d78:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8005d7a:	68bb      	ldr	r3, [r7, #8]
 8005d7c:	331a      	adds	r3, #26
 8005d7e:	2100      	movs	r1, #0
 8005d80:	4618      	mov	r0, r3
 8005d82:	f7fe ff3a 	bl	8004bfa <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8005d86:	79fb      	ldrb	r3, [r7, #7]
 8005d88:	1e5a      	subs	r2, r3, #1
 8005d8a:	4613      	mov	r3, r2
 8005d8c:	005b      	lsls	r3, r3, #1
 8005d8e:	4413      	add	r3, r2
 8005d90:	009b      	lsls	r3, r3, #2
 8005d92:	4413      	add	r3, r2
 8005d94:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8005d96:	2300      	movs	r3, #0
 8005d98:	82fb      	strh	r3, [r7, #22]
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8005d9e:	8afb      	ldrh	r3, [r7, #22]
 8005da0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d007      	beq.n	8005db8 <put_lfn+0x6c>
 8005da8:	69fb      	ldr	r3, [r7, #28]
 8005daa:	1c5a      	adds	r2, r3, #1
 8005dac:	61fa      	str	r2, [r7, #28]
 8005dae:	005b      	lsls	r3, r3, #1
 8005db0:	68fa      	ldr	r2, [r7, #12]
 8005db2:	4413      	add	r3, r2
 8005db4:	881b      	ldrh	r3, [r3, #0]
 8005db6:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8005db8:	4a17      	ldr	r2, [pc, #92]	@ (8005e18 <put_lfn+0xcc>)
 8005dba:	69bb      	ldr	r3, [r7, #24]
 8005dbc:	4413      	add	r3, r2
 8005dbe:	781b      	ldrb	r3, [r3, #0]
 8005dc0:	461a      	mov	r2, r3
 8005dc2:	68bb      	ldr	r3, [r7, #8]
 8005dc4:	4413      	add	r3, r2
 8005dc6:	8afa      	ldrh	r2, [r7, #22]
 8005dc8:	4611      	mov	r1, r2
 8005dca:	4618      	mov	r0, r3
 8005dcc:	f7fe ff15 	bl	8004bfa <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8005dd0:	8afb      	ldrh	r3, [r7, #22]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d102      	bne.n	8005ddc <put_lfn+0x90>
 8005dd6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005dda:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8005ddc:	69bb      	ldr	r3, [r7, #24]
 8005dde:	3301      	adds	r3, #1
 8005de0:	61bb      	str	r3, [r7, #24]
 8005de2:	69bb      	ldr	r3, [r7, #24]
 8005de4:	2b0c      	cmp	r3, #12
 8005de6:	d9da      	bls.n	8005d9e <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8005de8:	8afb      	ldrh	r3, [r7, #22]
 8005dea:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d006      	beq.n	8005e00 <put_lfn+0xb4>
 8005df2:	69fb      	ldr	r3, [r7, #28]
 8005df4:	005b      	lsls	r3, r3, #1
 8005df6:	68fa      	ldr	r2, [r7, #12]
 8005df8:	4413      	add	r3, r2
 8005dfa:	881b      	ldrh	r3, [r3, #0]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d103      	bne.n	8005e08 <put_lfn+0xbc>
 8005e00:	79fb      	ldrb	r3, [r7, #7]
 8005e02:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005e06:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	79fa      	ldrb	r2, [r7, #7]
 8005e0c:	701a      	strb	r2, [r3, #0]
}
 8005e0e:	bf00      	nop
 8005e10:	3720      	adds	r7, #32
 8005e12:	46bd      	mov	sp, r7
 8005e14:	bd80      	pop	{r7, pc}
 8005e16:	bf00      	nop
 8005e18:	080092d8 	.word	0x080092d8

08005e1c <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b08c      	sub	sp, #48	@ 0x30
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	60f8      	str	r0, [r7, #12]
 8005e24:	60b9      	str	r1, [r7, #8]
 8005e26:	607a      	str	r2, [r7, #4]
 8005e28:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8005e2a:	220b      	movs	r2, #11
 8005e2c:	68b9      	ldr	r1, [r7, #8]
 8005e2e:	68f8      	ldr	r0, [r7, #12]
 8005e30:	f7fe ff2a 	bl	8004c88 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	2b05      	cmp	r3, #5
 8005e38:	d92b      	bls.n	8005e92 <gen_numname+0x76>
		sr = seq;
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8005e3e:	e022      	b.n	8005e86 <gen_numname+0x6a>
			wc = *lfn++;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	1c9a      	adds	r2, r3, #2
 8005e44:	607a      	str	r2, [r7, #4]
 8005e46:	881b      	ldrh	r3, [r3, #0]
 8005e48:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005e4e:	e017      	b.n	8005e80 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8005e50:	69fb      	ldr	r3, [r7, #28]
 8005e52:	005a      	lsls	r2, r3, #1
 8005e54:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005e56:	f003 0301 	and.w	r3, r3, #1
 8005e5a:	4413      	add	r3, r2
 8005e5c:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8005e5e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005e60:	085b      	lsrs	r3, r3, #1
 8005e62:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8005e64:	69fb      	ldr	r3, [r7, #28]
 8005e66:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d005      	beq.n	8005e7a <gen_numname+0x5e>
 8005e6e:	69fb      	ldr	r3, [r7, #28]
 8005e70:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 8005e74:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 8005e78:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8005e7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e7c:	3301      	adds	r3, #1
 8005e7e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005e80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e82:	2b0f      	cmp	r3, #15
 8005e84:	d9e4      	bls.n	8005e50 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	881b      	ldrh	r3, [r3, #0]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d1d8      	bne.n	8005e40 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8005e8e:	69fb      	ldr	r3, [r7, #28]
 8005e90:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8005e92:	2307      	movs	r3, #7
 8005e94:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	b2db      	uxtb	r3, r3
 8005e9a:	f003 030f 	and.w	r3, r3, #15
 8005e9e:	b2db      	uxtb	r3, r3
 8005ea0:	3330      	adds	r3, #48	@ 0x30
 8005ea2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 8005ea6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005eaa:	2b39      	cmp	r3, #57	@ 0x39
 8005eac:	d904      	bls.n	8005eb8 <gen_numname+0x9c>
 8005eae:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005eb2:	3307      	adds	r3, #7
 8005eb4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 8005eb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005eba:	1e5a      	subs	r2, r3, #1
 8005ebc:	62ba      	str	r2, [r7, #40]	@ 0x28
 8005ebe:	3330      	adds	r3, #48	@ 0x30
 8005ec0:	443b      	add	r3, r7
 8005ec2:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8005ec6:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	091b      	lsrs	r3, r3, #4
 8005ece:	603b      	str	r3, [r7, #0]
	} while (seq);
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d1df      	bne.n	8005e96 <gen_numname+0x7a>
	ns[i] = '~';
 8005ed6:	f107 0214 	add.w	r2, r7, #20
 8005eda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005edc:	4413      	add	r3, r2
 8005ede:	227e      	movs	r2, #126	@ 0x7e
 8005ee0:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	627b      	str	r3, [r7, #36]	@ 0x24
 8005ee6:	e002      	b.n	8005eee <gen_numname+0xd2>
 8005ee8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005eea:	3301      	adds	r3, #1
 8005eec:	627b      	str	r3, [r7, #36]	@ 0x24
 8005eee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ef0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ef2:	429a      	cmp	r2, r3
 8005ef4:	d205      	bcs.n	8005f02 <gen_numname+0xe6>
 8005ef6:	68fa      	ldr	r2, [r7, #12]
 8005ef8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005efa:	4413      	add	r3, r2
 8005efc:	781b      	ldrb	r3, [r3, #0]
 8005efe:	2b20      	cmp	r3, #32
 8005f00:	d1f2      	bne.n	8005ee8 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8005f02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f04:	2b07      	cmp	r3, #7
 8005f06:	d807      	bhi.n	8005f18 <gen_numname+0xfc>
 8005f08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f0a:	1c5a      	adds	r2, r3, #1
 8005f0c:	62ba      	str	r2, [r7, #40]	@ 0x28
 8005f0e:	3330      	adds	r3, #48	@ 0x30
 8005f10:	443b      	add	r3, r7
 8005f12:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8005f16:	e000      	b.n	8005f1a <gen_numname+0xfe>
 8005f18:	2120      	movs	r1, #32
 8005f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f1c:	1c5a      	adds	r2, r3, #1
 8005f1e:	627a      	str	r2, [r7, #36]	@ 0x24
 8005f20:	68fa      	ldr	r2, [r7, #12]
 8005f22:	4413      	add	r3, r2
 8005f24:	460a      	mov	r2, r1
 8005f26:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8005f28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f2a:	2b07      	cmp	r3, #7
 8005f2c:	d9e9      	bls.n	8005f02 <gen_numname+0xe6>
}
 8005f2e:	bf00      	nop
 8005f30:	bf00      	nop
 8005f32:	3730      	adds	r7, #48	@ 0x30
 8005f34:	46bd      	mov	sp, r7
 8005f36:	bd80      	pop	{r7, pc}

08005f38 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8005f38:	b480      	push	{r7}
 8005f3a:	b085      	sub	sp, #20
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8005f40:	2300      	movs	r3, #0
 8005f42:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8005f44:	230b      	movs	r3, #11
 8005f46:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8005f48:	7bfb      	ldrb	r3, [r7, #15]
 8005f4a:	b2da      	uxtb	r2, r3
 8005f4c:	0852      	lsrs	r2, r2, #1
 8005f4e:	01db      	lsls	r3, r3, #7
 8005f50:	4313      	orrs	r3, r2
 8005f52:	b2da      	uxtb	r2, r3
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	1c59      	adds	r1, r3, #1
 8005f58:	6079      	str	r1, [r7, #4]
 8005f5a:	781b      	ldrb	r3, [r3, #0]
 8005f5c:	4413      	add	r3, r2
 8005f5e:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8005f60:	68bb      	ldr	r3, [r7, #8]
 8005f62:	3b01      	subs	r3, #1
 8005f64:	60bb      	str	r3, [r7, #8]
 8005f66:	68bb      	ldr	r3, [r7, #8]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d1ed      	bne.n	8005f48 <sum_sfn+0x10>
	return sum;
 8005f6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f6e:	4618      	mov	r0, r3
 8005f70:	3714      	adds	r7, #20
 8005f72:	46bd      	mov	sp, r7
 8005f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f78:	4770      	bx	lr

08005f7a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8005f7a:	b580      	push	{r7, lr}
 8005f7c:	b086      	sub	sp, #24
 8005f7e:	af00      	add	r7, sp, #0
 8005f80:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8005f88:	2100      	movs	r1, #0
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	f7ff fc89 	bl	80058a2 <dir_sdi>
 8005f90:	4603      	mov	r3, r0
 8005f92:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8005f94:	7dfb      	ldrb	r3, [r7, #23]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d001      	beq.n	8005f9e <dir_find+0x24>
 8005f9a:	7dfb      	ldrb	r3, [r7, #23]
 8005f9c:	e0a9      	b.n	80060f2 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8005f9e:	23ff      	movs	r3, #255	@ 0xff
 8005fa0:	753b      	strb	r3, [r7, #20]
 8005fa2:	7d3b      	ldrb	r3, [r7, #20]
 8005fa4:	757b      	strb	r3, [r7, #21]
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	f04f 32ff 	mov.w	r2, #4294967295
 8005fac:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	69db      	ldr	r3, [r3, #28]
 8005fb2:	4619      	mov	r1, r3
 8005fb4:	6938      	ldr	r0, [r7, #16]
 8005fb6:	f7ff f895 	bl	80050e4 <move_window>
 8005fba:	4603      	mov	r3, r0
 8005fbc:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8005fbe:	7dfb      	ldrb	r3, [r7, #23]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	f040 8090 	bne.w	80060e6 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6a1b      	ldr	r3, [r3, #32]
 8005fca:	781b      	ldrb	r3, [r3, #0]
 8005fcc:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8005fce:	7dbb      	ldrb	r3, [r7, #22]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d102      	bne.n	8005fda <dir_find+0x60>
 8005fd4:	2304      	movs	r3, #4
 8005fd6:	75fb      	strb	r3, [r7, #23]
 8005fd8:	e08a      	b.n	80060f0 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6a1b      	ldr	r3, [r3, #32]
 8005fde:	330b      	adds	r3, #11
 8005fe0:	781b      	ldrb	r3, [r3, #0]
 8005fe2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005fe6:	73fb      	strb	r3, [r7, #15]
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	7bfa      	ldrb	r2, [r7, #15]
 8005fec:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8005fee:	7dbb      	ldrb	r3, [r7, #22]
 8005ff0:	2be5      	cmp	r3, #229	@ 0xe5
 8005ff2:	d007      	beq.n	8006004 <dir_find+0x8a>
 8005ff4:	7bfb      	ldrb	r3, [r7, #15]
 8005ff6:	f003 0308 	and.w	r3, r3, #8
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d009      	beq.n	8006012 <dir_find+0x98>
 8005ffe:	7bfb      	ldrb	r3, [r7, #15]
 8006000:	2b0f      	cmp	r3, #15
 8006002:	d006      	beq.n	8006012 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8006004:	23ff      	movs	r3, #255	@ 0xff
 8006006:	757b      	strb	r3, [r7, #21]
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	f04f 32ff 	mov.w	r2, #4294967295
 800600e:	631a      	str	r2, [r3, #48]	@ 0x30
 8006010:	e05e      	b.n	80060d0 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8006012:	7bfb      	ldrb	r3, [r7, #15]
 8006014:	2b0f      	cmp	r3, #15
 8006016:	d136      	bne.n	8006086 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800601e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006022:	2b00      	cmp	r3, #0
 8006024:	d154      	bne.n	80060d0 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8006026:	7dbb      	ldrb	r3, [r7, #22]
 8006028:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800602c:	2b00      	cmp	r3, #0
 800602e:	d00d      	beq.n	800604c <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6a1b      	ldr	r3, [r3, #32]
 8006034:	7b5b      	ldrb	r3, [r3, #13]
 8006036:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8006038:	7dbb      	ldrb	r3, [r7, #22]
 800603a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800603e:	75bb      	strb	r3, [r7, #22]
 8006040:	7dbb      	ldrb	r3, [r7, #22]
 8006042:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	695a      	ldr	r2, [r3, #20]
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800604c:	7dba      	ldrb	r2, [r7, #22]
 800604e:	7d7b      	ldrb	r3, [r7, #21]
 8006050:	429a      	cmp	r2, r3
 8006052:	d115      	bne.n	8006080 <dir_find+0x106>
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	6a1b      	ldr	r3, [r3, #32]
 8006058:	330d      	adds	r3, #13
 800605a:	781b      	ldrb	r3, [r3, #0]
 800605c:	7d3a      	ldrb	r2, [r7, #20]
 800605e:	429a      	cmp	r2, r3
 8006060:	d10e      	bne.n	8006080 <dir_find+0x106>
 8006062:	693b      	ldr	r3, [r7, #16]
 8006064:	691a      	ldr	r2, [r3, #16]
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6a1b      	ldr	r3, [r3, #32]
 800606a:	4619      	mov	r1, r3
 800606c:	4610      	mov	r0, r2
 800606e:	f7ff fdfd 	bl	8005c6c <cmp_lfn>
 8006072:	4603      	mov	r3, r0
 8006074:	2b00      	cmp	r3, #0
 8006076:	d003      	beq.n	8006080 <dir_find+0x106>
 8006078:	7d7b      	ldrb	r3, [r7, #21]
 800607a:	3b01      	subs	r3, #1
 800607c:	b2db      	uxtb	r3, r3
 800607e:	e000      	b.n	8006082 <dir_find+0x108>
 8006080:	23ff      	movs	r3, #255	@ 0xff
 8006082:	757b      	strb	r3, [r7, #21]
 8006084:	e024      	b.n	80060d0 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8006086:	7d7b      	ldrb	r3, [r7, #21]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d109      	bne.n	80060a0 <dir_find+0x126>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	6a1b      	ldr	r3, [r3, #32]
 8006090:	4618      	mov	r0, r3
 8006092:	f7ff ff51 	bl	8005f38 <sum_sfn>
 8006096:	4603      	mov	r3, r0
 8006098:	461a      	mov	r2, r3
 800609a:	7d3b      	ldrb	r3, [r7, #20]
 800609c:	4293      	cmp	r3, r2
 800609e:	d024      	beq.n	80060ea <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80060a6:	f003 0301 	and.w	r3, r3, #1
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d10a      	bne.n	80060c4 <dir_find+0x14a>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6a18      	ldr	r0, [r3, #32]
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	3324      	adds	r3, #36	@ 0x24
 80060b6:	220b      	movs	r2, #11
 80060b8:	4619      	mov	r1, r3
 80060ba:	f7fe fe21 	bl	8004d00 <mem_cmp>
 80060be:	4603      	mov	r3, r0
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d014      	beq.n	80060ee <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80060c4:	23ff      	movs	r3, #255	@ 0xff
 80060c6:	757b      	strb	r3, [r7, #21]
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	f04f 32ff 	mov.w	r2, #4294967295
 80060ce:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80060d0:	2100      	movs	r1, #0
 80060d2:	6878      	ldr	r0, [r7, #4]
 80060d4:	f7ff fc6e 	bl	80059b4 <dir_next>
 80060d8:	4603      	mov	r3, r0
 80060da:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80060dc:	7dfb      	ldrb	r3, [r7, #23]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	f43f af65 	beq.w	8005fae <dir_find+0x34>
 80060e4:	e004      	b.n	80060f0 <dir_find+0x176>
		if (res != FR_OK) break;
 80060e6:	bf00      	nop
 80060e8:	e002      	b.n	80060f0 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80060ea:	bf00      	nop
 80060ec:	e000      	b.n	80060f0 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80060ee:	bf00      	nop

	return res;
 80060f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80060f2:	4618      	mov	r0, r3
 80060f4:	3718      	adds	r7, #24
 80060f6:	46bd      	mov	sp, r7
 80060f8:	bd80      	pop	{r7, pc}
	...

080060fc <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b08c      	sub	sp, #48	@ 0x30
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8006110:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8006114:	2b00      	cmp	r3, #0
 8006116:	d001      	beq.n	800611c <dir_register+0x20>
 8006118:	2306      	movs	r3, #6
 800611a:	e0e0      	b.n	80062de <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800611c:	2300      	movs	r3, #0
 800611e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006120:	e002      	b.n	8006128 <dir_register+0x2c>
 8006122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006124:	3301      	adds	r3, #1
 8006126:	627b      	str	r3, [r7, #36]	@ 0x24
 8006128:	69fb      	ldr	r3, [r7, #28]
 800612a:	691a      	ldr	r2, [r3, #16]
 800612c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800612e:	005b      	lsls	r3, r3, #1
 8006130:	4413      	add	r3, r2
 8006132:	881b      	ldrh	r3, [r3, #0]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d1f4      	bne.n	8006122 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 800613e:	f107 030c 	add.w	r3, r7, #12
 8006142:	220c      	movs	r2, #12
 8006144:	4618      	mov	r0, r3
 8006146:	f7fe fd9f 	bl	8004c88 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800614a:	7dfb      	ldrb	r3, [r7, #23]
 800614c:	f003 0301 	and.w	r3, r3, #1
 8006150:	2b00      	cmp	r3, #0
 8006152:	d032      	beq.n	80061ba <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2240      	movs	r2, #64	@ 0x40
 8006158:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 800615c:	2301      	movs	r3, #1
 800615e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006160:	e016      	b.n	8006190 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 8006168:	69fb      	ldr	r3, [r7, #28]
 800616a:	691a      	ldr	r2, [r3, #16]
 800616c:	f107 010c 	add.w	r1, r7, #12
 8006170:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006172:	f7ff fe53 	bl	8005e1c <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8006176:	6878      	ldr	r0, [r7, #4]
 8006178:	f7ff feff 	bl	8005f7a <dir_find>
 800617c:	4603      	mov	r3, r0
 800617e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 8006182:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006186:	2b00      	cmp	r3, #0
 8006188:	d106      	bne.n	8006198 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800618a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800618c:	3301      	adds	r3, #1
 800618e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006190:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006192:	2b63      	cmp	r3, #99	@ 0x63
 8006194:	d9e5      	bls.n	8006162 <dir_register+0x66>
 8006196:	e000      	b.n	800619a <dir_register+0x9e>
			if (res != FR_OK) break;
 8006198:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800619a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800619c:	2b64      	cmp	r3, #100	@ 0x64
 800619e:	d101      	bne.n	80061a4 <dir_register+0xa8>
 80061a0:	2307      	movs	r3, #7
 80061a2:	e09c      	b.n	80062de <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 80061a4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80061a8:	2b04      	cmp	r3, #4
 80061aa:	d002      	beq.n	80061b2 <dir_register+0xb6>
 80061ac:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80061b0:	e095      	b.n	80062de <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 80061b2:	7dfa      	ldrb	r2, [r7, #23]
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 80061ba:	7dfb      	ldrb	r3, [r7, #23]
 80061bc:	f003 0302 	and.w	r3, r3, #2
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d007      	beq.n	80061d4 <dir_register+0xd8>
 80061c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061c6:	330c      	adds	r3, #12
 80061c8:	4a47      	ldr	r2, [pc, #284]	@ (80062e8 <dir_register+0x1ec>)
 80061ca:	fba2 2303 	umull	r2, r3, r2, r3
 80061ce:	089b      	lsrs	r3, r3, #2
 80061d0:	3301      	adds	r3, #1
 80061d2:	e000      	b.n	80061d6 <dir_register+0xda>
 80061d4:	2301      	movs	r3, #1
 80061d6:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 80061d8:	6a39      	ldr	r1, [r7, #32]
 80061da:	6878      	ldr	r0, [r7, #4]
 80061dc:	f7ff fcc0 	bl	8005b60 <dir_alloc>
 80061e0:	4603      	mov	r3, r0
 80061e2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 80061e6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d148      	bne.n	8006280 <dir_register+0x184>
 80061ee:	6a3b      	ldr	r3, [r7, #32]
 80061f0:	3b01      	subs	r3, #1
 80061f2:	623b      	str	r3, [r7, #32]
 80061f4:	6a3b      	ldr	r3, [r7, #32]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d042      	beq.n	8006280 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	695a      	ldr	r2, [r3, #20]
 80061fe:	6a3b      	ldr	r3, [r7, #32]
 8006200:	015b      	lsls	r3, r3, #5
 8006202:	1ad3      	subs	r3, r2, r3
 8006204:	4619      	mov	r1, r3
 8006206:	6878      	ldr	r0, [r7, #4]
 8006208:	f7ff fb4b 	bl	80058a2 <dir_sdi>
 800620c:	4603      	mov	r3, r0
 800620e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 8006212:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006216:	2b00      	cmp	r3, #0
 8006218:	d132      	bne.n	8006280 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	3324      	adds	r3, #36	@ 0x24
 800621e:	4618      	mov	r0, r3
 8006220:	f7ff fe8a 	bl	8005f38 <sum_sfn>
 8006224:	4603      	mov	r3, r0
 8006226:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	69db      	ldr	r3, [r3, #28]
 800622c:	4619      	mov	r1, r3
 800622e:	69f8      	ldr	r0, [r7, #28]
 8006230:	f7fe ff58 	bl	80050e4 <move_window>
 8006234:	4603      	mov	r3, r0
 8006236:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 800623a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800623e:	2b00      	cmp	r3, #0
 8006240:	d11d      	bne.n	800627e <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8006242:	69fb      	ldr	r3, [r7, #28]
 8006244:	6918      	ldr	r0, [r3, #16]
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6a19      	ldr	r1, [r3, #32]
 800624a:	6a3b      	ldr	r3, [r7, #32]
 800624c:	b2da      	uxtb	r2, r3
 800624e:	7efb      	ldrb	r3, [r7, #27]
 8006250:	f7ff fd7c 	bl	8005d4c <put_lfn>
				fs->wflag = 1;
 8006254:	69fb      	ldr	r3, [r7, #28]
 8006256:	2201      	movs	r2, #1
 8006258:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800625a:	2100      	movs	r1, #0
 800625c:	6878      	ldr	r0, [r7, #4]
 800625e:	f7ff fba9 	bl	80059b4 <dir_next>
 8006262:	4603      	mov	r3, r0
 8006264:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 8006268:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800626c:	2b00      	cmp	r3, #0
 800626e:	d107      	bne.n	8006280 <dir_register+0x184>
 8006270:	6a3b      	ldr	r3, [r7, #32]
 8006272:	3b01      	subs	r3, #1
 8006274:	623b      	str	r3, [r7, #32]
 8006276:	6a3b      	ldr	r3, [r7, #32]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d1d5      	bne.n	8006228 <dir_register+0x12c>
 800627c:	e000      	b.n	8006280 <dir_register+0x184>
				if (res != FR_OK) break;
 800627e:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8006280:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006284:	2b00      	cmp	r3, #0
 8006286:	d128      	bne.n	80062da <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	69db      	ldr	r3, [r3, #28]
 800628c:	4619      	mov	r1, r3
 800628e:	69f8      	ldr	r0, [r7, #28]
 8006290:	f7fe ff28 	bl	80050e4 <move_window>
 8006294:	4603      	mov	r3, r0
 8006296:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800629a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d11b      	bne.n	80062da <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6a1b      	ldr	r3, [r3, #32]
 80062a6:	2220      	movs	r2, #32
 80062a8:	2100      	movs	r1, #0
 80062aa:	4618      	mov	r0, r3
 80062ac:	f7fe fd0d 	bl	8004cca <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	6a18      	ldr	r0, [r3, #32]
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	3324      	adds	r3, #36	@ 0x24
 80062b8:	220b      	movs	r2, #11
 80062ba:	4619      	mov	r1, r3
 80062bc:	f7fe fce4 	bl	8004c88 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6a1b      	ldr	r3, [r3, #32]
 80062ca:	330c      	adds	r3, #12
 80062cc:	f002 0218 	and.w	r2, r2, #24
 80062d0:	b2d2      	uxtb	r2, r2
 80062d2:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 80062d4:	69fb      	ldr	r3, [r7, #28]
 80062d6:	2201      	movs	r2, #1
 80062d8:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80062da:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80062de:	4618      	mov	r0, r3
 80062e0:	3730      	adds	r7, #48	@ 0x30
 80062e2:	46bd      	mov	sp, r7
 80062e4:	bd80      	pop	{r7, pc}
 80062e6:	bf00      	nop
 80062e8:	4ec4ec4f 	.word	0x4ec4ec4f

080062ec <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b088      	sub	sp, #32
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
 80062f4:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	2200      	movs	r2, #0
 8006300:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	69db      	ldr	r3, [r3, #28]
 8006306:	2b00      	cmp	r3, #0
 8006308:	f000 80ca 	beq.w	80064a0 <get_fileinfo+0x1b4>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006310:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006314:	d032      	beq.n	800637c <get_fileinfo+0x90>
			i = j = 0;
 8006316:	2300      	movs	r3, #0
 8006318:	61bb      	str	r3, [r7, #24]
 800631a:	69bb      	ldr	r3, [r7, #24]
 800631c:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800631e:	e01b      	b.n	8006358 <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 8006320:	89fb      	ldrh	r3, [r7, #14]
 8006322:	2100      	movs	r1, #0
 8006324:	4618      	mov	r0, r3
 8006326:	f7fe fac7 	bl	80048b8 <ff_convert>
 800632a:	4603      	mov	r3, r0
 800632c:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 800632e:	89fb      	ldrh	r3, [r7, #14]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d102      	bne.n	800633a <get_fileinfo+0x4e>
 8006334:	2300      	movs	r3, #0
 8006336:	61fb      	str	r3, [r7, #28]
 8006338:	e01a      	b.n	8006370 <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 800633a:	69fb      	ldr	r3, [r7, #28]
 800633c:	2bfe      	cmp	r3, #254	@ 0xfe
 800633e:	d902      	bls.n	8006346 <get_fileinfo+0x5a>
 8006340:	2300      	movs	r3, #0
 8006342:	61fb      	str	r3, [r7, #28]
 8006344:	e014      	b.n	8006370 <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 8006346:	69fb      	ldr	r3, [r7, #28]
 8006348:	1c5a      	adds	r2, r3, #1
 800634a:	61fa      	str	r2, [r7, #28]
 800634c:	89fa      	ldrh	r2, [r7, #14]
 800634e:	b2d1      	uxtb	r1, r2
 8006350:	683a      	ldr	r2, [r7, #0]
 8006352:	4413      	add	r3, r2
 8006354:	460a      	mov	r2, r1
 8006356:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8006358:	693b      	ldr	r3, [r7, #16]
 800635a:	691a      	ldr	r2, [r3, #16]
 800635c:	69bb      	ldr	r3, [r7, #24]
 800635e:	1c59      	adds	r1, r3, #1
 8006360:	61b9      	str	r1, [r7, #24]
 8006362:	005b      	lsls	r3, r3, #1
 8006364:	4413      	add	r3, r2
 8006366:	881b      	ldrh	r3, [r3, #0]
 8006368:	81fb      	strh	r3, [r7, #14]
 800636a:	89fb      	ldrh	r3, [r7, #14]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d1d7      	bne.n	8006320 <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 8006370:	683a      	ldr	r2, [r7, #0]
 8006372:	69fb      	ldr	r3, [r7, #28]
 8006374:	4413      	add	r3, r2
 8006376:	3316      	adds	r3, #22
 8006378:	2200      	movs	r2, #0
 800637a:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 800637c:	2300      	movs	r3, #0
 800637e:	61bb      	str	r3, [r7, #24]
 8006380:	69bb      	ldr	r3, [r7, #24]
 8006382:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 8006384:	683a      	ldr	r2, [r7, #0]
 8006386:	69fb      	ldr	r3, [r7, #28]
 8006388:	4413      	add	r3, r2
 800638a:	3316      	adds	r3, #22
 800638c:	781b      	ldrb	r3, [r3, #0]
 800638e:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 8006390:	e04d      	b.n	800642e <get_fileinfo+0x142>
		c = (TCHAR)dp->dir[i++];
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6a1a      	ldr	r2, [r3, #32]
 8006396:	69fb      	ldr	r3, [r7, #28]
 8006398:	1c59      	adds	r1, r3, #1
 800639a:	61f9      	str	r1, [r7, #28]
 800639c:	4413      	add	r3, r2
 800639e:	781b      	ldrb	r3, [r3, #0]
 80063a0:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 80063a2:	7dfb      	ldrb	r3, [r7, #23]
 80063a4:	2b20      	cmp	r3, #32
 80063a6:	d041      	beq.n	800642c <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 80063a8:	7dfb      	ldrb	r3, [r7, #23]
 80063aa:	2b05      	cmp	r3, #5
 80063ac:	d101      	bne.n	80063b2 <get_fileinfo+0xc6>
 80063ae:	23e5      	movs	r3, #229	@ 0xe5
 80063b0:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 80063b2:	69fb      	ldr	r3, [r7, #28]
 80063b4:	2b09      	cmp	r3, #9
 80063b6:	d10f      	bne.n	80063d8 <get_fileinfo+0xec>
			if (!lfv) fno->fname[j] = '.';
 80063b8:	89bb      	ldrh	r3, [r7, #12]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d105      	bne.n	80063ca <get_fileinfo+0xde>
 80063be:	683a      	ldr	r2, [r7, #0]
 80063c0:	69bb      	ldr	r3, [r7, #24]
 80063c2:	4413      	add	r3, r2
 80063c4:	3316      	adds	r3, #22
 80063c6:	222e      	movs	r2, #46	@ 0x2e
 80063c8:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 80063ca:	69bb      	ldr	r3, [r7, #24]
 80063cc:	1c5a      	adds	r2, r3, #1
 80063ce:	61ba      	str	r2, [r7, #24]
 80063d0:	683a      	ldr	r2, [r7, #0]
 80063d2:	4413      	add	r3, r2
 80063d4:	222e      	movs	r2, #46	@ 0x2e
 80063d6:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 80063d8:	683a      	ldr	r2, [r7, #0]
 80063da:	69bb      	ldr	r3, [r7, #24]
 80063dc:	4413      	add	r3, r2
 80063de:	3309      	adds	r3, #9
 80063e0:	7dfa      	ldrb	r2, [r7, #23]
 80063e2:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 80063e4:	89bb      	ldrh	r3, [r7, #12]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d11c      	bne.n	8006424 <get_fileinfo+0x138>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 80063ea:	7dfb      	ldrb	r3, [r7, #23]
 80063ec:	2b40      	cmp	r3, #64	@ 0x40
 80063ee:	d913      	bls.n	8006418 <get_fileinfo+0x12c>
 80063f0:	7dfb      	ldrb	r3, [r7, #23]
 80063f2:	2b5a      	cmp	r3, #90	@ 0x5a
 80063f4:	d810      	bhi.n	8006418 <get_fileinfo+0x12c>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6a1b      	ldr	r3, [r3, #32]
 80063fa:	330c      	adds	r3, #12
 80063fc:	781b      	ldrb	r3, [r3, #0]
 80063fe:	461a      	mov	r2, r3
 8006400:	69fb      	ldr	r3, [r7, #28]
 8006402:	2b08      	cmp	r3, #8
 8006404:	d901      	bls.n	800640a <get_fileinfo+0x11e>
 8006406:	2310      	movs	r3, #16
 8006408:	e000      	b.n	800640c <get_fileinfo+0x120>
 800640a:	2308      	movs	r3, #8
 800640c:	4013      	ands	r3, r2
 800640e:	2b00      	cmp	r3, #0
 8006410:	d002      	beq.n	8006418 <get_fileinfo+0x12c>
				c += 0x20;			/* To lower */
 8006412:	7dfb      	ldrb	r3, [r7, #23]
 8006414:	3320      	adds	r3, #32
 8006416:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 8006418:	683a      	ldr	r2, [r7, #0]
 800641a:	69bb      	ldr	r3, [r7, #24]
 800641c:	4413      	add	r3, r2
 800641e:	3316      	adds	r3, #22
 8006420:	7dfa      	ldrb	r2, [r7, #23]
 8006422:	701a      	strb	r2, [r3, #0]
		}
		j++;
 8006424:	69bb      	ldr	r3, [r7, #24]
 8006426:	3301      	adds	r3, #1
 8006428:	61bb      	str	r3, [r7, #24]
 800642a:	e000      	b.n	800642e <get_fileinfo+0x142>
		if (c == ' ') continue;				/* Skip padding spaces */
 800642c:	bf00      	nop
	while (i < 11) {		/* Copy name body and extension */
 800642e:	69fb      	ldr	r3, [r7, #28]
 8006430:	2b0a      	cmp	r3, #10
 8006432:	d9ae      	bls.n	8006392 <get_fileinfo+0xa6>
	}
	if (!lfv) {
 8006434:	89bb      	ldrh	r3, [r7, #12]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d10d      	bne.n	8006456 <get_fileinfo+0x16a>
		fno->fname[j] = 0;
 800643a:	683a      	ldr	r2, [r7, #0]
 800643c:	69bb      	ldr	r3, [r7, #24]
 800643e:	4413      	add	r3, r2
 8006440:	3316      	adds	r3, #22
 8006442:	2200      	movs	r2, #0
 8006444:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6a1b      	ldr	r3, [r3, #32]
 800644a:	330c      	adds	r3, #12
 800644c:	781b      	ldrb	r3, [r3, #0]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d101      	bne.n	8006456 <get_fileinfo+0x16a>
 8006452:	2300      	movs	r3, #0
 8006454:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 8006456:	683a      	ldr	r2, [r7, #0]
 8006458:	69bb      	ldr	r3, [r7, #24]
 800645a:	4413      	add	r3, r2
 800645c:	3309      	adds	r3, #9
 800645e:	2200      	movs	r2, #0
 8006460:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6a1b      	ldr	r3, [r3, #32]
 8006466:	7ada      	ldrb	r2, [r3, #11]
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	6a1b      	ldr	r3, [r3, #32]
 8006470:	331c      	adds	r3, #28
 8006472:	4618      	mov	r0, r3
 8006474:	f7fe fb9e 	bl	8004bb4 <ld_dword>
 8006478:	4602      	mov	r2, r0
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6a1b      	ldr	r3, [r3, #32]
 8006482:	3316      	adds	r3, #22
 8006484:	4618      	mov	r0, r3
 8006486:	f7fe fb95 	bl	8004bb4 <ld_dword>
 800648a:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800648c:	68bb      	ldr	r3, [r7, #8]
 800648e:	b29a      	uxth	r2, r3
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	80da      	strh	r2, [r3, #6]
 8006494:	68bb      	ldr	r3, [r7, #8]
 8006496:	0c1b      	lsrs	r3, r3, #16
 8006498:	b29a      	uxth	r2, r3
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	809a      	strh	r2, [r3, #4]
 800649e:	e000      	b.n	80064a2 <get_fileinfo+0x1b6>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 80064a0:	bf00      	nop
}
 80064a2:	3720      	adds	r7, #32
 80064a4:	46bd      	mov	sp, r7
 80064a6:	bd80      	pop	{r7, pc}

080064a8 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b08a      	sub	sp, #40	@ 0x28
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
 80064b0:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	613b      	str	r3, [r7, #16]
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	691b      	ldr	r3, [r3, #16]
 80064be:	60fb      	str	r3, [r7, #12]
 80064c0:	2300      	movs	r3, #0
 80064c2:	617b      	str	r3, [r7, #20]
 80064c4:	697b      	ldr	r3, [r7, #20]
 80064c6:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 80064c8:	69bb      	ldr	r3, [r7, #24]
 80064ca:	1c5a      	adds	r2, r3, #1
 80064cc:	61ba      	str	r2, [r7, #24]
 80064ce:	693a      	ldr	r2, [r7, #16]
 80064d0:	4413      	add	r3, r2
 80064d2:	781b      	ldrb	r3, [r3, #0]
 80064d4:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 80064d6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80064d8:	2b1f      	cmp	r3, #31
 80064da:	d940      	bls.n	800655e <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 80064dc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80064de:	2b2f      	cmp	r3, #47	@ 0x2f
 80064e0:	d006      	beq.n	80064f0 <create_name+0x48>
 80064e2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80064e4:	2b5c      	cmp	r3, #92	@ 0x5c
 80064e6:	d110      	bne.n	800650a <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80064e8:	e002      	b.n	80064f0 <create_name+0x48>
 80064ea:	69bb      	ldr	r3, [r7, #24]
 80064ec:	3301      	adds	r3, #1
 80064ee:	61bb      	str	r3, [r7, #24]
 80064f0:	693a      	ldr	r2, [r7, #16]
 80064f2:	69bb      	ldr	r3, [r7, #24]
 80064f4:	4413      	add	r3, r2
 80064f6:	781b      	ldrb	r3, [r3, #0]
 80064f8:	2b2f      	cmp	r3, #47	@ 0x2f
 80064fa:	d0f6      	beq.n	80064ea <create_name+0x42>
 80064fc:	693a      	ldr	r2, [r7, #16]
 80064fe:	69bb      	ldr	r3, [r7, #24]
 8006500:	4413      	add	r3, r2
 8006502:	781b      	ldrb	r3, [r3, #0]
 8006504:	2b5c      	cmp	r3, #92	@ 0x5c
 8006506:	d0f0      	beq.n	80064ea <create_name+0x42>
			break;
 8006508:	e02a      	b.n	8006560 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800650a:	697b      	ldr	r3, [r7, #20]
 800650c:	2bfe      	cmp	r3, #254	@ 0xfe
 800650e:	d901      	bls.n	8006514 <create_name+0x6c>
 8006510:	2306      	movs	r3, #6
 8006512:	e17d      	b.n	8006810 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8006514:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006516:	b2db      	uxtb	r3, r3
 8006518:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800651a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800651c:	2101      	movs	r1, #1
 800651e:	4618      	mov	r0, r3
 8006520:	f7fe f9ca 	bl	80048b8 <ff_convert>
 8006524:	4603      	mov	r3, r0
 8006526:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8006528:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800652a:	2b00      	cmp	r3, #0
 800652c:	d101      	bne.n	8006532 <create_name+0x8a>
 800652e:	2306      	movs	r3, #6
 8006530:	e16e      	b.n	8006810 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8006532:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006534:	2b7f      	cmp	r3, #127	@ 0x7f
 8006536:	d809      	bhi.n	800654c <create_name+0xa4>
 8006538:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800653a:	4619      	mov	r1, r3
 800653c:	488d      	ldr	r0, [pc, #564]	@ (8006774 <create_name+0x2cc>)
 800653e:	f7fe fc06 	bl	8004d4e <chk_chr>
 8006542:	4603      	mov	r3, r0
 8006544:	2b00      	cmp	r3, #0
 8006546:	d001      	beq.n	800654c <create_name+0xa4>
 8006548:	2306      	movs	r3, #6
 800654a:	e161      	b.n	8006810 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800654c:	697b      	ldr	r3, [r7, #20]
 800654e:	1c5a      	adds	r2, r3, #1
 8006550:	617a      	str	r2, [r7, #20]
 8006552:	005b      	lsls	r3, r3, #1
 8006554:	68fa      	ldr	r2, [r7, #12]
 8006556:	4413      	add	r3, r2
 8006558:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800655a:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800655c:	e7b4      	b.n	80064c8 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800655e:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8006560:	693a      	ldr	r2, [r7, #16]
 8006562:	69bb      	ldr	r3, [r7, #24]
 8006564:	441a      	add	r2, r3
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800656a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800656c:	2b1f      	cmp	r3, #31
 800656e:	d801      	bhi.n	8006574 <create_name+0xcc>
 8006570:	2304      	movs	r3, #4
 8006572:	e000      	b.n	8006576 <create_name+0xce>
 8006574:	2300      	movs	r3, #0
 8006576:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800657a:	e011      	b.n	80065a0 <create_name+0xf8>
		w = lfn[di - 1];
 800657c:	697b      	ldr	r3, [r7, #20]
 800657e:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8006582:	3b01      	subs	r3, #1
 8006584:	005b      	lsls	r3, r3, #1
 8006586:	68fa      	ldr	r2, [r7, #12]
 8006588:	4413      	add	r3, r2
 800658a:	881b      	ldrh	r3, [r3, #0]
 800658c:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 800658e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006590:	2b20      	cmp	r3, #32
 8006592:	d002      	beq.n	800659a <create_name+0xf2>
 8006594:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006596:	2b2e      	cmp	r3, #46	@ 0x2e
 8006598:	d106      	bne.n	80065a8 <create_name+0x100>
		di--;
 800659a:	697b      	ldr	r3, [r7, #20]
 800659c:	3b01      	subs	r3, #1
 800659e:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80065a0:	697b      	ldr	r3, [r7, #20]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d1ea      	bne.n	800657c <create_name+0xd4>
 80065a6:	e000      	b.n	80065aa <create_name+0x102>
		if (w != ' ' && w != '.') break;
 80065a8:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 80065aa:	697b      	ldr	r3, [r7, #20]
 80065ac:	005b      	lsls	r3, r3, #1
 80065ae:	68fa      	ldr	r2, [r7, #12]
 80065b0:	4413      	add	r3, r2
 80065b2:	2200      	movs	r2, #0
 80065b4:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 80065b6:	697b      	ldr	r3, [r7, #20]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d101      	bne.n	80065c0 <create_name+0x118>
 80065bc:	2306      	movs	r3, #6
 80065be:	e127      	b.n	8006810 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	3324      	adds	r3, #36	@ 0x24
 80065c4:	220b      	movs	r2, #11
 80065c6:	2120      	movs	r1, #32
 80065c8:	4618      	mov	r0, r3
 80065ca:	f7fe fb7e 	bl	8004cca <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 80065ce:	2300      	movs	r3, #0
 80065d0:	61bb      	str	r3, [r7, #24]
 80065d2:	e002      	b.n	80065da <create_name+0x132>
 80065d4:	69bb      	ldr	r3, [r7, #24]
 80065d6:	3301      	adds	r3, #1
 80065d8:	61bb      	str	r3, [r7, #24]
 80065da:	69bb      	ldr	r3, [r7, #24]
 80065dc:	005b      	lsls	r3, r3, #1
 80065de:	68fa      	ldr	r2, [r7, #12]
 80065e0:	4413      	add	r3, r2
 80065e2:	881b      	ldrh	r3, [r3, #0]
 80065e4:	2b20      	cmp	r3, #32
 80065e6:	d0f5      	beq.n	80065d4 <create_name+0x12c>
 80065e8:	69bb      	ldr	r3, [r7, #24]
 80065ea:	005b      	lsls	r3, r3, #1
 80065ec:	68fa      	ldr	r2, [r7, #12]
 80065ee:	4413      	add	r3, r2
 80065f0:	881b      	ldrh	r3, [r3, #0]
 80065f2:	2b2e      	cmp	r3, #46	@ 0x2e
 80065f4:	d0ee      	beq.n	80065d4 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 80065f6:	69bb      	ldr	r3, [r7, #24]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d009      	beq.n	8006610 <create_name+0x168>
 80065fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006600:	f043 0303 	orr.w	r3, r3, #3
 8006604:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8006608:	e002      	b.n	8006610 <create_name+0x168>
 800660a:	697b      	ldr	r3, [r7, #20]
 800660c:	3b01      	subs	r3, #1
 800660e:	617b      	str	r3, [r7, #20]
 8006610:	697b      	ldr	r3, [r7, #20]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d009      	beq.n	800662a <create_name+0x182>
 8006616:	697b      	ldr	r3, [r7, #20]
 8006618:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800661c:	3b01      	subs	r3, #1
 800661e:	005b      	lsls	r3, r3, #1
 8006620:	68fa      	ldr	r2, [r7, #12]
 8006622:	4413      	add	r3, r2
 8006624:	881b      	ldrh	r3, [r3, #0]
 8006626:	2b2e      	cmp	r3, #46	@ 0x2e
 8006628:	d1ef      	bne.n	800660a <create_name+0x162>

	i = b = 0; ni = 8;
 800662a:	2300      	movs	r3, #0
 800662c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8006630:	2300      	movs	r3, #0
 8006632:	623b      	str	r3, [r7, #32]
 8006634:	2308      	movs	r3, #8
 8006636:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8006638:	69bb      	ldr	r3, [r7, #24]
 800663a:	1c5a      	adds	r2, r3, #1
 800663c:	61ba      	str	r2, [r7, #24]
 800663e:	005b      	lsls	r3, r3, #1
 8006640:	68fa      	ldr	r2, [r7, #12]
 8006642:	4413      	add	r3, r2
 8006644:	881b      	ldrh	r3, [r3, #0]
 8006646:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 8006648:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800664a:	2b00      	cmp	r3, #0
 800664c:	f000 8090 	beq.w	8006770 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8006650:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006652:	2b20      	cmp	r3, #32
 8006654:	d006      	beq.n	8006664 <create_name+0x1bc>
 8006656:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006658:	2b2e      	cmp	r3, #46	@ 0x2e
 800665a:	d10a      	bne.n	8006672 <create_name+0x1ca>
 800665c:	69ba      	ldr	r2, [r7, #24]
 800665e:	697b      	ldr	r3, [r7, #20]
 8006660:	429a      	cmp	r2, r3
 8006662:	d006      	beq.n	8006672 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8006664:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006668:	f043 0303 	orr.w	r3, r3, #3
 800666c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006670:	e07d      	b.n	800676e <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8006672:	6a3a      	ldr	r2, [r7, #32]
 8006674:	69fb      	ldr	r3, [r7, #28]
 8006676:	429a      	cmp	r2, r3
 8006678:	d203      	bcs.n	8006682 <create_name+0x1da>
 800667a:	69ba      	ldr	r2, [r7, #24]
 800667c:	697b      	ldr	r3, [r7, #20]
 800667e:	429a      	cmp	r2, r3
 8006680:	d123      	bne.n	80066ca <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8006682:	69fb      	ldr	r3, [r7, #28]
 8006684:	2b0b      	cmp	r3, #11
 8006686:	d106      	bne.n	8006696 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8006688:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800668c:	f043 0303 	orr.w	r3, r3, #3
 8006690:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006694:	e075      	b.n	8006782 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8006696:	69ba      	ldr	r2, [r7, #24]
 8006698:	697b      	ldr	r3, [r7, #20]
 800669a:	429a      	cmp	r2, r3
 800669c:	d005      	beq.n	80066aa <create_name+0x202>
 800669e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80066a2:	f043 0303 	orr.w	r3, r3, #3
 80066a6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 80066aa:	69ba      	ldr	r2, [r7, #24]
 80066ac:	697b      	ldr	r3, [r7, #20]
 80066ae:	429a      	cmp	r2, r3
 80066b0:	d866      	bhi.n	8006780 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 80066b2:	697b      	ldr	r3, [r7, #20]
 80066b4:	61bb      	str	r3, [r7, #24]
 80066b6:	2308      	movs	r3, #8
 80066b8:	623b      	str	r3, [r7, #32]
 80066ba:	230b      	movs	r3, #11
 80066bc:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 80066be:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80066c2:	009b      	lsls	r3, r3, #2
 80066c4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80066c8:	e051      	b.n	800676e <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 80066ca:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80066cc:	2b7f      	cmp	r3, #127	@ 0x7f
 80066ce:	d914      	bls.n	80066fa <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 80066d0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80066d2:	2100      	movs	r1, #0
 80066d4:	4618      	mov	r0, r3
 80066d6:	f7fe f8ef 	bl	80048b8 <ff_convert>
 80066da:	4603      	mov	r3, r0
 80066dc:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 80066de:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d004      	beq.n	80066ee <create_name+0x246>
 80066e4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80066e6:	3b80      	subs	r3, #128	@ 0x80
 80066e8:	4a23      	ldr	r2, [pc, #140]	@ (8006778 <create_name+0x2d0>)
 80066ea:	5cd3      	ldrb	r3, [r2, r3]
 80066ec:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 80066ee:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80066f2:	f043 0302 	orr.w	r3, r3, #2
 80066f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 80066fa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d007      	beq.n	8006710 <create_name+0x268>
 8006700:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006702:	4619      	mov	r1, r3
 8006704:	481d      	ldr	r0, [pc, #116]	@ (800677c <create_name+0x2d4>)
 8006706:	f7fe fb22 	bl	8004d4e <chk_chr>
 800670a:	4603      	mov	r3, r0
 800670c:	2b00      	cmp	r3, #0
 800670e:	d008      	beq.n	8006722 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8006710:	235f      	movs	r3, #95	@ 0x5f
 8006712:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8006714:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006718:	f043 0303 	orr.w	r3, r3, #3
 800671c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006720:	e01b      	b.n	800675a <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8006722:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006724:	2b40      	cmp	r3, #64	@ 0x40
 8006726:	d909      	bls.n	800673c <create_name+0x294>
 8006728:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800672a:	2b5a      	cmp	r3, #90	@ 0x5a
 800672c:	d806      	bhi.n	800673c <create_name+0x294>
					b |= 2;
 800672e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006732:	f043 0302 	orr.w	r3, r3, #2
 8006736:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800673a:	e00e      	b.n	800675a <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800673c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800673e:	2b60      	cmp	r3, #96	@ 0x60
 8006740:	d90b      	bls.n	800675a <create_name+0x2b2>
 8006742:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006744:	2b7a      	cmp	r3, #122	@ 0x7a
 8006746:	d808      	bhi.n	800675a <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8006748:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800674c:	f043 0301 	orr.w	r3, r3, #1
 8006750:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8006754:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006756:	3b20      	subs	r3, #32
 8006758:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800675a:	6a3b      	ldr	r3, [r7, #32]
 800675c:	1c5a      	adds	r2, r3, #1
 800675e:	623a      	str	r2, [r7, #32]
 8006760:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8006762:	b2d1      	uxtb	r1, r2
 8006764:	687a      	ldr	r2, [r7, #4]
 8006766:	4413      	add	r3, r2
 8006768:	460a      	mov	r2, r1
 800676a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 800676e:	e763      	b.n	8006638 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8006770:	bf00      	nop
 8006772:	e006      	b.n	8006782 <create_name+0x2da>
 8006774:	08008d9c 	.word	0x08008d9c
 8006778:	08009258 	.word	0x08009258
 800677c:	08008da8 	.word	0x08008da8
			if (si > di) break;			/* No extension */
 8006780:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006788:	2be5      	cmp	r3, #229	@ 0xe5
 800678a:	d103      	bne.n	8006794 <create_name+0x2ec>
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2205      	movs	r2, #5
 8006790:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 8006794:	69fb      	ldr	r3, [r7, #28]
 8006796:	2b08      	cmp	r3, #8
 8006798:	d104      	bne.n	80067a4 <create_name+0x2fc>
 800679a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800679e:	009b      	lsls	r3, r3, #2
 80067a0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 80067a4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80067a8:	f003 030c 	and.w	r3, r3, #12
 80067ac:	2b0c      	cmp	r3, #12
 80067ae:	d005      	beq.n	80067bc <create_name+0x314>
 80067b0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80067b4:	f003 0303 	and.w	r3, r3, #3
 80067b8:	2b03      	cmp	r3, #3
 80067ba:	d105      	bne.n	80067c8 <create_name+0x320>
 80067bc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80067c0:	f043 0302 	orr.w	r3, r3, #2
 80067c4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 80067c8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80067cc:	f003 0302 	and.w	r3, r3, #2
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d117      	bne.n	8006804 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 80067d4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80067d8:	f003 0303 	and.w	r3, r3, #3
 80067dc:	2b01      	cmp	r3, #1
 80067de:	d105      	bne.n	80067ec <create_name+0x344>
 80067e0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80067e4:	f043 0310 	orr.w	r3, r3, #16
 80067e8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 80067ec:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80067f0:	f003 030c 	and.w	r3, r3, #12
 80067f4:	2b04      	cmp	r3, #4
 80067f6:	d105      	bne.n	8006804 <create_name+0x35c>
 80067f8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80067fc:	f043 0308 	orr.w	r3, r3, #8
 8006800:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800680a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 800680e:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8006810:	4618      	mov	r0, r3
 8006812:	3728      	adds	r7, #40	@ 0x28
 8006814:	46bd      	mov	sp, r7
 8006816:	bd80      	pop	{r7, pc}

08006818 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b086      	sub	sp, #24
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
 8006820:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8006826:	693b      	ldr	r3, [r7, #16]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800682c:	e002      	b.n	8006834 <follow_path+0x1c>
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	3301      	adds	r3, #1
 8006832:	603b      	str	r3, [r7, #0]
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	781b      	ldrb	r3, [r3, #0]
 8006838:	2b2f      	cmp	r3, #47	@ 0x2f
 800683a:	d0f8      	beq.n	800682e <follow_path+0x16>
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	781b      	ldrb	r3, [r3, #0]
 8006840:	2b5c      	cmp	r3, #92	@ 0x5c
 8006842:	d0f4      	beq.n	800682e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8006844:	693b      	ldr	r3, [r7, #16]
 8006846:	2200      	movs	r2, #0
 8006848:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	781b      	ldrb	r3, [r3, #0]
 800684e:	2b1f      	cmp	r3, #31
 8006850:	d80a      	bhi.n	8006868 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2280      	movs	r2, #128	@ 0x80
 8006856:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800685a:	2100      	movs	r1, #0
 800685c:	6878      	ldr	r0, [r7, #4]
 800685e:	f7ff f820 	bl	80058a2 <dir_sdi>
 8006862:	4603      	mov	r3, r0
 8006864:	75fb      	strb	r3, [r7, #23]
 8006866:	e048      	b.n	80068fa <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006868:	463b      	mov	r3, r7
 800686a:	4619      	mov	r1, r3
 800686c:	6878      	ldr	r0, [r7, #4]
 800686e:	f7ff fe1b 	bl	80064a8 <create_name>
 8006872:	4603      	mov	r3, r0
 8006874:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006876:	7dfb      	ldrb	r3, [r7, #23]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d139      	bne.n	80068f0 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800687c:	6878      	ldr	r0, [r7, #4]
 800687e:	f7ff fb7c 	bl	8005f7a <dir_find>
 8006882:	4603      	mov	r3, r0
 8006884:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800688c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800688e:	7dfb      	ldrb	r3, [r7, #23]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d00a      	beq.n	80068aa <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8006894:	7dfb      	ldrb	r3, [r7, #23]
 8006896:	2b04      	cmp	r3, #4
 8006898:	d12c      	bne.n	80068f4 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800689a:	7afb      	ldrb	r3, [r7, #11]
 800689c:	f003 0304 	and.w	r3, r3, #4
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d127      	bne.n	80068f4 <follow_path+0xdc>
 80068a4:	2305      	movs	r3, #5
 80068a6:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80068a8:	e024      	b.n	80068f4 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80068aa:	7afb      	ldrb	r3, [r7, #11]
 80068ac:	f003 0304 	and.w	r3, r3, #4
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d121      	bne.n	80068f8 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80068b4:	693b      	ldr	r3, [r7, #16]
 80068b6:	799b      	ldrb	r3, [r3, #6]
 80068b8:	f003 0310 	and.w	r3, r3, #16
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d102      	bne.n	80068c6 <follow_path+0xae>
				res = FR_NO_PATH; break;
 80068c0:	2305      	movs	r3, #5
 80068c2:	75fb      	strb	r3, [r7, #23]
 80068c4:	e019      	b.n	80068fa <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	695b      	ldr	r3, [r3, #20]
 80068d0:	68fa      	ldr	r2, [r7, #12]
 80068d2:	8992      	ldrh	r2, [r2, #12]
 80068d4:	fbb3 f0f2 	udiv	r0, r3, r2
 80068d8:	fb00 f202 	mul.w	r2, r0, r2
 80068dc:	1a9b      	subs	r3, r3, r2
 80068de:	440b      	add	r3, r1
 80068e0:	4619      	mov	r1, r3
 80068e2:	68f8      	ldr	r0, [r7, #12]
 80068e4:	f7ff f983 	bl	8005bee <ld_clust>
 80068e8:	4602      	mov	r2, r0
 80068ea:	693b      	ldr	r3, [r7, #16]
 80068ec:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80068ee:	e7bb      	b.n	8006868 <follow_path+0x50>
			if (res != FR_OK) break;
 80068f0:	bf00      	nop
 80068f2:	e002      	b.n	80068fa <follow_path+0xe2>
				break;
 80068f4:	bf00      	nop
 80068f6:	e000      	b.n	80068fa <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80068f8:	bf00      	nop
			}
		}
	}

	return res;
 80068fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80068fc:	4618      	mov	r0, r3
 80068fe:	3718      	adds	r7, #24
 8006900:	46bd      	mov	sp, r7
 8006902:	bd80      	pop	{r7, pc}

08006904 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8006904:	b480      	push	{r7}
 8006906:	b087      	sub	sp, #28
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800690c:	f04f 33ff 	mov.w	r3, #4294967295
 8006910:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d031      	beq.n	800697e <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	617b      	str	r3, [r7, #20]
 8006920:	e002      	b.n	8006928 <get_ldnumber+0x24>
 8006922:	697b      	ldr	r3, [r7, #20]
 8006924:	3301      	adds	r3, #1
 8006926:	617b      	str	r3, [r7, #20]
 8006928:	697b      	ldr	r3, [r7, #20]
 800692a:	781b      	ldrb	r3, [r3, #0]
 800692c:	2b1f      	cmp	r3, #31
 800692e:	d903      	bls.n	8006938 <get_ldnumber+0x34>
 8006930:	697b      	ldr	r3, [r7, #20]
 8006932:	781b      	ldrb	r3, [r3, #0]
 8006934:	2b3a      	cmp	r3, #58	@ 0x3a
 8006936:	d1f4      	bne.n	8006922 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8006938:	697b      	ldr	r3, [r7, #20]
 800693a:	781b      	ldrb	r3, [r3, #0]
 800693c:	2b3a      	cmp	r3, #58	@ 0x3a
 800693e:	d11c      	bne.n	800697a <get_ldnumber+0x76>
			tp = *path;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	1c5a      	adds	r2, r3, #1
 800694a:	60fa      	str	r2, [r7, #12]
 800694c:	781b      	ldrb	r3, [r3, #0]
 800694e:	3b30      	subs	r3, #48	@ 0x30
 8006950:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8006952:	68bb      	ldr	r3, [r7, #8]
 8006954:	2b09      	cmp	r3, #9
 8006956:	d80e      	bhi.n	8006976 <get_ldnumber+0x72>
 8006958:	68fa      	ldr	r2, [r7, #12]
 800695a:	697b      	ldr	r3, [r7, #20]
 800695c:	429a      	cmp	r2, r3
 800695e:	d10a      	bne.n	8006976 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8006960:	68bb      	ldr	r3, [r7, #8]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d107      	bne.n	8006976 <get_ldnumber+0x72>
					vol = (int)i;
 8006966:	68bb      	ldr	r3, [r7, #8]
 8006968:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800696a:	697b      	ldr	r3, [r7, #20]
 800696c:	3301      	adds	r3, #1
 800696e:	617b      	str	r3, [r7, #20]
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	697a      	ldr	r2, [r7, #20]
 8006974:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8006976:	693b      	ldr	r3, [r7, #16]
 8006978:	e002      	b.n	8006980 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800697a:	2300      	movs	r3, #0
 800697c:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800697e:	693b      	ldr	r3, [r7, #16]
}
 8006980:	4618      	mov	r0, r3
 8006982:	371c      	adds	r7, #28
 8006984:	46bd      	mov	sp, r7
 8006986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698a:	4770      	bx	lr

0800698c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800698c:	b580      	push	{r7, lr}
 800698e:	b082      	sub	sp, #8
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
 8006994:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	2200      	movs	r2, #0
 800699a:	70da      	strb	r2, [r3, #3]
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	f04f 32ff 	mov.w	r2, #4294967295
 80069a2:	635a      	str	r2, [r3, #52]	@ 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80069a4:	6839      	ldr	r1, [r7, #0]
 80069a6:	6878      	ldr	r0, [r7, #4]
 80069a8:	f7fe fb9c 	bl	80050e4 <move_window>
 80069ac:	4603      	mov	r3, r0
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d001      	beq.n	80069b6 <check_fs+0x2a>
 80069b2:	2304      	movs	r3, #4
 80069b4:	e038      	b.n	8006a28 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	3338      	adds	r3, #56	@ 0x38
 80069ba:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80069be:	4618      	mov	r0, r3
 80069c0:	f7fe f8e0 	bl	8004b84 <ld_word>
 80069c4:	4603      	mov	r3, r0
 80069c6:	461a      	mov	r2, r3
 80069c8:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 80069cc:	429a      	cmp	r2, r3
 80069ce:	d001      	beq.n	80069d4 <check_fs+0x48>
 80069d0:	2303      	movs	r3, #3
 80069d2:	e029      	b.n	8006a28 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80069da:	2be9      	cmp	r3, #233	@ 0xe9
 80069dc:	d009      	beq.n	80069f2 <check_fs+0x66>
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80069e4:	2beb      	cmp	r3, #235	@ 0xeb
 80069e6:	d11e      	bne.n	8006a26 <check_fs+0x9a>
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 80069ee:	2b90      	cmp	r3, #144	@ 0x90
 80069f0:	d119      	bne.n	8006a26 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	3338      	adds	r3, #56	@ 0x38
 80069f6:	3336      	adds	r3, #54	@ 0x36
 80069f8:	4618      	mov	r0, r3
 80069fa:	f7fe f8db 	bl	8004bb4 <ld_dword>
 80069fe:	4603      	mov	r3, r0
 8006a00:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8006a04:	4a0a      	ldr	r2, [pc, #40]	@ (8006a30 <check_fs+0xa4>)
 8006a06:	4293      	cmp	r3, r2
 8006a08:	d101      	bne.n	8006a0e <check_fs+0x82>
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	e00c      	b.n	8006a28 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	3338      	adds	r3, #56	@ 0x38
 8006a12:	3352      	adds	r3, #82	@ 0x52
 8006a14:	4618      	mov	r0, r3
 8006a16:	f7fe f8cd 	bl	8004bb4 <ld_dword>
 8006a1a:	4603      	mov	r3, r0
 8006a1c:	4a05      	ldr	r2, [pc, #20]	@ (8006a34 <check_fs+0xa8>)
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	d101      	bne.n	8006a26 <check_fs+0x9a>
 8006a22:	2300      	movs	r3, #0
 8006a24:	e000      	b.n	8006a28 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8006a26:	2302      	movs	r3, #2
}
 8006a28:	4618      	mov	r0, r3
 8006a2a:	3708      	adds	r7, #8
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	bd80      	pop	{r7, pc}
 8006a30:	00544146 	.word	0x00544146
 8006a34:	33544146 	.word	0x33544146

08006a38 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b096      	sub	sp, #88	@ 0x58
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	60f8      	str	r0, [r7, #12]
 8006a40:	60b9      	str	r1, [r7, #8]
 8006a42:	4613      	mov	r3, r2
 8006a44:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8006a46:	68bb      	ldr	r3, [r7, #8]
 8006a48:	2200      	movs	r2, #0
 8006a4a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8006a4c:	68f8      	ldr	r0, [r7, #12]
 8006a4e:	f7ff ff59 	bl	8006904 <get_ldnumber>
 8006a52:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8006a54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	da01      	bge.n	8006a5e <find_volume+0x26>
 8006a5a:	230b      	movs	r3, #11
 8006a5c:	e265      	b.n	8006f2a <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8006a5e:	4a9f      	ldr	r2, [pc, #636]	@ (8006cdc <find_volume+0x2a4>)
 8006a60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a66:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8006a68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d101      	bne.n	8006a72 <find_volume+0x3a>
 8006a6e:	230c      	movs	r3, #12
 8006a70:	e25b      	b.n	8006f2a <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8006a72:	68bb      	ldr	r3, [r7, #8]
 8006a74:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006a76:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8006a78:	79fb      	ldrb	r3, [r7, #7]
 8006a7a:	f023 0301 	bic.w	r3, r3, #1
 8006a7e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8006a80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a82:	781b      	ldrb	r3, [r3, #0]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d01a      	beq.n	8006abe <find_volume+0x86>
		stat = disk_status(fs->drv);
 8006a88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a8a:	785b      	ldrb	r3, [r3, #1]
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	f7fd ffd9 	bl	8004a44 <disk_status>
 8006a92:	4603      	mov	r3, r0
 8006a94:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8006a98:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006a9c:	f003 0301 	and.w	r3, r3, #1
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d10c      	bne.n	8006abe <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8006aa4:	79fb      	ldrb	r3, [r7, #7]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d007      	beq.n	8006aba <find_volume+0x82>
 8006aaa:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006aae:	f003 0304 	and.w	r3, r3, #4
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d001      	beq.n	8006aba <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8006ab6:	230a      	movs	r3, #10
 8006ab8:	e237      	b.n	8006f2a <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 8006aba:	2300      	movs	r3, #0
 8006abc:	e235      	b.n	8006f2a <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8006abe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8006ac4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ac6:	b2da      	uxtb	r2, r3
 8006ac8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006aca:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8006acc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ace:	785b      	ldrb	r3, [r3, #1]
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	f7fd ffd1 	bl	8004a78 <disk_initialize>
 8006ad6:	4603      	mov	r3, r0
 8006ad8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8006adc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006ae0:	f003 0301 	and.w	r3, r3, #1
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d001      	beq.n	8006aec <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8006ae8:	2303      	movs	r3, #3
 8006aea:	e21e      	b.n	8006f2a <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8006aec:	79fb      	ldrb	r3, [r7, #7]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d007      	beq.n	8006b02 <find_volume+0xca>
 8006af2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006af6:	f003 0304 	and.w	r3, r3, #4
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d001      	beq.n	8006b02 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8006afe:	230a      	movs	r3, #10
 8006b00:	e213      	b.n	8006f2a <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8006b02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b04:	7858      	ldrb	r0, [r3, #1]
 8006b06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b08:	330c      	adds	r3, #12
 8006b0a:	461a      	mov	r2, r3
 8006b0c:	2102      	movs	r1, #2
 8006b0e:	f7fe f81b 	bl	8004b48 <disk_ioctl>
 8006b12:	4603      	mov	r3, r0
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d001      	beq.n	8006b1c <find_volume+0xe4>
 8006b18:	2301      	movs	r3, #1
 8006b1a:	e206      	b.n	8006f2a <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8006b1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b1e:	899b      	ldrh	r3, [r3, #12]
 8006b20:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006b24:	d80d      	bhi.n	8006b42 <find_volume+0x10a>
 8006b26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b28:	899b      	ldrh	r3, [r3, #12]
 8006b2a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006b2e:	d308      	bcc.n	8006b42 <find_volume+0x10a>
 8006b30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b32:	899b      	ldrh	r3, [r3, #12]
 8006b34:	461a      	mov	r2, r3
 8006b36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b38:	899b      	ldrh	r3, [r3, #12]
 8006b3a:	3b01      	subs	r3, #1
 8006b3c:	4013      	ands	r3, r2
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d001      	beq.n	8006b46 <find_volume+0x10e>
 8006b42:	2301      	movs	r3, #1
 8006b44:	e1f1      	b.n	8006f2a <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8006b46:	2300      	movs	r3, #0
 8006b48:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8006b4a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006b4c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006b4e:	f7ff ff1d 	bl	800698c <check_fs>
 8006b52:	4603      	mov	r3, r0
 8006b54:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8006b58:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006b5c:	2b02      	cmp	r3, #2
 8006b5e:	d149      	bne.n	8006bf4 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006b60:	2300      	movs	r3, #0
 8006b62:	643b      	str	r3, [r7, #64]	@ 0x40
 8006b64:	e01e      	b.n	8006ba4 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8006b66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b68:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8006b6c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006b6e:	011b      	lsls	r3, r3, #4
 8006b70:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8006b74:	4413      	add	r3, r2
 8006b76:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8006b78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b7a:	3304      	adds	r3, #4
 8006b7c:	781b      	ldrb	r3, [r3, #0]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d006      	beq.n	8006b90 <find_volume+0x158>
 8006b82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b84:	3308      	adds	r3, #8
 8006b86:	4618      	mov	r0, r3
 8006b88:	f7fe f814 	bl	8004bb4 <ld_dword>
 8006b8c:	4602      	mov	r2, r0
 8006b8e:	e000      	b.n	8006b92 <find_volume+0x15a>
 8006b90:	2200      	movs	r2, #0
 8006b92:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006b94:	009b      	lsls	r3, r3, #2
 8006b96:	3358      	adds	r3, #88	@ 0x58
 8006b98:	443b      	add	r3, r7
 8006b9a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006b9e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006ba0:	3301      	adds	r3, #1
 8006ba2:	643b      	str	r3, [r7, #64]	@ 0x40
 8006ba4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006ba6:	2b03      	cmp	r3, #3
 8006ba8:	d9dd      	bls.n	8006b66 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8006baa:	2300      	movs	r3, #0
 8006bac:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8006bae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d002      	beq.n	8006bba <find_volume+0x182>
 8006bb4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006bb6:	3b01      	subs	r3, #1
 8006bb8:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8006bba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006bbc:	009b      	lsls	r3, r3, #2
 8006bbe:	3358      	adds	r3, #88	@ 0x58
 8006bc0:	443b      	add	r3, r7
 8006bc2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8006bc6:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8006bc8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d005      	beq.n	8006bda <find_volume+0x1a2>
 8006bce:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006bd0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006bd2:	f7ff fedb 	bl	800698c <check_fs>
 8006bd6:	4603      	mov	r3, r0
 8006bd8:	e000      	b.n	8006bdc <find_volume+0x1a4>
 8006bda:	2303      	movs	r3, #3
 8006bdc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8006be0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006be4:	2b01      	cmp	r3, #1
 8006be6:	d905      	bls.n	8006bf4 <find_volume+0x1bc>
 8006be8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006bea:	3301      	adds	r3, #1
 8006bec:	643b      	str	r3, [r7, #64]	@ 0x40
 8006bee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006bf0:	2b03      	cmp	r3, #3
 8006bf2:	d9e2      	bls.n	8006bba <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8006bf4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006bf8:	2b04      	cmp	r3, #4
 8006bfa:	d101      	bne.n	8006c00 <find_volume+0x1c8>
 8006bfc:	2301      	movs	r3, #1
 8006bfe:	e194      	b.n	8006f2a <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8006c00:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006c04:	2b01      	cmp	r3, #1
 8006c06:	d901      	bls.n	8006c0c <find_volume+0x1d4>
 8006c08:	230d      	movs	r3, #13
 8006c0a:	e18e      	b.n	8006f2a <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8006c0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c0e:	3338      	adds	r3, #56	@ 0x38
 8006c10:	330b      	adds	r3, #11
 8006c12:	4618      	mov	r0, r3
 8006c14:	f7fd ffb6 	bl	8004b84 <ld_word>
 8006c18:	4603      	mov	r3, r0
 8006c1a:	461a      	mov	r2, r3
 8006c1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c1e:	899b      	ldrh	r3, [r3, #12]
 8006c20:	429a      	cmp	r2, r3
 8006c22:	d001      	beq.n	8006c28 <find_volume+0x1f0>
 8006c24:	230d      	movs	r3, #13
 8006c26:	e180      	b.n	8006f2a <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8006c28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c2a:	3338      	adds	r3, #56	@ 0x38
 8006c2c:	3316      	adds	r3, #22
 8006c2e:	4618      	mov	r0, r3
 8006c30:	f7fd ffa8 	bl	8004b84 <ld_word>
 8006c34:	4603      	mov	r3, r0
 8006c36:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8006c38:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d106      	bne.n	8006c4c <find_volume+0x214>
 8006c3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c40:	3338      	adds	r3, #56	@ 0x38
 8006c42:	3324      	adds	r3, #36	@ 0x24
 8006c44:	4618      	mov	r0, r3
 8006c46:	f7fd ffb5 	bl	8004bb4 <ld_dword>
 8006c4a:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8006c4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c4e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006c50:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8006c52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c54:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 8006c58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c5a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8006c5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c5e:	789b      	ldrb	r3, [r3, #2]
 8006c60:	2b01      	cmp	r3, #1
 8006c62:	d005      	beq.n	8006c70 <find_volume+0x238>
 8006c64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c66:	789b      	ldrb	r3, [r3, #2]
 8006c68:	2b02      	cmp	r3, #2
 8006c6a:	d001      	beq.n	8006c70 <find_volume+0x238>
 8006c6c:	230d      	movs	r3, #13
 8006c6e:	e15c      	b.n	8006f2a <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8006c70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c72:	789b      	ldrb	r3, [r3, #2]
 8006c74:	461a      	mov	r2, r3
 8006c76:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006c78:	fb02 f303 	mul.w	r3, r2, r3
 8006c7c:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8006c7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c80:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006c84:	461a      	mov	r2, r3
 8006c86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c88:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8006c8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c8c:	895b      	ldrh	r3, [r3, #10]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d008      	beq.n	8006ca4 <find_volume+0x26c>
 8006c92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c94:	895b      	ldrh	r3, [r3, #10]
 8006c96:	461a      	mov	r2, r3
 8006c98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c9a:	895b      	ldrh	r3, [r3, #10]
 8006c9c:	3b01      	subs	r3, #1
 8006c9e:	4013      	ands	r3, r2
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d001      	beq.n	8006ca8 <find_volume+0x270>
 8006ca4:	230d      	movs	r3, #13
 8006ca6:	e140      	b.n	8006f2a <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8006ca8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006caa:	3338      	adds	r3, #56	@ 0x38
 8006cac:	3311      	adds	r3, #17
 8006cae:	4618      	mov	r0, r3
 8006cb0:	f7fd ff68 	bl	8004b84 <ld_word>
 8006cb4:	4603      	mov	r3, r0
 8006cb6:	461a      	mov	r2, r3
 8006cb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cba:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8006cbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cbe:	891b      	ldrh	r3, [r3, #8]
 8006cc0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006cc2:	8992      	ldrh	r2, [r2, #12]
 8006cc4:	0952      	lsrs	r2, r2, #5
 8006cc6:	b292      	uxth	r2, r2
 8006cc8:	fbb3 f1f2 	udiv	r1, r3, r2
 8006ccc:	fb01 f202 	mul.w	r2, r1, r2
 8006cd0:	1a9b      	subs	r3, r3, r2
 8006cd2:	b29b      	uxth	r3, r3
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d003      	beq.n	8006ce0 <find_volume+0x2a8>
 8006cd8:	230d      	movs	r3, #13
 8006cda:	e126      	b.n	8006f2a <find_volume+0x4f2>
 8006cdc:	200001e0 	.word	0x200001e0

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8006ce0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ce2:	3338      	adds	r3, #56	@ 0x38
 8006ce4:	3313      	adds	r3, #19
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	f7fd ff4c 	bl	8004b84 <ld_word>
 8006cec:	4603      	mov	r3, r0
 8006cee:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8006cf0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d106      	bne.n	8006d04 <find_volume+0x2cc>
 8006cf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cf8:	3338      	adds	r3, #56	@ 0x38
 8006cfa:	3320      	adds	r3, #32
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	f7fd ff59 	bl	8004bb4 <ld_dword>
 8006d02:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8006d04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d06:	3338      	adds	r3, #56	@ 0x38
 8006d08:	330e      	adds	r3, #14
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	f7fd ff3a 	bl	8004b84 <ld_word>
 8006d10:	4603      	mov	r3, r0
 8006d12:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8006d14:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d101      	bne.n	8006d1e <find_volume+0x2e6>
 8006d1a:	230d      	movs	r3, #13
 8006d1c:	e105      	b.n	8006f2a <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8006d1e:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8006d20:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006d22:	4413      	add	r3, r2
 8006d24:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006d26:	8911      	ldrh	r1, [r2, #8]
 8006d28:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006d2a:	8992      	ldrh	r2, [r2, #12]
 8006d2c:	0952      	lsrs	r2, r2, #5
 8006d2e:	b292      	uxth	r2, r2
 8006d30:	fbb1 f2f2 	udiv	r2, r1, r2
 8006d34:	b292      	uxth	r2, r2
 8006d36:	4413      	add	r3, r2
 8006d38:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8006d3a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006d3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d3e:	429a      	cmp	r2, r3
 8006d40:	d201      	bcs.n	8006d46 <find_volume+0x30e>
 8006d42:	230d      	movs	r3, #13
 8006d44:	e0f1      	b.n	8006f2a <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8006d46:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006d48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d4a:	1ad3      	subs	r3, r2, r3
 8006d4c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006d4e:	8952      	ldrh	r2, [r2, #10]
 8006d50:	fbb3 f3f2 	udiv	r3, r3, r2
 8006d54:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8006d56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d101      	bne.n	8006d60 <find_volume+0x328>
 8006d5c:	230d      	movs	r3, #13
 8006d5e:	e0e4      	b.n	8006f2a <find_volume+0x4f2>
		fmt = FS_FAT32;
 8006d60:	2303      	movs	r3, #3
 8006d62:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8006d66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d68:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d802      	bhi.n	8006d76 <find_volume+0x33e>
 8006d70:	2302      	movs	r3, #2
 8006d72:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8006d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d78:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8006d7c:	4293      	cmp	r3, r2
 8006d7e:	d802      	bhi.n	8006d86 <find_volume+0x34e>
 8006d80:	2301      	movs	r3, #1
 8006d82:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8006d86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d88:	1c9a      	adds	r2, r3, #2
 8006d8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d8c:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8006d8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d90:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006d92:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8006d94:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8006d96:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006d98:	441a      	add	r2, r3
 8006d9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d9c:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8006d9e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006da0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006da2:	441a      	add	r2, r3
 8006da4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006da6:	631a      	str	r2, [r3, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 8006da8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006dac:	2b03      	cmp	r3, #3
 8006dae:	d11e      	bne.n	8006dee <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8006db0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006db2:	3338      	adds	r3, #56	@ 0x38
 8006db4:	332a      	adds	r3, #42	@ 0x2a
 8006db6:	4618      	mov	r0, r3
 8006db8:	f7fd fee4 	bl	8004b84 <ld_word>
 8006dbc:	4603      	mov	r3, r0
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d001      	beq.n	8006dc6 <find_volume+0x38e>
 8006dc2:	230d      	movs	r3, #13
 8006dc4:	e0b1      	b.n	8006f2a <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8006dc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dc8:	891b      	ldrh	r3, [r3, #8]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d001      	beq.n	8006dd2 <find_volume+0x39a>
 8006dce:	230d      	movs	r3, #13
 8006dd0:	e0ab      	b.n	8006f2a <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8006dd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dd4:	3338      	adds	r3, #56	@ 0x38
 8006dd6:	332c      	adds	r3, #44	@ 0x2c
 8006dd8:	4618      	mov	r0, r3
 8006dda:	f7fd feeb 	bl	8004bb4 <ld_dword>
 8006dde:	4602      	mov	r2, r0
 8006de0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006de2:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8006de4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006de6:	69db      	ldr	r3, [r3, #28]
 8006de8:	009b      	lsls	r3, r3, #2
 8006dea:	647b      	str	r3, [r7, #68]	@ 0x44
 8006dec:	e01f      	b.n	8006e2e <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8006dee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006df0:	891b      	ldrh	r3, [r3, #8]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d101      	bne.n	8006dfa <find_volume+0x3c2>
 8006df6:	230d      	movs	r3, #13
 8006df8:	e097      	b.n	8006f2a <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8006dfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dfc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006dfe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006e00:	441a      	add	r2, r3
 8006e02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e04:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8006e06:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006e0a:	2b02      	cmp	r3, #2
 8006e0c:	d103      	bne.n	8006e16 <find_volume+0x3de>
 8006e0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e10:	69db      	ldr	r3, [r3, #28]
 8006e12:	005b      	lsls	r3, r3, #1
 8006e14:	e00a      	b.n	8006e2c <find_volume+0x3f4>
 8006e16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e18:	69da      	ldr	r2, [r3, #28]
 8006e1a:	4613      	mov	r3, r2
 8006e1c:	005b      	lsls	r3, r3, #1
 8006e1e:	4413      	add	r3, r2
 8006e20:	085a      	lsrs	r2, r3, #1
 8006e22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e24:	69db      	ldr	r3, [r3, #28]
 8006e26:	f003 0301 	and.w	r3, r3, #1
 8006e2a:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8006e2c:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8006e2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e30:	6a1a      	ldr	r2, [r3, #32]
 8006e32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e34:	899b      	ldrh	r3, [r3, #12]
 8006e36:	4619      	mov	r1, r3
 8006e38:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006e3a:	440b      	add	r3, r1
 8006e3c:	3b01      	subs	r3, #1
 8006e3e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006e40:	8989      	ldrh	r1, [r1, #12]
 8006e42:	fbb3 f3f1 	udiv	r3, r3, r1
 8006e46:	429a      	cmp	r2, r3
 8006e48:	d201      	bcs.n	8006e4e <find_volume+0x416>
 8006e4a:	230d      	movs	r3, #13
 8006e4c:	e06d      	b.n	8006f2a <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8006e4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e50:	f04f 32ff 	mov.w	r2, #4294967295
 8006e54:	619a      	str	r2, [r3, #24]
 8006e56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e58:	699a      	ldr	r2, [r3, #24]
 8006e5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e5c:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8006e5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e60:	2280      	movs	r2, #128	@ 0x80
 8006e62:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8006e64:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006e68:	2b03      	cmp	r3, #3
 8006e6a:	d149      	bne.n	8006f00 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8006e6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e6e:	3338      	adds	r3, #56	@ 0x38
 8006e70:	3330      	adds	r3, #48	@ 0x30
 8006e72:	4618      	mov	r0, r3
 8006e74:	f7fd fe86 	bl	8004b84 <ld_word>
 8006e78:	4603      	mov	r3, r0
 8006e7a:	2b01      	cmp	r3, #1
 8006e7c:	d140      	bne.n	8006f00 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 8006e7e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006e80:	3301      	adds	r3, #1
 8006e82:	4619      	mov	r1, r3
 8006e84:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006e86:	f7fe f92d 	bl	80050e4 <move_window>
 8006e8a:	4603      	mov	r3, r0
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d137      	bne.n	8006f00 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8006e90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e92:	2200      	movs	r2, #0
 8006e94:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8006e96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e98:	3338      	adds	r3, #56	@ 0x38
 8006e9a:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	f7fd fe70 	bl	8004b84 <ld_word>
 8006ea4:	4603      	mov	r3, r0
 8006ea6:	461a      	mov	r2, r3
 8006ea8:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8006eac:	429a      	cmp	r2, r3
 8006eae:	d127      	bne.n	8006f00 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8006eb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006eb2:	3338      	adds	r3, #56	@ 0x38
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	f7fd fe7d 	bl	8004bb4 <ld_dword>
 8006eba:	4603      	mov	r3, r0
 8006ebc:	4a1d      	ldr	r2, [pc, #116]	@ (8006f34 <find_volume+0x4fc>)
 8006ebe:	4293      	cmp	r3, r2
 8006ec0:	d11e      	bne.n	8006f00 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8006ec2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ec4:	3338      	adds	r3, #56	@ 0x38
 8006ec6:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8006eca:	4618      	mov	r0, r3
 8006ecc:	f7fd fe72 	bl	8004bb4 <ld_dword>
 8006ed0:	4603      	mov	r3, r0
 8006ed2:	4a19      	ldr	r2, [pc, #100]	@ (8006f38 <find_volume+0x500>)
 8006ed4:	4293      	cmp	r3, r2
 8006ed6:	d113      	bne.n	8006f00 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8006ed8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006eda:	3338      	adds	r3, #56	@ 0x38
 8006edc:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	f7fd fe67 	bl	8004bb4 <ld_dword>
 8006ee6:	4602      	mov	r2, r0
 8006ee8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006eea:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8006eec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006eee:	3338      	adds	r3, #56	@ 0x38
 8006ef0:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	f7fd fe5d 	bl	8004bb4 <ld_dword>
 8006efa:	4602      	mov	r2, r0
 8006efc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006efe:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8006f00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f02:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8006f06:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8006f08:	4b0c      	ldr	r3, [pc, #48]	@ (8006f3c <find_volume+0x504>)
 8006f0a:	881b      	ldrh	r3, [r3, #0]
 8006f0c:	3301      	adds	r3, #1
 8006f0e:	b29a      	uxth	r2, r3
 8006f10:	4b0a      	ldr	r3, [pc, #40]	@ (8006f3c <find_volume+0x504>)
 8006f12:	801a      	strh	r2, [r3, #0]
 8006f14:	4b09      	ldr	r3, [pc, #36]	@ (8006f3c <find_volume+0x504>)
 8006f16:	881a      	ldrh	r2, [r3, #0]
 8006f18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f1a:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8006f1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f1e:	4a08      	ldr	r2, [pc, #32]	@ (8006f40 <find_volume+0x508>)
 8006f20:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8006f22:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006f24:	f7fe f876 	bl	8005014 <clear_lock>
#endif
	return FR_OK;
 8006f28:	2300      	movs	r3, #0
}
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	3758      	adds	r7, #88	@ 0x58
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	bd80      	pop	{r7, pc}
 8006f32:	bf00      	nop
 8006f34:	41615252 	.word	0x41615252
 8006f38:	61417272 	.word	0x61417272
 8006f3c:	200001e4 	.word	0x200001e4
 8006f40:	20000208 	.word	0x20000208

08006f44 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b084      	sub	sp, #16
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
 8006f4c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8006f4e:	2309      	movs	r3, #9
 8006f50:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d01c      	beq.n	8006f92 <validate+0x4e>
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d018      	beq.n	8006f92 <validate+0x4e>
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	781b      	ldrb	r3, [r3, #0]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d013      	beq.n	8006f92 <validate+0x4e>
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	889a      	ldrh	r2, [r3, #4]
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	88db      	ldrh	r3, [r3, #6]
 8006f74:	429a      	cmp	r2, r3
 8006f76:	d10c      	bne.n	8006f92 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	785b      	ldrb	r3, [r3, #1]
 8006f7e:	4618      	mov	r0, r3
 8006f80:	f7fd fd60 	bl	8004a44 <disk_status>
 8006f84:	4603      	mov	r3, r0
 8006f86:	f003 0301 	and.w	r3, r3, #1
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d101      	bne.n	8006f92 <validate+0x4e>
			res = FR_OK;
 8006f8e:	2300      	movs	r3, #0
 8006f90:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8006f92:	7bfb      	ldrb	r3, [r7, #15]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d102      	bne.n	8006f9e <validate+0x5a>
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	e000      	b.n	8006fa0 <validate+0x5c>
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	683a      	ldr	r2, [r7, #0]
 8006fa2:	6013      	str	r3, [r2, #0]
	return res;
 8006fa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	3710      	adds	r7, #16
 8006faa:	46bd      	mov	sp, r7
 8006fac:	bd80      	pop	{r7, pc}
	...

08006fb0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b088      	sub	sp, #32
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	60f8      	str	r0, [r7, #12]
 8006fb8:	60b9      	str	r1, [r7, #8]
 8006fba:	4613      	mov	r3, r2
 8006fbc:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8006fbe:	68bb      	ldr	r3, [r7, #8]
 8006fc0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8006fc2:	f107 0310 	add.w	r3, r7, #16
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	f7ff fc9c 	bl	8006904 <get_ldnumber>
 8006fcc:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8006fce:	69fb      	ldr	r3, [r7, #28]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	da01      	bge.n	8006fd8 <f_mount+0x28>
 8006fd4:	230b      	movs	r3, #11
 8006fd6:	e02b      	b.n	8007030 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8006fd8:	4a17      	ldr	r2, [pc, #92]	@ (8007038 <f_mount+0x88>)
 8006fda:	69fb      	ldr	r3, [r7, #28]
 8006fdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006fe0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8006fe2:	69bb      	ldr	r3, [r7, #24]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d005      	beq.n	8006ff4 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8006fe8:	69b8      	ldr	r0, [r7, #24]
 8006fea:	f7fe f813 	bl	8005014 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8006fee:	69bb      	ldr	r3, [r7, #24]
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d002      	beq.n	8007000 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8007000:	68fa      	ldr	r2, [r7, #12]
 8007002:	490d      	ldr	r1, [pc, #52]	@ (8007038 <f_mount+0x88>)
 8007004:	69fb      	ldr	r3, [r7, #28]
 8007006:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d002      	beq.n	8007016 <f_mount+0x66>
 8007010:	79fb      	ldrb	r3, [r7, #7]
 8007012:	2b01      	cmp	r3, #1
 8007014:	d001      	beq.n	800701a <f_mount+0x6a>
 8007016:	2300      	movs	r3, #0
 8007018:	e00a      	b.n	8007030 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800701a:	f107 010c 	add.w	r1, r7, #12
 800701e:	f107 0308 	add.w	r3, r7, #8
 8007022:	2200      	movs	r2, #0
 8007024:	4618      	mov	r0, r3
 8007026:	f7ff fd07 	bl	8006a38 <find_volume>
 800702a:	4603      	mov	r3, r0
 800702c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800702e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007030:	4618      	mov	r0, r3
 8007032:	3720      	adds	r7, #32
 8007034:	46bd      	mov	sp, r7
 8007036:	bd80      	pop	{r7, pc}
 8007038:	200001e0 	.word	0x200001e0

0800703c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800703c:	b580      	push	{r7, lr}
 800703e:	b09a      	sub	sp, #104	@ 0x68
 8007040:	af00      	add	r7, sp, #0
 8007042:	60f8      	str	r0, [r7, #12]
 8007044:	60b9      	str	r1, [r7, #8]
 8007046:	4613      	mov	r3, r2
 8007048:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d101      	bne.n	8007054 <f_open+0x18>
 8007050:	2309      	movs	r3, #9
 8007052:	e1b7      	b.n	80073c4 <f_open+0x388>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8007054:	79fb      	ldrb	r3, [r7, #7]
 8007056:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800705a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800705c:	79fa      	ldrb	r2, [r7, #7]
 800705e:	f107 0114 	add.w	r1, r7, #20
 8007062:	f107 0308 	add.w	r3, r7, #8
 8007066:	4618      	mov	r0, r3
 8007068:	f7ff fce6 	bl	8006a38 <find_volume>
 800706c:	4603      	mov	r3, r0
 800706e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 8007072:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007076:	2b00      	cmp	r3, #0
 8007078:	f040 819b 	bne.w	80073b2 <f_open+0x376>
		dj.obj.fs = fs;
 800707c:	697b      	ldr	r3, [r7, #20]
 800707e:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8007080:	68ba      	ldr	r2, [r7, #8]
 8007082:	f107 0318 	add.w	r3, r7, #24
 8007086:	4611      	mov	r1, r2
 8007088:	4618      	mov	r0, r3
 800708a:	f7ff fbc5 	bl	8006818 <follow_path>
 800708e:	4603      	mov	r3, r0
 8007090:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8007094:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007098:	2b00      	cmp	r3, #0
 800709a:	d118      	bne.n	80070ce <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800709c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80070a0:	b25b      	sxtb	r3, r3
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	da03      	bge.n	80070ae <f_open+0x72>
				res = FR_INVALID_NAME;
 80070a6:	2306      	movs	r3, #6
 80070a8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80070ac:	e00f      	b.n	80070ce <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80070ae:	79fb      	ldrb	r3, [r7, #7]
 80070b0:	2b01      	cmp	r3, #1
 80070b2:	bf8c      	ite	hi
 80070b4:	2301      	movhi	r3, #1
 80070b6:	2300      	movls	r3, #0
 80070b8:	b2db      	uxtb	r3, r3
 80070ba:	461a      	mov	r2, r3
 80070bc:	f107 0318 	add.w	r3, r7, #24
 80070c0:	4611      	mov	r1, r2
 80070c2:	4618      	mov	r0, r3
 80070c4:	f7fd fe5e 	bl	8004d84 <chk_lock>
 80070c8:	4603      	mov	r3, r0
 80070ca:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80070ce:	79fb      	ldrb	r3, [r7, #7]
 80070d0:	f003 031c 	and.w	r3, r3, #28
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d07f      	beq.n	80071d8 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 80070d8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d017      	beq.n	8007110 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80070e0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80070e4:	2b04      	cmp	r3, #4
 80070e6:	d10e      	bne.n	8007106 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80070e8:	f7fd fea8 	bl	8004e3c <enq_lock>
 80070ec:	4603      	mov	r3, r0
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d006      	beq.n	8007100 <f_open+0xc4>
 80070f2:	f107 0318 	add.w	r3, r7, #24
 80070f6:	4618      	mov	r0, r3
 80070f8:	f7ff f800 	bl	80060fc <dir_register>
 80070fc:	4603      	mov	r3, r0
 80070fe:	e000      	b.n	8007102 <f_open+0xc6>
 8007100:	2312      	movs	r3, #18
 8007102:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8007106:	79fb      	ldrb	r3, [r7, #7]
 8007108:	f043 0308 	orr.w	r3, r3, #8
 800710c:	71fb      	strb	r3, [r7, #7]
 800710e:	e010      	b.n	8007132 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8007110:	7fbb      	ldrb	r3, [r7, #30]
 8007112:	f003 0311 	and.w	r3, r3, #17
 8007116:	2b00      	cmp	r3, #0
 8007118:	d003      	beq.n	8007122 <f_open+0xe6>
					res = FR_DENIED;
 800711a:	2307      	movs	r3, #7
 800711c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8007120:	e007      	b.n	8007132 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8007122:	79fb      	ldrb	r3, [r7, #7]
 8007124:	f003 0304 	and.w	r3, r3, #4
 8007128:	2b00      	cmp	r3, #0
 800712a:	d002      	beq.n	8007132 <f_open+0xf6>
 800712c:	2308      	movs	r3, #8
 800712e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8007132:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007136:	2b00      	cmp	r3, #0
 8007138:	d168      	bne.n	800720c <f_open+0x1d0>
 800713a:	79fb      	ldrb	r3, [r7, #7]
 800713c:	f003 0308 	and.w	r3, r3, #8
 8007140:	2b00      	cmp	r3, #0
 8007142:	d063      	beq.n	800720c <f_open+0x1d0>
				dw = GET_FATTIME();
 8007144:	f7fc fe84 	bl	8003e50 <get_fattime>
 8007148:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800714a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800714c:	330e      	adds	r3, #14
 800714e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8007150:	4618      	mov	r0, r3
 8007152:	f7fd fd6d 	bl	8004c30 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8007156:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007158:	3316      	adds	r3, #22
 800715a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800715c:	4618      	mov	r0, r3
 800715e:	f7fd fd67 	bl	8004c30 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8007162:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007164:	330b      	adds	r3, #11
 8007166:	2220      	movs	r2, #32
 8007168:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800716a:	697b      	ldr	r3, [r7, #20]
 800716c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800716e:	4611      	mov	r1, r2
 8007170:	4618      	mov	r0, r3
 8007172:	f7fe fd3c 	bl	8005bee <ld_clust>
 8007176:	6578      	str	r0, [r7, #84]	@ 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8007178:	697b      	ldr	r3, [r7, #20]
 800717a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800717c:	2200      	movs	r2, #0
 800717e:	4618      	mov	r0, r3
 8007180:	f7fe fd54 	bl	8005c2c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8007184:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007186:	331c      	adds	r3, #28
 8007188:	2100      	movs	r1, #0
 800718a:	4618      	mov	r0, r3
 800718c:	f7fd fd50 	bl	8004c30 <st_dword>
					fs->wflag = 1;
 8007190:	697b      	ldr	r3, [r7, #20]
 8007192:	2201      	movs	r2, #1
 8007194:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8007196:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007198:	2b00      	cmp	r3, #0
 800719a:	d037      	beq.n	800720c <f_open+0x1d0>
						dw = fs->winsect;
 800719c:	697b      	ldr	r3, [r7, #20]
 800719e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80071a0:	65bb      	str	r3, [r7, #88]	@ 0x58
						res = remove_chain(&dj.obj, cl, 0);
 80071a2:	f107 0318 	add.w	r3, r7, #24
 80071a6:	2200      	movs	r2, #0
 80071a8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80071aa:	4618      	mov	r0, r3
 80071ac:	f7fe fa44 	bl	8005638 <remove_chain>
 80071b0:	4603      	mov	r3, r0
 80071b2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 80071b6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d126      	bne.n	800720c <f_open+0x1d0>
							res = move_window(fs, dw);
 80071be:	697b      	ldr	r3, [r7, #20]
 80071c0:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80071c2:	4618      	mov	r0, r3
 80071c4:	f7fd ff8e 	bl	80050e4 <move_window>
 80071c8:	4603      	mov	r3, r0
 80071ca:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80071ce:	697b      	ldr	r3, [r7, #20]
 80071d0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80071d2:	3a01      	subs	r2, #1
 80071d4:	615a      	str	r2, [r3, #20]
 80071d6:	e019      	b.n	800720c <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80071d8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d115      	bne.n	800720c <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80071e0:	7fbb      	ldrb	r3, [r7, #30]
 80071e2:	f003 0310 	and.w	r3, r3, #16
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d003      	beq.n	80071f2 <f_open+0x1b6>
					res = FR_NO_FILE;
 80071ea:	2304      	movs	r3, #4
 80071ec:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80071f0:	e00c      	b.n	800720c <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80071f2:	79fb      	ldrb	r3, [r7, #7]
 80071f4:	f003 0302 	and.w	r3, r3, #2
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d007      	beq.n	800720c <f_open+0x1d0>
 80071fc:	7fbb      	ldrb	r3, [r7, #30]
 80071fe:	f003 0301 	and.w	r3, r3, #1
 8007202:	2b00      	cmp	r3, #0
 8007204:	d002      	beq.n	800720c <f_open+0x1d0>
						res = FR_DENIED;
 8007206:	2307      	movs	r3, #7
 8007208:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800720c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007210:	2b00      	cmp	r3, #0
 8007212:	d126      	bne.n	8007262 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8007214:	79fb      	ldrb	r3, [r7, #7]
 8007216:	f003 0308 	and.w	r3, r3, #8
 800721a:	2b00      	cmp	r3, #0
 800721c:	d003      	beq.n	8007226 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800721e:	79fb      	ldrb	r3, [r7, #7]
 8007220:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007224:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8007226:	697b      	ldr	r3, [r7, #20]
 8007228:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800722e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007234:	79fb      	ldrb	r3, [r7, #7]
 8007236:	2b01      	cmp	r3, #1
 8007238:	bf8c      	ite	hi
 800723a:	2301      	movhi	r3, #1
 800723c:	2300      	movls	r3, #0
 800723e:	b2db      	uxtb	r3, r3
 8007240:	461a      	mov	r2, r3
 8007242:	f107 0318 	add.w	r3, r7, #24
 8007246:	4611      	mov	r1, r2
 8007248:	4618      	mov	r0, r3
 800724a:	f7fd fe19 	bl	8004e80 <inc_lock>
 800724e:	4602      	mov	r2, r0
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	691b      	ldr	r3, [r3, #16]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d102      	bne.n	8007262 <f_open+0x226>
 800725c:	2302      	movs	r3, #2
 800725e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8007262:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007266:	2b00      	cmp	r3, #0
 8007268:	f040 80a3 	bne.w	80073b2 <f_open+0x376>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800726c:	697b      	ldr	r3, [r7, #20]
 800726e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007270:	4611      	mov	r1, r2
 8007272:	4618      	mov	r0, r3
 8007274:	f7fe fcbb 	bl	8005bee <ld_clust>
 8007278:	4602      	mov	r2, r0
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800727e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007280:	331c      	adds	r3, #28
 8007282:	4618      	mov	r0, r3
 8007284:	f7fd fc96 	bl	8004bb4 <ld_dword>
 8007288:	4602      	mov	r2, r0
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	2200      	movs	r2, #0
 8007292:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8007294:	697a      	ldr	r2, [r7, #20]
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800729a:	697b      	ldr	r3, [r7, #20]
 800729c:	88da      	ldrh	r2, [r3, #6]
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	79fa      	ldrb	r2, [r7, #7]
 80072a6:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	2200      	movs	r2, #0
 80072ac:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	2200      	movs	r2, #0
 80072b2:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	2200      	movs	r2, #0
 80072b8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	3330      	adds	r3, #48	@ 0x30
 80072be:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80072c2:	2100      	movs	r1, #0
 80072c4:	4618      	mov	r0, r3
 80072c6:	f7fd fd00 	bl	8004cca <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80072ca:	79fb      	ldrb	r3, [r7, #7]
 80072cc:	f003 0320 	and.w	r3, r3, #32
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d06e      	beq.n	80073b2 <f_open+0x376>
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	68db      	ldr	r3, [r3, #12]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d06a      	beq.n	80073b2 <f_open+0x376>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	68da      	ldr	r2, [r3, #12]
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80072e4:	697b      	ldr	r3, [r7, #20]
 80072e6:	895b      	ldrh	r3, [r3, #10]
 80072e8:	461a      	mov	r2, r3
 80072ea:	697b      	ldr	r3, [r7, #20]
 80072ec:	899b      	ldrh	r3, [r3, #12]
 80072ee:	fb02 f303 	mul.w	r3, r2, r3
 80072f2:	653b      	str	r3, [r7, #80]	@ 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	689b      	ldr	r3, [r3, #8]
 80072f8:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	68db      	ldr	r3, [r3, #12]
 80072fe:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007300:	e016      	b.n	8007330 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8007306:	4618      	mov	r0, r3
 8007308:	f7fd ffa9 	bl	800525e <get_fat>
 800730c:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800730e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007310:	2b01      	cmp	r3, #1
 8007312:	d802      	bhi.n	800731a <f_open+0x2de>
 8007314:	2302      	movs	r3, #2
 8007316:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800731a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800731c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007320:	d102      	bne.n	8007328 <f_open+0x2ec>
 8007322:	2301      	movs	r3, #1
 8007324:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007328:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800732a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800732c:	1ad3      	subs	r3, r2, r3
 800732e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007330:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007334:	2b00      	cmp	r3, #0
 8007336:	d103      	bne.n	8007340 <f_open+0x304>
 8007338:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800733a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800733c:	429a      	cmp	r2, r3
 800733e:	d8e0      	bhi.n	8007302 <f_open+0x2c6>
				}
				fp->clust = clst;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007344:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8007346:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800734a:	2b00      	cmp	r3, #0
 800734c:	d131      	bne.n	80073b2 <f_open+0x376>
 800734e:	697b      	ldr	r3, [r7, #20]
 8007350:	899b      	ldrh	r3, [r3, #12]
 8007352:	461a      	mov	r2, r3
 8007354:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007356:	fbb3 f1f2 	udiv	r1, r3, r2
 800735a:	fb01 f202 	mul.w	r2, r1, r2
 800735e:	1a9b      	subs	r3, r3, r2
 8007360:	2b00      	cmp	r3, #0
 8007362:	d026      	beq.n	80073b2 <f_open+0x376>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8007364:	697b      	ldr	r3, [r7, #20]
 8007366:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8007368:	4618      	mov	r0, r3
 800736a:	f7fd ff59 	bl	8005220 <clust2sect>
 800736e:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8007370:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007372:	2b00      	cmp	r3, #0
 8007374:	d103      	bne.n	800737e <f_open+0x342>
						res = FR_INT_ERR;
 8007376:	2302      	movs	r3, #2
 8007378:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800737c:	e019      	b.n	80073b2 <f_open+0x376>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800737e:	697b      	ldr	r3, [r7, #20]
 8007380:	899b      	ldrh	r3, [r3, #12]
 8007382:	461a      	mov	r2, r3
 8007384:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007386:	fbb3 f2f2 	udiv	r2, r3, r2
 800738a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800738c:	441a      	add	r2, r3
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8007392:	697b      	ldr	r3, [r7, #20]
 8007394:	7858      	ldrb	r0, [r3, #1]
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	6a1a      	ldr	r2, [r3, #32]
 80073a0:	2301      	movs	r3, #1
 80073a2:	f7fd fb91 	bl	8004ac8 <disk_read>
 80073a6:	4603      	mov	r3, r0
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d002      	beq.n	80073b2 <f_open+0x376>
 80073ac:	2301      	movs	r3, #1
 80073ae:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80073b2:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d002      	beq.n	80073c0 <f_open+0x384>
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	2200      	movs	r2, #0
 80073be:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80073c0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 80073c4:	4618      	mov	r0, r3
 80073c6:	3768      	adds	r7, #104	@ 0x68
 80073c8:	46bd      	mov	sp, r7
 80073ca:	bd80      	pop	{r7, pc}

080073cc <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b08c      	sub	sp, #48	@ 0x30
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	60f8      	str	r0, [r7, #12]
 80073d4:	60b9      	str	r1, [r7, #8]
 80073d6:	607a      	str	r2, [r7, #4]
 80073d8:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80073da:	68bb      	ldr	r3, [r7, #8]
 80073dc:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	2200      	movs	r2, #0
 80073e2:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	f107 0210 	add.w	r2, r7, #16
 80073ea:	4611      	mov	r1, r2
 80073ec:	4618      	mov	r0, r3
 80073ee:	f7ff fda9 	bl	8006f44 <validate>
 80073f2:	4603      	mov	r3, r0
 80073f4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80073f8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d107      	bne.n	8007410 <f_write+0x44>
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	7d5b      	ldrb	r3, [r3, #21]
 8007404:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8007408:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800740c:	2b00      	cmp	r3, #0
 800740e:	d002      	beq.n	8007416 <f_write+0x4a>
 8007410:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007414:	e16a      	b.n	80076ec <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	7d1b      	ldrb	r3, [r3, #20]
 800741a:	f003 0302 	and.w	r3, r3, #2
 800741e:	2b00      	cmp	r3, #0
 8007420:	d101      	bne.n	8007426 <f_write+0x5a>
 8007422:	2307      	movs	r3, #7
 8007424:	e162      	b.n	80076ec <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	699a      	ldr	r2, [r3, #24]
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	441a      	add	r2, r3
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	699b      	ldr	r3, [r3, #24]
 8007432:	429a      	cmp	r2, r3
 8007434:	f080 814c 	bcs.w	80076d0 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	699b      	ldr	r3, [r3, #24]
 800743c:	43db      	mvns	r3, r3
 800743e:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8007440:	e146      	b.n	80076d0 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	699b      	ldr	r3, [r3, #24]
 8007446:	693a      	ldr	r2, [r7, #16]
 8007448:	8992      	ldrh	r2, [r2, #12]
 800744a:	fbb3 f1f2 	udiv	r1, r3, r2
 800744e:	fb01 f202 	mul.w	r2, r1, r2
 8007452:	1a9b      	subs	r3, r3, r2
 8007454:	2b00      	cmp	r3, #0
 8007456:	f040 80f1 	bne.w	800763c <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	699b      	ldr	r3, [r3, #24]
 800745e:	693a      	ldr	r2, [r7, #16]
 8007460:	8992      	ldrh	r2, [r2, #12]
 8007462:	fbb3 f3f2 	udiv	r3, r3, r2
 8007466:	693a      	ldr	r2, [r7, #16]
 8007468:	8952      	ldrh	r2, [r2, #10]
 800746a:	3a01      	subs	r2, #1
 800746c:	4013      	ands	r3, r2
 800746e:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8007470:	69bb      	ldr	r3, [r7, #24]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d143      	bne.n	80074fe <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	699b      	ldr	r3, [r3, #24]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d10c      	bne.n	8007498 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	689b      	ldr	r3, [r3, #8]
 8007482:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8007484:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007486:	2b00      	cmp	r3, #0
 8007488:	d11a      	bne.n	80074c0 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	2100      	movs	r1, #0
 800748e:	4618      	mov	r0, r3
 8007490:	f7fe f937 	bl	8005702 <create_chain>
 8007494:	62b8      	str	r0, [r7, #40]	@ 0x28
 8007496:	e013      	b.n	80074c0 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800749c:	2b00      	cmp	r3, #0
 800749e:	d007      	beq.n	80074b0 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	699b      	ldr	r3, [r3, #24]
 80074a4:	4619      	mov	r1, r3
 80074a6:	68f8      	ldr	r0, [r7, #12]
 80074a8:	f7fe f9c3 	bl	8005832 <clmt_clust>
 80074ac:	62b8      	str	r0, [r7, #40]	@ 0x28
 80074ae:	e007      	b.n	80074c0 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80074b0:	68fa      	ldr	r2, [r7, #12]
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	69db      	ldr	r3, [r3, #28]
 80074b6:	4619      	mov	r1, r3
 80074b8:	4610      	mov	r0, r2
 80074ba:	f7fe f922 	bl	8005702 <create_chain>
 80074be:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80074c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	f000 8109 	beq.w	80076da <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80074c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074ca:	2b01      	cmp	r3, #1
 80074cc:	d104      	bne.n	80074d8 <f_write+0x10c>
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	2202      	movs	r2, #2
 80074d2:	755a      	strb	r2, [r3, #21]
 80074d4:	2302      	movs	r3, #2
 80074d6:	e109      	b.n	80076ec <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80074d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074de:	d104      	bne.n	80074ea <f_write+0x11e>
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	2201      	movs	r2, #1
 80074e4:	755a      	strb	r2, [r3, #21]
 80074e6:	2301      	movs	r3, #1
 80074e8:	e100      	b.n	80076ec <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80074ee:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	689b      	ldr	r3, [r3, #8]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d102      	bne.n	80074fe <f_write+0x132>
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80074fc:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	7d1b      	ldrb	r3, [r3, #20]
 8007502:	b25b      	sxtb	r3, r3
 8007504:	2b00      	cmp	r3, #0
 8007506:	da18      	bge.n	800753a <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007508:	693b      	ldr	r3, [r7, #16]
 800750a:	7858      	ldrb	r0, [r3, #1]
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	6a1a      	ldr	r2, [r3, #32]
 8007516:	2301      	movs	r3, #1
 8007518:	f7fd faf6 	bl	8004b08 <disk_write>
 800751c:	4603      	mov	r3, r0
 800751e:	2b00      	cmp	r3, #0
 8007520:	d004      	beq.n	800752c <f_write+0x160>
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	2201      	movs	r2, #1
 8007526:	755a      	strb	r2, [r3, #21]
 8007528:	2301      	movs	r3, #1
 800752a:	e0df      	b.n	80076ec <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	7d1b      	ldrb	r3, [r3, #20]
 8007530:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007534:	b2da      	uxtb	r2, r3
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800753a:	693a      	ldr	r2, [r7, #16]
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	69db      	ldr	r3, [r3, #28]
 8007540:	4619      	mov	r1, r3
 8007542:	4610      	mov	r0, r2
 8007544:	f7fd fe6c 	bl	8005220 <clust2sect>
 8007548:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800754a:	697b      	ldr	r3, [r7, #20]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d104      	bne.n	800755a <f_write+0x18e>
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	2202      	movs	r2, #2
 8007554:	755a      	strb	r2, [r3, #21]
 8007556:	2302      	movs	r3, #2
 8007558:	e0c8      	b.n	80076ec <f_write+0x320>
			sect += csect;
 800755a:	697a      	ldr	r2, [r7, #20]
 800755c:	69bb      	ldr	r3, [r7, #24]
 800755e:	4413      	add	r3, r2
 8007560:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8007562:	693b      	ldr	r3, [r7, #16]
 8007564:	899b      	ldrh	r3, [r3, #12]
 8007566:	461a      	mov	r2, r3
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	fbb3 f3f2 	udiv	r3, r3, r2
 800756e:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8007570:	6a3b      	ldr	r3, [r7, #32]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d043      	beq.n	80075fe <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8007576:	69ba      	ldr	r2, [r7, #24]
 8007578:	6a3b      	ldr	r3, [r7, #32]
 800757a:	4413      	add	r3, r2
 800757c:	693a      	ldr	r2, [r7, #16]
 800757e:	8952      	ldrh	r2, [r2, #10]
 8007580:	4293      	cmp	r3, r2
 8007582:	d905      	bls.n	8007590 <f_write+0x1c4>
					cc = fs->csize - csect;
 8007584:	693b      	ldr	r3, [r7, #16]
 8007586:	895b      	ldrh	r3, [r3, #10]
 8007588:	461a      	mov	r2, r3
 800758a:	69bb      	ldr	r3, [r7, #24]
 800758c:	1ad3      	subs	r3, r2, r3
 800758e:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007590:	693b      	ldr	r3, [r7, #16]
 8007592:	7858      	ldrb	r0, [r3, #1]
 8007594:	6a3b      	ldr	r3, [r7, #32]
 8007596:	697a      	ldr	r2, [r7, #20]
 8007598:	69f9      	ldr	r1, [r7, #28]
 800759a:	f7fd fab5 	bl	8004b08 <disk_write>
 800759e:	4603      	mov	r3, r0
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d004      	beq.n	80075ae <f_write+0x1e2>
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	2201      	movs	r2, #1
 80075a8:	755a      	strb	r2, [r3, #21]
 80075aa:	2301      	movs	r3, #1
 80075ac:	e09e      	b.n	80076ec <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	6a1a      	ldr	r2, [r3, #32]
 80075b2:	697b      	ldr	r3, [r7, #20]
 80075b4:	1ad3      	subs	r3, r2, r3
 80075b6:	6a3a      	ldr	r2, [r7, #32]
 80075b8:	429a      	cmp	r2, r3
 80075ba:	d918      	bls.n	80075ee <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	6a1a      	ldr	r2, [r3, #32]
 80075c6:	697b      	ldr	r3, [r7, #20]
 80075c8:	1ad3      	subs	r3, r2, r3
 80075ca:	693a      	ldr	r2, [r7, #16]
 80075cc:	8992      	ldrh	r2, [r2, #12]
 80075ce:	fb02 f303 	mul.w	r3, r2, r3
 80075d2:	69fa      	ldr	r2, [r7, #28]
 80075d4:	18d1      	adds	r1, r2, r3
 80075d6:	693b      	ldr	r3, [r7, #16]
 80075d8:	899b      	ldrh	r3, [r3, #12]
 80075da:	461a      	mov	r2, r3
 80075dc:	f7fd fb54 	bl	8004c88 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	7d1b      	ldrb	r3, [r3, #20]
 80075e4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80075e8:	b2da      	uxtb	r2, r3
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80075ee:	693b      	ldr	r3, [r7, #16]
 80075f0:	899b      	ldrh	r3, [r3, #12]
 80075f2:	461a      	mov	r2, r3
 80075f4:	6a3b      	ldr	r3, [r7, #32]
 80075f6:	fb02 f303 	mul.w	r3, r2, r3
 80075fa:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 80075fc:	e04b      	b.n	8007696 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	6a1b      	ldr	r3, [r3, #32]
 8007602:	697a      	ldr	r2, [r7, #20]
 8007604:	429a      	cmp	r2, r3
 8007606:	d016      	beq.n	8007636 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	699a      	ldr	r2, [r3, #24]
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8007610:	429a      	cmp	r2, r3
 8007612:	d210      	bcs.n	8007636 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8007614:	693b      	ldr	r3, [r7, #16]
 8007616:	7858      	ldrb	r0, [r3, #1]
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800761e:	2301      	movs	r3, #1
 8007620:	697a      	ldr	r2, [r7, #20]
 8007622:	f7fd fa51 	bl	8004ac8 <disk_read>
 8007626:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8007628:	2b00      	cmp	r3, #0
 800762a:	d004      	beq.n	8007636 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	2201      	movs	r2, #1
 8007630:	755a      	strb	r2, [r3, #21]
 8007632:	2301      	movs	r3, #1
 8007634:	e05a      	b.n	80076ec <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	697a      	ldr	r2, [r7, #20]
 800763a:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800763c:	693b      	ldr	r3, [r7, #16]
 800763e:	899b      	ldrh	r3, [r3, #12]
 8007640:	4618      	mov	r0, r3
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	699b      	ldr	r3, [r3, #24]
 8007646:	693a      	ldr	r2, [r7, #16]
 8007648:	8992      	ldrh	r2, [r2, #12]
 800764a:	fbb3 f1f2 	udiv	r1, r3, r2
 800764e:	fb01 f202 	mul.w	r2, r1, r2
 8007652:	1a9b      	subs	r3, r3, r2
 8007654:	1ac3      	subs	r3, r0, r3
 8007656:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8007658:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	429a      	cmp	r2, r3
 800765e:	d901      	bls.n	8007664 <f_write+0x298>
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	699b      	ldr	r3, [r3, #24]
 800766e:	693a      	ldr	r2, [r7, #16]
 8007670:	8992      	ldrh	r2, [r2, #12]
 8007672:	fbb3 f0f2 	udiv	r0, r3, r2
 8007676:	fb00 f202 	mul.w	r2, r0, r2
 800767a:	1a9b      	subs	r3, r3, r2
 800767c:	440b      	add	r3, r1
 800767e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007680:	69f9      	ldr	r1, [r7, #28]
 8007682:	4618      	mov	r0, r3
 8007684:	f7fd fb00 	bl	8004c88 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	7d1b      	ldrb	r3, [r3, #20]
 800768c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007690:	b2da      	uxtb	r2, r3
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8007696:	69fa      	ldr	r2, [r7, #28]
 8007698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800769a:	4413      	add	r3, r2
 800769c:	61fb      	str	r3, [r7, #28]
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	699a      	ldr	r2, [r3, #24]
 80076a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076a4:	441a      	add	r2, r3
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	619a      	str	r2, [r3, #24]
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	68da      	ldr	r2, [r3, #12]
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	699b      	ldr	r3, [r3, #24]
 80076b2:	429a      	cmp	r2, r3
 80076b4:	bf38      	it	cc
 80076b6:	461a      	movcc	r2, r3
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	60da      	str	r2, [r3, #12]
 80076bc:	683b      	ldr	r3, [r7, #0]
 80076be:	681a      	ldr	r2, [r3, #0]
 80076c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076c2:	441a      	add	r2, r3
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	601a      	str	r2, [r3, #0]
 80076c8:	687a      	ldr	r2, [r7, #4]
 80076ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076cc:	1ad3      	subs	r3, r2, r3
 80076ce:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	f47f aeb5 	bne.w	8007442 <f_write+0x76>
 80076d8:	e000      	b.n	80076dc <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80076da:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	7d1b      	ldrb	r3, [r3, #20]
 80076e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80076e4:	b2da      	uxtb	r2, r3
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80076ea:	2300      	movs	r3, #0
}
 80076ec:	4618      	mov	r0, r3
 80076ee:	3730      	adds	r7, #48	@ 0x30
 80076f0:	46bd      	mov	sp, r7
 80076f2:	bd80      	pop	{r7, pc}

080076f4 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80076f4:	b580      	push	{r7, lr}
 80076f6:	b086      	sub	sp, #24
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	f107 0208 	add.w	r2, r7, #8
 8007702:	4611      	mov	r1, r2
 8007704:	4618      	mov	r0, r3
 8007706:	f7ff fc1d 	bl	8006f44 <validate>
 800770a:	4603      	mov	r3, r0
 800770c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800770e:	7dfb      	ldrb	r3, [r7, #23]
 8007710:	2b00      	cmp	r3, #0
 8007712:	d168      	bne.n	80077e6 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	7d1b      	ldrb	r3, [r3, #20]
 8007718:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800771c:	2b00      	cmp	r3, #0
 800771e:	d062      	beq.n	80077e6 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	7d1b      	ldrb	r3, [r3, #20]
 8007724:	b25b      	sxtb	r3, r3
 8007726:	2b00      	cmp	r3, #0
 8007728:	da15      	bge.n	8007756 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800772a:	68bb      	ldr	r3, [r7, #8]
 800772c:	7858      	ldrb	r0, [r3, #1]
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	6a1a      	ldr	r2, [r3, #32]
 8007738:	2301      	movs	r3, #1
 800773a:	f7fd f9e5 	bl	8004b08 <disk_write>
 800773e:	4603      	mov	r3, r0
 8007740:	2b00      	cmp	r3, #0
 8007742:	d001      	beq.n	8007748 <f_sync+0x54>
 8007744:	2301      	movs	r3, #1
 8007746:	e04f      	b.n	80077e8 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	7d1b      	ldrb	r3, [r3, #20]
 800774c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007750:	b2da      	uxtb	r2, r3
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8007756:	f7fc fb7b 	bl	8003e50 <get_fattime>
 800775a:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800775c:	68ba      	ldr	r2, [r7, #8]
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007762:	4619      	mov	r1, r3
 8007764:	4610      	mov	r0, r2
 8007766:	f7fd fcbd 	bl	80050e4 <move_window>
 800776a:	4603      	mov	r3, r0
 800776c:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800776e:	7dfb      	ldrb	r3, [r7, #23]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d138      	bne.n	80077e6 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007778:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	330b      	adds	r3, #11
 800777e:	781a      	ldrb	r2, [r3, #0]
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	330b      	adds	r3, #11
 8007784:	f042 0220 	orr.w	r2, r2, #32
 8007788:	b2d2      	uxtb	r2, r2
 800778a:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	6818      	ldr	r0, [r3, #0]
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	689b      	ldr	r3, [r3, #8]
 8007794:	461a      	mov	r2, r3
 8007796:	68f9      	ldr	r1, [r7, #12]
 8007798:	f7fe fa48 	bl	8005c2c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	f103 021c 	add.w	r2, r3, #28
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	68db      	ldr	r3, [r3, #12]
 80077a6:	4619      	mov	r1, r3
 80077a8:	4610      	mov	r0, r2
 80077aa:	f7fd fa41 	bl	8004c30 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	3316      	adds	r3, #22
 80077b2:	6939      	ldr	r1, [r7, #16]
 80077b4:	4618      	mov	r0, r3
 80077b6:	f7fd fa3b 	bl	8004c30 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	3312      	adds	r3, #18
 80077be:	2100      	movs	r1, #0
 80077c0:	4618      	mov	r0, r3
 80077c2:	f7fd fa1a 	bl	8004bfa <st_word>
					fs->wflag = 1;
 80077c6:	68bb      	ldr	r3, [r7, #8]
 80077c8:	2201      	movs	r2, #1
 80077ca:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80077cc:	68bb      	ldr	r3, [r7, #8]
 80077ce:	4618      	mov	r0, r3
 80077d0:	f7fd fcb6 	bl	8005140 <sync_fs>
 80077d4:	4603      	mov	r3, r0
 80077d6:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	7d1b      	ldrb	r3, [r3, #20]
 80077dc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80077e0:	b2da      	uxtb	r2, r3
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80077e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80077e8:	4618      	mov	r0, r3
 80077ea:	3718      	adds	r7, #24
 80077ec:	46bd      	mov	sp, r7
 80077ee:	bd80      	pop	{r7, pc}

080077f0 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b084      	sub	sp, #16
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80077f8:	6878      	ldr	r0, [r7, #4]
 80077fa:	f7ff ff7b 	bl	80076f4 <f_sync>
 80077fe:	4603      	mov	r3, r0
 8007800:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8007802:	7bfb      	ldrb	r3, [r7, #15]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d118      	bne.n	800783a <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	f107 0208 	add.w	r2, r7, #8
 800780e:	4611      	mov	r1, r2
 8007810:	4618      	mov	r0, r3
 8007812:	f7ff fb97 	bl	8006f44 <validate>
 8007816:	4603      	mov	r3, r0
 8007818:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800781a:	7bfb      	ldrb	r3, [r7, #15]
 800781c:	2b00      	cmp	r3, #0
 800781e:	d10c      	bne.n	800783a <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	691b      	ldr	r3, [r3, #16]
 8007824:	4618      	mov	r0, r3
 8007826:	f7fd fbb9 	bl	8004f9c <dec_lock>
 800782a:	4603      	mov	r3, r0
 800782c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800782e:	7bfb      	ldrb	r3, [r7, #15]
 8007830:	2b00      	cmp	r3, #0
 8007832:	d102      	bne.n	800783a <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2200      	movs	r2, #0
 8007838:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800783a:	7bfb      	ldrb	r3, [r7, #15]
}
 800783c:	4618      	mov	r0, r3
 800783e:	3710      	adds	r7, #16
 8007840:	46bd      	mov	sp, r7
 8007842:	bd80      	pop	{r7, pc}

08007844 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8007844:	b580      	push	{r7, lr}
 8007846:	b090      	sub	sp, #64	@ 0x40
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
 800784c:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 800784e:	f107 0108 	add.w	r1, r7, #8
 8007852:	1d3b      	adds	r3, r7, #4
 8007854:	2200      	movs	r2, #0
 8007856:	4618      	mov	r0, r3
 8007858:	f7ff f8ee 	bl	8006a38 <find_volume>
 800785c:	4603      	mov	r3, r0
 800785e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) {
 8007862:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8007866:	2b00      	cmp	r3, #0
 8007868:	d11f      	bne.n	80078aa <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800786a:	687a      	ldr	r2, [r7, #4]
 800786c:	f107 0308 	add.w	r3, r7, #8
 8007870:	4611      	mov	r1, r2
 8007872:	4618      	mov	r0, r3
 8007874:	f7fe ffd0 	bl	8006818 <follow_path>
 8007878:	4603      	mov	r3, r0
 800787a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
		if (res == FR_OK) {				/* Follow completed */
 800787e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8007882:	2b00      	cmp	r3, #0
 8007884:	d111      	bne.n	80078aa <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 8007886:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800788a:	b25b      	sxtb	r3, r3
 800788c:	2b00      	cmp	r3, #0
 800788e:	da03      	bge.n	8007898 <f_stat+0x54>
				res = FR_INVALID_NAME;
 8007890:	2306      	movs	r3, #6
 8007892:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8007896:	e008      	b.n	80078aa <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 8007898:	683b      	ldr	r3, [r7, #0]
 800789a:	2b00      	cmp	r3, #0
 800789c:	d005      	beq.n	80078aa <f_stat+0x66>
 800789e:	f107 0308 	add.w	r3, r7, #8
 80078a2:	6839      	ldr	r1, [r7, #0]
 80078a4:	4618      	mov	r0, r3
 80078a6:	f7fe fd21 	bl	80062ec <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 80078aa:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 80078ae:	4618      	mov	r0, r3
 80078b0:	3740      	adds	r7, #64	@ 0x40
 80078b2:	46bd      	mov	sp, r7
 80078b4:	bd80      	pop	{r7, pc}

080078b6 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 80078b6:	b580      	push	{r7, lr}
 80078b8:	b092      	sub	sp, #72	@ 0x48
 80078ba:	af00      	add	r7, sp, #0
 80078bc:	60f8      	str	r0, [r7, #12]
 80078be:	60b9      	str	r1, [r7, #8]
 80078c0:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 80078c2:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 80078c6:	f107 030c 	add.w	r3, r7, #12
 80078ca:	2200      	movs	r2, #0
 80078cc:	4618      	mov	r0, r3
 80078ce:	f7ff f8b3 	bl	8006a38 <find_volume>
 80078d2:	4603      	mov	r3, r0
 80078d4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	if (res == FR_OK) {
 80078d8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80078dc:	2b00      	cmp	r3, #0
 80078de:	f040 8099 	bne.w	8007a14 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 80078e2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 80078e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078ea:	699a      	ldr	r2, [r3, #24]
 80078ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078ee:	69db      	ldr	r3, [r3, #28]
 80078f0:	3b02      	subs	r3, #2
 80078f2:	429a      	cmp	r2, r3
 80078f4:	d804      	bhi.n	8007900 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 80078f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078f8:	699a      	ldr	r2, [r3, #24]
 80078fa:	68bb      	ldr	r3, [r7, #8]
 80078fc:	601a      	str	r2, [r3, #0]
 80078fe:	e089      	b.n	8007a14 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 8007900:	2300      	movs	r3, #0
 8007902:	643b      	str	r3, [r7, #64]	@ 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 8007904:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007906:	781b      	ldrb	r3, [r3, #0]
 8007908:	2b01      	cmp	r3, #1
 800790a:	d128      	bne.n	800795e <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800790c:	2302      	movs	r3, #2
 800790e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007910:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007912:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 8007914:	f107 0314 	add.w	r3, r7, #20
 8007918:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800791a:	4618      	mov	r0, r3
 800791c:	f7fd fc9f 	bl	800525e <get_fat>
 8007920:	62f8      	str	r0, [r7, #44]	@ 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8007922:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007924:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007928:	d103      	bne.n	8007932 <f_getfree+0x7c>
 800792a:	2301      	movs	r3, #1
 800792c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8007930:	e063      	b.n	80079fa <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8007932:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007934:	2b01      	cmp	r3, #1
 8007936:	d103      	bne.n	8007940 <f_getfree+0x8a>
 8007938:	2302      	movs	r3, #2
 800793a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800793e:	e05c      	b.n	80079fa <f_getfree+0x144>
					if (stat == 0) nfree++;
 8007940:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007942:	2b00      	cmp	r3, #0
 8007944:	d102      	bne.n	800794c <f_getfree+0x96>
 8007946:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007948:	3301      	adds	r3, #1
 800794a:	643b      	str	r3, [r7, #64]	@ 0x40
				} while (++clst < fs->n_fatent);
 800794c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800794e:	3301      	adds	r3, #1
 8007950:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007952:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007954:	69db      	ldr	r3, [r3, #28]
 8007956:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8007958:	429a      	cmp	r2, r3
 800795a:	d3db      	bcc.n	8007914 <f_getfree+0x5e>
 800795c:	e04d      	b.n	80079fa <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 800795e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007960:	69db      	ldr	r3, [r3, #28]
 8007962:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007964:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007966:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007968:	63bb      	str	r3, [r7, #56]	@ 0x38
					i = 0; p = 0;
 800796a:	2300      	movs	r3, #0
 800796c:	637b      	str	r3, [r7, #52]	@ 0x34
 800796e:	2300      	movs	r3, #0
 8007970:	633b      	str	r3, [r7, #48]	@ 0x30
					do {
						if (i == 0) {
 8007972:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007974:	2b00      	cmp	r3, #0
 8007976:	d113      	bne.n	80079a0 <f_getfree+0xea>
							res = move_window(fs, sect++);
 8007978:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800797a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800797c:	1c5a      	adds	r2, r3, #1
 800797e:	63ba      	str	r2, [r7, #56]	@ 0x38
 8007980:	4619      	mov	r1, r3
 8007982:	f7fd fbaf 	bl	80050e4 <move_window>
 8007986:	4603      	mov	r3, r0
 8007988:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
							if (res != FR_OK) break;
 800798c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8007990:	2b00      	cmp	r3, #0
 8007992:	d131      	bne.n	80079f8 <f_getfree+0x142>
							p = fs->win;
 8007994:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007996:	3338      	adds	r3, #56	@ 0x38
 8007998:	633b      	str	r3, [r7, #48]	@ 0x30
							i = SS(fs);
 800799a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800799c:	899b      	ldrh	r3, [r3, #12]
 800799e:	637b      	str	r3, [r7, #52]	@ 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 80079a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079a2:	781b      	ldrb	r3, [r3, #0]
 80079a4:	2b02      	cmp	r3, #2
 80079a6:	d10f      	bne.n	80079c8 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 80079a8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80079aa:	f7fd f8eb 	bl	8004b84 <ld_word>
 80079ae:	4603      	mov	r3, r0
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d102      	bne.n	80079ba <f_getfree+0x104>
 80079b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80079b6:	3301      	adds	r3, #1
 80079b8:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 2; i -= 2;
 80079ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079bc:	3302      	adds	r3, #2
 80079be:	633b      	str	r3, [r7, #48]	@ 0x30
 80079c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80079c2:	3b02      	subs	r3, #2
 80079c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80079c6:	e010      	b.n	80079ea <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 80079c8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80079ca:	f7fd f8f3 	bl	8004bb4 <ld_dword>
 80079ce:	4603      	mov	r3, r0
 80079d0:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d102      	bne.n	80079de <f_getfree+0x128>
 80079d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80079da:	3301      	adds	r3, #1
 80079dc:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 4; i -= 4;
 80079de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079e0:	3304      	adds	r3, #4
 80079e2:	633b      	str	r3, [r7, #48]	@ 0x30
 80079e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80079e6:	3b04      	subs	r3, #4
 80079e8:	637b      	str	r3, [r7, #52]	@ 0x34
						}
					} while (--clst);
 80079ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80079ec:	3b01      	subs	r3, #1
 80079ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80079f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d1bd      	bne.n	8007972 <f_getfree+0xbc>
 80079f6:	e000      	b.n	80079fa <f_getfree+0x144>
							if (res != FR_OK) break;
 80079f8:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 80079fa:	68bb      	ldr	r3, [r7, #8]
 80079fc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80079fe:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 8007a00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a02:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007a04:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 8007a06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a08:	791a      	ldrb	r2, [r3, #4]
 8007a0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a0c:	f042 0201 	orr.w	r2, r2, #1
 8007a10:	b2d2      	uxtb	r2, r2
 8007a12:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 8007a14:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8007a18:	4618      	mov	r0, r3
 8007a1a:	3748      	adds	r7, #72	@ 0x48
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	bd80      	pop	{r7, pc}

08007a20 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b084      	sub	sp, #16
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
 8007a28:	460b      	mov	r3, r1
 8007a2a:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 8007a2c:	78fb      	ldrb	r3, [r7, #3]
 8007a2e:	2b0a      	cmp	r3, #10
 8007a30:	d103      	bne.n	8007a3a <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 8007a32:	210d      	movs	r1, #13
 8007a34:	6878      	ldr	r0, [r7, #4]
 8007a36:	f7ff fff3 	bl	8007a20 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	685b      	ldr	r3, [r3, #4]
 8007a3e:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	db25      	blt.n	8007a92 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	1c5a      	adds	r2, r3, #1
 8007a4a:	60fa      	str	r2, [r7, #12]
 8007a4c:	687a      	ldr	r2, [r7, #4]
 8007a4e:	4413      	add	r3, r2
 8007a50:	78fa      	ldrb	r2, [r7, #3]
 8007a52:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	2b3c      	cmp	r3, #60	@ 0x3c
 8007a58:	dd12      	ble.n	8007a80 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	6818      	ldr	r0, [r3, #0]
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	f103 010c 	add.w	r1, r3, #12
 8007a64:	68fa      	ldr	r2, [r7, #12]
 8007a66:	f107 0308 	add.w	r3, r7, #8
 8007a6a:	f7ff fcaf 	bl	80073cc <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8007a6e:	68ba      	ldr	r2, [r7, #8]
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	429a      	cmp	r2, r3
 8007a74:	d101      	bne.n	8007a7a <putc_bfd+0x5a>
 8007a76:	2300      	movs	r3, #0
 8007a78:	e001      	b.n	8007a7e <putc_bfd+0x5e>
 8007a7a:	f04f 33ff 	mov.w	r3, #4294967295
 8007a7e:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	68fa      	ldr	r2, [r7, #12]
 8007a84:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	689b      	ldr	r3, [r3, #8]
 8007a8a:	1c5a      	adds	r2, r3, #1
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	609a      	str	r2, [r3, #8]
 8007a90:	e000      	b.n	8007a94 <putc_bfd+0x74>
	if (i < 0) return;
 8007a92:	bf00      	nop
}
 8007a94:	3710      	adds	r7, #16
 8007a96:	46bd      	mov	sp, r7
 8007a98:	bd80      	pop	{r7, pc}

08007a9a <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 8007a9a:	b580      	push	{r7, lr}
 8007a9c:	b084      	sub	sp, #16
 8007a9e:	af00      	add	r7, sp, #0
 8007aa0:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	685b      	ldr	r3, [r3, #4]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	db16      	blt.n	8007ad8 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	6818      	ldr	r0, [r3, #0]
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	f103 010c 	add.w	r1, r3, #12
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	685b      	ldr	r3, [r3, #4]
 8007ab8:	461a      	mov	r2, r3
 8007aba:	f107 030c 	add.w	r3, r7, #12
 8007abe:	f7ff fc85 	bl	80073cc <f_write>
 8007ac2:	4603      	mov	r3, r0
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d107      	bne.n	8007ad8 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	685b      	ldr	r3, [r3, #4]
 8007acc:	68fa      	ldr	r2, [r7, #12]
 8007ace:	4293      	cmp	r3, r2
 8007ad0:	d102      	bne.n	8007ad8 <putc_flush+0x3e>
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	689b      	ldr	r3, [r3, #8]
 8007ad6:	e001      	b.n	8007adc <putc_flush+0x42>
	return EOF;
 8007ad8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007adc:	4618      	mov	r0, r3
 8007ade:	3710      	adds	r7, #16
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	bd80      	pop	{r7, pc}

08007ae4 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 8007ae4:	b480      	push	{r7}
 8007ae6:	b083      	sub	sp, #12
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
 8007aec:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	683a      	ldr	r2, [r7, #0]
 8007af2:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2200      	movs	r2, #0
 8007af8:	605a      	str	r2, [r3, #4]
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	685a      	ldr	r2, [r3, #4]
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	609a      	str	r2, [r3, #8]
}
 8007b02:	bf00      	nop
 8007b04:	370c      	adds	r7, #12
 8007b06:	46bd      	mov	sp, r7
 8007b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0c:	4770      	bx	lr

08007b0e <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 8007b0e:	b580      	push	{r7, lr}
 8007b10:	b096      	sub	sp, #88	@ 0x58
 8007b12:	af00      	add	r7, sp, #0
 8007b14:	6078      	str	r0, [r7, #4]
 8007b16:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 8007b18:	f107 030c 	add.w	r3, r7, #12
 8007b1c:	6839      	ldr	r1, [r7, #0]
 8007b1e:	4618      	mov	r0, r3
 8007b20:	f7ff ffe0 	bl	8007ae4 <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 8007b24:	e009      	b.n	8007b3a <f_puts+0x2c>
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	1c5a      	adds	r2, r3, #1
 8007b2a:	607a      	str	r2, [r7, #4]
 8007b2c:	781a      	ldrb	r2, [r3, #0]
 8007b2e:	f107 030c 	add.w	r3, r7, #12
 8007b32:	4611      	mov	r1, r2
 8007b34:	4618      	mov	r0, r3
 8007b36:	f7ff ff73 	bl	8007a20 <putc_bfd>
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	781b      	ldrb	r3, [r3, #0]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d1f1      	bne.n	8007b26 <f_puts+0x18>
	return putc_flush(&pb);
 8007b42:	f107 030c 	add.w	r3, r7, #12
 8007b46:	4618      	mov	r0, r3
 8007b48:	f7ff ffa7 	bl	8007a9a <putc_flush>
 8007b4c:	4603      	mov	r3, r0
}
 8007b4e:	4618      	mov	r0, r3
 8007b50:	3758      	adds	r7, #88	@ 0x58
 8007b52:	46bd      	mov	sp, r7
 8007b54:	bd80      	pop	{r7, pc}
	...

08007b58 <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
 8007b58:	b40e      	push	{r1, r2, r3}
 8007b5a:	b580      	push	{r7, lr}
 8007b5c:	b0a7      	sub	sp, #156	@ 0x9c
 8007b5e:	af00      	add	r7, sp, #0
 8007b60:	6078      	str	r0, [r7, #4]
	UINT i, j, w;
	DWORD v;
	TCHAR c, d, str[32], *p;


	putc_init(&pb, fp);
 8007b62:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8007b66:	6879      	ldr	r1, [r7, #4]
 8007b68:	4618      	mov	r0, r3
 8007b6a:	f7ff ffbb 	bl	8007ae4 <putc_init>

	va_start(arp, fmt);
 8007b6e:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8007b72:	67bb      	str	r3, [r7, #120]	@ 0x78

	for (;;) {
		c = *fmt++;
 8007b74:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007b78:	1c5a      	adds	r2, r3, #1
 8007b7a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007b7e:	781b      	ldrb	r3, [r3, #0]
 8007b80:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
		if (c == 0) break;			/* End of string */
 8007b84:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	f000 81f2 	beq.w	8007f72 <f_printf+0x41a>
		if (c != '%') {				/* Non escape character */
 8007b8e:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8007b92:	2b25      	cmp	r3, #37	@ 0x25
 8007b94:	d008      	beq.n	8007ba8 <f_printf+0x50>
			putc_bfd(&pb, c);
 8007b96:	f897 2083 	ldrb.w	r2, [r7, #131]	@ 0x83
 8007b9a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8007b9e:	4611      	mov	r1, r2
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	f7ff ff3d 	bl	8007a20 <putc_bfd>
			continue;
 8007ba6:	e1e3      	b.n	8007f70 <f_printf+0x418>
		}
		w = f = 0;
 8007ba8:	2300      	movs	r3, #0
 8007baa:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 8007bae:	2300      	movs	r3, #0
 8007bb0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
		c = *fmt++;
 8007bb4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007bb8:	1c5a      	adds	r2, r3, #1
 8007bba:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007bbe:	781b      	ldrb	r3, [r3, #0]
 8007bc0:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
		if (c == '0') {				/* Flag: '0' padding */
 8007bc4:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8007bc8:	2b30      	cmp	r3, #48	@ 0x30
 8007bca:	d10b      	bne.n	8007be4 <f_printf+0x8c>
			f = 1; c = *fmt++;
 8007bcc:	2301      	movs	r3, #1
 8007bce:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 8007bd2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007bd6:	1c5a      	adds	r2, r3, #1
 8007bd8:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007bdc:	781b      	ldrb	r3, [r3, #0]
 8007bde:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
 8007be2:	e024      	b.n	8007c2e <f_printf+0xd6>
		} else {
			if (c == '-') {			/* Flag: left justified */
 8007be4:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8007be8:	2b2d      	cmp	r3, #45	@ 0x2d
 8007bea:	d120      	bne.n	8007c2e <f_printf+0xd6>
				f = 2; c = *fmt++;
 8007bec:	2302      	movs	r3, #2
 8007bee:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 8007bf2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007bf6:	1c5a      	adds	r2, r3, #1
 8007bf8:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007bfc:	781b      	ldrb	r3, [r3, #0]
 8007bfe:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
			}
		}
		while (IsDigit(c)) {		/* Precision */
 8007c02:	e014      	b.n	8007c2e <f_printf+0xd6>
			w = w * 10 + c - '0';
 8007c04:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8007c08:	4613      	mov	r3, r2
 8007c0a:	009b      	lsls	r3, r3, #2
 8007c0c:	4413      	add	r3, r2
 8007c0e:	005b      	lsls	r3, r3, #1
 8007c10:	461a      	mov	r2, r3
 8007c12:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8007c16:	4413      	add	r3, r2
 8007c18:	3b30      	subs	r3, #48	@ 0x30
 8007c1a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
			c = *fmt++;
 8007c1e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007c22:	1c5a      	adds	r2, r3, #1
 8007c24:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007c28:	781b      	ldrb	r3, [r3, #0]
 8007c2a:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
		while (IsDigit(c)) {		/* Precision */
 8007c2e:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8007c32:	2b2f      	cmp	r3, #47	@ 0x2f
 8007c34:	d903      	bls.n	8007c3e <f_printf+0xe6>
 8007c36:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8007c3a:	2b39      	cmp	r3, #57	@ 0x39
 8007c3c:	d9e2      	bls.n	8007c04 <f_printf+0xac>
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 8007c3e:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8007c42:	2b6c      	cmp	r3, #108	@ 0x6c
 8007c44:	d003      	beq.n	8007c4e <f_printf+0xf6>
 8007c46:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8007c4a:	2b4c      	cmp	r3, #76	@ 0x4c
 8007c4c:	d10d      	bne.n	8007c6a <f_printf+0x112>
			f |= 4; c = *fmt++;
 8007c4e:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8007c52:	f043 0304 	orr.w	r3, r3, #4
 8007c56:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 8007c5a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007c5e:	1c5a      	adds	r2, r3, #1
 8007c60:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007c64:	781b      	ldrb	r3, [r3, #0]
 8007c66:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
		}
		if (!c) break;
 8007c6a:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	f000 8181 	beq.w	8007f76 <f_printf+0x41e>
		d = c;
 8007c74:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8007c78:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
		if (IsLower(d)) d -= 0x20;
 8007c7c:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 8007c80:	2b60      	cmp	r3, #96	@ 0x60
 8007c82:	d908      	bls.n	8007c96 <f_printf+0x13e>
 8007c84:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 8007c88:	2b7a      	cmp	r3, #122	@ 0x7a
 8007c8a:	d804      	bhi.n	8007c96 <f_printf+0x13e>
 8007c8c:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 8007c90:	3b20      	subs	r3, #32
 8007c92:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
		switch (d) {				/* Type is... */
 8007c96:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 8007c9a:	3b42      	subs	r3, #66	@ 0x42
 8007c9c:	2b16      	cmp	r3, #22
 8007c9e:	f200 8098 	bhi.w	8007dd2 <f_printf+0x27a>
 8007ca2:	a201      	add	r2, pc, #4	@ (adr r2, 8007ca8 <f_printf+0x150>)
 8007ca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ca8:	08007db3 	.word	0x08007db3
 8007cac:	08007d9b 	.word	0x08007d9b
 8007cb0:	08007dc3 	.word	0x08007dc3
 8007cb4:	08007dd3 	.word	0x08007dd3
 8007cb8:	08007dd3 	.word	0x08007dd3
 8007cbc:	08007dd3 	.word	0x08007dd3
 8007cc0:	08007dd3 	.word	0x08007dd3
 8007cc4:	08007dd3 	.word	0x08007dd3
 8007cc8:	08007dd3 	.word	0x08007dd3
 8007ccc:	08007dd3 	.word	0x08007dd3
 8007cd0:	08007dd3 	.word	0x08007dd3
 8007cd4:	08007dd3 	.word	0x08007dd3
 8007cd8:	08007dd3 	.word	0x08007dd3
 8007cdc:	08007dbb 	.word	0x08007dbb
 8007ce0:	08007dd3 	.word	0x08007dd3
 8007ce4:	08007dd3 	.word	0x08007dd3
 8007ce8:	08007dd3 	.word	0x08007dd3
 8007cec:	08007d05 	.word	0x08007d05
 8007cf0:	08007dd3 	.word	0x08007dd3
 8007cf4:	08007dc3 	.word	0x08007dc3
 8007cf8:	08007dd3 	.word	0x08007dd3
 8007cfc:	08007dd3 	.word	0x08007dd3
 8007d00:	08007dcb 	.word	0x08007dcb
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
 8007d04:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007d06:	1d1a      	adds	r2, r3, #4
 8007d08:	67ba      	str	r2, [r7, #120]	@ 0x78
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	67fb      	str	r3, [r7, #124]	@ 0x7c
			for (j = 0; p[j]; j++) ;
 8007d0e:	2300      	movs	r3, #0
 8007d10:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007d14:	e004      	b.n	8007d20 <f_printf+0x1c8>
 8007d16:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007d1a:	3301      	adds	r3, #1
 8007d1c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007d20:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8007d22:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007d26:	4413      	add	r3, r2
 8007d28:	781b      	ldrb	r3, [r3, #0]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d1f3      	bne.n	8007d16 <f_printf+0x1be>
			if (!(f & 2)) {
 8007d2e:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8007d32:	f003 0302 	and.w	r3, r3, #2
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d11a      	bne.n	8007d70 <f_printf+0x218>
				while (j++ < w) putc_bfd(&pb, ' ');
 8007d3a:	e005      	b.n	8007d48 <f_printf+0x1f0>
 8007d3c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8007d40:	2120      	movs	r1, #32
 8007d42:	4618      	mov	r0, r3
 8007d44:	f7ff fe6c 	bl	8007a20 <putc_bfd>
 8007d48:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007d4c:	1c5a      	adds	r2, r3, #1
 8007d4e:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007d52:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8007d56:	429a      	cmp	r2, r3
 8007d58:	d8f0      	bhi.n	8007d3c <f_printf+0x1e4>
			}
			while (*p) putc_bfd(&pb, *p++);
 8007d5a:	e009      	b.n	8007d70 <f_printf+0x218>
 8007d5c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007d5e:	1c5a      	adds	r2, r3, #1
 8007d60:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007d62:	781a      	ldrb	r2, [r3, #0]
 8007d64:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8007d68:	4611      	mov	r1, r2
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	f7ff fe58 	bl	8007a20 <putc_bfd>
 8007d70:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007d72:	781b      	ldrb	r3, [r3, #0]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d1f1      	bne.n	8007d5c <f_printf+0x204>
			while (j++ < w) putc_bfd(&pb, ' ');
 8007d78:	e005      	b.n	8007d86 <f_printf+0x22e>
 8007d7a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8007d7e:	2120      	movs	r1, #32
 8007d80:	4618      	mov	r0, r3
 8007d82:	f7ff fe4d 	bl	8007a20 <putc_bfd>
 8007d86:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007d8a:	1c5a      	adds	r2, r3, #1
 8007d8c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007d90:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8007d94:	429a      	cmp	r2, r3
 8007d96:	d8f0      	bhi.n	8007d7a <f_printf+0x222>
			continue;
 8007d98:	e0ea      	b.n	8007f70 <f_printf+0x418>

		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 8007d9a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007d9c:	1d1a      	adds	r2, r3, #4
 8007d9e:	67ba      	str	r2, [r7, #120]	@ 0x78
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	b2da      	uxtb	r2, r3
 8007da4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8007da8:	4611      	mov	r1, r2
 8007daa:	4618      	mov	r0, r3
 8007dac:	f7ff fe38 	bl	8007a20 <putc_bfd>
 8007db0:	e0de      	b.n	8007f70 <f_printf+0x418>

		case 'B' :					/* Binary */
			r = 2; break;
 8007db2:	2302      	movs	r3, #2
 8007db4:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 8007db8:	e014      	b.n	8007de4 <f_printf+0x28c>

		case 'O' :					/* Octal */
			r = 8; break;
 8007dba:	2308      	movs	r3, #8
 8007dbc:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 8007dc0:	e010      	b.n	8007de4 <f_printf+0x28c>

		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
 8007dc2:	230a      	movs	r3, #10
 8007dc4:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 8007dc8:	e00c      	b.n	8007de4 <f_printf+0x28c>

		case 'X' :					/* Hexdecimal */
			r = 16; break;
 8007dca:	2310      	movs	r3, #16
 8007dcc:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 8007dd0:	e008      	b.n	8007de4 <f_printf+0x28c>

		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
 8007dd2:	f897 2083 	ldrb.w	r2, [r7, #131]	@ 0x83
 8007dd6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8007dda:	4611      	mov	r1, r2
 8007ddc:	4618      	mov	r0, r3
 8007dde:	f7ff fe1f 	bl	8007a20 <putc_bfd>
 8007de2:	e0c5      	b.n	8007f70 <f_printf+0x418>
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 8007de4:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8007de8:	f003 0304 	and.w	r3, r3, #4
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d004      	beq.n	8007dfa <f_printf+0x2a2>
 8007df0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007df2:	1d1a      	adds	r2, r3, #4
 8007df4:	67ba      	str	r2, [r7, #120]	@ 0x78
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	e00c      	b.n	8007e14 <f_printf+0x2bc>
 8007dfa:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 8007dfe:	2b44      	cmp	r3, #68	@ 0x44
 8007e00:	d104      	bne.n	8007e0c <f_printf+0x2b4>
 8007e02:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007e04:	1d1a      	adds	r2, r3, #4
 8007e06:	67ba      	str	r2, [r7, #120]	@ 0x78
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	e003      	b.n	8007e14 <f_printf+0x2bc>
 8007e0c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007e0e:	1d1a      	adds	r2, r3, #4
 8007e10:	67ba      	str	r2, [r7, #120]	@ 0x78
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
		if (d == 'D' && (v & 0x80000000)) {
 8007e18:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 8007e1c:	2b44      	cmp	r3, #68	@ 0x44
 8007e1e:	d10e      	bne.n	8007e3e <f_printf+0x2e6>
 8007e20:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	da0a      	bge.n	8007e3e <f_printf+0x2e6>
			v = 0 - v;
 8007e28:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007e2c:	425b      	negs	r3, r3
 8007e2e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
			f |= 8;
 8007e32:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8007e36:	f043 0308 	orr.w	r3, r3, #8
 8007e3a:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
		}
		i = 0;
 8007e3e:	2300      	movs	r3, #0
 8007e40:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
		do {
			d = (TCHAR)(v % r); v /= r;
 8007e44:	f897 2096 	ldrb.w	r2, [r7, #150]	@ 0x96
 8007e48:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007e4c:	fbb3 f1f2 	udiv	r1, r3, r2
 8007e50:	fb01 f202 	mul.w	r2, r1, r2
 8007e54:	1a9b      	subs	r3, r3, r2
 8007e56:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
 8007e5a:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8007e5e:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8007e62:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e66:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 8007e6a:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 8007e6e:	2b09      	cmp	r3, #9
 8007e70:	d90b      	bls.n	8007e8a <f_printf+0x332>
 8007e72:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8007e76:	2b78      	cmp	r3, #120	@ 0x78
 8007e78:	d101      	bne.n	8007e7e <f_printf+0x326>
 8007e7a:	2227      	movs	r2, #39	@ 0x27
 8007e7c:	e000      	b.n	8007e80 <f_printf+0x328>
 8007e7e:	2207      	movs	r2, #7
 8007e80:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 8007e84:	4413      	add	r3, r2
 8007e86:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
			str[i++] = d + '0';
 8007e8a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007e8e:	1c5a      	adds	r2, r3, #1
 8007e90:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8007e94:	f897 2082 	ldrb.w	r2, [r7, #130]	@ 0x82
 8007e98:	3230      	adds	r2, #48	@ 0x30
 8007e9a:	b2d2      	uxtb	r2, r2
 8007e9c:	3398      	adds	r3, #152	@ 0x98
 8007e9e:	443b      	add	r3, r7
 8007ea0:	f803 2c8c 	strb.w	r2, [r3, #-140]
		} while (v && i < sizeof str / sizeof str[0]);
 8007ea4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d003      	beq.n	8007eb4 <f_printf+0x35c>
 8007eac:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007eb0:	2b1f      	cmp	r3, #31
 8007eb2:	d9c7      	bls.n	8007e44 <f_printf+0x2ec>
		if (f & 8) str[i++] = '-';
 8007eb4:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8007eb8:	f003 0308 	and.w	r3, r3, #8
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d009      	beq.n	8007ed4 <f_printf+0x37c>
 8007ec0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007ec4:	1c5a      	adds	r2, r3, #1
 8007ec6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8007eca:	3398      	adds	r3, #152	@ 0x98
 8007ecc:	443b      	add	r3, r7
 8007ece:	222d      	movs	r2, #45	@ 0x2d
 8007ed0:	f803 2c8c 	strb.w	r2, [r3, #-140]
		j = i; d = (f & 1) ? '0' : ' ';
 8007ed4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007ed8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007edc:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8007ee0:	f003 0301 	and.w	r3, r3, #1
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d001      	beq.n	8007eec <f_printf+0x394>
 8007ee8:	2330      	movs	r3, #48	@ 0x30
 8007eea:	e000      	b.n	8007eee <f_printf+0x396>
 8007eec:	2320      	movs	r3, #32
 8007eee:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 8007ef2:	e007      	b.n	8007f04 <f_printf+0x3ac>
 8007ef4:	f897 2082 	ldrb.w	r2, [r7, #130]	@ 0x82
 8007ef8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8007efc:	4611      	mov	r1, r2
 8007efe:	4618      	mov	r0, r3
 8007f00:	f7ff fd8e 	bl	8007a20 <putc_bfd>
 8007f04:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8007f08:	f003 0302 	and.w	r3, r3, #2
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d108      	bne.n	8007f22 <f_printf+0x3ca>
 8007f10:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007f14:	1c5a      	adds	r2, r3, #1
 8007f16:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007f1a:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8007f1e:	429a      	cmp	r2, r3
 8007f20:	d8e8      	bhi.n	8007ef4 <f_printf+0x39c>
		do {
			putc_bfd(&pb, str[--i]);
 8007f22:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007f26:	3b01      	subs	r3, #1
 8007f28:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007f2c:	f107 020c 	add.w	r2, r7, #12
 8007f30:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007f34:	4413      	add	r3, r2
 8007f36:	781a      	ldrb	r2, [r3, #0]
 8007f38:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8007f3c:	4611      	mov	r1, r2
 8007f3e:	4618      	mov	r0, r3
 8007f40:	f7ff fd6e 	bl	8007a20 <putc_bfd>
		} while (i);
 8007f44:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d1ea      	bne.n	8007f22 <f_printf+0x3ca>
		while (j++ < w) putc_bfd(&pb, d);
 8007f4c:	e007      	b.n	8007f5e <f_printf+0x406>
 8007f4e:	f897 2082 	ldrb.w	r2, [r7, #130]	@ 0x82
 8007f52:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8007f56:	4611      	mov	r1, r2
 8007f58:	4618      	mov	r0, r3
 8007f5a:	f7ff fd61 	bl	8007a20 <putc_bfd>
 8007f5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007f62:	1c5a      	adds	r2, r3, #1
 8007f64:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007f68:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8007f6c:	429a      	cmp	r2, r3
 8007f6e:	d8ee      	bhi.n	8007f4e <f_printf+0x3f6>
		c = *fmt++;
 8007f70:	e600      	b.n	8007b74 <f_printf+0x1c>
		if (c == 0) break;			/* End of string */
 8007f72:	bf00      	nop
 8007f74:	e000      	b.n	8007f78 <f_printf+0x420>
		if (!c) break;
 8007f76:	bf00      	nop
	}

	va_end(arp);

	return putc_flush(&pb);
 8007f78:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	f7ff fd8c 	bl	8007a9a <putc_flush>
 8007f82:	4603      	mov	r3, r0
}
 8007f84:	4618      	mov	r0, r3
 8007f86:	379c      	adds	r7, #156	@ 0x9c
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007f8e:	b003      	add	sp, #12
 8007f90:	4770      	bx	lr
 8007f92:	bf00      	nop

08007f94 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8007f94:	b480      	push	{r7}
 8007f96:	b087      	sub	sp, #28
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	60f8      	str	r0, [r7, #12]
 8007f9c:	60b9      	str	r1, [r7, #8]
 8007f9e:	4613      	mov	r3, r2
 8007fa0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8007fa2:	2301      	movs	r3, #1
 8007fa4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8007faa:	4b1f      	ldr	r3, [pc, #124]	@ (8008028 <FATFS_LinkDriverEx+0x94>)
 8007fac:	7a5b      	ldrb	r3, [r3, #9]
 8007fae:	b2db      	uxtb	r3, r3
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d131      	bne.n	8008018 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8007fb4:	4b1c      	ldr	r3, [pc, #112]	@ (8008028 <FATFS_LinkDriverEx+0x94>)
 8007fb6:	7a5b      	ldrb	r3, [r3, #9]
 8007fb8:	b2db      	uxtb	r3, r3
 8007fba:	461a      	mov	r2, r3
 8007fbc:	4b1a      	ldr	r3, [pc, #104]	@ (8008028 <FATFS_LinkDriverEx+0x94>)
 8007fbe:	2100      	movs	r1, #0
 8007fc0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8007fc2:	4b19      	ldr	r3, [pc, #100]	@ (8008028 <FATFS_LinkDriverEx+0x94>)
 8007fc4:	7a5b      	ldrb	r3, [r3, #9]
 8007fc6:	b2db      	uxtb	r3, r3
 8007fc8:	4a17      	ldr	r2, [pc, #92]	@ (8008028 <FATFS_LinkDriverEx+0x94>)
 8007fca:	009b      	lsls	r3, r3, #2
 8007fcc:	4413      	add	r3, r2
 8007fce:	68fa      	ldr	r2, [r7, #12]
 8007fd0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8007fd2:	4b15      	ldr	r3, [pc, #84]	@ (8008028 <FATFS_LinkDriverEx+0x94>)
 8007fd4:	7a5b      	ldrb	r3, [r3, #9]
 8007fd6:	b2db      	uxtb	r3, r3
 8007fd8:	461a      	mov	r2, r3
 8007fda:	4b13      	ldr	r3, [pc, #76]	@ (8008028 <FATFS_LinkDriverEx+0x94>)
 8007fdc:	4413      	add	r3, r2
 8007fde:	79fa      	ldrb	r2, [r7, #7]
 8007fe0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8007fe2:	4b11      	ldr	r3, [pc, #68]	@ (8008028 <FATFS_LinkDriverEx+0x94>)
 8007fe4:	7a5b      	ldrb	r3, [r3, #9]
 8007fe6:	b2db      	uxtb	r3, r3
 8007fe8:	1c5a      	adds	r2, r3, #1
 8007fea:	b2d1      	uxtb	r1, r2
 8007fec:	4a0e      	ldr	r2, [pc, #56]	@ (8008028 <FATFS_LinkDriverEx+0x94>)
 8007fee:	7251      	strb	r1, [r2, #9]
 8007ff0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8007ff2:	7dbb      	ldrb	r3, [r7, #22]
 8007ff4:	3330      	adds	r3, #48	@ 0x30
 8007ff6:	b2da      	uxtb	r2, r3
 8007ff8:	68bb      	ldr	r3, [r7, #8]
 8007ffa:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8007ffc:	68bb      	ldr	r3, [r7, #8]
 8007ffe:	3301      	adds	r3, #1
 8008000:	223a      	movs	r2, #58	@ 0x3a
 8008002:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8008004:	68bb      	ldr	r3, [r7, #8]
 8008006:	3302      	adds	r3, #2
 8008008:	222f      	movs	r2, #47	@ 0x2f
 800800a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800800c:	68bb      	ldr	r3, [r7, #8]
 800800e:	3303      	adds	r3, #3
 8008010:	2200      	movs	r2, #0
 8008012:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8008014:	2300      	movs	r3, #0
 8008016:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8008018:	7dfb      	ldrb	r3, [r7, #23]
}
 800801a:	4618      	mov	r0, r3
 800801c:	371c      	adds	r7, #28
 800801e:	46bd      	mov	sp, r7
 8008020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008024:	4770      	bx	lr
 8008026:	bf00      	nop
 8008028:	20000408 	.word	0x20000408

0800802c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800802c:	b580      	push	{r7, lr}
 800802e:	b082      	sub	sp, #8
 8008030:	af00      	add	r7, sp, #0
 8008032:	6078      	str	r0, [r7, #4]
 8008034:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8008036:	2200      	movs	r2, #0
 8008038:	6839      	ldr	r1, [r7, #0]
 800803a:	6878      	ldr	r0, [r7, #4]
 800803c:	f7ff ffaa 	bl	8007f94 <FATFS_LinkDriverEx>
 8008040:	4603      	mov	r3, r0
}
 8008042:	4618      	mov	r0, r3
 8008044:	3708      	adds	r7, #8
 8008046:	46bd      	mov	sp, r7
 8008048:	bd80      	pop	{r7, pc}
	...

0800804c <IsSDCardMounted>:
 *
 * @return								- uint8_t : if mounted, return 1 else return 0
 *
 * @note								- None
 ******************************************************************************************************/
uint8_t IsSDCardMounted(void) {
 800804c:	b580      	push	{r7, lr}
 800804e:	af00      	add	r7, sp, #0
	// Check if the File system is mounted
	if (f_mount(&FatFs, "", 1) == FR_OK) {
 8008050:	2201      	movs	r2, #1
 8008052:	4906      	ldr	r1, [pc, #24]	@ (800806c <IsSDCardMounted+0x20>)
 8008054:	4806      	ldr	r0, [pc, #24]	@ (8008070 <IsSDCardMounted+0x24>)
 8008056:	f7fe ffab 	bl	8006fb0 <f_mount>
 800805a:	4603      	mov	r3, r0
 800805c:	2b00      	cmp	r3, #0
 800805e:	d101      	bne.n	8008064 <IsSDCardMounted+0x18>
		// File system mounted successfully
		return 1;
 8008060:	2301      	movs	r3, #1
 8008062:	e000      	b.n	8008066 <IsSDCardMounted+0x1a>
	} else {
		// File system not mounted
		return 0;
 8008064:	2300      	movs	r3, #0
	}
}
 8008066:	4618      	mov	r0, r3
 8008068:	bd80      	pop	{r7, pc}
 800806a:	bf00      	nop
 800806c:	08008de4 	.word	0x08008de4
 8008070:	20000414 	.word	0x20000414

08008074 <updateLogFile>:
 * @return								- None
 *
 * @note								- None
 ******************************************************************************************************/
void updateLogFile(const char* TAG, const char* InfoString)
{
 8008074:	b580      	push	{r7, lr}
 8008076:	f5ad 5d89 	sub.w	sp, sp, #4384	@ 0x1120
 800807a:	b086      	sub	sp, #24
 800807c:	af00      	add	r7, sp, #0
 800807e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008082:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8008086:	6018      	str	r0, [r3, #0]
 8008088:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800808c:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8008090:	6019      	str	r1, [r3, #0]
	FIL File;
	FRESULT FR_Status;
	char txBuff[250];
	// Open the file in append mode
	FR_Status = f_open(&File, "log.txt", FA_OPEN_ALWAYS | FA_WRITE | FA_OPEN_APPEND);
 8008092:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8008096:	3b14      	subs	r3, #20
 8008098:	2232      	movs	r2, #50	@ 0x32
 800809a:	491c      	ldr	r1, [pc, #112]	@ (800810c <updateLogFile+0x98>)
 800809c:	4618      	mov	r0, r3
 800809e:	f7fe ffcd 	bl	800703c <f_open>
 80080a2:	4603      	mov	r3, r0
 80080a4:	f507 5289 	add.w	r2, r7, #4384	@ 0x1120
 80080a8:	f102 0217 	add.w	r2, r2, #23
 80080ac:	7013      	strb	r3, [r2, #0]
	if (FR_Status != FR_OK) {
 80080ae:	f507 5389 	add.w	r3, r7, #4384	@ 0x1120
 80080b2:	f103 0317 	add.w	r3, r3, #23
 80080b6:	781b      	ldrb	r3, [r3, #0]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d120      	bne.n	80080fe <updateLogFile+0x8a>
		// Write Error handler
		return;
	}

	// Write information to the file
	sprintf(txBuff, "%s: %s\r\n", TAG, InfoString);
 80080bc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80080c0:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80080c4:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 80080c8:	f5a2 729a 	sub.w	r2, r2, #308	@ 0x134
 80080cc:	f107 0018 	add.w	r0, r7, #24
 80080d0:	3810      	subs	r0, #16
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	6812      	ldr	r2, [r2, #0]
 80080d6:	490e      	ldr	r1, [pc, #56]	@ (8008110 <updateLogFile+0x9c>)
 80080d8:	f000 f9b4 	bl	8008444 <siprintf>
	f_puts(txBuff, &File);
 80080dc:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 80080e0:	3a14      	subs	r2, #20
 80080e2:	f107 0318 	add.w	r3, r7, #24
 80080e6:	3b10      	subs	r3, #16
 80080e8:	4611      	mov	r1, r2
 80080ea:	4618      	mov	r0, r3
 80080ec:	f7ff fd0f 	bl	8007b0e <f_puts>
	f_close(&File);
 80080f0:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80080f4:	3b14      	subs	r3, #20
 80080f6:	4618      	mov	r0, r3
 80080f8:	f7ff fb7a 	bl	80077f0 <f_close>
 80080fc:	e000      	b.n	8008100 <updateLogFile+0x8c>
		return;
 80080fe:	bf00      	nop

}
 8008100:	f507 5789 	add.w	r7, r7, #4384	@ 0x1120
 8008104:	3718      	adds	r7, #24
 8008106:	46bd      	mov	sp, r7
 8008108:	bd80      	pop	{r7, pc}
 800810a:	bf00      	nop
 800810c:	08008de8 	.word	0x08008de8
 8008110:	08008df0 	.word	0x08008df0

08008114 <isFileExist>:
 *
 * @return								- bool - true/false
 *
 * @note								- None
 ******************************************************************************************************/
bool isFileExist(const char* filename) {
 8008114:	b580      	push	{r7, lr}
 8008116:	b0ca      	sub	sp, #296	@ 0x128
 8008118:	af00      	add	r7, sp, #0
 800811a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800811e:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8008122:	6018      	str	r0, [r3, #0]
	FILINFO fno; // Gathering file info, if not needed keep it NULL
	FRESULT fr;
	fr = f_stat(filename, &fno);
 8008124:	f107 020c 	add.w	r2, r7, #12
 8008128:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800812c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8008130:	4611      	mov	r1, r2
 8008132:	6818      	ldr	r0, [r3, #0]
 8008134:	f7ff fb86 	bl	8007844 <f_stat>
 8008138:	4603      	mov	r3, r0
 800813a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
	if(fr == FR_NO_FILE)
 800813e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008142:	2b04      	cmp	r3, #4
 8008144:	d101      	bne.n	800814a <isFileExist+0x36>
	{
		return false; // File not exist
 8008146:	2300      	movs	r3, #0
 8008148:	e000      	b.n	800814c <isFileExist+0x38>
	}

	return true;	// File already exist
 800814a:	2301      	movs	r3, #1
}
 800814c:	4618      	mov	r0, r3
 800814e:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8008152:	46bd      	mov	sp, r7
 8008154:	bd80      	pop	{r7, pc}
	...

08008158 <SDCardInit>:
 * @return								- bool - true/false
 *
 * @note								- None
 ******************************************************************************************************/
void SDCardInit(void)
{
 8008158:	b580      	push	{r7, lr}
 800815a:	b082      	sub	sp, #8
 800815c:	af00      	add	r7, sp, #0
	do
	{
		//----------------------------------[ Mount The SD Card ]----------------------------------------
		FR_Status = f_mount(&FatFs, "", 1);
 800815e:	2201      	movs	r2, #1
 8008160:	492c      	ldr	r1, [pc, #176]	@ (8008214 <SDCardInit+0xbc>)
 8008162:	482d      	ldr	r0, [pc, #180]	@ (8008218 <SDCardInit+0xc0>)
 8008164:	f7fe ff24 	bl	8006fb0 <f_mount>
 8008168:	4603      	mov	r3, r0
 800816a:	461a      	mov	r2, r3
 800816c:	4b2b      	ldr	r3, [pc, #172]	@ (800821c <SDCardInit+0xc4>)
 800816e:	701a      	strb	r2, [r3, #0]
		if (FR_Status != FR_OK)
 8008170:	4b2a      	ldr	r3, [pc, #168]	@ (800821c <SDCardInit+0xc4>)
 8008172:	781b      	ldrb	r3, [r3, #0]
 8008174:	2b00      	cmp	r3, #0
 8008176:	d147      	bne.n	8008208 <SDCardInit+0xb0>
		{
			// Write an Error Handler Function
			break;
		}
		//-----------------------------[ Get & Print The SD Card Size & Free Space ]--------------------
		f_getfree("", &FreeClusters, &FS_Ptr);
 8008178:	4a29      	ldr	r2, [pc, #164]	@ (8008220 <SDCardInit+0xc8>)
 800817a:	492a      	ldr	r1, [pc, #168]	@ (8008224 <SDCardInit+0xcc>)
 800817c:	4825      	ldr	r0, [pc, #148]	@ (8008214 <SDCardInit+0xbc>)
 800817e:	f7ff fb9a 	bl	80078b6 <f_getfree>
		TotalSize = (uint32_t)((FS_Ptr->n_fatent - 2) * FS_Ptr->csize * 0.5);
 8008182:	4b27      	ldr	r3, [pc, #156]	@ (8008220 <SDCardInit+0xc8>)
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	69db      	ldr	r3, [r3, #28]
 8008188:	3b02      	subs	r3, #2
 800818a:	4a25      	ldr	r2, [pc, #148]	@ (8008220 <SDCardInit+0xc8>)
 800818c:	6812      	ldr	r2, [r2, #0]
 800818e:	8952      	ldrh	r2, [r2, #10]
 8008190:	fb02 f303 	mul.w	r3, r2, r3
 8008194:	4618      	mov	r0, r3
 8008196:	f7f8 faf7 	bl	8000788 <__aeabi_ui2d>
 800819a:	f04f 0200 	mov.w	r2, #0
 800819e:	4b22      	ldr	r3, [pc, #136]	@ (8008228 <SDCardInit+0xd0>)
 80081a0:	f7f8 f886 	bl	80002b0 <__aeabi_dmul>
 80081a4:	4602      	mov	r2, r0
 80081a6:	460b      	mov	r3, r1
 80081a8:	4610      	mov	r0, r2
 80081aa:	4619      	mov	r1, r3
 80081ac:	f7f8 fb66 	bl	800087c <__aeabi_d2uiz>
 80081b0:	4603      	mov	r3, r0
 80081b2:	4a1e      	ldr	r2, [pc, #120]	@ (800822c <SDCardInit+0xd4>)
 80081b4:	6013      	str	r3, [r2, #0]
		FreeSpace = (uint32_t)(FreeClusters * FS_Ptr->csize * 0.5);
 80081b6:	4b1a      	ldr	r3, [pc, #104]	@ (8008220 <SDCardInit+0xc8>)
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	895b      	ldrh	r3, [r3, #10]
 80081bc:	461a      	mov	r2, r3
 80081be:	4b19      	ldr	r3, [pc, #100]	@ (8008224 <SDCardInit+0xcc>)
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	fb02 f303 	mul.w	r3, r2, r3
 80081c6:	4618      	mov	r0, r3
 80081c8:	f7f8 fade 	bl	8000788 <__aeabi_ui2d>
 80081cc:	f04f 0200 	mov.w	r2, #0
 80081d0:	4b15      	ldr	r3, [pc, #84]	@ (8008228 <SDCardInit+0xd0>)
 80081d2:	f7f8 f86d 	bl	80002b0 <__aeabi_dmul>
 80081d6:	4602      	mov	r2, r0
 80081d8:	460b      	mov	r3, r1
 80081da:	4610      	mov	r0, r2
 80081dc:	4619      	mov	r1, r3
 80081de:	f7f8 fb4d 	bl	800087c <__aeabi_d2uiz>
 80081e2:	4603      	mov	r3, r0
 80081e4:	4a12      	ldr	r2, [pc, #72]	@ (8008230 <SDCardInit+0xd8>)
 80081e6:	6013      	str	r3, [r2, #0]
		//----------------------------------------------------------------------------------------------
		for (int i = 0; i < 70; i++)
 80081e8:	2300      	movs	r3, #0
 80081ea:	607b      	str	r3, [r7, #4]
 80081ec:	e008      	b.n	8008200 <SDCardInit+0xa8>
		{
			iTxArr[i] = INT32_MAX;
 80081ee:	4a11      	ldr	r2, [pc, #68]	@ (8008234 <SDCardInit+0xdc>)
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80081f6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for (int i = 0; i < 70; i++)
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	3301      	adds	r3, #1
 80081fe:	607b      	str	r3, [r7, #4]
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	2b45      	cmp	r3, #69	@ 0x45
 8008204:	ddf3      	ble.n	80081ee <SDCardInit+0x96>
		}
	} while(0);
}
 8008206:	e000      	b.n	800820a <SDCardInit+0xb2>
			break;
 8008208:	bf00      	nop
}
 800820a:	bf00      	nop
 800820c:	3708      	adds	r7, #8
 800820e:	46bd      	mov	sp, r7
 8008210:	bd80      	pop	{r7, pc}
 8008212:	bf00      	nop
 8008214:	08008de4 	.word	0x08008de4
 8008218:	20000414 	.word	0x20000414
 800821c:	2000247c 	.word	0x2000247c
 8008220:	20002480 	.word	0x20002480
 8008224:	20002484 	.word	0x20002484
 8008228:	3fe00000 	.word	0x3fe00000
 800822c:	20002488 	.word	0x20002488
 8008230:	2000248c 	.word	0x2000248c
 8008234:	20002694 	.word	0x20002694

08008238 <UARTExtendedStreamCSVCreate>:
 * @return								- None
 *
 * @note								- None
 ******************************************************************************************************/
void UARTExtendedStreamCSVCreate(void)
{
 8008238:	b590      	push	{r4, r7, lr}
 800823a:	b085      	sub	sp, #20
 800823c:	af02      	add	r7, sp, #8

	strcpy(Filename, "DATA0000.csv");
 800823e:	4a45      	ldr	r2, [pc, #276]	@ (8008354 <UARTExtendedStreamCSVCreate+0x11c>)
 8008240:	4b45      	ldr	r3, [pc, #276]	@ (8008358 <UARTExtendedStreamCSVCreate+0x120>)
 8008242:	4614      	mov	r4, r2
 8008244:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008246:	c407      	stmia	r4!, {r0, r1, r2}
 8008248:	7023      	strb	r3, [r4, #0]

	for(uint16_t i = 0; i < SD_NUM_OF_FILES; i++)
 800824a:	2300      	movs	r3, #0
 800824c:	80fb      	strh	r3, [r7, #6]
 800824e:	e03c      	b.n	80082ca <UARTExtendedStreamCSVCreate+0x92>
	{
		Filename[4] = '0' + i / 1000; // Thousands digit
 8008250:	88fb      	ldrh	r3, [r7, #6]
 8008252:	4a42      	ldr	r2, [pc, #264]	@ (800835c <UARTExtendedStreamCSVCreate+0x124>)
 8008254:	fba2 2303 	umull	r2, r3, r2, r3
 8008258:	099b      	lsrs	r3, r3, #6
 800825a:	b29b      	uxth	r3, r3
 800825c:	b2db      	uxtb	r3, r3
 800825e:	3330      	adds	r3, #48	@ 0x30
 8008260:	b2da      	uxtb	r2, r3
 8008262:	4b3c      	ldr	r3, [pc, #240]	@ (8008354 <UARTExtendedStreamCSVCreate+0x11c>)
 8008264:	711a      	strb	r2, [r3, #4]
		Filename[5] = '0' + i / 100; // Hundreds digit
 8008266:	88fb      	ldrh	r3, [r7, #6]
 8008268:	4a3d      	ldr	r2, [pc, #244]	@ (8008360 <UARTExtendedStreamCSVCreate+0x128>)
 800826a:	fba2 2303 	umull	r2, r3, r2, r3
 800826e:	095b      	lsrs	r3, r3, #5
 8008270:	b29b      	uxth	r3, r3
 8008272:	b2db      	uxtb	r3, r3
 8008274:	3330      	adds	r3, #48	@ 0x30
 8008276:	b2da      	uxtb	r2, r3
 8008278:	4b36      	ldr	r3, [pc, #216]	@ (8008354 <UARTExtendedStreamCSVCreate+0x11c>)
 800827a:	715a      	strb	r2, [r3, #5]
		Filename[6] = '0' + i / 10; // Tens digit
 800827c:	88fb      	ldrh	r3, [r7, #6]
 800827e:	4a39      	ldr	r2, [pc, #228]	@ (8008364 <UARTExtendedStreamCSVCreate+0x12c>)
 8008280:	fba2 2303 	umull	r2, r3, r2, r3
 8008284:	08db      	lsrs	r3, r3, #3
 8008286:	b29b      	uxth	r3, r3
 8008288:	b2db      	uxtb	r3, r3
 800828a:	3330      	adds	r3, #48	@ 0x30
 800828c:	b2da      	uxtb	r2, r3
 800828e:	4b31      	ldr	r3, [pc, #196]	@ (8008354 <UARTExtendedStreamCSVCreate+0x11c>)
 8008290:	719a      	strb	r2, [r3, #6]
		Filename[7] = '0' + i % 10; // Ones digit
 8008292:	88fa      	ldrh	r2, [r7, #6]
 8008294:	4b33      	ldr	r3, [pc, #204]	@ (8008364 <UARTExtendedStreamCSVCreate+0x12c>)
 8008296:	fba3 1302 	umull	r1, r3, r3, r2
 800829a:	08d9      	lsrs	r1, r3, #3
 800829c:	460b      	mov	r3, r1
 800829e:	009b      	lsls	r3, r3, #2
 80082a0:	440b      	add	r3, r1
 80082a2:	005b      	lsls	r3, r3, #1
 80082a4:	1ad3      	subs	r3, r2, r3
 80082a6:	b29b      	uxth	r3, r3
 80082a8:	b2db      	uxtb	r3, r3
 80082aa:	3330      	adds	r3, #48	@ 0x30
 80082ac:	b2da      	uxtb	r2, r3
 80082ae:	4b29      	ldr	r3, [pc, #164]	@ (8008354 <UARTExtendedStreamCSVCreate+0x11c>)
 80082b0:	71da      	strb	r2, [r3, #7]
		// Check if the file already exists
		if(!isFileExist(Filename))
 80082b2:	4828      	ldr	r0, [pc, #160]	@ (8008354 <UARTExtendedStreamCSVCreate+0x11c>)
 80082b4:	f7ff ff2e 	bl	8008114 <isFileExist>
 80082b8:	4603      	mov	r3, r0
 80082ba:	f083 0301 	eor.w	r3, r3, #1
 80082be:	b2db      	uxtb	r3, r3
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d108      	bne.n	80082d6 <UARTExtendedStreamCSVCreate+0x9e>
	for(uint16_t i = 0; i < SD_NUM_OF_FILES; i++)
 80082c4:	88fb      	ldrh	r3, [r7, #6]
 80082c6:	3301      	adds	r3, #1
 80082c8:	80fb      	strh	r3, [r7, #6]
 80082ca:	88fb      	ldrh	r3, [r7, #6]
 80082cc:	f242 720f 	movw	r2, #9999	@ 0x270f
 80082d0:	4293      	cmp	r3, r2
 80082d2:	d9bd      	bls.n	8008250 <UARTExtendedStreamCSVCreate+0x18>
 80082d4:	e000      	b.n	80082d8 <UARTExtendedStreamCSVCreate+0xa0>
		{
			break;
 80082d6:	bf00      	nop
		}
	}
	// Check if the SD card is mounted
	if (IsSDCardMounted())
 80082d8:	f7ff feb8 	bl	800804c <IsSDCardMounted>
 80082dc:	4603      	mov	r3, r0
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d034      	beq.n	800834c <UARTExtendedStreamCSVCreate+0x114>
	{
		// Open the CSV File
		if (f_open(&File, Filename, FA_OPEN_ALWAYS | FA_WRITE) == FR_OK)
 80082e2:	2212      	movs	r2, #18
 80082e4:	491b      	ldr	r1, [pc, #108]	@ (8008354 <UARTExtendedStreamCSVCreate+0x11c>)
 80082e6:	4820      	ldr	r0, [pc, #128]	@ (8008368 <UARTExtendedStreamCSVCreate+0x130>)
 80082e8:	f7fe fea8 	bl	800703c <f_open>
 80082ec:	4603      	mov	r3, r0
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d11a      	bne.n	8008328 <UARTExtendedStreamCSVCreate+0xf0>
		{
			for(uint8_t i = 0; i < SD_NUM_COLUMNS; i++)
 80082f2:	2300      	movs	r3, #0
 80082f4:	717b      	strb	r3, [r7, #5]
 80082f6:	e009      	b.n	800830c <UARTExtendedStreamCSVCreate+0xd4>
			{
				f_printf(&File, "field%d,", i+1);
 80082f8:	797b      	ldrb	r3, [r7, #5]
 80082fa:	3301      	adds	r3, #1
 80082fc:	461a      	mov	r2, r3
 80082fe:	491b      	ldr	r1, [pc, #108]	@ (800836c <UARTExtendedStreamCSVCreate+0x134>)
 8008300:	4819      	ldr	r0, [pc, #100]	@ (8008368 <UARTExtendedStreamCSVCreate+0x130>)
 8008302:	f7ff fc29 	bl	8007b58 <f_printf>
			for(uint8_t i = 0; i < SD_NUM_COLUMNS; i++)
 8008306:	797b      	ldrb	r3, [r7, #5]
 8008308:	3301      	adds	r3, #1
 800830a:	717b      	strb	r3, [r7, #5]
 800830c:	797b      	ldrb	r3, [r7, #5]
 800830e:	2b3f      	cmp	r3, #63	@ 0x3f
 8008310:	d9f2      	bls.n	80082f8 <UARTExtendedStreamCSVCreate+0xc0>

			}

			// Write a new line character
			f_puts("rowcount", &File);
 8008312:	4915      	ldr	r1, [pc, #84]	@ (8008368 <UARTExtendedStreamCSVCreate+0x130>)
 8008314:	4816      	ldr	r0, [pc, #88]	@ (8008370 <UARTExtendedStreamCSVCreate+0x138>)
 8008316:	f7ff fbfa 	bl	8007b0e <f_puts>
			f_puts("\n", &File);
 800831a:	4913      	ldr	r1, [pc, #76]	@ (8008368 <UARTExtendedStreamCSVCreate+0x130>)
 800831c:	4815      	ldr	r0, [pc, #84]	@ (8008374 <UARTExtendedStreamCSVCreate+0x13c>)
 800831e:	f7ff fbf6 	bl	8007b0e <f_puts>

			// Close the file
			f_close(&File);
 8008322:	4811      	ldr	r0, [pc, #68]	@ (8008368 <UARTExtendedStreamCSVCreate+0x130>)
 8008324:	f7ff fa64 	bl	80077f0 <f_close>
		}

		//--------------------------[ Open An Existing log.txt File, Update Its Content]-----------------------
		sprintf(TxBuffer, "The %s has been created.Total size and free space are %ld and %ld, respectively", Filename, TotalSize, FreeSpace);
 8008328:	4b13      	ldr	r3, [pc, #76]	@ (8008378 <UARTExtendedStreamCSVCreate+0x140>)
 800832a:	681a      	ldr	r2, [r3, #0]
 800832c:	4b13      	ldr	r3, [pc, #76]	@ (800837c <UARTExtendedStreamCSVCreate+0x144>)
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	9300      	str	r3, [sp, #0]
 8008332:	4613      	mov	r3, r2
 8008334:	4a07      	ldr	r2, [pc, #28]	@ (8008354 <UARTExtendedStreamCSVCreate+0x11c>)
 8008336:	4912      	ldr	r1, [pc, #72]	@ (8008380 <UARTExtendedStreamCSVCreate+0x148>)
 8008338:	4812      	ldr	r0, [pc, #72]	@ (8008384 <UARTExtendedStreamCSVCreate+0x14c>)
 800833a:	f000 f883 	bl	8008444 <siprintf>
		updateLogFile("INFO", TxBuffer);
 800833e:	4911      	ldr	r1, [pc, #68]	@ (8008384 <UARTExtendedStreamCSVCreate+0x14c>)
 8008340:	4811      	ldr	r0, [pc, #68]	@ (8008388 <UARTExtendedStreamCSVCreate+0x150>)
 8008342:	f7ff fe97 	bl	8008074 <updateLogFile>
		sdInitialized = true;
 8008346:	4b11      	ldr	r3, [pc, #68]	@ (800838c <UARTExtendedStreamCSVCreate+0x154>)
 8008348:	2201      	movs	r2, #1
 800834a:	701a      	strb	r2, [r3, #0]
	}
}
 800834c:	bf00      	nop
 800834e:	370c      	adds	r7, #12
 8008350:	46bd      	mov	sp, r7
 8008352:	bd90      	pop	{r4, r7, pc}
 8008354:	20002684 	.word	0x20002684
 8008358:	08008dfc 	.word	0x08008dfc
 800835c:	10624dd3 	.word	0x10624dd3
 8008360:	51eb851f 	.word	0x51eb851f
 8008364:	cccccccd 	.word	0xcccccccd
 8008368:	2000144c 	.word	0x2000144c
 800836c:	08008e0c 	.word	0x08008e0c
 8008370:	08008e18 	.word	0x08008e18
 8008374:	08008e24 	.word	0x08008e24
 8008378:	20002488 	.word	0x20002488
 800837c:	2000248c 	.word	0x2000248c
 8008380:	08008e28 	.word	0x08008e28
 8008384:	20002490 	.word	0x20002490
 8008388:	08008e78 	.word	0x08008e78
 800838c:	200027ac 	.word	0x200027ac

08008390 <UARTSDExtendedStreamWrite>:
 *
 * @return								- None
 *
 * @note								- None
 ******************************************************************************************************/
void UARTSDExtendedStreamWrite(void) {
 8008390:	b580      	push	{r7, lr}
 8008392:	b082      	sub	sp, #8
 8008394:	af00      	add	r7, sp, #0

	// Define local variables
	static uint32_t sd_count = 0;

	// Check if the SD card is mounted
	if (sdInitialized  == true)
 8008396:	4b23      	ldr	r3, [pc, #140]	@ (8008424 <UARTSDExtendedStreamWrite+0x94>)
 8008398:	781b      	ldrb	r3, [r3, #0]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d03e      	beq.n	800841c <UARTSDExtendedStreamWrite+0x8c>
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, SET);
 800839e:	2201      	movs	r2, #1
 80083a0:	2120      	movs	r1, #32
 80083a2:	4821      	ldr	r0, [pc, #132]	@ (8008428 <UARTSDExtendedStreamWrite+0x98>)
 80083a4:	f7f9 fb46 	bl	8001a34 <HAL_GPIO_WritePin>

		// Open the CSV File
		if (f_open(&File, Filename, FA_OPEN_APPEND | FA_WRITE) == FR_OK)
 80083a8:	2232      	movs	r2, #50	@ 0x32
 80083aa:	4920      	ldr	r1, [pc, #128]	@ (800842c <UARTSDExtendedStreamWrite+0x9c>)
 80083ac:	4820      	ldr	r0, [pc, #128]	@ (8008430 <UARTSDExtendedStreamWrite+0xa0>)
 80083ae:	f7fe fe45 	bl	800703c <f_open>
 80083b2:	4603      	mov	r3, r0
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d121      	bne.n	80083fc <UARTSDExtendedStreamWrite+0x6c>
		{


			// Write the count to the File
			for(uint8_t i = 0; i < SD_NUM_COLUMNS; i++)
 80083b8:	2300      	movs	r3, #0
 80083ba:	71fb      	strb	r3, [r7, #7]
 80083bc:	e00b      	b.n	80083d6 <UARTSDExtendedStreamWrite+0x46>
			{

				f_printf(&File, "%ld,", iTxArr[i]);
 80083be:	79fb      	ldrb	r3, [r7, #7]
 80083c0:	4a1c      	ldr	r2, [pc, #112]	@ (8008434 <UARTSDExtendedStreamWrite+0xa4>)
 80083c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80083c6:	461a      	mov	r2, r3
 80083c8:	491b      	ldr	r1, [pc, #108]	@ (8008438 <UARTSDExtendedStreamWrite+0xa8>)
 80083ca:	4819      	ldr	r0, [pc, #100]	@ (8008430 <UARTSDExtendedStreamWrite+0xa0>)
 80083cc:	f7ff fbc4 	bl	8007b58 <f_printf>
			for(uint8_t i = 0; i < SD_NUM_COLUMNS; i++)
 80083d0:	79fb      	ldrb	r3, [r7, #7]
 80083d2:	3301      	adds	r3, #1
 80083d4:	71fb      	strb	r3, [r7, #7]
 80083d6:	79fb      	ldrb	r3, [r7, #7]
 80083d8:	2b3f      	cmp	r3, #63	@ 0x3f
 80083da:	d9f0      	bls.n	80083be <UARTSDExtendedStreamWrite+0x2e>

			}

			f_printf(&File, "%ld\n", sd_count + 1);
 80083dc:	4b17      	ldr	r3, [pc, #92]	@ (800843c <UARTSDExtendedStreamWrite+0xac>)
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	3301      	adds	r3, #1
 80083e2:	461a      	mov	r2, r3
 80083e4:	4916      	ldr	r1, [pc, #88]	@ (8008440 <UARTSDExtendedStreamWrite+0xb0>)
 80083e6:	4812      	ldr	r0, [pc, #72]	@ (8008430 <UARTSDExtendedStreamWrite+0xa0>)
 80083e8:	f7ff fbb6 	bl	8007b58 <f_printf>


			sd_count++;
 80083ec:	4b13      	ldr	r3, [pc, #76]	@ (800843c <UARTSDExtendedStreamWrite+0xac>)
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	3301      	adds	r3, #1
 80083f2:	4a12      	ldr	r2, [pc, #72]	@ (800843c <UARTSDExtendedStreamWrite+0xac>)
 80083f4:	6013      	str	r3, [r2, #0]

			// Close the File
			f_close(&File);
 80083f6:	480e      	ldr	r0, [pc, #56]	@ (8008430 <UARTSDExtendedStreamWrite+0xa0>)
 80083f8:	f7ff f9fa 	bl	80077f0 <f_close>

		}

		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, RESET);
 80083fc:	2200      	movs	r2, #0
 80083fe:	2120      	movs	r1, #32
 8008400:	4809      	ldr	r0, [pc, #36]	@ (8008428 <UARTSDExtendedStreamWrite+0x98>)
 8008402:	f7f9 fb17 	bl	8001a34 <HAL_GPIO_WritePin>

		if(sd_count == SD_FILE_MAX_ROW)
 8008406:	4b0d      	ldr	r3, [pc, #52]	@ (800843c <UARTSDExtendedStreamWrite+0xac>)
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800840e:	4293      	cmp	r3, r2
 8008410:	d104      	bne.n	800841c <UARTSDExtendedStreamWrite+0x8c>
		{
			UARTExtendedStreamCSVCreate();
 8008412:	f7ff ff11 	bl	8008238 <UARTExtendedStreamCSVCreate>
			sd_count = 0;
 8008416:	4b09      	ldr	r3, [pc, #36]	@ (800843c <UARTSDExtendedStreamWrite+0xac>)
 8008418:	2200      	movs	r2, #0
 800841a:	601a      	str	r2, [r3, #0]
		}

	}

}
 800841c:	bf00      	nop
 800841e:	3708      	adds	r7, #8
 8008420:	46bd      	mov	sp, r7
 8008422:	bd80      	pop	{r7, pc}
 8008424:	200027ac 	.word	0x200027ac
 8008428:	40020000 	.word	0x40020000
 800842c:	20002684 	.word	0x20002684
 8008430:	2000144c 	.word	0x2000144c
 8008434:	20002694 	.word	0x20002694
 8008438:	08008e80 	.word	0x08008e80
 800843c:	200027b0 	.word	0x200027b0
 8008440:	08008e88 	.word	0x08008e88

08008444 <siprintf>:
 8008444:	b40e      	push	{r1, r2, r3}
 8008446:	b500      	push	{lr}
 8008448:	b09c      	sub	sp, #112	@ 0x70
 800844a:	ab1d      	add	r3, sp, #116	@ 0x74
 800844c:	9002      	str	r0, [sp, #8]
 800844e:	9006      	str	r0, [sp, #24]
 8008450:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008454:	4809      	ldr	r0, [pc, #36]	@ (800847c <siprintf+0x38>)
 8008456:	9107      	str	r1, [sp, #28]
 8008458:	9104      	str	r1, [sp, #16]
 800845a:	4909      	ldr	r1, [pc, #36]	@ (8008480 <siprintf+0x3c>)
 800845c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008460:	9105      	str	r1, [sp, #20]
 8008462:	6800      	ldr	r0, [r0, #0]
 8008464:	9301      	str	r3, [sp, #4]
 8008466:	a902      	add	r1, sp, #8
 8008468:	f000 f994 	bl	8008794 <_svfiprintf_r>
 800846c:	9b02      	ldr	r3, [sp, #8]
 800846e:	2200      	movs	r2, #0
 8008470:	701a      	strb	r2, [r3, #0]
 8008472:	b01c      	add	sp, #112	@ 0x70
 8008474:	f85d eb04 	ldr.w	lr, [sp], #4
 8008478:	b003      	add	sp, #12
 800847a:	4770      	bx	lr
 800847c:	20000024 	.word	0x20000024
 8008480:	ffff0208 	.word	0xffff0208

08008484 <memset>:
 8008484:	4402      	add	r2, r0
 8008486:	4603      	mov	r3, r0
 8008488:	4293      	cmp	r3, r2
 800848a:	d100      	bne.n	800848e <memset+0xa>
 800848c:	4770      	bx	lr
 800848e:	f803 1b01 	strb.w	r1, [r3], #1
 8008492:	e7f9      	b.n	8008488 <memset+0x4>

08008494 <__errno>:
 8008494:	4b01      	ldr	r3, [pc, #4]	@ (800849c <__errno+0x8>)
 8008496:	6818      	ldr	r0, [r3, #0]
 8008498:	4770      	bx	lr
 800849a:	bf00      	nop
 800849c:	20000024 	.word	0x20000024

080084a0 <__libc_init_array>:
 80084a0:	b570      	push	{r4, r5, r6, lr}
 80084a2:	4d0d      	ldr	r5, [pc, #52]	@ (80084d8 <__libc_init_array+0x38>)
 80084a4:	4c0d      	ldr	r4, [pc, #52]	@ (80084dc <__libc_init_array+0x3c>)
 80084a6:	1b64      	subs	r4, r4, r5
 80084a8:	10a4      	asrs	r4, r4, #2
 80084aa:	2600      	movs	r6, #0
 80084ac:	42a6      	cmp	r6, r4
 80084ae:	d109      	bne.n	80084c4 <__libc_init_array+0x24>
 80084b0:	4d0b      	ldr	r5, [pc, #44]	@ (80084e0 <__libc_init_array+0x40>)
 80084b2:	4c0c      	ldr	r4, [pc, #48]	@ (80084e4 <__libc_init_array+0x44>)
 80084b4:	f000 fc66 	bl	8008d84 <_init>
 80084b8:	1b64      	subs	r4, r4, r5
 80084ba:	10a4      	asrs	r4, r4, #2
 80084bc:	2600      	movs	r6, #0
 80084be:	42a6      	cmp	r6, r4
 80084c0:	d105      	bne.n	80084ce <__libc_init_array+0x2e>
 80084c2:	bd70      	pop	{r4, r5, r6, pc}
 80084c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80084c8:	4798      	blx	r3
 80084ca:	3601      	adds	r6, #1
 80084cc:	e7ee      	b.n	80084ac <__libc_init_array+0xc>
 80084ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80084d2:	4798      	blx	r3
 80084d4:	3601      	adds	r6, #1
 80084d6:	e7f2      	b.n	80084be <__libc_init_array+0x1e>
 80084d8:	08009320 	.word	0x08009320
 80084dc:	08009320 	.word	0x08009320
 80084e0:	08009320 	.word	0x08009320
 80084e4:	08009324 	.word	0x08009324

080084e8 <__retarget_lock_acquire_recursive>:
 80084e8:	4770      	bx	lr

080084ea <__retarget_lock_release_recursive>:
 80084ea:	4770      	bx	lr

080084ec <_free_r>:
 80084ec:	b538      	push	{r3, r4, r5, lr}
 80084ee:	4605      	mov	r5, r0
 80084f0:	2900      	cmp	r1, #0
 80084f2:	d041      	beq.n	8008578 <_free_r+0x8c>
 80084f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80084f8:	1f0c      	subs	r4, r1, #4
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	bfb8      	it	lt
 80084fe:	18e4      	addlt	r4, r4, r3
 8008500:	f000 f8e0 	bl	80086c4 <__malloc_lock>
 8008504:	4a1d      	ldr	r2, [pc, #116]	@ (800857c <_free_r+0x90>)
 8008506:	6813      	ldr	r3, [r2, #0]
 8008508:	b933      	cbnz	r3, 8008518 <_free_r+0x2c>
 800850a:	6063      	str	r3, [r4, #4]
 800850c:	6014      	str	r4, [r2, #0]
 800850e:	4628      	mov	r0, r5
 8008510:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008514:	f000 b8dc 	b.w	80086d0 <__malloc_unlock>
 8008518:	42a3      	cmp	r3, r4
 800851a:	d908      	bls.n	800852e <_free_r+0x42>
 800851c:	6820      	ldr	r0, [r4, #0]
 800851e:	1821      	adds	r1, r4, r0
 8008520:	428b      	cmp	r3, r1
 8008522:	bf01      	itttt	eq
 8008524:	6819      	ldreq	r1, [r3, #0]
 8008526:	685b      	ldreq	r3, [r3, #4]
 8008528:	1809      	addeq	r1, r1, r0
 800852a:	6021      	streq	r1, [r4, #0]
 800852c:	e7ed      	b.n	800850a <_free_r+0x1e>
 800852e:	461a      	mov	r2, r3
 8008530:	685b      	ldr	r3, [r3, #4]
 8008532:	b10b      	cbz	r3, 8008538 <_free_r+0x4c>
 8008534:	42a3      	cmp	r3, r4
 8008536:	d9fa      	bls.n	800852e <_free_r+0x42>
 8008538:	6811      	ldr	r1, [r2, #0]
 800853a:	1850      	adds	r0, r2, r1
 800853c:	42a0      	cmp	r0, r4
 800853e:	d10b      	bne.n	8008558 <_free_r+0x6c>
 8008540:	6820      	ldr	r0, [r4, #0]
 8008542:	4401      	add	r1, r0
 8008544:	1850      	adds	r0, r2, r1
 8008546:	4283      	cmp	r3, r0
 8008548:	6011      	str	r1, [r2, #0]
 800854a:	d1e0      	bne.n	800850e <_free_r+0x22>
 800854c:	6818      	ldr	r0, [r3, #0]
 800854e:	685b      	ldr	r3, [r3, #4]
 8008550:	6053      	str	r3, [r2, #4]
 8008552:	4408      	add	r0, r1
 8008554:	6010      	str	r0, [r2, #0]
 8008556:	e7da      	b.n	800850e <_free_r+0x22>
 8008558:	d902      	bls.n	8008560 <_free_r+0x74>
 800855a:	230c      	movs	r3, #12
 800855c:	602b      	str	r3, [r5, #0]
 800855e:	e7d6      	b.n	800850e <_free_r+0x22>
 8008560:	6820      	ldr	r0, [r4, #0]
 8008562:	1821      	adds	r1, r4, r0
 8008564:	428b      	cmp	r3, r1
 8008566:	bf04      	itt	eq
 8008568:	6819      	ldreq	r1, [r3, #0]
 800856a:	685b      	ldreq	r3, [r3, #4]
 800856c:	6063      	str	r3, [r4, #4]
 800856e:	bf04      	itt	eq
 8008570:	1809      	addeq	r1, r1, r0
 8008572:	6021      	streq	r1, [r4, #0]
 8008574:	6054      	str	r4, [r2, #4]
 8008576:	e7ca      	b.n	800850e <_free_r+0x22>
 8008578:	bd38      	pop	{r3, r4, r5, pc}
 800857a:	bf00      	nop
 800857c:	200028f8 	.word	0x200028f8

08008580 <sbrk_aligned>:
 8008580:	b570      	push	{r4, r5, r6, lr}
 8008582:	4e0f      	ldr	r6, [pc, #60]	@ (80085c0 <sbrk_aligned+0x40>)
 8008584:	460c      	mov	r4, r1
 8008586:	6831      	ldr	r1, [r6, #0]
 8008588:	4605      	mov	r5, r0
 800858a:	b911      	cbnz	r1, 8008592 <sbrk_aligned+0x12>
 800858c:	f000 fba6 	bl	8008cdc <_sbrk_r>
 8008590:	6030      	str	r0, [r6, #0]
 8008592:	4621      	mov	r1, r4
 8008594:	4628      	mov	r0, r5
 8008596:	f000 fba1 	bl	8008cdc <_sbrk_r>
 800859a:	1c43      	adds	r3, r0, #1
 800859c:	d103      	bne.n	80085a6 <sbrk_aligned+0x26>
 800859e:	f04f 34ff 	mov.w	r4, #4294967295
 80085a2:	4620      	mov	r0, r4
 80085a4:	bd70      	pop	{r4, r5, r6, pc}
 80085a6:	1cc4      	adds	r4, r0, #3
 80085a8:	f024 0403 	bic.w	r4, r4, #3
 80085ac:	42a0      	cmp	r0, r4
 80085ae:	d0f8      	beq.n	80085a2 <sbrk_aligned+0x22>
 80085b0:	1a21      	subs	r1, r4, r0
 80085b2:	4628      	mov	r0, r5
 80085b4:	f000 fb92 	bl	8008cdc <_sbrk_r>
 80085b8:	3001      	adds	r0, #1
 80085ba:	d1f2      	bne.n	80085a2 <sbrk_aligned+0x22>
 80085bc:	e7ef      	b.n	800859e <sbrk_aligned+0x1e>
 80085be:	bf00      	nop
 80085c0:	200028f4 	.word	0x200028f4

080085c4 <_malloc_r>:
 80085c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80085c8:	1ccd      	adds	r5, r1, #3
 80085ca:	f025 0503 	bic.w	r5, r5, #3
 80085ce:	3508      	adds	r5, #8
 80085d0:	2d0c      	cmp	r5, #12
 80085d2:	bf38      	it	cc
 80085d4:	250c      	movcc	r5, #12
 80085d6:	2d00      	cmp	r5, #0
 80085d8:	4606      	mov	r6, r0
 80085da:	db01      	blt.n	80085e0 <_malloc_r+0x1c>
 80085dc:	42a9      	cmp	r1, r5
 80085de:	d904      	bls.n	80085ea <_malloc_r+0x26>
 80085e0:	230c      	movs	r3, #12
 80085e2:	6033      	str	r3, [r6, #0]
 80085e4:	2000      	movs	r0, #0
 80085e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80085ea:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80086c0 <_malloc_r+0xfc>
 80085ee:	f000 f869 	bl	80086c4 <__malloc_lock>
 80085f2:	f8d8 3000 	ldr.w	r3, [r8]
 80085f6:	461c      	mov	r4, r3
 80085f8:	bb44      	cbnz	r4, 800864c <_malloc_r+0x88>
 80085fa:	4629      	mov	r1, r5
 80085fc:	4630      	mov	r0, r6
 80085fe:	f7ff ffbf 	bl	8008580 <sbrk_aligned>
 8008602:	1c43      	adds	r3, r0, #1
 8008604:	4604      	mov	r4, r0
 8008606:	d158      	bne.n	80086ba <_malloc_r+0xf6>
 8008608:	f8d8 4000 	ldr.w	r4, [r8]
 800860c:	4627      	mov	r7, r4
 800860e:	2f00      	cmp	r7, #0
 8008610:	d143      	bne.n	800869a <_malloc_r+0xd6>
 8008612:	2c00      	cmp	r4, #0
 8008614:	d04b      	beq.n	80086ae <_malloc_r+0xea>
 8008616:	6823      	ldr	r3, [r4, #0]
 8008618:	4639      	mov	r1, r7
 800861a:	4630      	mov	r0, r6
 800861c:	eb04 0903 	add.w	r9, r4, r3
 8008620:	f000 fb5c 	bl	8008cdc <_sbrk_r>
 8008624:	4581      	cmp	r9, r0
 8008626:	d142      	bne.n	80086ae <_malloc_r+0xea>
 8008628:	6821      	ldr	r1, [r4, #0]
 800862a:	1a6d      	subs	r5, r5, r1
 800862c:	4629      	mov	r1, r5
 800862e:	4630      	mov	r0, r6
 8008630:	f7ff ffa6 	bl	8008580 <sbrk_aligned>
 8008634:	3001      	adds	r0, #1
 8008636:	d03a      	beq.n	80086ae <_malloc_r+0xea>
 8008638:	6823      	ldr	r3, [r4, #0]
 800863a:	442b      	add	r3, r5
 800863c:	6023      	str	r3, [r4, #0]
 800863e:	f8d8 3000 	ldr.w	r3, [r8]
 8008642:	685a      	ldr	r2, [r3, #4]
 8008644:	bb62      	cbnz	r2, 80086a0 <_malloc_r+0xdc>
 8008646:	f8c8 7000 	str.w	r7, [r8]
 800864a:	e00f      	b.n	800866c <_malloc_r+0xa8>
 800864c:	6822      	ldr	r2, [r4, #0]
 800864e:	1b52      	subs	r2, r2, r5
 8008650:	d420      	bmi.n	8008694 <_malloc_r+0xd0>
 8008652:	2a0b      	cmp	r2, #11
 8008654:	d917      	bls.n	8008686 <_malloc_r+0xc2>
 8008656:	1961      	adds	r1, r4, r5
 8008658:	42a3      	cmp	r3, r4
 800865a:	6025      	str	r5, [r4, #0]
 800865c:	bf18      	it	ne
 800865e:	6059      	strne	r1, [r3, #4]
 8008660:	6863      	ldr	r3, [r4, #4]
 8008662:	bf08      	it	eq
 8008664:	f8c8 1000 	streq.w	r1, [r8]
 8008668:	5162      	str	r2, [r4, r5]
 800866a:	604b      	str	r3, [r1, #4]
 800866c:	4630      	mov	r0, r6
 800866e:	f000 f82f 	bl	80086d0 <__malloc_unlock>
 8008672:	f104 000b 	add.w	r0, r4, #11
 8008676:	1d23      	adds	r3, r4, #4
 8008678:	f020 0007 	bic.w	r0, r0, #7
 800867c:	1ac2      	subs	r2, r0, r3
 800867e:	bf1c      	itt	ne
 8008680:	1a1b      	subne	r3, r3, r0
 8008682:	50a3      	strne	r3, [r4, r2]
 8008684:	e7af      	b.n	80085e6 <_malloc_r+0x22>
 8008686:	6862      	ldr	r2, [r4, #4]
 8008688:	42a3      	cmp	r3, r4
 800868a:	bf0c      	ite	eq
 800868c:	f8c8 2000 	streq.w	r2, [r8]
 8008690:	605a      	strne	r2, [r3, #4]
 8008692:	e7eb      	b.n	800866c <_malloc_r+0xa8>
 8008694:	4623      	mov	r3, r4
 8008696:	6864      	ldr	r4, [r4, #4]
 8008698:	e7ae      	b.n	80085f8 <_malloc_r+0x34>
 800869a:	463c      	mov	r4, r7
 800869c:	687f      	ldr	r7, [r7, #4]
 800869e:	e7b6      	b.n	800860e <_malloc_r+0x4a>
 80086a0:	461a      	mov	r2, r3
 80086a2:	685b      	ldr	r3, [r3, #4]
 80086a4:	42a3      	cmp	r3, r4
 80086a6:	d1fb      	bne.n	80086a0 <_malloc_r+0xdc>
 80086a8:	2300      	movs	r3, #0
 80086aa:	6053      	str	r3, [r2, #4]
 80086ac:	e7de      	b.n	800866c <_malloc_r+0xa8>
 80086ae:	230c      	movs	r3, #12
 80086b0:	6033      	str	r3, [r6, #0]
 80086b2:	4630      	mov	r0, r6
 80086b4:	f000 f80c 	bl	80086d0 <__malloc_unlock>
 80086b8:	e794      	b.n	80085e4 <_malloc_r+0x20>
 80086ba:	6005      	str	r5, [r0, #0]
 80086bc:	e7d6      	b.n	800866c <_malloc_r+0xa8>
 80086be:	bf00      	nop
 80086c0:	200028f8 	.word	0x200028f8

080086c4 <__malloc_lock>:
 80086c4:	4801      	ldr	r0, [pc, #4]	@ (80086cc <__malloc_lock+0x8>)
 80086c6:	f7ff bf0f 	b.w	80084e8 <__retarget_lock_acquire_recursive>
 80086ca:	bf00      	nop
 80086cc:	200028f0 	.word	0x200028f0

080086d0 <__malloc_unlock>:
 80086d0:	4801      	ldr	r0, [pc, #4]	@ (80086d8 <__malloc_unlock+0x8>)
 80086d2:	f7ff bf0a 	b.w	80084ea <__retarget_lock_release_recursive>
 80086d6:	bf00      	nop
 80086d8:	200028f0 	.word	0x200028f0

080086dc <__ssputs_r>:
 80086dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80086e0:	688e      	ldr	r6, [r1, #8]
 80086e2:	461f      	mov	r7, r3
 80086e4:	42be      	cmp	r6, r7
 80086e6:	680b      	ldr	r3, [r1, #0]
 80086e8:	4682      	mov	sl, r0
 80086ea:	460c      	mov	r4, r1
 80086ec:	4690      	mov	r8, r2
 80086ee:	d82d      	bhi.n	800874c <__ssputs_r+0x70>
 80086f0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80086f4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80086f8:	d026      	beq.n	8008748 <__ssputs_r+0x6c>
 80086fa:	6965      	ldr	r5, [r4, #20]
 80086fc:	6909      	ldr	r1, [r1, #16]
 80086fe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008702:	eba3 0901 	sub.w	r9, r3, r1
 8008706:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800870a:	1c7b      	adds	r3, r7, #1
 800870c:	444b      	add	r3, r9
 800870e:	106d      	asrs	r5, r5, #1
 8008710:	429d      	cmp	r5, r3
 8008712:	bf38      	it	cc
 8008714:	461d      	movcc	r5, r3
 8008716:	0553      	lsls	r3, r2, #21
 8008718:	d527      	bpl.n	800876a <__ssputs_r+0x8e>
 800871a:	4629      	mov	r1, r5
 800871c:	f7ff ff52 	bl	80085c4 <_malloc_r>
 8008720:	4606      	mov	r6, r0
 8008722:	b360      	cbz	r0, 800877e <__ssputs_r+0xa2>
 8008724:	6921      	ldr	r1, [r4, #16]
 8008726:	464a      	mov	r2, r9
 8008728:	f000 fae8 	bl	8008cfc <memcpy>
 800872c:	89a3      	ldrh	r3, [r4, #12]
 800872e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008732:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008736:	81a3      	strh	r3, [r4, #12]
 8008738:	6126      	str	r6, [r4, #16]
 800873a:	6165      	str	r5, [r4, #20]
 800873c:	444e      	add	r6, r9
 800873e:	eba5 0509 	sub.w	r5, r5, r9
 8008742:	6026      	str	r6, [r4, #0]
 8008744:	60a5      	str	r5, [r4, #8]
 8008746:	463e      	mov	r6, r7
 8008748:	42be      	cmp	r6, r7
 800874a:	d900      	bls.n	800874e <__ssputs_r+0x72>
 800874c:	463e      	mov	r6, r7
 800874e:	6820      	ldr	r0, [r4, #0]
 8008750:	4632      	mov	r2, r6
 8008752:	4641      	mov	r1, r8
 8008754:	f000 faa8 	bl	8008ca8 <memmove>
 8008758:	68a3      	ldr	r3, [r4, #8]
 800875a:	1b9b      	subs	r3, r3, r6
 800875c:	60a3      	str	r3, [r4, #8]
 800875e:	6823      	ldr	r3, [r4, #0]
 8008760:	4433      	add	r3, r6
 8008762:	6023      	str	r3, [r4, #0]
 8008764:	2000      	movs	r0, #0
 8008766:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800876a:	462a      	mov	r2, r5
 800876c:	f000 fad4 	bl	8008d18 <_realloc_r>
 8008770:	4606      	mov	r6, r0
 8008772:	2800      	cmp	r0, #0
 8008774:	d1e0      	bne.n	8008738 <__ssputs_r+0x5c>
 8008776:	6921      	ldr	r1, [r4, #16]
 8008778:	4650      	mov	r0, sl
 800877a:	f7ff feb7 	bl	80084ec <_free_r>
 800877e:	230c      	movs	r3, #12
 8008780:	f8ca 3000 	str.w	r3, [sl]
 8008784:	89a3      	ldrh	r3, [r4, #12]
 8008786:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800878a:	81a3      	strh	r3, [r4, #12]
 800878c:	f04f 30ff 	mov.w	r0, #4294967295
 8008790:	e7e9      	b.n	8008766 <__ssputs_r+0x8a>
	...

08008794 <_svfiprintf_r>:
 8008794:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008798:	4698      	mov	r8, r3
 800879a:	898b      	ldrh	r3, [r1, #12]
 800879c:	061b      	lsls	r3, r3, #24
 800879e:	b09d      	sub	sp, #116	@ 0x74
 80087a0:	4607      	mov	r7, r0
 80087a2:	460d      	mov	r5, r1
 80087a4:	4614      	mov	r4, r2
 80087a6:	d510      	bpl.n	80087ca <_svfiprintf_r+0x36>
 80087a8:	690b      	ldr	r3, [r1, #16]
 80087aa:	b973      	cbnz	r3, 80087ca <_svfiprintf_r+0x36>
 80087ac:	2140      	movs	r1, #64	@ 0x40
 80087ae:	f7ff ff09 	bl	80085c4 <_malloc_r>
 80087b2:	6028      	str	r0, [r5, #0]
 80087b4:	6128      	str	r0, [r5, #16]
 80087b6:	b930      	cbnz	r0, 80087c6 <_svfiprintf_r+0x32>
 80087b8:	230c      	movs	r3, #12
 80087ba:	603b      	str	r3, [r7, #0]
 80087bc:	f04f 30ff 	mov.w	r0, #4294967295
 80087c0:	b01d      	add	sp, #116	@ 0x74
 80087c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087c6:	2340      	movs	r3, #64	@ 0x40
 80087c8:	616b      	str	r3, [r5, #20]
 80087ca:	2300      	movs	r3, #0
 80087cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80087ce:	2320      	movs	r3, #32
 80087d0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80087d4:	f8cd 800c 	str.w	r8, [sp, #12]
 80087d8:	2330      	movs	r3, #48	@ 0x30
 80087da:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008978 <_svfiprintf_r+0x1e4>
 80087de:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80087e2:	f04f 0901 	mov.w	r9, #1
 80087e6:	4623      	mov	r3, r4
 80087e8:	469a      	mov	sl, r3
 80087ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80087ee:	b10a      	cbz	r2, 80087f4 <_svfiprintf_r+0x60>
 80087f0:	2a25      	cmp	r2, #37	@ 0x25
 80087f2:	d1f9      	bne.n	80087e8 <_svfiprintf_r+0x54>
 80087f4:	ebba 0b04 	subs.w	fp, sl, r4
 80087f8:	d00b      	beq.n	8008812 <_svfiprintf_r+0x7e>
 80087fa:	465b      	mov	r3, fp
 80087fc:	4622      	mov	r2, r4
 80087fe:	4629      	mov	r1, r5
 8008800:	4638      	mov	r0, r7
 8008802:	f7ff ff6b 	bl	80086dc <__ssputs_r>
 8008806:	3001      	adds	r0, #1
 8008808:	f000 80a7 	beq.w	800895a <_svfiprintf_r+0x1c6>
 800880c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800880e:	445a      	add	r2, fp
 8008810:	9209      	str	r2, [sp, #36]	@ 0x24
 8008812:	f89a 3000 	ldrb.w	r3, [sl]
 8008816:	2b00      	cmp	r3, #0
 8008818:	f000 809f 	beq.w	800895a <_svfiprintf_r+0x1c6>
 800881c:	2300      	movs	r3, #0
 800881e:	f04f 32ff 	mov.w	r2, #4294967295
 8008822:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008826:	f10a 0a01 	add.w	sl, sl, #1
 800882a:	9304      	str	r3, [sp, #16]
 800882c:	9307      	str	r3, [sp, #28]
 800882e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008832:	931a      	str	r3, [sp, #104]	@ 0x68
 8008834:	4654      	mov	r4, sl
 8008836:	2205      	movs	r2, #5
 8008838:	f814 1b01 	ldrb.w	r1, [r4], #1
 800883c:	484e      	ldr	r0, [pc, #312]	@ (8008978 <_svfiprintf_r+0x1e4>)
 800883e:	f7f7 fce7 	bl	8000210 <memchr>
 8008842:	9a04      	ldr	r2, [sp, #16]
 8008844:	b9d8      	cbnz	r0, 800887e <_svfiprintf_r+0xea>
 8008846:	06d0      	lsls	r0, r2, #27
 8008848:	bf44      	itt	mi
 800884a:	2320      	movmi	r3, #32
 800884c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008850:	0711      	lsls	r1, r2, #28
 8008852:	bf44      	itt	mi
 8008854:	232b      	movmi	r3, #43	@ 0x2b
 8008856:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800885a:	f89a 3000 	ldrb.w	r3, [sl]
 800885e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008860:	d015      	beq.n	800888e <_svfiprintf_r+0xfa>
 8008862:	9a07      	ldr	r2, [sp, #28]
 8008864:	4654      	mov	r4, sl
 8008866:	2000      	movs	r0, #0
 8008868:	f04f 0c0a 	mov.w	ip, #10
 800886c:	4621      	mov	r1, r4
 800886e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008872:	3b30      	subs	r3, #48	@ 0x30
 8008874:	2b09      	cmp	r3, #9
 8008876:	d94b      	bls.n	8008910 <_svfiprintf_r+0x17c>
 8008878:	b1b0      	cbz	r0, 80088a8 <_svfiprintf_r+0x114>
 800887a:	9207      	str	r2, [sp, #28]
 800887c:	e014      	b.n	80088a8 <_svfiprintf_r+0x114>
 800887e:	eba0 0308 	sub.w	r3, r0, r8
 8008882:	fa09 f303 	lsl.w	r3, r9, r3
 8008886:	4313      	orrs	r3, r2
 8008888:	9304      	str	r3, [sp, #16]
 800888a:	46a2      	mov	sl, r4
 800888c:	e7d2      	b.n	8008834 <_svfiprintf_r+0xa0>
 800888e:	9b03      	ldr	r3, [sp, #12]
 8008890:	1d19      	adds	r1, r3, #4
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	9103      	str	r1, [sp, #12]
 8008896:	2b00      	cmp	r3, #0
 8008898:	bfbb      	ittet	lt
 800889a:	425b      	neglt	r3, r3
 800889c:	f042 0202 	orrlt.w	r2, r2, #2
 80088a0:	9307      	strge	r3, [sp, #28]
 80088a2:	9307      	strlt	r3, [sp, #28]
 80088a4:	bfb8      	it	lt
 80088a6:	9204      	strlt	r2, [sp, #16]
 80088a8:	7823      	ldrb	r3, [r4, #0]
 80088aa:	2b2e      	cmp	r3, #46	@ 0x2e
 80088ac:	d10a      	bne.n	80088c4 <_svfiprintf_r+0x130>
 80088ae:	7863      	ldrb	r3, [r4, #1]
 80088b0:	2b2a      	cmp	r3, #42	@ 0x2a
 80088b2:	d132      	bne.n	800891a <_svfiprintf_r+0x186>
 80088b4:	9b03      	ldr	r3, [sp, #12]
 80088b6:	1d1a      	adds	r2, r3, #4
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	9203      	str	r2, [sp, #12]
 80088bc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80088c0:	3402      	adds	r4, #2
 80088c2:	9305      	str	r3, [sp, #20]
 80088c4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008988 <_svfiprintf_r+0x1f4>
 80088c8:	7821      	ldrb	r1, [r4, #0]
 80088ca:	2203      	movs	r2, #3
 80088cc:	4650      	mov	r0, sl
 80088ce:	f7f7 fc9f 	bl	8000210 <memchr>
 80088d2:	b138      	cbz	r0, 80088e4 <_svfiprintf_r+0x150>
 80088d4:	9b04      	ldr	r3, [sp, #16]
 80088d6:	eba0 000a 	sub.w	r0, r0, sl
 80088da:	2240      	movs	r2, #64	@ 0x40
 80088dc:	4082      	lsls	r2, r0
 80088de:	4313      	orrs	r3, r2
 80088e0:	3401      	adds	r4, #1
 80088e2:	9304      	str	r3, [sp, #16]
 80088e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088e8:	4824      	ldr	r0, [pc, #144]	@ (800897c <_svfiprintf_r+0x1e8>)
 80088ea:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80088ee:	2206      	movs	r2, #6
 80088f0:	f7f7 fc8e 	bl	8000210 <memchr>
 80088f4:	2800      	cmp	r0, #0
 80088f6:	d036      	beq.n	8008966 <_svfiprintf_r+0x1d2>
 80088f8:	4b21      	ldr	r3, [pc, #132]	@ (8008980 <_svfiprintf_r+0x1ec>)
 80088fa:	bb1b      	cbnz	r3, 8008944 <_svfiprintf_r+0x1b0>
 80088fc:	9b03      	ldr	r3, [sp, #12]
 80088fe:	3307      	adds	r3, #7
 8008900:	f023 0307 	bic.w	r3, r3, #7
 8008904:	3308      	adds	r3, #8
 8008906:	9303      	str	r3, [sp, #12]
 8008908:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800890a:	4433      	add	r3, r6
 800890c:	9309      	str	r3, [sp, #36]	@ 0x24
 800890e:	e76a      	b.n	80087e6 <_svfiprintf_r+0x52>
 8008910:	fb0c 3202 	mla	r2, ip, r2, r3
 8008914:	460c      	mov	r4, r1
 8008916:	2001      	movs	r0, #1
 8008918:	e7a8      	b.n	800886c <_svfiprintf_r+0xd8>
 800891a:	2300      	movs	r3, #0
 800891c:	3401      	adds	r4, #1
 800891e:	9305      	str	r3, [sp, #20]
 8008920:	4619      	mov	r1, r3
 8008922:	f04f 0c0a 	mov.w	ip, #10
 8008926:	4620      	mov	r0, r4
 8008928:	f810 2b01 	ldrb.w	r2, [r0], #1
 800892c:	3a30      	subs	r2, #48	@ 0x30
 800892e:	2a09      	cmp	r2, #9
 8008930:	d903      	bls.n	800893a <_svfiprintf_r+0x1a6>
 8008932:	2b00      	cmp	r3, #0
 8008934:	d0c6      	beq.n	80088c4 <_svfiprintf_r+0x130>
 8008936:	9105      	str	r1, [sp, #20]
 8008938:	e7c4      	b.n	80088c4 <_svfiprintf_r+0x130>
 800893a:	fb0c 2101 	mla	r1, ip, r1, r2
 800893e:	4604      	mov	r4, r0
 8008940:	2301      	movs	r3, #1
 8008942:	e7f0      	b.n	8008926 <_svfiprintf_r+0x192>
 8008944:	ab03      	add	r3, sp, #12
 8008946:	9300      	str	r3, [sp, #0]
 8008948:	462a      	mov	r2, r5
 800894a:	4b0e      	ldr	r3, [pc, #56]	@ (8008984 <_svfiprintf_r+0x1f0>)
 800894c:	a904      	add	r1, sp, #16
 800894e:	4638      	mov	r0, r7
 8008950:	f3af 8000 	nop.w
 8008954:	1c42      	adds	r2, r0, #1
 8008956:	4606      	mov	r6, r0
 8008958:	d1d6      	bne.n	8008908 <_svfiprintf_r+0x174>
 800895a:	89ab      	ldrh	r3, [r5, #12]
 800895c:	065b      	lsls	r3, r3, #25
 800895e:	f53f af2d 	bmi.w	80087bc <_svfiprintf_r+0x28>
 8008962:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008964:	e72c      	b.n	80087c0 <_svfiprintf_r+0x2c>
 8008966:	ab03      	add	r3, sp, #12
 8008968:	9300      	str	r3, [sp, #0]
 800896a:	462a      	mov	r2, r5
 800896c:	4b05      	ldr	r3, [pc, #20]	@ (8008984 <_svfiprintf_r+0x1f0>)
 800896e:	a904      	add	r1, sp, #16
 8008970:	4638      	mov	r0, r7
 8008972:	f000 f879 	bl	8008a68 <_printf_i>
 8008976:	e7ed      	b.n	8008954 <_svfiprintf_r+0x1c0>
 8008978:	080092e5 	.word	0x080092e5
 800897c:	080092ef 	.word	0x080092ef
 8008980:	00000000 	.word	0x00000000
 8008984:	080086dd 	.word	0x080086dd
 8008988:	080092eb 	.word	0x080092eb

0800898c <_printf_common>:
 800898c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008990:	4616      	mov	r6, r2
 8008992:	4698      	mov	r8, r3
 8008994:	688a      	ldr	r2, [r1, #8]
 8008996:	690b      	ldr	r3, [r1, #16]
 8008998:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800899c:	4293      	cmp	r3, r2
 800899e:	bfb8      	it	lt
 80089a0:	4613      	movlt	r3, r2
 80089a2:	6033      	str	r3, [r6, #0]
 80089a4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80089a8:	4607      	mov	r7, r0
 80089aa:	460c      	mov	r4, r1
 80089ac:	b10a      	cbz	r2, 80089b2 <_printf_common+0x26>
 80089ae:	3301      	adds	r3, #1
 80089b0:	6033      	str	r3, [r6, #0]
 80089b2:	6823      	ldr	r3, [r4, #0]
 80089b4:	0699      	lsls	r1, r3, #26
 80089b6:	bf42      	ittt	mi
 80089b8:	6833      	ldrmi	r3, [r6, #0]
 80089ba:	3302      	addmi	r3, #2
 80089bc:	6033      	strmi	r3, [r6, #0]
 80089be:	6825      	ldr	r5, [r4, #0]
 80089c0:	f015 0506 	ands.w	r5, r5, #6
 80089c4:	d106      	bne.n	80089d4 <_printf_common+0x48>
 80089c6:	f104 0a19 	add.w	sl, r4, #25
 80089ca:	68e3      	ldr	r3, [r4, #12]
 80089cc:	6832      	ldr	r2, [r6, #0]
 80089ce:	1a9b      	subs	r3, r3, r2
 80089d0:	42ab      	cmp	r3, r5
 80089d2:	dc26      	bgt.n	8008a22 <_printf_common+0x96>
 80089d4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80089d8:	6822      	ldr	r2, [r4, #0]
 80089da:	3b00      	subs	r3, #0
 80089dc:	bf18      	it	ne
 80089de:	2301      	movne	r3, #1
 80089e0:	0692      	lsls	r2, r2, #26
 80089e2:	d42b      	bmi.n	8008a3c <_printf_common+0xb0>
 80089e4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80089e8:	4641      	mov	r1, r8
 80089ea:	4638      	mov	r0, r7
 80089ec:	47c8      	blx	r9
 80089ee:	3001      	adds	r0, #1
 80089f0:	d01e      	beq.n	8008a30 <_printf_common+0xa4>
 80089f2:	6823      	ldr	r3, [r4, #0]
 80089f4:	6922      	ldr	r2, [r4, #16]
 80089f6:	f003 0306 	and.w	r3, r3, #6
 80089fa:	2b04      	cmp	r3, #4
 80089fc:	bf02      	ittt	eq
 80089fe:	68e5      	ldreq	r5, [r4, #12]
 8008a00:	6833      	ldreq	r3, [r6, #0]
 8008a02:	1aed      	subeq	r5, r5, r3
 8008a04:	68a3      	ldr	r3, [r4, #8]
 8008a06:	bf0c      	ite	eq
 8008a08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008a0c:	2500      	movne	r5, #0
 8008a0e:	4293      	cmp	r3, r2
 8008a10:	bfc4      	itt	gt
 8008a12:	1a9b      	subgt	r3, r3, r2
 8008a14:	18ed      	addgt	r5, r5, r3
 8008a16:	2600      	movs	r6, #0
 8008a18:	341a      	adds	r4, #26
 8008a1a:	42b5      	cmp	r5, r6
 8008a1c:	d11a      	bne.n	8008a54 <_printf_common+0xc8>
 8008a1e:	2000      	movs	r0, #0
 8008a20:	e008      	b.n	8008a34 <_printf_common+0xa8>
 8008a22:	2301      	movs	r3, #1
 8008a24:	4652      	mov	r2, sl
 8008a26:	4641      	mov	r1, r8
 8008a28:	4638      	mov	r0, r7
 8008a2a:	47c8      	blx	r9
 8008a2c:	3001      	adds	r0, #1
 8008a2e:	d103      	bne.n	8008a38 <_printf_common+0xac>
 8008a30:	f04f 30ff 	mov.w	r0, #4294967295
 8008a34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a38:	3501      	adds	r5, #1
 8008a3a:	e7c6      	b.n	80089ca <_printf_common+0x3e>
 8008a3c:	18e1      	adds	r1, r4, r3
 8008a3e:	1c5a      	adds	r2, r3, #1
 8008a40:	2030      	movs	r0, #48	@ 0x30
 8008a42:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008a46:	4422      	add	r2, r4
 8008a48:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008a4c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008a50:	3302      	adds	r3, #2
 8008a52:	e7c7      	b.n	80089e4 <_printf_common+0x58>
 8008a54:	2301      	movs	r3, #1
 8008a56:	4622      	mov	r2, r4
 8008a58:	4641      	mov	r1, r8
 8008a5a:	4638      	mov	r0, r7
 8008a5c:	47c8      	blx	r9
 8008a5e:	3001      	adds	r0, #1
 8008a60:	d0e6      	beq.n	8008a30 <_printf_common+0xa4>
 8008a62:	3601      	adds	r6, #1
 8008a64:	e7d9      	b.n	8008a1a <_printf_common+0x8e>
	...

08008a68 <_printf_i>:
 8008a68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008a6c:	7e0f      	ldrb	r7, [r1, #24]
 8008a6e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008a70:	2f78      	cmp	r7, #120	@ 0x78
 8008a72:	4691      	mov	r9, r2
 8008a74:	4680      	mov	r8, r0
 8008a76:	460c      	mov	r4, r1
 8008a78:	469a      	mov	sl, r3
 8008a7a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008a7e:	d807      	bhi.n	8008a90 <_printf_i+0x28>
 8008a80:	2f62      	cmp	r7, #98	@ 0x62
 8008a82:	d80a      	bhi.n	8008a9a <_printf_i+0x32>
 8008a84:	2f00      	cmp	r7, #0
 8008a86:	f000 80d2 	beq.w	8008c2e <_printf_i+0x1c6>
 8008a8a:	2f58      	cmp	r7, #88	@ 0x58
 8008a8c:	f000 80b9 	beq.w	8008c02 <_printf_i+0x19a>
 8008a90:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008a94:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008a98:	e03a      	b.n	8008b10 <_printf_i+0xa8>
 8008a9a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008a9e:	2b15      	cmp	r3, #21
 8008aa0:	d8f6      	bhi.n	8008a90 <_printf_i+0x28>
 8008aa2:	a101      	add	r1, pc, #4	@ (adr r1, 8008aa8 <_printf_i+0x40>)
 8008aa4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008aa8:	08008b01 	.word	0x08008b01
 8008aac:	08008b15 	.word	0x08008b15
 8008ab0:	08008a91 	.word	0x08008a91
 8008ab4:	08008a91 	.word	0x08008a91
 8008ab8:	08008a91 	.word	0x08008a91
 8008abc:	08008a91 	.word	0x08008a91
 8008ac0:	08008b15 	.word	0x08008b15
 8008ac4:	08008a91 	.word	0x08008a91
 8008ac8:	08008a91 	.word	0x08008a91
 8008acc:	08008a91 	.word	0x08008a91
 8008ad0:	08008a91 	.word	0x08008a91
 8008ad4:	08008c15 	.word	0x08008c15
 8008ad8:	08008b3f 	.word	0x08008b3f
 8008adc:	08008bcf 	.word	0x08008bcf
 8008ae0:	08008a91 	.word	0x08008a91
 8008ae4:	08008a91 	.word	0x08008a91
 8008ae8:	08008c37 	.word	0x08008c37
 8008aec:	08008a91 	.word	0x08008a91
 8008af0:	08008b3f 	.word	0x08008b3f
 8008af4:	08008a91 	.word	0x08008a91
 8008af8:	08008a91 	.word	0x08008a91
 8008afc:	08008bd7 	.word	0x08008bd7
 8008b00:	6833      	ldr	r3, [r6, #0]
 8008b02:	1d1a      	adds	r2, r3, #4
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	6032      	str	r2, [r6, #0]
 8008b08:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008b0c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008b10:	2301      	movs	r3, #1
 8008b12:	e09d      	b.n	8008c50 <_printf_i+0x1e8>
 8008b14:	6833      	ldr	r3, [r6, #0]
 8008b16:	6820      	ldr	r0, [r4, #0]
 8008b18:	1d19      	adds	r1, r3, #4
 8008b1a:	6031      	str	r1, [r6, #0]
 8008b1c:	0606      	lsls	r6, r0, #24
 8008b1e:	d501      	bpl.n	8008b24 <_printf_i+0xbc>
 8008b20:	681d      	ldr	r5, [r3, #0]
 8008b22:	e003      	b.n	8008b2c <_printf_i+0xc4>
 8008b24:	0645      	lsls	r5, r0, #25
 8008b26:	d5fb      	bpl.n	8008b20 <_printf_i+0xb8>
 8008b28:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008b2c:	2d00      	cmp	r5, #0
 8008b2e:	da03      	bge.n	8008b38 <_printf_i+0xd0>
 8008b30:	232d      	movs	r3, #45	@ 0x2d
 8008b32:	426d      	negs	r5, r5
 8008b34:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008b38:	4859      	ldr	r0, [pc, #356]	@ (8008ca0 <_printf_i+0x238>)
 8008b3a:	230a      	movs	r3, #10
 8008b3c:	e011      	b.n	8008b62 <_printf_i+0xfa>
 8008b3e:	6821      	ldr	r1, [r4, #0]
 8008b40:	6833      	ldr	r3, [r6, #0]
 8008b42:	0608      	lsls	r0, r1, #24
 8008b44:	f853 5b04 	ldr.w	r5, [r3], #4
 8008b48:	d402      	bmi.n	8008b50 <_printf_i+0xe8>
 8008b4a:	0649      	lsls	r1, r1, #25
 8008b4c:	bf48      	it	mi
 8008b4e:	b2ad      	uxthmi	r5, r5
 8008b50:	2f6f      	cmp	r7, #111	@ 0x6f
 8008b52:	4853      	ldr	r0, [pc, #332]	@ (8008ca0 <_printf_i+0x238>)
 8008b54:	6033      	str	r3, [r6, #0]
 8008b56:	bf14      	ite	ne
 8008b58:	230a      	movne	r3, #10
 8008b5a:	2308      	moveq	r3, #8
 8008b5c:	2100      	movs	r1, #0
 8008b5e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008b62:	6866      	ldr	r6, [r4, #4]
 8008b64:	60a6      	str	r6, [r4, #8]
 8008b66:	2e00      	cmp	r6, #0
 8008b68:	bfa2      	ittt	ge
 8008b6a:	6821      	ldrge	r1, [r4, #0]
 8008b6c:	f021 0104 	bicge.w	r1, r1, #4
 8008b70:	6021      	strge	r1, [r4, #0]
 8008b72:	b90d      	cbnz	r5, 8008b78 <_printf_i+0x110>
 8008b74:	2e00      	cmp	r6, #0
 8008b76:	d04b      	beq.n	8008c10 <_printf_i+0x1a8>
 8008b78:	4616      	mov	r6, r2
 8008b7a:	fbb5 f1f3 	udiv	r1, r5, r3
 8008b7e:	fb03 5711 	mls	r7, r3, r1, r5
 8008b82:	5dc7      	ldrb	r7, [r0, r7]
 8008b84:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008b88:	462f      	mov	r7, r5
 8008b8a:	42bb      	cmp	r3, r7
 8008b8c:	460d      	mov	r5, r1
 8008b8e:	d9f4      	bls.n	8008b7a <_printf_i+0x112>
 8008b90:	2b08      	cmp	r3, #8
 8008b92:	d10b      	bne.n	8008bac <_printf_i+0x144>
 8008b94:	6823      	ldr	r3, [r4, #0]
 8008b96:	07df      	lsls	r7, r3, #31
 8008b98:	d508      	bpl.n	8008bac <_printf_i+0x144>
 8008b9a:	6923      	ldr	r3, [r4, #16]
 8008b9c:	6861      	ldr	r1, [r4, #4]
 8008b9e:	4299      	cmp	r1, r3
 8008ba0:	bfde      	ittt	le
 8008ba2:	2330      	movle	r3, #48	@ 0x30
 8008ba4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008ba8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008bac:	1b92      	subs	r2, r2, r6
 8008bae:	6122      	str	r2, [r4, #16]
 8008bb0:	f8cd a000 	str.w	sl, [sp]
 8008bb4:	464b      	mov	r3, r9
 8008bb6:	aa03      	add	r2, sp, #12
 8008bb8:	4621      	mov	r1, r4
 8008bba:	4640      	mov	r0, r8
 8008bbc:	f7ff fee6 	bl	800898c <_printf_common>
 8008bc0:	3001      	adds	r0, #1
 8008bc2:	d14a      	bne.n	8008c5a <_printf_i+0x1f2>
 8008bc4:	f04f 30ff 	mov.w	r0, #4294967295
 8008bc8:	b004      	add	sp, #16
 8008bca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bce:	6823      	ldr	r3, [r4, #0]
 8008bd0:	f043 0320 	orr.w	r3, r3, #32
 8008bd4:	6023      	str	r3, [r4, #0]
 8008bd6:	4833      	ldr	r0, [pc, #204]	@ (8008ca4 <_printf_i+0x23c>)
 8008bd8:	2778      	movs	r7, #120	@ 0x78
 8008bda:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008bde:	6823      	ldr	r3, [r4, #0]
 8008be0:	6831      	ldr	r1, [r6, #0]
 8008be2:	061f      	lsls	r7, r3, #24
 8008be4:	f851 5b04 	ldr.w	r5, [r1], #4
 8008be8:	d402      	bmi.n	8008bf0 <_printf_i+0x188>
 8008bea:	065f      	lsls	r7, r3, #25
 8008bec:	bf48      	it	mi
 8008bee:	b2ad      	uxthmi	r5, r5
 8008bf0:	6031      	str	r1, [r6, #0]
 8008bf2:	07d9      	lsls	r1, r3, #31
 8008bf4:	bf44      	itt	mi
 8008bf6:	f043 0320 	orrmi.w	r3, r3, #32
 8008bfa:	6023      	strmi	r3, [r4, #0]
 8008bfc:	b11d      	cbz	r5, 8008c06 <_printf_i+0x19e>
 8008bfe:	2310      	movs	r3, #16
 8008c00:	e7ac      	b.n	8008b5c <_printf_i+0xf4>
 8008c02:	4827      	ldr	r0, [pc, #156]	@ (8008ca0 <_printf_i+0x238>)
 8008c04:	e7e9      	b.n	8008bda <_printf_i+0x172>
 8008c06:	6823      	ldr	r3, [r4, #0]
 8008c08:	f023 0320 	bic.w	r3, r3, #32
 8008c0c:	6023      	str	r3, [r4, #0]
 8008c0e:	e7f6      	b.n	8008bfe <_printf_i+0x196>
 8008c10:	4616      	mov	r6, r2
 8008c12:	e7bd      	b.n	8008b90 <_printf_i+0x128>
 8008c14:	6833      	ldr	r3, [r6, #0]
 8008c16:	6825      	ldr	r5, [r4, #0]
 8008c18:	6961      	ldr	r1, [r4, #20]
 8008c1a:	1d18      	adds	r0, r3, #4
 8008c1c:	6030      	str	r0, [r6, #0]
 8008c1e:	062e      	lsls	r6, r5, #24
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	d501      	bpl.n	8008c28 <_printf_i+0x1c0>
 8008c24:	6019      	str	r1, [r3, #0]
 8008c26:	e002      	b.n	8008c2e <_printf_i+0x1c6>
 8008c28:	0668      	lsls	r0, r5, #25
 8008c2a:	d5fb      	bpl.n	8008c24 <_printf_i+0x1bc>
 8008c2c:	8019      	strh	r1, [r3, #0]
 8008c2e:	2300      	movs	r3, #0
 8008c30:	6123      	str	r3, [r4, #16]
 8008c32:	4616      	mov	r6, r2
 8008c34:	e7bc      	b.n	8008bb0 <_printf_i+0x148>
 8008c36:	6833      	ldr	r3, [r6, #0]
 8008c38:	1d1a      	adds	r2, r3, #4
 8008c3a:	6032      	str	r2, [r6, #0]
 8008c3c:	681e      	ldr	r6, [r3, #0]
 8008c3e:	6862      	ldr	r2, [r4, #4]
 8008c40:	2100      	movs	r1, #0
 8008c42:	4630      	mov	r0, r6
 8008c44:	f7f7 fae4 	bl	8000210 <memchr>
 8008c48:	b108      	cbz	r0, 8008c4e <_printf_i+0x1e6>
 8008c4a:	1b80      	subs	r0, r0, r6
 8008c4c:	6060      	str	r0, [r4, #4]
 8008c4e:	6863      	ldr	r3, [r4, #4]
 8008c50:	6123      	str	r3, [r4, #16]
 8008c52:	2300      	movs	r3, #0
 8008c54:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008c58:	e7aa      	b.n	8008bb0 <_printf_i+0x148>
 8008c5a:	6923      	ldr	r3, [r4, #16]
 8008c5c:	4632      	mov	r2, r6
 8008c5e:	4649      	mov	r1, r9
 8008c60:	4640      	mov	r0, r8
 8008c62:	47d0      	blx	sl
 8008c64:	3001      	adds	r0, #1
 8008c66:	d0ad      	beq.n	8008bc4 <_printf_i+0x15c>
 8008c68:	6823      	ldr	r3, [r4, #0]
 8008c6a:	079b      	lsls	r3, r3, #30
 8008c6c:	d413      	bmi.n	8008c96 <_printf_i+0x22e>
 8008c6e:	68e0      	ldr	r0, [r4, #12]
 8008c70:	9b03      	ldr	r3, [sp, #12]
 8008c72:	4298      	cmp	r0, r3
 8008c74:	bfb8      	it	lt
 8008c76:	4618      	movlt	r0, r3
 8008c78:	e7a6      	b.n	8008bc8 <_printf_i+0x160>
 8008c7a:	2301      	movs	r3, #1
 8008c7c:	4632      	mov	r2, r6
 8008c7e:	4649      	mov	r1, r9
 8008c80:	4640      	mov	r0, r8
 8008c82:	47d0      	blx	sl
 8008c84:	3001      	adds	r0, #1
 8008c86:	d09d      	beq.n	8008bc4 <_printf_i+0x15c>
 8008c88:	3501      	adds	r5, #1
 8008c8a:	68e3      	ldr	r3, [r4, #12]
 8008c8c:	9903      	ldr	r1, [sp, #12]
 8008c8e:	1a5b      	subs	r3, r3, r1
 8008c90:	42ab      	cmp	r3, r5
 8008c92:	dcf2      	bgt.n	8008c7a <_printf_i+0x212>
 8008c94:	e7eb      	b.n	8008c6e <_printf_i+0x206>
 8008c96:	2500      	movs	r5, #0
 8008c98:	f104 0619 	add.w	r6, r4, #25
 8008c9c:	e7f5      	b.n	8008c8a <_printf_i+0x222>
 8008c9e:	bf00      	nop
 8008ca0:	080092f6 	.word	0x080092f6
 8008ca4:	08009307 	.word	0x08009307

08008ca8 <memmove>:
 8008ca8:	4288      	cmp	r0, r1
 8008caa:	b510      	push	{r4, lr}
 8008cac:	eb01 0402 	add.w	r4, r1, r2
 8008cb0:	d902      	bls.n	8008cb8 <memmove+0x10>
 8008cb2:	4284      	cmp	r4, r0
 8008cb4:	4623      	mov	r3, r4
 8008cb6:	d807      	bhi.n	8008cc8 <memmove+0x20>
 8008cb8:	1e43      	subs	r3, r0, #1
 8008cba:	42a1      	cmp	r1, r4
 8008cbc:	d008      	beq.n	8008cd0 <memmove+0x28>
 8008cbe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008cc2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008cc6:	e7f8      	b.n	8008cba <memmove+0x12>
 8008cc8:	4402      	add	r2, r0
 8008cca:	4601      	mov	r1, r0
 8008ccc:	428a      	cmp	r2, r1
 8008cce:	d100      	bne.n	8008cd2 <memmove+0x2a>
 8008cd0:	bd10      	pop	{r4, pc}
 8008cd2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008cd6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008cda:	e7f7      	b.n	8008ccc <memmove+0x24>

08008cdc <_sbrk_r>:
 8008cdc:	b538      	push	{r3, r4, r5, lr}
 8008cde:	4d06      	ldr	r5, [pc, #24]	@ (8008cf8 <_sbrk_r+0x1c>)
 8008ce0:	2300      	movs	r3, #0
 8008ce2:	4604      	mov	r4, r0
 8008ce4:	4608      	mov	r0, r1
 8008ce6:	602b      	str	r3, [r5, #0]
 8008ce8:	f7f8 f978 	bl	8000fdc <_sbrk>
 8008cec:	1c43      	adds	r3, r0, #1
 8008cee:	d102      	bne.n	8008cf6 <_sbrk_r+0x1a>
 8008cf0:	682b      	ldr	r3, [r5, #0]
 8008cf2:	b103      	cbz	r3, 8008cf6 <_sbrk_r+0x1a>
 8008cf4:	6023      	str	r3, [r4, #0]
 8008cf6:	bd38      	pop	{r3, r4, r5, pc}
 8008cf8:	200028ec 	.word	0x200028ec

08008cfc <memcpy>:
 8008cfc:	440a      	add	r2, r1
 8008cfe:	4291      	cmp	r1, r2
 8008d00:	f100 33ff 	add.w	r3, r0, #4294967295
 8008d04:	d100      	bne.n	8008d08 <memcpy+0xc>
 8008d06:	4770      	bx	lr
 8008d08:	b510      	push	{r4, lr}
 8008d0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008d0e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008d12:	4291      	cmp	r1, r2
 8008d14:	d1f9      	bne.n	8008d0a <memcpy+0xe>
 8008d16:	bd10      	pop	{r4, pc}

08008d18 <_realloc_r>:
 8008d18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d1c:	4680      	mov	r8, r0
 8008d1e:	4615      	mov	r5, r2
 8008d20:	460c      	mov	r4, r1
 8008d22:	b921      	cbnz	r1, 8008d2e <_realloc_r+0x16>
 8008d24:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008d28:	4611      	mov	r1, r2
 8008d2a:	f7ff bc4b 	b.w	80085c4 <_malloc_r>
 8008d2e:	b92a      	cbnz	r2, 8008d3c <_realloc_r+0x24>
 8008d30:	f7ff fbdc 	bl	80084ec <_free_r>
 8008d34:	2400      	movs	r4, #0
 8008d36:	4620      	mov	r0, r4
 8008d38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d3c:	f000 f81a 	bl	8008d74 <_malloc_usable_size_r>
 8008d40:	4285      	cmp	r5, r0
 8008d42:	4606      	mov	r6, r0
 8008d44:	d802      	bhi.n	8008d4c <_realloc_r+0x34>
 8008d46:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008d4a:	d8f4      	bhi.n	8008d36 <_realloc_r+0x1e>
 8008d4c:	4629      	mov	r1, r5
 8008d4e:	4640      	mov	r0, r8
 8008d50:	f7ff fc38 	bl	80085c4 <_malloc_r>
 8008d54:	4607      	mov	r7, r0
 8008d56:	2800      	cmp	r0, #0
 8008d58:	d0ec      	beq.n	8008d34 <_realloc_r+0x1c>
 8008d5a:	42b5      	cmp	r5, r6
 8008d5c:	462a      	mov	r2, r5
 8008d5e:	4621      	mov	r1, r4
 8008d60:	bf28      	it	cs
 8008d62:	4632      	movcs	r2, r6
 8008d64:	f7ff ffca 	bl	8008cfc <memcpy>
 8008d68:	4621      	mov	r1, r4
 8008d6a:	4640      	mov	r0, r8
 8008d6c:	f7ff fbbe 	bl	80084ec <_free_r>
 8008d70:	463c      	mov	r4, r7
 8008d72:	e7e0      	b.n	8008d36 <_realloc_r+0x1e>

08008d74 <_malloc_usable_size_r>:
 8008d74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008d78:	1f18      	subs	r0, r3, #4
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	bfbc      	itt	lt
 8008d7e:	580b      	ldrlt	r3, [r1, r0]
 8008d80:	18c0      	addlt	r0, r0, r3
 8008d82:	4770      	bx	lr

08008d84 <_init>:
 8008d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d86:	bf00      	nop
 8008d88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d8a:	bc08      	pop	{r3}
 8008d8c:	469e      	mov	lr, r3
 8008d8e:	4770      	bx	lr

08008d90 <_fini>:
 8008d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d92:	bf00      	nop
 8008d94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d96:	bc08      	pop	{r3}
 8008d98:	469e      	mov	lr, r3
 8008d9a:	4770      	bx	lr
