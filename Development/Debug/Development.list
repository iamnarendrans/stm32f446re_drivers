
Development.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008e14  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005f8  08008fe4  08008fe4  00009fe4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080095dc  080095dc  0000b074  2**0
                  CONTENTS
  4 .ARM          00000008  080095dc  080095dc  0000a5dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080095e4  080095e4  0000b074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080095e4  080095e4  0000a5e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080095e8  080095e8  0000a5e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000074  20000000  080095ec  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001730  20000074  08009660  0000b074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200017a4  08009660  0000b7a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013d00  00000000  00000000  0000b0a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003383  00000000  00000000  0001eda4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012d0  00000000  00000000  00022128  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ea2  00000000  00000000  000233f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024e22  00000000  00000000  0002429a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d089  00000000  00000000  000490bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d4e83  00000000  00000000  00066145  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013afc8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005324  00000000  00000000  0013b00c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  00140330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000074 	.word	0x20000074
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008fcc 	.word	0x08008fcc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000078 	.word	0x20000078
 800020c:	08008fcc 	.word	0x08008fcc

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_dmul>:
 80002b0:	b570      	push	{r4, r5, r6, lr}
 80002b2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80002b6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80002ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002be:	bf1d      	ittte	ne
 80002c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002c4:	ea94 0f0c 	teqne	r4, ip
 80002c8:	ea95 0f0c 	teqne	r5, ip
 80002cc:	f000 f8de 	bleq	800048c <__aeabi_dmul+0x1dc>
 80002d0:	442c      	add	r4, r5
 80002d2:	ea81 0603 	eor.w	r6, r1, r3
 80002d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002e2:	bf18      	it	ne
 80002e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002ec:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80002f0:	d038      	beq.n	8000364 <__aeabi_dmul+0xb4>
 80002f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002f6:	f04f 0500 	mov.w	r5, #0
 80002fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002fe:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000302:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000306:	f04f 0600 	mov.w	r6, #0
 800030a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800030e:	f09c 0f00 	teq	ip, #0
 8000312:	bf18      	it	ne
 8000314:	f04e 0e01 	orrne.w	lr, lr, #1
 8000318:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800031c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000320:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000324:	d204      	bcs.n	8000330 <__aeabi_dmul+0x80>
 8000326:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800032a:	416d      	adcs	r5, r5
 800032c:	eb46 0606 	adc.w	r6, r6, r6
 8000330:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000334:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000338:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800033c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000340:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000344:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000348:	bf88      	it	hi
 800034a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800034e:	d81e      	bhi.n	800038e <__aeabi_dmul+0xde>
 8000350:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000368:	ea46 0101 	orr.w	r1, r6, r1
 800036c:	ea40 0002 	orr.w	r0, r0, r2
 8000370:	ea81 0103 	eor.w	r1, r1, r3
 8000374:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000378:	bfc2      	ittt	gt
 800037a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800037e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000382:	bd70      	popgt	{r4, r5, r6, pc}
 8000384:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000388:	f04f 0e00 	mov.w	lr, #0
 800038c:	3c01      	subs	r4, #1
 800038e:	f300 80ab 	bgt.w	80004e8 <__aeabi_dmul+0x238>
 8000392:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000396:	bfde      	ittt	le
 8000398:	2000      	movle	r0, #0
 800039a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800039e:	bd70      	pople	{r4, r5, r6, pc}
 80003a0:	f1c4 0400 	rsb	r4, r4, #0
 80003a4:	3c20      	subs	r4, #32
 80003a6:	da35      	bge.n	8000414 <__aeabi_dmul+0x164>
 80003a8:	340c      	adds	r4, #12
 80003aa:	dc1b      	bgt.n	80003e4 <__aeabi_dmul+0x134>
 80003ac:	f104 0414 	add.w	r4, r4, #20
 80003b0:	f1c4 0520 	rsb	r5, r4, #32
 80003b4:	fa00 f305 	lsl.w	r3, r0, r5
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f205 	lsl.w	r2, r1, r5
 80003c0:	ea40 0002 	orr.w	r0, r0, r2
 80003c4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80003c8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80003cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d0:	fa21 f604 	lsr.w	r6, r1, r4
 80003d4:	eb42 0106 	adc.w	r1, r2, r6
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 040c 	rsb	r4, r4, #12
 80003e8:	f1c4 0520 	rsb	r5, r4, #32
 80003ec:	fa00 f304 	lsl.w	r3, r0, r4
 80003f0:	fa20 f005 	lsr.w	r0, r0, r5
 80003f4:	fa01 f204 	lsl.w	r2, r1, r4
 80003f8:	ea40 0002 	orr.w	r0, r0, r2
 80003fc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000400:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000404:	f141 0100 	adc.w	r1, r1, #0
 8000408:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800040c:	bf08      	it	eq
 800040e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000412:	bd70      	pop	{r4, r5, r6, pc}
 8000414:	f1c4 0520 	rsb	r5, r4, #32
 8000418:	fa00 f205 	lsl.w	r2, r0, r5
 800041c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000420:	fa20 f304 	lsr.w	r3, r0, r4
 8000424:	fa01 f205 	lsl.w	r2, r1, r5
 8000428:	ea43 0302 	orr.w	r3, r3, r2
 800042c:	fa21 f004 	lsr.w	r0, r1, r4
 8000430:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000434:	fa21 f204 	lsr.w	r2, r1, r4
 8000438:	ea20 0002 	bic.w	r0, r0, r2
 800043c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000440:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000444:	bf08      	it	eq
 8000446:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800044a:	bd70      	pop	{r4, r5, r6, pc}
 800044c:	f094 0f00 	teq	r4, #0
 8000450:	d10f      	bne.n	8000472 <__aeabi_dmul+0x1c2>
 8000452:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000456:	0040      	lsls	r0, r0, #1
 8000458:	eb41 0101 	adc.w	r1, r1, r1
 800045c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000460:	bf08      	it	eq
 8000462:	3c01      	subeq	r4, #1
 8000464:	d0f7      	beq.n	8000456 <__aeabi_dmul+0x1a6>
 8000466:	ea41 0106 	orr.w	r1, r1, r6
 800046a:	f095 0f00 	teq	r5, #0
 800046e:	bf18      	it	ne
 8000470:	4770      	bxne	lr
 8000472:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000476:	0052      	lsls	r2, r2, #1
 8000478:	eb43 0303 	adc.w	r3, r3, r3
 800047c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000480:	bf08      	it	eq
 8000482:	3d01      	subeq	r5, #1
 8000484:	d0f7      	beq.n	8000476 <__aeabi_dmul+0x1c6>
 8000486:	ea43 0306 	orr.w	r3, r3, r6
 800048a:	4770      	bx	lr
 800048c:	ea94 0f0c 	teq	r4, ip
 8000490:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000494:	bf18      	it	ne
 8000496:	ea95 0f0c 	teqne	r5, ip
 800049a:	d00c      	beq.n	80004b6 <__aeabi_dmul+0x206>
 800049c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004a0:	bf18      	it	ne
 80004a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004a6:	d1d1      	bne.n	800044c <__aeabi_dmul+0x19c>
 80004a8:	ea81 0103 	eor.w	r1, r1, r3
 80004ac:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004b0:	f04f 0000 	mov.w	r0, #0
 80004b4:	bd70      	pop	{r4, r5, r6, pc}
 80004b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004ba:	bf06      	itte	eq
 80004bc:	4610      	moveq	r0, r2
 80004be:	4619      	moveq	r1, r3
 80004c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004c4:	d019      	beq.n	80004fa <__aeabi_dmul+0x24a>
 80004c6:	ea94 0f0c 	teq	r4, ip
 80004ca:	d102      	bne.n	80004d2 <__aeabi_dmul+0x222>
 80004cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004d0:	d113      	bne.n	80004fa <__aeabi_dmul+0x24a>
 80004d2:	ea95 0f0c 	teq	r5, ip
 80004d6:	d105      	bne.n	80004e4 <__aeabi_dmul+0x234>
 80004d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004dc:	bf1c      	itt	ne
 80004de:	4610      	movne	r0, r2
 80004e0:	4619      	movne	r1, r3
 80004e2:	d10a      	bne.n	80004fa <__aeabi_dmul+0x24a>
 80004e4:	ea81 0103 	eor.w	r1, r1, r3
 80004e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004ec:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd70      	pop	{r4, r5, r6, pc}
 80004fa:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004fe:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000502:	bd70      	pop	{r4, r5, r6, pc}

08000504 <__aeabi_drsub>:
 8000504:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000508:	e002      	b.n	8000510 <__adddf3>
 800050a:	bf00      	nop

0800050c <__aeabi_dsub>:
 800050c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000510 <__adddf3>:
 8000510:	b530      	push	{r4, r5, lr}
 8000512:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000516:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800051a:	ea94 0f05 	teq	r4, r5
 800051e:	bf08      	it	eq
 8000520:	ea90 0f02 	teqeq	r0, r2
 8000524:	bf1f      	itttt	ne
 8000526:	ea54 0c00 	orrsne.w	ip, r4, r0
 800052a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800052e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000532:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000536:	f000 80e2 	beq.w	80006fe <__adddf3+0x1ee>
 800053a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800053e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000542:	bfb8      	it	lt
 8000544:	426d      	neglt	r5, r5
 8000546:	dd0c      	ble.n	8000562 <__adddf3+0x52>
 8000548:	442c      	add	r4, r5
 800054a:	ea80 0202 	eor.w	r2, r0, r2
 800054e:	ea81 0303 	eor.w	r3, r1, r3
 8000552:	ea82 0000 	eor.w	r0, r2, r0
 8000556:	ea83 0101 	eor.w	r1, r3, r1
 800055a:	ea80 0202 	eor.w	r2, r0, r2
 800055e:	ea81 0303 	eor.w	r3, r1, r3
 8000562:	2d36      	cmp	r5, #54	@ 0x36
 8000564:	bf88      	it	hi
 8000566:	bd30      	pophi	{r4, r5, pc}
 8000568:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800056c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000570:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000574:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000578:	d002      	beq.n	8000580 <__adddf3+0x70>
 800057a:	4240      	negs	r0, r0
 800057c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000580:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000584:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000588:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800058c:	d002      	beq.n	8000594 <__adddf3+0x84>
 800058e:	4252      	negs	r2, r2
 8000590:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000594:	ea94 0f05 	teq	r4, r5
 8000598:	f000 80a7 	beq.w	80006ea <__adddf3+0x1da>
 800059c:	f1a4 0401 	sub.w	r4, r4, #1
 80005a0:	f1d5 0e20 	rsbs	lr, r5, #32
 80005a4:	db0d      	blt.n	80005c2 <__adddf3+0xb2>
 80005a6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80005aa:	fa22 f205 	lsr.w	r2, r2, r5
 80005ae:	1880      	adds	r0, r0, r2
 80005b0:	f141 0100 	adc.w	r1, r1, #0
 80005b4:	fa03 f20e 	lsl.w	r2, r3, lr
 80005b8:	1880      	adds	r0, r0, r2
 80005ba:	fa43 f305 	asr.w	r3, r3, r5
 80005be:	4159      	adcs	r1, r3
 80005c0:	e00e      	b.n	80005e0 <__adddf3+0xd0>
 80005c2:	f1a5 0520 	sub.w	r5, r5, #32
 80005c6:	f10e 0e20 	add.w	lr, lr, #32
 80005ca:	2a01      	cmp	r2, #1
 80005cc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005d0:	bf28      	it	cs
 80005d2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005d6:	fa43 f305 	asr.w	r3, r3, r5
 80005da:	18c0      	adds	r0, r0, r3
 80005dc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005e4:	d507      	bpl.n	80005f6 <__adddf3+0xe6>
 80005e6:	f04f 0e00 	mov.w	lr, #0
 80005ea:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ee:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005f2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005f6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80005fa:	d31b      	bcc.n	8000634 <__adddf3+0x124>
 80005fc:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000600:	d30c      	bcc.n	800061c <__adddf3+0x10c>
 8000602:	0849      	lsrs	r1, r1, #1
 8000604:	ea5f 0030 	movs.w	r0, r0, rrx
 8000608:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800060c:	f104 0401 	add.w	r4, r4, #1
 8000610:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000614:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000618:	f080 809a 	bcs.w	8000750 <__adddf3+0x240>
 800061c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000620:	bf08      	it	eq
 8000622:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000626:	f150 0000 	adcs.w	r0, r0, #0
 800062a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800062e:	ea41 0105 	orr.w	r1, r1, r5
 8000632:	bd30      	pop	{r4, r5, pc}
 8000634:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000638:	4140      	adcs	r0, r0
 800063a:	eb41 0101 	adc.w	r1, r1, r1
 800063e:	3c01      	subs	r4, #1
 8000640:	bf28      	it	cs
 8000642:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000646:	d2e9      	bcs.n	800061c <__adddf3+0x10c>
 8000648:	f091 0f00 	teq	r1, #0
 800064c:	bf04      	itt	eq
 800064e:	4601      	moveq	r1, r0
 8000650:	2000      	moveq	r0, #0
 8000652:	fab1 f381 	clz	r3, r1
 8000656:	bf08      	it	eq
 8000658:	3320      	addeq	r3, #32
 800065a:	f1a3 030b 	sub.w	r3, r3, #11
 800065e:	f1b3 0220 	subs.w	r2, r3, #32
 8000662:	da0c      	bge.n	800067e <__adddf3+0x16e>
 8000664:	320c      	adds	r2, #12
 8000666:	dd08      	ble.n	800067a <__adddf3+0x16a>
 8000668:	f102 0c14 	add.w	ip, r2, #20
 800066c:	f1c2 020c 	rsb	r2, r2, #12
 8000670:	fa01 f00c 	lsl.w	r0, r1, ip
 8000674:	fa21 f102 	lsr.w	r1, r1, r2
 8000678:	e00c      	b.n	8000694 <__adddf3+0x184>
 800067a:	f102 0214 	add.w	r2, r2, #20
 800067e:	bfd8      	it	le
 8000680:	f1c2 0c20 	rsble	ip, r2, #32
 8000684:	fa01 f102 	lsl.w	r1, r1, r2
 8000688:	fa20 fc0c 	lsr.w	ip, r0, ip
 800068c:	bfdc      	itt	le
 800068e:	ea41 010c 	orrle.w	r1, r1, ip
 8000692:	4090      	lslle	r0, r2
 8000694:	1ae4      	subs	r4, r4, r3
 8000696:	bfa2      	ittt	ge
 8000698:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800069c:	4329      	orrge	r1, r5
 800069e:	bd30      	popge	{r4, r5, pc}
 80006a0:	ea6f 0404 	mvn.w	r4, r4
 80006a4:	3c1f      	subs	r4, #31
 80006a6:	da1c      	bge.n	80006e2 <__adddf3+0x1d2>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc0e      	bgt.n	80006ca <__adddf3+0x1ba>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0220 	rsb	r2, r4, #32
 80006b4:	fa20 f004 	lsr.w	r0, r0, r4
 80006b8:	fa01 f302 	lsl.w	r3, r1, r2
 80006bc:	ea40 0003 	orr.w	r0, r0, r3
 80006c0:	fa21 f304 	lsr.w	r3, r1, r4
 80006c4:	ea45 0103 	orr.w	r1, r5, r3
 80006c8:	bd30      	pop	{r4, r5, pc}
 80006ca:	f1c4 040c 	rsb	r4, r4, #12
 80006ce:	f1c4 0220 	rsb	r2, r4, #32
 80006d2:	fa20 f002 	lsr.w	r0, r0, r2
 80006d6:	fa01 f304 	lsl.w	r3, r1, r4
 80006da:	ea40 0003 	orr.w	r0, r0, r3
 80006de:	4629      	mov	r1, r5
 80006e0:	bd30      	pop	{r4, r5, pc}
 80006e2:	fa21 f004 	lsr.w	r0, r1, r4
 80006e6:	4629      	mov	r1, r5
 80006e8:	bd30      	pop	{r4, r5, pc}
 80006ea:	f094 0f00 	teq	r4, #0
 80006ee:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80006f2:	bf06      	itte	eq
 80006f4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80006f8:	3401      	addeq	r4, #1
 80006fa:	3d01      	subne	r5, #1
 80006fc:	e74e      	b.n	800059c <__adddf3+0x8c>
 80006fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000702:	bf18      	it	ne
 8000704:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000708:	d029      	beq.n	800075e <__adddf3+0x24e>
 800070a:	ea94 0f05 	teq	r4, r5
 800070e:	bf08      	it	eq
 8000710:	ea90 0f02 	teqeq	r0, r2
 8000714:	d005      	beq.n	8000722 <__adddf3+0x212>
 8000716:	ea54 0c00 	orrs.w	ip, r4, r0
 800071a:	bf04      	itt	eq
 800071c:	4619      	moveq	r1, r3
 800071e:	4610      	moveq	r0, r2
 8000720:	bd30      	pop	{r4, r5, pc}
 8000722:	ea91 0f03 	teq	r1, r3
 8000726:	bf1e      	ittt	ne
 8000728:	2100      	movne	r1, #0
 800072a:	2000      	movne	r0, #0
 800072c:	bd30      	popne	{r4, r5, pc}
 800072e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000732:	d105      	bne.n	8000740 <__adddf3+0x230>
 8000734:	0040      	lsls	r0, r0, #1
 8000736:	4149      	adcs	r1, r1
 8000738:	bf28      	it	cs
 800073a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800073e:	bd30      	pop	{r4, r5, pc}
 8000740:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000744:	bf3c      	itt	cc
 8000746:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800074a:	bd30      	popcc	{r4, r5, pc}
 800074c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000750:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000754:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd30      	pop	{r4, r5, pc}
 800075e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000762:	bf1a      	itte	ne
 8000764:	4619      	movne	r1, r3
 8000766:	4610      	movne	r0, r2
 8000768:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800076c:	bf1c      	itt	ne
 800076e:	460b      	movne	r3, r1
 8000770:	4602      	movne	r2, r0
 8000772:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000776:	bf06      	itte	eq
 8000778:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800077c:	ea91 0f03 	teqeq	r1, r3
 8000780:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000784:	bd30      	pop	{r4, r5, pc}
 8000786:	bf00      	nop

08000788 <__aeabi_ui2d>:
 8000788:	f090 0f00 	teq	r0, #0
 800078c:	bf04      	itt	eq
 800078e:	2100      	moveq	r1, #0
 8000790:	4770      	bxeq	lr
 8000792:	b530      	push	{r4, r5, lr}
 8000794:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000798:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800079c:	f04f 0500 	mov.w	r5, #0
 80007a0:	f04f 0100 	mov.w	r1, #0
 80007a4:	e750      	b.n	8000648 <__adddf3+0x138>
 80007a6:	bf00      	nop

080007a8 <__aeabi_i2d>:
 80007a8:	f090 0f00 	teq	r0, #0
 80007ac:	bf04      	itt	eq
 80007ae:	2100      	moveq	r1, #0
 80007b0:	4770      	bxeq	lr
 80007b2:	b530      	push	{r4, r5, lr}
 80007b4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007b8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007bc:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80007c0:	bf48      	it	mi
 80007c2:	4240      	negmi	r0, r0
 80007c4:	f04f 0100 	mov.w	r1, #0
 80007c8:	e73e      	b.n	8000648 <__adddf3+0x138>
 80007ca:	bf00      	nop

080007cc <__aeabi_f2d>:
 80007cc:	0042      	lsls	r2, r0, #1
 80007ce:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007d2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007d6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007da:	bf1f      	itttt	ne
 80007dc:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80007e0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80007e4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80007e8:	4770      	bxne	lr
 80007ea:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80007ee:	bf08      	it	eq
 80007f0:	4770      	bxeq	lr
 80007f2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80007f6:	bf04      	itt	eq
 80007f8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80007fc:	4770      	bxeq	lr
 80007fe:	b530      	push	{r4, r5, lr}
 8000800:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000804:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000808:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800080c:	e71c      	b.n	8000648 <__adddf3+0x138>
 800080e:	bf00      	nop

08000810 <__aeabi_ul2d>:
 8000810:	ea50 0201 	orrs.w	r2, r0, r1
 8000814:	bf08      	it	eq
 8000816:	4770      	bxeq	lr
 8000818:	b530      	push	{r4, r5, lr}
 800081a:	f04f 0500 	mov.w	r5, #0
 800081e:	e00a      	b.n	8000836 <__aeabi_l2d+0x16>

08000820 <__aeabi_l2d>:
 8000820:	ea50 0201 	orrs.w	r2, r0, r1
 8000824:	bf08      	it	eq
 8000826:	4770      	bxeq	lr
 8000828:	b530      	push	{r4, r5, lr}
 800082a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800082e:	d502      	bpl.n	8000836 <__aeabi_l2d+0x16>
 8000830:	4240      	negs	r0, r0
 8000832:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000836:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800083a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800083e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000842:	f43f aed8 	beq.w	80005f6 <__adddf3+0xe6>
 8000846:	f04f 0203 	mov.w	r2, #3
 800084a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800084e:	bf18      	it	ne
 8000850:	3203      	addne	r2, #3
 8000852:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000856:	bf18      	it	ne
 8000858:	3203      	addne	r2, #3
 800085a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800085e:	f1c2 0320 	rsb	r3, r2, #32
 8000862:	fa00 fc03 	lsl.w	ip, r0, r3
 8000866:	fa20 f002 	lsr.w	r0, r0, r2
 800086a:	fa01 fe03 	lsl.w	lr, r1, r3
 800086e:	ea40 000e 	orr.w	r0, r0, lr
 8000872:	fa21 f102 	lsr.w	r1, r1, r2
 8000876:	4414      	add	r4, r2
 8000878:	e6bd      	b.n	80005f6 <__adddf3+0xe6>
 800087a:	bf00      	nop

0800087c <__aeabi_d2uiz>:
 800087c:	004a      	lsls	r2, r1, #1
 800087e:	d211      	bcs.n	80008a4 <__aeabi_d2uiz+0x28>
 8000880:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000884:	d211      	bcs.n	80008aa <__aeabi_d2uiz+0x2e>
 8000886:	d50d      	bpl.n	80008a4 <__aeabi_d2uiz+0x28>
 8000888:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800088c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000890:	d40e      	bmi.n	80008b0 <__aeabi_d2uiz+0x34>
 8000892:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000896:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800089a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800089e:	fa23 f002 	lsr.w	r0, r3, r2
 80008a2:	4770      	bx	lr
 80008a4:	f04f 0000 	mov.w	r0, #0
 80008a8:	4770      	bx	lr
 80008aa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80008ae:	d102      	bne.n	80008b6 <__aeabi_d2uiz+0x3a>
 80008b0:	f04f 30ff 	mov.w	r0, #4294967295
 80008b4:	4770      	bx	lr
 80008b6:	f04f 0000 	mov.w	r0, #0
 80008ba:	4770      	bx	lr

080008bc <__aeabi_uldivmod>:
 80008bc:	b953      	cbnz	r3, 80008d4 <__aeabi_uldivmod+0x18>
 80008be:	b94a      	cbnz	r2, 80008d4 <__aeabi_uldivmod+0x18>
 80008c0:	2900      	cmp	r1, #0
 80008c2:	bf08      	it	eq
 80008c4:	2800      	cmpeq	r0, #0
 80008c6:	bf1c      	itt	ne
 80008c8:	f04f 31ff 	movne.w	r1, #4294967295
 80008cc:	f04f 30ff 	movne.w	r0, #4294967295
 80008d0:	f000 b96a 	b.w	8000ba8 <__aeabi_idiv0>
 80008d4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008d8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008dc:	f000 f806 	bl	80008ec <__udivmoddi4>
 80008e0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008e8:	b004      	add	sp, #16
 80008ea:	4770      	bx	lr

080008ec <__udivmoddi4>:
 80008ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008f0:	9d08      	ldr	r5, [sp, #32]
 80008f2:	460c      	mov	r4, r1
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d14e      	bne.n	8000996 <__udivmoddi4+0xaa>
 80008f8:	4694      	mov	ip, r2
 80008fa:	458c      	cmp	ip, r1
 80008fc:	4686      	mov	lr, r0
 80008fe:	fab2 f282 	clz	r2, r2
 8000902:	d962      	bls.n	80009ca <__udivmoddi4+0xde>
 8000904:	b14a      	cbz	r2, 800091a <__udivmoddi4+0x2e>
 8000906:	f1c2 0320 	rsb	r3, r2, #32
 800090a:	4091      	lsls	r1, r2
 800090c:	fa20 f303 	lsr.w	r3, r0, r3
 8000910:	fa0c fc02 	lsl.w	ip, ip, r2
 8000914:	4319      	orrs	r1, r3
 8000916:	fa00 fe02 	lsl.w	lr, r0, r2
 800091a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800091e:	fa1f f68c 	uxth.w	r6, ip
 8000922:	fbb1 f4f7 	udiv	r4, r1, r7
 8000926:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800092a:	fb07 1114 	mls	r1, r7, r4, r1
 800092e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000932:	fb04 f106 	mul.w	r1, r4, r6
 8000936:	4299      	cmp	r1, r3
 8000938:	d90a      	bls.n	8000950 <__udivmoddi4+0x64>
 800093a:	eb1c 0303 	adds.w	r3, ip, r3
 800093e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000942:	f080 8112 	bcs.w	8000b6a <__udivmoddi4+0x27e>
 8000946:	4299      	cmp	r1, r3
 8000948:	f240 810f 	bls.w	8000b6a <__udivmoddi4+0x27e>
 800094c:	3c02      	subs	r4, #2
 800094e:	4463      	add	r3, ip
 8000950:	1a59      	subs	r1, r3, r1
 8000952:	fa1f f38e 	uxth.w	r3, lr
 8000956:	fbb1 f0f7 	udiv	r0, r1, r7
 800095a:	fb07 1110 	mls	r1, r7, r0, r1
 800095e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000962:	fb00 f606 	mul.w	r6, r0, r6
 8000966:	429e      	cmp	r6, r3
 8000968:	d90a      	bls.n	8000980 <__udivmoddi4+0x94>
 800096a:	eb1c 0303 	adds.w	r3, ip, r3
 800096e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000972:	f080 80fc 	bcs.w	8000b6e <__udivmoddi4+0x282>
 8000976:	429e      	cmp	r6, r3
 8000978:	f240 80f9 	bls.w	8000b6e <__udivmoddi4+0x282>
 800097c:	4463      	add	r3, ip
 800097e:	3802      	subs	r0, #2
 8000980:	1b9b      	subs	r3, r3, r6
 8000982:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000986:	2100      	movs	r1, #0
 8000988:	b11d      	cbz	r5, 8000992 <__udivmoddi4+0xa6>
 800098a:	40d3      	lsrs	r3, r2
 800098c:	2200      	movs	r2, #0
 800098e:	e9c5 3200 	strd	r3, r2, [r5]
 8000992:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000996:	428b      	cmp	r3, r1
 8000998:	d905      	bls.n	80009a6 <__udivmoddi4+0xba>
 800099a:	b10d      	cbz	r5, 80009a0 <__udivmoddi4+0xb4>
 800099c:	e9c5 0100 	strd	r0, r1, [r5]
 80009a0:	2100      	movs	r1, #0
 80009a2:	4608      	mov	r0, r1
 80009a4:	e7f5      	b.n	8000992 <__udivmoddi4+0xa6>
 80009a6:	fab3 f183 	clz	r1, r3
 80009aa:	2900      	cmp	r1, #0
 80009ac:	d146      	bne.n	8000a3c <__udivmoddi4+0x150>
 80009ae:	42a3      	cmp	r3, r4
 80009b0:	d302      	bcc.n	80009b8 <__udivmoddi4+0xcc>
 80009b2:	4290      	cmp	r0, r2
 80009b4:	f0c0 80f0 	bcc.w	8000b98 <__udivmoddi4+0x2ac>
 80009b8:	1a86      	subs	r6, r0, r2
 80009ba:	eb64 0303 	sbc.w	r3, r4, r3
 80009be:	2001      	movs	r0, #1
 80009c0:	2d00      	cmp	r5, #0
 80009c2:	d0e6      	beq.n	8000992 <__udivmoddi4+0xa6>
 80009c4:	e9c5 6300 	strd	r6, r3, [r5]
 80009c8:	e7e3      	b.n	8000992 <__udivmoddi4+0xa6>
 80009ca:	2a00      	cmp	r2, #0
 80009cc:	f040 8090 	bne.w	8000af0 <__udivmoddi4+0x204>
 80009d0:	eba1 040c 	sub.w	r4, r1, ip
 80009d4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80009d8:	fa1f f78c 	uxth.w	r7, ip
 80009dc:	2101      	movs	r1, #1
 80009de:	fbb4 f6f8 	udiv	r6, r4, r8
 80009e2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80009e6:	fb08 4416 	mls	r4, r8, r6, r4
 80009ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80009ee:	fb07 f006 	mul.w	r0, r7, r6
 80009f2:	4298      	cmp	r0, r3
 80009f4:	d908      	bls.n	8000a08 <__udivmoddi4+0x11c>
 80009f6:	eb1c 0303 	adds.w	r3, ip, r3
 80009fa:	f106 34ff 	add.w	r4, r6, #4294967295
 80009fe:	d202      	bcs.n	8000a06 <__udivmoddi4+0x11a>
 8000a00:	4298      	cmp	r0, r3
 8000a02:	f200 80cd 	bhi.w	8000ba0 <__udivmoddi4+0x2b4>
 8000a06:	4626      	mov	r6, r4
 8000a08:	1a1c      	subs	r4, r3, r0
 8000a0a:	fa1f f38e 	uxth.w	r3, lr
 8000a0e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000a12:	fb08 4410 	mls	r4, r8, r0, r4
 8000a16:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000a1a:	fb00 f707 	mul.w	r7, r0, r7
 8000a1e:	429f      	cmp	r7, r3
 8000a20:	d908      	bls.n	8000a34 <__udivmoddi4+0x148>
 8000a22:	eb1c 0303 	adds.w	r3, ip, r3
 8000a26:	f100 34ff 	add.w	r4, r0, #4294967295
 8000a2a:	d202      	bcs.n	8000a32 <__udivmoddi4+0x146>
 8000a2c:	429f      	cmp	r7, r3
 8000a2e:	f200 80b0 	bhi.w	8000b92 <__udivmoddi4+0x2a6>
 8000a32:	4620      	mov	r0, r4
 8000a34:	1bdb      	subs	r3, r3, r7
 8000a36:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a3a:	e7a5      	b.n	8000988 <__udivmoddi4+0x9c>
 8000a3c:	f1c1 0620 	rsb	r6, r1, #32
 8000a40:	408b      	lsls	r3, r1
 8000a42:	fa22 f706 	lsr.w	r7, r2, r6
 8000a46:	431f      	orrs	r7, r3
 8000a48:	fa20 fc06 	lsr.w	ip, r0, r6
 8000a4c:	fa04 f301 	lsl.w	r3, r4, r1
 8000a50:	ea43 030c 	orr.w	r3, r3, ip
 8000a54:	40f4      	lsrs	r4, r6
 8000a56:	fa00 f801 	lsl.w	r8, r0, r1
 8000a5a:	0c38      	lsrs	r0, r7, #16
 8000a5c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000a60:	fbb4 fef0 	udiv	lr, r4, r0
 8000a64:	fa1f fc87 	uxth.w	ip, r7
 8000a68:	fb00 441e 	mls	r4, r0, lr, r4
 8000a6c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000a70:	fb0e f90c 	mul.w	r9, lr, ip
 8000a74:	45a1      	cmp	r9, r4
 8000a76:	fa02 f201 	lsl.w	r2, r2, r1
 8000a7a:	d90a      	bls.n	8000a92 <__udivmoddi4+0x1a6>
 8000a7c:	193c      	adds	r4, r7, r4
 8000a7e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000a82:	f080 8084 	bcs.w	8000b8e <__udivmoddi4+0x2a2>
 8000a86:	45a1      	cmp	r9, r4
 8000a88:	f240 8081 	bls.w	8000b8e <__udivmoddi4+0x2a2>
 8000a8c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000a90:	443c      	add	r4, r7
 8000a92:	eba4 0409 	sub.w	r4, r4, r9
 8000a96:	fa1f f983 	uxth.w	r9, r3
 8000a9a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000a9e:	fb00 4413 	mls	r4, r0, r3, r4
 8000aa2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000aa6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000aaa:	45a4      	cmp	ip, r4
 8000aac:	d907      	bls.n	8000abe <__udivmoddi4+0x1d2>
 8000aae:	193c      	adds	r4, r7, r4
 8000ab0:	f103 30ff 	add.w	r0, r3, #4294967295
 8000ab4:	d267      	bcs.n	8000b86 <__udivmoddi4+0x29a>
 8000ab6:	45a4      	cmp	ip, r4
 8000ab8:	d965      	bls.n	8000b86 <__udivmoddi4+0x29a>
 8000aba:	3b02      	subs	r3, #2
 8000abc:	443c      	add	r4, r7
 8000abe:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000ac2:	fba0 9302 	umull	r9, r3, r0, r2
 8000ac6:	eba4 040c 	sub.w	r4, r4, ip
 8000aca:	429c      	cmp	r4, r3
 8000acc:	46ce      	mov	lr, r9
 8000ace:	469c      	mov	ip, r3
 8000ad0:	d351      	bcc.n	8000b76 <__udivmoddi4+0x28a>
 8000ad2:	d04e      	beq.n	8000b72 <__udivmoddi4+0x286>
 8000ad4:	b155      	cbz	r5, 8000aec <__udivmoddi4+0x200>
 8000ad6:	ebb8 030e 	subs.w	r3, r8, lr
 8000ada:	eb64 040c 	sbc.w	r4, r4, ip
 8000ade:	fa04 f606 	lsl.w	r6, r4, r6
 8000ae2:	40cb      	lsrs	r3, r1
 8000ae4:	431e      	orrs	r6, r3
 8000ae6:	40cc      	lsrs	r4, r1
 8000ae8:	e9c5 6400 	strd	r6, r4, [r5]
 8000aec:	2100      	movs	r1, #0
 8000aee:	e750      	b.n	8000992 <__udivmoddi4+0xa6>
 8000af0:	f1c2 0320 	rsb	r3, r2, #32
 8000af4:	fa20 f103 	lsr.w	r1, r0, r3
 8000af8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000afc:	fa24 f303 	lsr.w	r3, r4, r3
 8000b00:	4094      	lsls	r4, r2
 8000b02:	430c      	orrs	r4, r1
 8000b04:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b08:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b0c:	fa1f f78c 	uxth.w	r7, ip
 8000b10:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b14:	fb08 3110 	mls	r1, r8, r0, r3
 8000b18:	0c23      	lsrs	r3, r4, #16
 8000b1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b1e:	fb00 f107 	mul.w	r1, r0, r7
 8000b22:	4299      	cmp	r1, r3
 8000b24:	d908      	bls.n	8000b38 <__udivmoddi4+0x24c>
 8000b26:	eb1c 0303 	adds.w	r3, ip, r3
 8000b2a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000b2e:	d22c      	bcs.n	8000b8a <__udivmoddi4+0x29e>
 8000b30:	4299      	cmp	r1, r3
 8000b32:	d92a      	bls.n	8000b8a <__udivmoddi4+0x29e>
 8000b34:	3802      	subs	r0, #2
 8000b36:	4463      	add	r3, ip
 8000b38:	1a5b      	subs	r3, r3, r1
 8000b3a:	b2a4      	uxth	r4, r4
 8000b3c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000b40:	fb08 3311 	mls	r3, r8, r1, r3
 8000b44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b48:	fb01 f307 	mul.w	r3, r1, r7
 8000b4c:	42a3      	cmp	r3, r4
 8000b4e:	d908      	bls.n	8000b62 <__udivmoddi4+0x276>
 8000b50:	eb1c 0404 	adds.w	r4, ip, r4
 8000b54:	f101 36ff 	add.w	r6, r1, #4294967295
 8000b58:	d213      	bcs.n	8000b82 <__udivmoddi4+0x296>
 8000b5a:	42a3      	cmp	r3, r4
 8000b5c:	d911      	bls.n	8000b82 <__udivmoddi4+0x296>
 8000b5e:	3902      	subs	r1, #2
 8000b60:	4464      	add	r4, ip
 8000b62:	1ae4      	subs	r4, r4, r3
 8000b64:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000b68:	e739      	b.n	80009de <__udivmoddi4+0xf2>
 8000b6a:	4604      	mov	r4, r0
 8000b6c:	e6f0      	b.n	8000950 <__udivmoddi4+0x64>
 8000b6e:	4608      	mov	r0, r1
 8000b70:	e706      	b.n	8000980 <__udivmoddi4+0x94>
 8000b72:	45c8      	cmp	r8, r9
 8000b74:	d2ae      	bcs.n	8000ad4 <__udivmoddi4+0x1e8>
 8000b76:	ebb9 0e02 	subs.w	lr, r9, r2
 8000b7a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000b7e:	3801      	subs	r0, #1
 8000b80:	e7a8      	b.n	8000ad4 <__udivmoddi4+0x1e8>
 8000b82:	4631      	mov	r1, r6
 8000b84:	e7ed      	b.n	8000b62 <__udivmoddi4+0x276>
 8000b86:	4603      	mov	r3, r0
 8000b88:	e799      	b.n	8000abe <__udivmoddi4+0x1d2>
 8000b8a:	4630      	mov	r0, r6
 8000b8c:	e7d4      	b.n	8000b38 <__udivmoddi4+0x24c>
 8000b8e:	46d6      	mov	lr, sl
 8000b90:	e77f      	b.n	8000a92 <__udivmoddi4+0x1a6>
 8000b92:	4463      	add	r3, ip
 8000b94:	3802      	subs	r0, #2
 8000b96:	e74d      	b.n	8000a34 <__udivmoddi4+0x148>
 8000b98:	4606      	mov	r6, r0
 8000b9a:	4623      	mov	r3, r4
 8000b9c:	4608      	mov	r0, r1
 8000b9e:	e70f      	b.n	80009c0 <__udivmoddi4+0xd4>
 8000ba0:	3e02      	subs	r6, #2
 8000ba2:	4463      	add	r3, ip
 8000ba4:	e730      	b.n	8000a08 <__udivmoddi4+0x11c>
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_idiv0>:
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop

08000bac <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b08a      	sub	sp, #40	@ 0x28
 8000bb0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb2:	f107 0314 	add.w	r3, r7, #20
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	601a      	str	r2, [r3, #0]
 8000bba:	605a      	str	r2, [r3, #4]
 8000bbc:	609a      	str	r2, [r3, #8]
 8000bbe:	60da      	str	r2, [r3, #12]
 8000bc0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	613b      	str	r3, [r7, #16]
 8000bc6:	4b38      	ldr	r3, [pc, #224]	@ (8000ca8 <MX_GPIO_Init+0xfc>)
 8000bc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bca:	4a37      	ldr	r2, [pc, #220]	@ (8000ca8 <MX_GPIO_Init+0xfc>)
 8000bcc:	f043 0304 	orr.w	r3, r3, #4
 8000bd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bd2:	4b35      	ldr	r3, [pc, #212]	@ (8000ca8 <MX_GPIO_Init+0xfc>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bd6:	f003 0304 	and.w	r3, r3, #4
 8000bda:	613b      	str	r3, [r7, #16]
 8000bdc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bde:	2300      	movs	r3, #0
 8000be0:	60fb      	str	r3, [r7, #12]
 8000be2:	4b31      	ldr	r3, [pc, #196]	@ (8000ca8 <MX_GPIO_Init+0xfc>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000be6:	4a30      	ldr	r2, [pc, #192]	@ (8000ca8 <MX_GPIO_Init+0xfc>)
 8000be8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000bec:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bee:	4b2e      	ldr	r3, [pc, #184]	@ (8000ca8 <MX_GPIO_Init+0xfc>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bf2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000bf6:	60fb      	str	r3, [r7, #12]
 8000bf8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	60bb      	str	r3, [r7, #8]
 8000bfe:	4b2a      	ldr	r3, [pc, #168]	@ (8000ca8 <MX_GPIO_Init+0xfc>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c02:	4a29      	ldr	r2, [pc, #164]	@ (8000ca8 <MX_GPIO_Init+0xfc>)
 8000c04:	f043 0301 	orr.w	r3, r3, #1
 8000c08:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c0a:	4b27      	ldr	r3, [pc, #156]	@ (8000ca8 <MX_GPIO_Init+0xfc>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c0e:	f003 0301 	and.w	r3, r3, #1
 8000c12:	60bb      	str	r3, [r7, #8]
 8000c14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c16:	2300      	movs	r3, #0
 8000c18:	607b      	str	r3, [r7, #4]
 8000c1a:	4b23      	ldr	r3, [pc, #140]	@ (8000ca8 <MX_GPIO_Init+0xfc>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c1e:	4a22      	ldr	r2, [pc, #136]	@ (8000ca8 <MX_GPIO_Init+0xfc>)
 8000c20:	f043 0302 	orr.w	r3, r3, #2
 8000c24:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c26:	4b20      	ldr	r3, [pc, #128]	@ (8000ca8 <MX_GPIO_Init+0xfc>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c2a:	f003 0302 	and.w	r3, r3, #2
 8000c2e:	607b      	str	r3, [r7, #4]
 8000c30:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|Timer_delay_Pin, GPIO_PIN_RESET);
 8000c32:	2200      	movs	r2, #0
 8000c34:	2160      	movs	r1, #96	@ 0x60
 8000c36:	481d      	ldr	r0, [pc, #116]	@ (8000cac <MX_GPIO_Init+0x100>)
 8000c38:	f000 ff0e 	bl	8001a58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000c42:	481b      	ldr	r0, [pc, #108]	@ (8000cb0 <MX_GPIO_Init+0x104>)
 8000c44:	f000 ff08 	bl	8001a58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c48:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c4e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000c52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c54:	2300      	movs	r3, #0
 8000c56:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c58:	f107 0314 	add.w	r3, r7, #20
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	4814      	ldr	r0, [pc, #80]	@ (8000cb0 <MX_GPIO_Init+0x104>)
 8000c60:	f000 fd66 	bl	8001730 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|Timer_delay_Pin;
 8000c64:	2360      	movs	r3, #96	@ 0x60
 8000c66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c68:	2301      	movs	r3, #1
 8000c6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c70:	2300      	movs	r3, #0
 8000c72:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c74:	f107 0314 	add.w	r3, r7, #20
 8000c78:	4619      	mov	r1, r3
 8000c7a:	480c      	ldr	r0, [pc, #48]	@ (8000cac <MX_GPIO_Init+0x100>)
 8000c7c:	f000 fd58 	bl	8001730 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI3_CS_Pin;
 8000c80:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c86:	2301      	movs	r3, #1
 8000c88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI3_CS_GPIO_Port, &GPIO_InitStruct);
 8000c92:	f107 0314 	add.w	r3, r7, #20
 8000c96:	4619      	mov	r1, r3
 8000c98:	4805      	ldr	r0, [pc, #20]	@ (8000cb0 <MX_GPIO_Init+0x104>)
 8000c9a:	f000 fd49 	bl	8001730 <HAL_GPIO_Init>

}
 8000c9e:	bf00      	nop
 8000ca0:	3728      	adds	r7, #40	@ 0x28
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	40023800 	.word	0x40023800
 8000cac:	40020000 	.word	0x40020000
 8000cb0:	40020800 	.word	0x40020800

08000cb4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cb8:	f000 fbb6 	bl	8001428 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cbc:	f000 f810 	bl	8000ce0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cc0:	f7ff ff74 	bl	8000bac <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000cc4:	f000 fb00 	bl	80012c8 <MX_USART2_UART_Init>
  MX_TIM4_Init();
 8000cc8:	f000 fa1e 	bl	8001108 <MX_TIM4_Init>
  MX_TIM3_Init();
 8000ccc:	f000 f9cc 	bl	8001068 <MX_TIM3_Init>
  MX_SPI3_Init();
 8000cd0:	f000 f87a 	bl	8000dc8 <MX_SPI3_Init>
  MX_FATFS_Init();
 8000cd4:	f003 fa04 	bl	80040e0 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  SDCard_Init();
 8000cd8:	f007 fbfa 	bl	80084d0 <SDCard_Init>
  // SDCard_Size();
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000cdc:	bf00      	nop
 8000cde:	e7fd      	b.n	8000cdc <main+0x28>

08000ce0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b094      	sub	sp, #80	@ 0x50
 8000ce4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ce6:	f107 031c 	add.w	r3, r7, #28
 8000cea:	2234      	movs	r2, #52	@ 0x34
 8000cec:	2100      	movs	r1, #0
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f007 fcec 	bl	80086cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cf4:	f107 0308 	add.w	r3, r7, #8
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	601a      	str	r2, [r3, #0]
 8000cfc:	605a      	str	r2, [r3, #4]
 8000cfe:	609a      	str	r2, [r3, #8]
 8000d00:	60da      	str	r2, [r3, #12]
 8000d02:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d04:	2300      	movs	r3, #0
 8000d06:	607b      	str	r3, [r7, #4]
 8000d08:	4b2a      	ldr	r3, [pc, #168]	@ (8000db4 <SystemClock_Config+0xd4>)
 8000d0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d0c:	4a29      	ldr	r2, [pc, #164]	@ (8000db4 <SystemClock_Config+0xd4>)
 8000d0e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d12:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d14:	4b27      	ldr	r3, [pc, #156]	@ (8000db4 <SystemClock_Config+0xd4>)
 8000d16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d18:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d1c:	607b      	str	r3, [r7, #4]
 8000d1e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000d20:	2300      	movs	r3, #0
 8000d22:	603b      	str	r3, [r7, #0]
 8000d24:	4b24      	ldr	r3, [pc, #144]	@ (8000db8 <SystemClock_Config+0xd8>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000d2c:	4a22      	ldr	r2, [pc, #136]	@ (8000db8 <SystemClock_Config+0xd8>)
 8000d2e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d32:	6013      	str	r3, [r2, #0]
 8000d34:	4b20      	ldr	r3, [pc, #128]	@ (8000db8 <SystemClock_Config+0xd8>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000d3c:	603b      	str	r3, [r7, #0]
 8000d3e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d40:	2301      	movs	r3, #1
 8000d42:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d44:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000d48:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d4a:	2302      	movs	r3, #2
 8000d4c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d4e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000d52:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000d54:	2304      	movs	r3, #4
 8000d56:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 90;
 8000d58:	235a      	movs	r3, #90	@ 0x5a
 8000d5a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d5c:	2302      	movs	r3, #2
 8000d5e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000d60:	2302      	movs	r3, #2
 8000d62:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000d64:	2302      	movs	r3, #2
 8000d66:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d68:	f107 031c 	add.w	r3, r7, #28
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f001 f9d7 	bl	8002120 <HAL_RCC_OscConfig>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d001      	beq.n	8000d7c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000d78:	f000 f820 	bl	8000dbc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d7c:	230f      	movs	r3, #15
 8000d7e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d80:	2302      	movs	r3, #2
 8000d82:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d84:	2300      	movs	r3, #0
 8000d86:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d88:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d8c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000d8e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d92:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d94:	f107 0308 	add.w	r3, r7, #8
 8000d98:	2102      	movs	r1, #2
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f000 fe76 	bl	8001a8c <HAL_RCC_ClockConfig>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000da6:	f000 f809 	bl	8000dbc <Error_Handler>
  }
}
 8000daa:	bf00      	nop
 8000dac:	3750      	adds	r7, #80	@ 0x50
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	40023800 	.word	0x40023800
 8000db8:	40007000 	.word	0x40007000

08000dbc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dc0:	b672      	cpsid	i
}
 8000dc2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dc4:	bf00      	nop
 8000dc6:	e7fd      	b.n	8000dc4 <Error_Handler+0x8>

08000dc8 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8000dcc:	4b17      	ldr	r3, [pc, #92]	@ (8000e2c <MX_SPI3_Init+0x64>)
 8000dce:	4a18      	ldr	r2, [pc, #96]	@ (8000e30 <MX_SPI3_Init+0x68>)
 8000dd0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000dd2:	4b16      	ldr	r3, [pc, #88]	@ (8000e2c <MX_SPI3_Init+0x64>)
 8000dd4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000dd8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000dda:	4b14      	ldr	r3, [pc, #80]	@ (8000e2c <MX_SPI3_Init+0x64>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000de0:	4b12      	ldr	r3, [pc, #72]	@ (8000e2c <MX_SPI3_Init+0x64>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000de6:	4b11      	ldr	r3, [pc, #68]	@ (8000e2c <MX_SPI3_Init+0x64>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000dec:	4b0f      	ldr	r3, [pc, #60]	@ (8000e2c <MX_SPI3_Init+0x64>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000df2:	4b0e      	ldr	r3, [pc, #56]	@ (8000e2c <MX_SPI3_Init+0x64>)
 8000df4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000df8:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000dfa:	4b0c      	ldr	r3, [pc, #48]	@ (8000e2c <MX_SPI3_Init+0x64>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e00:	4b0a      	ldr	r3, [pc, #40]	@ (8000e2c <MX_SPI3_Init+0x64>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e06:	4b09      	ldr	r3, [pc, #36]	@ (8000e2c <MX_SPI3_Init+0x64>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e0c:	4b07      	ldr	r3, [pc, #28]	@ (8000e2c <MX_SPI3_Init+0x64>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 8000e12:	4b06      	ldr	r3, [pc, #24]	@ (8000e2c <MX_SPI3_Init+0x64>)
 8000e14:	220a      	movs	r2, #10
 8000e16:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000e18:	4804      	ldr	r0, [pc, #16]	@ (8000e2c <MX_SPI3_Init+0x64>)
 8000e1a:	f001 fc1f 	bl	800265c <HAL_SPI_Init>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d001      	beq.n	8000e28 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8000e24:	f7ff ffca 	bl	8000dbc <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000e28:	bf00      	nop
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	20000090 	.word	0x20000090
 8000e30:	40003c00 	.word	0x40003c00

08000e34 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b08a      	sub	sp, #40	@ 0x28
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e3c:	f107 0314 	add.w	r3, r7, #20
 8000e40:	2200      	movs	r2, #0
 8000e42:	601a      	str	r2, [r3, #0]
 8000e44:	605a      	str	r2, [r3, #4]
 8000e46:	609a      	str	r2, [r3, #8]
 8000e48:	60da      	str	r2, [r3, #12]
 8000e4a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4a21      	ldr	r2, [pc, #132]	@ (8000ed8 <HAL_SPI_MspInit+0xa4>)
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d13c      	bne.n	8000ed0 <HAL_SPI_MspInit+0x9c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000e56:	2300      	movs	r3, #0
 8000e58:	613b      	str	r3, [r7, #16]
 8000e5a:	4b20      	ldr	r3, [pc, #128]	@ (8000edc <HAL_SPI_MspInit+0xa8>)
 8000e5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e5e:	4a1f      	ldr	r2, [pc, #124]	@ (8000edc <HAL_SPI_MspInit+0xa8>)
 8000e60:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000e64:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e66:	4b1d      	ldr	r3, [pc, #116]	@ (8000edc <HAL_SPI_MspInit+0xa8>)
 8000e68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e6a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000e6e:	613b      	str	r3, [r7, #16]
 8000e70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e72:	2300      	movs	r3, #0
 8000e74:	60fb      	str	r3, [r7, #12]
 8000e76:	4b19      	ldr	r3, [pc, #100]	@ (8000edc <HAL_SPI_MspInit+0xa8>)
 8000e78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e7a:	4a18      	ldr	r2, [pc, #96]	@ (8000edc <HAL_SPI_MspInit+0xa8>)
 8000e7c:	f043 0304 	orr.w	r3, r3, #4
 8000e80:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e82:	4b16      	ldr	r3, [pc, #88]	@ (8000edc <HAL_SPI_MspInit+0xa8>)
 8000e84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e86:	f003 0304 	and.w	r3, r3, #4
 8000e8a:	60fb      	str	r3, [r7, #12]
 8000e8c:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC1     ------> SPI3_MOSI
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000e8e:	2302      	movs	r3, #2
 8000e90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e92:	2302      	movs	r3, #2
 8000e94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e96:	2300      	movs	r3, #0
 8000e98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e9a:	2303      	movs	r3, #3
 8000e9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI3;
 8000e9e:	2305      	movs	r3, #5
 8000ea0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ea2:	f107 0314 	add.w	r3, r7, #20
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	480d      	ldr	r0, [pc, #52]	@ (8000ee0 <HAL_SPI_MspInit+0xac>)
 8000eaa:	f000 fc41 	bl	8001730 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000eae:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000eb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb4:	2302      	movs	r3, #2
 8000eb6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ebc:	2303      	movs	r3, #3
 8000ebe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ec0:	2306      	movs	r3, #6
 8000ec2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ec4:	f107 0314 	add.w	r3, r7, #20
 8000ec8:	4619      	mov	r1, r3
 8000eca:	4805      	ldr	r0, [pc, #20]	@ (8000ee0 <HAL_SPI_MspInit+0xac>)
 8000ecc:	f000 fc30 	bl	8001730 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8000ed0:	bf00      	nop
 8000ed2:	3728      	adds	r7, #40	@ 0x28
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	40003c00 	.word	0x40003c00
 8000edc:	40023800 	.word	0x40023800
 8000ee0:	40020800 	.word	0x40020800

08000ee4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eea:	2300      	movs	r3, #0
 8000eec:	607b      	str	r3, [r7, #4]
 8000eee:	4b10      	ldr	r3, [pc, #64]	@ (8000f30 <HAL_MspInit+0x4c>)
 8000ef0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ef2:	4a0f      	ldr	r2, [pc, #60]	@ (8000f30 <HAL_MspInit+0x4c>)
 8000ef4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ef8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000efa:	4b0d      	ldr	r3, [pc, #52]	@ (8000f30 <HAL_MspInit+0x4c>)
 8000efc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000efe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f02:	607b      	str	r3, [r7, #4]
 8000f04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f06:	2300      	movs	r3, #0
 8000f08:	603b      	str	r3, [r7, #0]
 8000f0a:	4b09      	ldr	r3, [pc, #36]	@ (8000f30 <HAL_MspInit+0x4c>)
 8000f0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f0e:	4a08      	ldr	r2, [pc, #32]	@ (8000f30 <HAL_MspInit+0x4c>)
 8000f10:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f14:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f16:	4b06      	ldr	r3, [pc, #24]	@ (8000f30 <HAL_MspInit+0x4c>)
 8000f18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f1e:	603b      	str	r3, [r7, #0]
 8000f20:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000f22:	2007      	movs	r0, #7
 8000f24:	f000 fbc2 	bl	80016ac <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f28:	bf00      	nop
 8000f2a:	3708      	adds	r7, #8
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	40023800 	.word	0x40023800

08000f34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f38:	bf00      	nop
 8000f3a:	e7fd      	b.n	8000f38 <NMI_Handler+0x4>

08000f3c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f40:	bf00      	nop
 8000f42:	e7fd      	b.n	8000f40 <HardFault_Handler+0x4>

08000f44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f48:	bf00      	nop
 8000f4a:	e7fd      	b.n	8000f48 <MemManage_Handler+0x4>

08000f4c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f50:	bf00      	nop
 8000f52:	e7fd      	b.n	8000f50 <BusFault_Handler+0x4>

08000f54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f58:	bf00      	nop
 8000f5a:	e7fd      	b.n	8000f58 <UsageFault_Handler+0x4>

08000f5c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f60:	bf00      	nop
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr

08000f6a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f6a:	b480      	push	{r7}
 8000f6c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f6e:	bf00      	nop
 8000f70:	46bd      	mov	sp, r7
 8000f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f76:	4770      	bx	lr

08000f78 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f7c:	bf00      	nop
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr
	...

08000f88 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if(Timer1 > 0)
 8000f8c:	4b0b      	ldr	r3, [pc, #44]	@ (8000fbc <SysTick_Handler+0x34>)
 8000f8e:	881b      	ldrh	r3, [r3, #0]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d005      	beq.n	8000fa0 <SysTick_Handler+0x18>
	{
		Timer1--;
 8000f94:	4b09      	ldr	r3, [pc, #36]	@ (8000fbc <SysTick_Handler+0x34>)
 8000f96:	881b      	ldrh	r3, [r3, #0]
 8000f98:	3b01      	subs	r3, #1
 8000f9a:	b29a      	uxth	r2, r3
 8000f9c:	4b07      	ldr	r3, [pc, #28]	@ (8000fbc <SysTick_Handler+0x34>)
 8000f9e:	801a      	strh	r2, [r3, #0]
	}
	if(Timer2 > 0)
 8000fa0:	4b07      	ldr	r3, [pc, #28]	@ (8000fc0 <SysTick_Handler+0x38>)
 8000fa2:	881b      	ldrh	r3, [r3, #0]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d005      	beq.n	8000fb4 <SysTick_Handler+0x2c>
	{
		Timer2--;
 8000fa8:	4b05      	ldr	r3, [pc, #20]	@ (8000fc0 <SysTick_Handler+0x38>)
 8000faa:	881b      	ldrh	r3, [r3, #0]
 8000fac:	3b01      	subs	r3, #1
 8000fae:	b29a      	uxth	r2, r3
 8000fb0:	4b03      	ldr	r3, [pc, #12]	@ (8000fc0 <SysTick_Handler+0x38>)
 8000fb2:	801a      	strh	r2, [r3, #0]
	}
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fb4:	f000 fa8a 	bl	80014cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fb8:	bf00      	nop
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	200001d8 	.word	0x200001d8
 8000fc0:	200001da 	.word	0x200001da

08000fc4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000fc8:	4802      	ldr	r0, [pc, #8]	@ (8000fd4 <TIM3_IRQHandler+0x10>)
 8000fca:	f002 f8c7 	bl	800315c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000fce:	bf00      	nop
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	200000ec 	.word	0x200000ec

08000fd8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b086      	sub	sp, #24
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fe0:	4a14      	ldr	r2, [pc, #80]	@ (8001034 <_sbrk+0x5c>)
 8000fe2:	4b15      	ldr	r3, [pc, #84]	@ (8001038 <_sbrk+0x60>)
 8000fe4:	1ad3      	subs	r3, r2, r3
 8000fe6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fec:	4b13      	ldr	r3, [pc, #76]	@ (800103c <_sbrk+0x64>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d102      	bne.n	8000ffa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ff4:	4b11      	ldr	r3, [pc, #68]	@ (800103c <_sbrk+0x64>)
 8000ff6:	4a12      	ldr	r2, [pc, #72]	@ (8001040 <_sbrk+0x68>)
 8000ff8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ffa:	4b10      	ldr	r3, [pc, #64]	@ (800103c <_sbrk+0x64>)
 8000ffc:	681a      	ldr	r2, [r3, #0]
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	4413      	add	r3, r2
 8001002:	693a      	ldr	r2, [r7, #16]
 8001004:	429a      	cmp	r2, r3
 8001006:	d207      	bcs.n	8001018 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001008:	f007 fb68 	bl	80086dc <__errno>
 800100c:	4603      	mov	r3, r0
 800100e:	220c      	movs	r2, #12
 8001010:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001012:	f04f 33ff 	mov.w	r3, #4294967295
 8001016:	e009      	b.n	800102c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001018:	4b08      	ldr	r3, [pc, #32]	@ (800103c <_sbrk+0x64>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800101e:	4b07      	ldr	r3, [pc, #28]	@ (800103c <_sbrk+0x64>)
 8001020:	681a      	ldr	r2, [r3, #0]
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	4413      	add	r3, r2
 8001026:	4a05      	ldr	r2, [pc, #20]	@ (800103c <_sbrk+0x64>)
 8001028:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800102a:	68fb      	ldr	r3, [r7, #12]
}
 800102c:	4618      	mov	r0, r3
 800102e:	3718      	adds	r7, #24
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	20020000 	.word	0x20020000
 8001038:	00000400 	.word	0x00000400
 800103c:	200000e8 	.word	0x200000e8
 8001040:	200017a8 	.word	0x200017a8

08001044 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001048:	4b06      	ldr	r3, [pc, #24]	@ (8001064 <SystemInit+0x20>)
 800104a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800104e:	4a05      	ldr	r2, [pc, #20]	@ (8001064 <SystemInit+0x20>)
 8001050:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001054:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001058:	bf00      	nop
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	e000ed00 	.word	0xe000ed00

08001068 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b086      	sub	sp, #24
 800106c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800106e:	f107 0308 	add.w	r3, r7, #8
 8001072:	2200      	movs	r2, #0
 8001074:	601a      	str	r2, [r3, #0]
 8001076:	605a      	str	r2, [r3, #4]
 8001078:	609a      	str	r2, [r3, #8]
 800107a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800107c:	463b      	mov	r3, r7
 800107e:	2200      	movs	r2, #0
 8001080:	601a      	str	r2, [r3, #0]
 8001082:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001084:	4b1e      	ldr	r3, [pc, #120]	@ (8001100 <MX_TIM3_Init+0x98>)
 8001086:	4a1f      	ldr	r2, [pc, #124]	@ (8001104 <MX_TIM3_Init+0x9c>)
 8001088:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 800108a:	4b1d      	ldr	r3, [pc, #116]	@ (8001100 <MX_TIM3_Init+0x98>)
 800108c:	2201      	movs	r2, #1
 800108e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001090:	4b1b      	ldr	r3, [pc, #108]	@ (8001100 <MX_TIM3_Init+0x98>)
 8001092:	2200      	movs	r2, #0
 8001094:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 44999;
 8001096:	4b1a      	ldr	r3, [pc, #104]	@ (8001100 <MX_TIM3_Init+0x98>)
 8001098:	f64a 72c7 	movw	r2, #44999	@ 0xafc7
 800109c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800109e:	4b18      	ldr	r3, [pc, #96]	@ (8001100 <MX_TIM3_Init+0x98>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010a4:	4b16      	ldr	r3, [pc, #88]	@ (8001100 <MX_TIM3_Init+0x98>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80010aa:	4815      	ldr	r0, [pc, #84]	@ (8001100 <MX_TIM3_Init+0x98>)
 80010ac:	f001 ff2e 	bl	8002f0c <HAL_TIM_Base_Init>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80010b6:	f7ff fe81 	bl	8000dbc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010ba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010be:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80010c0:	f107 0308 	add.w	r3, r7, #8
 80010c4:	4619      	mov	r1, r3
 80010c6:	480e      	ldr	r0, [pc, #56]	@ (8001100 <MX_TIM3_Init+0x98>)
 80010c8:	f002 f938 	bl	800333c <HAL_TIM_ConfigClockSource>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80010d2:	f7ff fe73 	bl	8000dbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010d6:	2300      	movs	r3, #0
 80010d8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010da:	2300      	movs	r3, #0
 80010dc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80010de:	463b      	mov	r3, r7
 80010e0:	4619      	mov	r1, r3
 80010e2:	4807      	ldr	r0, [pc, #28]	@ (8001100 <MX_TIM3_Init+0x98>)
 80010e4:	f002 fb60 	bl	80037a8 <HAL_TIMEx_MasterConfigSynchronization>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80010ee:	f7ff fe65 	bl	8000dbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 80010f2:	4803      	ldr	r0, [pc, #12]	@ (8001100 <MX_TIM3_Init+0x98>)
 80010f4:	f001 ffc2 	bl	800307c <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM3_Init 2 */

}
 80010f8:	bf00      	nop
 80010fa:	3718      	adds	r7, #24
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	200000ec 	.word	0x200000ec
 8001104:	40000400 	.word	0x40000400

08001108 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b086      	sub	sp, #24
 800110c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800110e:	f107 0308 	add.w	r3, r7, #8
 8001112:	2200      	movs	r2, #0
 8001114:	601a      	str	r2, [r3, #0]
 8001116:	605a      	str	r2, [r3, #4]
 8001118:	609a      	str	r2, [r3, #8]
 800111a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800111c:	463b      	mov	r3, r7
 800111e:	2200      	movs	r2, #0
 8001120:	601a      	str	r2, [r3, #0]
 8001122:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */
  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001124:	4b1e      	ldr	r3, [pc, #120]	@ (80011a0 <MX_TIM4_Init+0x98>)
 8001126:	4a1f      	ldr	r2, [pc, #124]	@ (80011a4 <MX_TIM4_Init+0x9c>)
 8001128:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 89;
 800112a:	4b1d      	ldr	r3, [pc, #116]	@ (80011a0 <MX_TIM4_Init+0x98>)
 800112c:	2259      	movs	r2, #89	@ 0x59
 800112e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001130:	4b1b      	ldr	r3, [pc, #108]	@ (80011a0 <MX_TIM4_Init+0x98>)
 8001132:	2200      	movs	r2, #0
 8001134:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001136:	4b1a      	ldr	r3, [pc, #104]	@ (80011a0 <MX_TIM4_Init+0x98>)
 8001138:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800113c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800113e:	4b18      	ldr	r3, [pc, #96]	@ (80011a0 <MX_TIM4_Init+0x98>)
 8001140:	2200      	movs	r2, #0
 8001142:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001144:	4b16      	ldr	r3, [pc, #88]	@ (80011a0 <MX_TIM4_Init+0x98>)
 8001146:	2200      	movs	r2, #0
 8001148:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800114a:	4815      	ldr	r0, [pc, #84]	@ (80011a0 <MX_TIM4_Init+0x98>)
 800114c:	f001 fede 	bl	8002f0c <HAL_TIM_Base_Init>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8001156:	f7ff fe31 	bl	8000dbc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800115a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800115e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001160:	f107 0308 	add.w	r3, r7, #8
 8001164:	4619      	mov	r1, r3
 8001166:	480e      	ldr	r0, [pc, #56]	@ (80011a0 <MX_TIM4_Init+0x98>)
 8001168:	f002 f8e8 	bl	800333c <HAL_TIM_ConfigClockSource>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8001172:	f7ff fe23 	bl	8000dbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001176:	2300      	movs	r3, #0
 8001178:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800117a:	2300      	movs	r3, #0
 800117c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800117e:	463b      	mov	r3, r7
 8001180:	4619      	mov	r1, r3
 8001182:	4807      	ldr	r0, [pc, #28]	@ (80011a0 <MX_TIM4_Init+0x98>)
 8001184:	f002 fb10 	bl	80037a8 <HAL_TIMEx_MasterConfigSynchronization>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 800118e:	f7ff fe15 	bl	8000dbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */
  HAL_TIM_Base_Start(&htim4);
 8001192:	4803      	ldr	r0, [pc, #12]	@ (80011a0 <MX_TIM4_Init+0x98>)
 8001194:	f001 ff0a 	bl	8002fac <HAL_TIM_Base_Start>
  /* USER CODE END TIM4_Init 2 */

}
 8001198:	bf00      	nop
 800119a:	3718      	adds	r7, #24
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	20000134 	.word	0x20000134
 80011a4:	40000800 	.word	0x40000800

080011a8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b084      	sub	sp, #16
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4a18      	ldr	r2, [pc, #96]	@ (8001218 <HAL_TIM_Base_MspInit+0x70>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d116      	bne.n	80011e8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80011ba:	2300      	movs	r3, #0
 80011bc:	60fb      	str	r3, [r7, #12]
 80011be:	4b17      	ldr	r3, [pc, #92]	@ (800121c <HAL_TIM_Base_MspInit+0x74>)
 80011c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011c2:	4a16      	ldr	r2, [pc, #88]	@ (800121c <HAL_TIM_Base_MspInit+0x74>)
 80011c4:	f043 0302 	orr.w	r3, r3, #2
 80011c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80011ca:	4b14      	ldr	r3, [pc, #80]	@ (800121c <HAL_TIM_Base_MspInit+0x74>)
 80011cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ce:	f003 0302 	and.w	r3, r3, #2
 80011d2:	60fb      	str	r3, [r7, #12]
 80011d4:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80011d6:	2200      	movs	r2, #0
 80011d8:	2100      	movs	r1, #0
 80011da:	201d      	movs	r0, #29
 80011dc:	f000 fa71 	bl	80016c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80011e0:	201d      	movs	r0, #29
 80011e2:	f000 fa8a 	bl	80016fa <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80011e6:	e012      	b.n	800120e <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM4)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4a0c      	ldr	r2, [pc, #48]	@ (8001220 <HAL_TIM_Base_MspInit+0x78>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d10d      	bne.n	800120e <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80011f2:	2300      	movs	r3, #0
 80011f4:	60bb      	str	r3, [r7, #8]
 80011f6:	4b09      	ldr	r3, [pc, #36]	@ (800121c <HAL_TIM_Base_MspInit+0x74>)
 80011f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011fa:	4a08      	ldr	r2, [pc, #32]	@ (800121c <HAL_TIM_Base_MspInit+0x74>)
 80011fc:	f043 0304 	orr.w	r3, r3, #4
 8001200:	6413      	str	r3, [r2, #64]	@ 0x40
 8001202:	4b06      	ldr	r3, [pc, #24]	@ (800121c <HAL_TIM_Base_MspInit+0x74>)
 8001204:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001206:	f003 0304 	and.w	r3, r3, #4
 800120a:	60bb      	str	r3, [r7, #8]
 800120c:	68bb      	ldr	r3, [r7, #8]
}
 800120e:	bf00      	nop
 8001210:	3710      	adds	r7, #16
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	40000400 	.word	0x40000400
 800121c:	40023800 	.word	0x40023800
 8001220:	40000800 	.word	0x40000800

08001224 <HAL_TIM_PeriodElapsedCallback>:
/*-----------------------------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------------------------*
 *								TIM3 + Interrupt callback function - 1ms callback
 *-----------------------------------------------------------------------------------------------------*/
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]

	if(htim->Instance == TIM3)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a20      	ldr	r2, [pc, #128]	@ (80012b4 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d139      	bne.n	80012aa <HAL_TIM_PeriodElapsedCallback+0x86>
	{
		static uint8_t cnt10MS = 0;
		static uint8_t cnt20MS = 0;
		static uint8_t cnt100MS = 0;
		static uint16_t cnt1000MS = 0;
		cnt10MS++; cnt20MS++; cnt100MS++; cnt1000MS++;
 8001236:	4b20      	ldr	r3, [pc, #128]	@ (80012b8 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8001238:	781b      	ldrb	r3, [r3, #0]
 800123a:	3301      	adds	r3, #1
 800123c:	b2da      	uxtb	r2, r3
 800123e:	4b1e      	ldr	r3, [pc, #120]	@ (80012b8 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8001240:	701a      	strb	r2, [r3, #0]
 8001242:	4b1e      	ldr	r3, [pc, #120]	@ (80012bc <HAL_TIM_PeriodElapsedCallback+0x98>)
 8001244:	781b      	ldrb	r3, [r3, #0]
 8001246:	3301      	adds	r3, #1
 8001248:	b2da      	uxtb	r2, r3
 800124a:	4b1c      	ldr	r3, [pc, #112]	@ (80012bc <HAL_TIM_PeriodElapsedCallback+0x98>)
 800124c:	701a      	strb	r2, [r3, #0]
 800124e:	4b1c      	ldr	r3, [pc, #112]	@ (80012c0 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8001250:	781b      	ldrb	r3, [r3, #0]
 8001252:	3301      	adds	r3, #1
 8001254:	b2da      	uxtb	r2, r3
 8001256:	4b1a      	ldr	r3, [pc, #104]	@ (80012c0 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8001258:	701a      	strb	r2, [r3, #0]
 800125a:	4b1a      	ldr	r3, [pc, #104]	@ (80012c4 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 800125c:	881b      	ldrh	r3, [r3, #0]
 800125e:	3301      	adds	r3, #1
 8001260:	b29a      	uxth	r2, r3
 8001262:	4b18      	ldr	r3, [pc, #96]	@ (80012c4 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001264:	801a      	strh	r2, [r3, #0]
		if(cnt10MS >= CALLBACK_10MS)
 8001266:	4b14      	ldr	r3, [pc, #80]	@ (80012b8 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	2b09      	cmp	r3, #9
 800126c:	d903      	bls.n	8001276 <HAL_TIM_PeriodElapsedCallback+0x52>
		{	// 10Ms Callback
			cnt10MS = 0;
 800126e:	4b12      	ldr	r3, [pc, #72]	@ (80012b8 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8001270:	2200      	movs	r2, #0
 8001272:	701a      	strb	r2, [r3, #0]
			cnt1000MS = 0;

		}

	}
}
 8001274:	e019      	b.n	80012aa <HAL_TIM_PeriodElapsedCallback+0x86>
		else if(cnt20MS >= CALLBACK_20MS)
 8001276:	4b11      	ldr	r3, [pc, #68]	@ (80012bc <HAL_TIM_PeriodElapsedCallback+0x98>)
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	2b13      	cmp	r3, #19
 800127c:	d905      	bls.n	800128a <HAL_TIM_PeriodElapsedCallback+0x66>
			SD_Card_Test();
 800127e:	f007 f99f 	bl	80085c0 <SD_Card_Test>
			cnt20MS = 0;
 8001282:	4b0e      	ldr	r3, [pc, #56]	@ (80012bc <HAL_TIM_PeriodElapsedCallback+0x98>)
 8001284:	2200      	movs	r2, #0
 8001286:	701a      	strb	r2, [r3, #0]
}
 8001288:	e00f      	b.n	80012aa <HAL_TIM_PeriodElapsedCallback+0x86>
		else if(cnt100MS >= CALLBACK_100MS)
 800128a:	4b0d      	ldr	r3, [pc, #52]	@ (80012c0 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	2b63      	cmp	r3, #99	@ 0x63
 8001290:	d903      	bls.n	800129a <HAL_TIM_PeriodElapsedCallback+0x76>
			cnt100MS = 0;
 8001292:	4b0b      	ldr	r3, [pc, #44]	@ (80012c0 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8001294:	2200      	movs	r2, #0
 8001296:	701a      	strb	r2, [r3, #0]
}
 8001298:	e007      	b.n	80012aa <HAL_TIM_PeriodElapsedCallback+0x86>
		else if(cnt1000MS >= CALLBACK_1000MS)
 800129a:	4b0a      	ldr	r3, [pc, #40]	@ (80012c4 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 800129c:	881b      	ldrh	r3, [r3, #0]
 800129e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80012a2:	d302      	bcc.n	80012aa <HAL_TIM_PeriodElapsedCallback+0x86>
			cnt1000MS = 0;
 80012a4:	4b07      	ldr	r3, [pc, #28]	@ (80012c4 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	801a      	strh	r2, [r3, #0]
}
 80012aa:	bf00      	nop
 80012ac:	3708      	adds	r7, #8
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	40000400 	.word	0x40000400
 80012b8:	2000017c 	.word	0x2000017c
 80012bc:	2000017d 	.word	0x2000017d
 80012c0:	2000017e 	.word	0x2000017e
 80012c4:	20000180 	.word	0x20000180

080012c8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80012cc:	4b11      	ldr	r3, [pc, #68]	@ (8001314 <MX_USART2_UART_Init+0x4c>)
 80012ce:	4a12      	ldr	r2, [pc, #72]	@ (8001318 <MX_USART2_UART_Init+0x50>)
 80012d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80012d2:	4b10      	ldr	r3, [pc, #64]	@ (8001314 <MX_USART2_UART_Init+0x4c>)
 80012d4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80012d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80012da:	4b0e      	ldr	r3, [pc, #56]	@ (8001314 <MX_USART2_UART_Init+0x4c>)
 80012dc:	2200      	movs	r2, #0
 80012de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80012e0:	4b0c      	ldr	r3, [pc, #48]	@ (8001314 <MX_USART2_UART_Init+0x4c>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80012e6:	4b0b      	ldr	r3, [pc, #44]	@ (8001314 <MX_USART2_UART_Init+0x4c>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80012ec:	4b09      	ldr	r3, [pc, #36]	@ (8001314 <MX_USART2_UART_Init+0x4c>)
 80012ee:	220c      	movs	r2, #12
 80012f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012f2:	4b08      	ldr	r3, [pc, #32]	@ (8001314 <MX_USART2_UART_Init+0x4c>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80012f8:	4b06      	ldr	r3, [pc, #24]	@ (8001314 <MX_USART2_UART_Init+0x4c>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80012fe:	4805      	ldr	r0, [pc, #20]	@ (8001314 <MX_USART2_UART_Init+0x4c>)
 8001300:	f002 fae2 	bl	80038c8 <HAL_UART_Init>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d001      	beq.n	800130e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800130a:	f7ff fd57 	bl	8000dbc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800130e:	bf00      	nop
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	20000184 	.word	0x20000184
 8001318:	40004400 	.word	0x40004400

0800131c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b08a      	sub	sp, #40	@ 0x28
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001324:	f107 0314 	add.w	r3, r7, #20
 8001328:	2200      	movs	r2, #0
 800132a:	601a      	str	r2, [r3, #0]
 800132c:	605a      	str	r2, [r3, #4]
 800132e:	609a      	str	r2, [r3, #8]
 8001330:	60da      	str	r2, [r3, #12]
 8001332:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a19      	ldr	r2, [pc, #100]	@ (80013a0 <HAL_UART_MspInit+0x84>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d12b      	bne.n	8001396 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800133e:	2300      	movs	r3, #0
 8001340:	613b      	str	r3, [r7, #16]
 8001342:	4b18      	ldr	r3, [pc, #96]	@ (80013a4 <HAL_UART_MspInit+0x88>)
 8001344:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001346:	4a17      	ldr	r2, [pc, #92]	@ (80013a4 <HAL_UART_MspInit+0x88>)
 8001348:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800134c:	6413      	str	r3, [r2, #64]	@ 0x40
 800134e:	4b15      	ldr	r3, [pc, #84]	@ (80013a4 <HAL_UART_MspInit+0x88>)
 8001350:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001352:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001356:	613b      	str	r3, [r7, #16]
 8001358:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800135a:	2300      	movs	r3, #0
 800135c:	60fb      	str	r3, [r7, #12]
 800135e:	4b11      	ldr	r3, [pc, #68]	@ (80013a4 <HAL_UART_MspInit+0x88>)
 8001360:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001362:	4a10      	ldr	r2, [pc, #64]	@ (80013a4 <HAL_UART_MspInit+0x88>)
 8001364:	f043 0301 	orr.w	r3, r3, #1
 8001368:	6313      	str	r3, [r2, #48]	@ 0x30
 800136a:	4b0e      	ldr	r3, [pc, #56]	@ (80013a4 <HAL_UART_MspInit+0x88>)
 800136c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800136e:	f003 0301 	and.w	r3, r3, #1
 8001372:	60fb      	str	r3, [r7, #12]
 8001374:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001376:	230c      	movs	r3, #12
 8001378:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800137a:	2302      	movs	r3, #2
 800137c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137e:	2300      	movs	r3, #0
 8001380:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001382:	2303      	movs	r3, #3
 8001384:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001386:	2307      	movs	r3, #7
 8001388:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800138a:	f107 0314 	add.w	r3, r7, #20
 800138e:	4619      	mov	r1, r3
 8001390:	4805      	ldr	r0, [pc, #20]	@ (80013a8 <HAL_UART_MspInit+0x8c>)
 8001392:	f000 f9cd 	bl	8001730 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001396:	bf00      	nop
 8001398:	3728      	adds	r7, #40	@ 0x28
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	40004400 	.word	0x40004400
 80013a4:	40023800 	.word	0x40023800
 80013a8:	40020000 	.word	0x40020000

080013ac <UART_Print>:
  }
}

/* USER CODE BEGIN 1 */
void UART_Print(char* str)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)str, h_strlen(str), 100);
 80013b4:	6878      	ldr	r0, [r7, #4]
 80013b6:	f007 f951 	bl	800865c <h_strlen>
 80013ba:	4603      	mov	r3, r0
 80013bc:	b29a      	uxth	r2, r3
 80013be:	2364      	movs	r3, #100	@ 0x64
 80013c0:	6879      	ldr	r1, [r7, #4]
 80013c2:	4803      	ldr	r0, [pc, #12]	@ (80013d0 <UART_Print+0x24>)
 80013c4:	f002 fad0 	bl	8003968 <HAL_UART_Transmit>
}
 80013c8:	bf00      	nop
 80013ca:	3708      	adds	r7, #8
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	20000184 	.word	0x20000184

080013d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80013d4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800140c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80013d8:	f7ff fe34 	bl	8001044 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80013dc:	480c      	ldr	r0, [pc, #48]	@ (8001410 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80013de:	490d      	ldr	r1, [pc, #52]	@ (8001414 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80013e0:	4a0d      	ldr	r2, [pc, #52]	@ (8001418 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80013e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013e4:	e002      	b.n	80013ec <LoopCopyDataInit>

080013e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013ea:	3304      	adds	r3, #4

080013ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013f0:	d3f9      	bcc.n	80013e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013f2:	4a0a      	ldr	r2, [pc, #40]	@ (800141c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80013f4:	4c0a      	ldr	r4, [pc, #40]	@ (8001420 <LoopFillZerobss+0x22>)
  movs r3, #0
 80013f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013f8:	e001      	b.n	80013fe <LoopFillZerobss>

080013fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013fc:	3204      	adds	r2, #4

080013fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001400:	d3fb      	bcc.n	80013fa <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001402:	f007 f971 	bl	80086e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001406:	f7ff fc55 	bl	8000cb4 <main>
  bx  lr    
 800140a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800140c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001410:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001414:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001418:	080095ec 	.word	0x080095ec
  ldr r2, =_sbss
 800141c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001420:	200017a4 	.word	0x200017a4

08001424 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001424:	e7fe      	b.n	8001424 <ADC_IRQHandler>
	...

08001428 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800142c:	4b0e      	ldr	r3, [pc, #56]	@ (8001468 <HAL_Init+0x40>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4a0d      	ldr	r2, [pc, #52]	@ (8001468 <HAL_Init+0x40>)
 8001432:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001436:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001438:	4b0b      	ldr	r3, [pc, #44]	@ (8001468 <HAL_Init+0x40>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a0a      	ldr	r2, [pc, #40]	@ (8001468 <HAL_Init+0x40>)
 800143e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001442:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001444:	4b08      	ldr	r3, [pc, #32]	@ (8001468 <HAL_Init+0x40>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a07      	ldr	r2, [pc, #28]	@ (8001468 <HAL_Init+0x40>)
 800144a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800144e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001450:	2003      	movs	r0, #3
 8001452:	f000 f92b 	bl	80016ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001456:	2000      	movs	r0, #0
 8001458:	f000 f808 	bl	800146c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800145c:	f7ff fd42 	bl	8000ee4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001460:	2300      	movs	r3, #0
}
 8001462:	4618      	mov	r0, r3
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	40023c00 	.word	0x40023c00

0800146c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001474:	4b12      	ldr	r3, [pc, #72]	@ (80014c0 <HAL_InitTick+0x54>)
 8001476:	681a      	ldr	r2, [r3, #0]
 8001478:	4b12      	ldr	r3, [pc, #72]	@ (80014c4 <HAL_InitTick+0x58>)
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	4619      	mov	r1, r3
 800147e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001482:	fbb3 f3f1 	udiv	r3, r3, r1
 8001486:	fbb2 f3f3 	udiv	r3, r2, r3
 800148a:	4618      	mov	r0, r3
 800148c:	f000 f943 	bl	8001716 <HAL_SYSTICK_Config>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001496:	2301      	movs	r3, #1
 8001498:	e00e      	b.n	80014b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	2b0f      	cmp	r3, #15
 800149e:	d80a      	bhi.n	80014b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014a0:	2200      	movs	r2, #0
 80014a2:	6879      	ldr	r1, [r7, #4]
 80014a4:	f04f 30ff 	mov.w	r0, #4294967295
 80014a8:	f000 f90b 	bl	80016c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014ac:	4a06      	ldr	r2, [pc, #24]	@ (80014c8 <HAL_InitTick+0x5c>)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014b2:	2300      	movs	r3, #0
 80014b4:	e000      	b.n	80014b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014b6:	2301      	movs	r3, #1
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	3708      	adds	r7, #8
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	20000000 	.word	0x20000000
 80014c4:	20000008 	.word	0x20000008
 80014c8:	20000004 	.word	0x20000004

080014cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014d0:	4b06      	ldr	r3, [pc, #24]	@ (80014ec <HAL_IncTick+0x20>)
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	461a      	mov	r2, r3
 80014d6:	4b06      	ldr	r3, [pc, #24]	@ (80014f0 <HAL_IncTick+0x24>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4413      	add	r3, r2
 80014dc:	4a04      	ldr	r2, [pc, #16]	@ (80014f0 <HAL_IncTick+0x24>)
 80014de:	6013      	str	r3, [r2, #0]
}
 80014e0:	bf00      	nop
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr
 80014ea:	bf00      	nop
 80014ec:	20000008 	.word	0x20000008
 80014f0:	200001cc 	.word	0x200001cc

080014f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  return uwTick;
 80014f8:	4b03      	ldr	r3, [pc, #12]	@ (8001508 <HAL_GetTick+0x14>)
 80014fa:	681b      	ldr	r3, [r3, #0]
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr
 8001506:	bf00      	nop
 8001508:	200001cc 	.word	0x200001cc

0800150c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800150c:	b480      	push	{r7}
 800150e:	b085      	sub	sp, #20
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	f003 0307 	and.w	r3, r3, #7
 800151a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800151c:	4b0c      	ldr	r3, [pc, #48]	@ (8001550 <__NVIC_SetPriorityGrouping+0x44>)
 800151e:	68db      	ldr	r3, [r3, #12]
 8001520:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001522:	68ba      	ldr	r2, [r7, #8]
 8001524:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001528:	4013      	ands	r3, r2
 800152a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001530:	68bb      	ldr	r3, [r7, #8]
 8001532:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001534:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001538:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800153c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800153e:	4a04      	ldr	r2, [pc, #16]	@ (8001550 <__NVIC_SetPriorityGrouping+0x44>)
 8001540:	68bb      	ldr	r3, [r7, #8]
 8001542:	60d3      	str	r3, [r2, #12]
}
 8001544:	bf00      	nop
 8001546:	3714      	adds	r7, #20
 8001548:	46bd      	mov	sp, r7
 800154a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154e:	4770      	bx	lr
 8001550:	e000ed00 	.word	0xe000ed00

08001554 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001558:	4b04      	ldr	r3, [pc, #16]	@ (800156c <__NVIC_GetPriorityGrouping+0x18>)
 800155a:	68db      	ldr	r3, [r3, #12]
 800155c:	0a1b      	lsrs	r3, r3, #8
 800155e:	f003 0307 	and.w	r3, r3, #7
}
 8001562:	4618      	mov	r0, r3
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr
 800156c:	e000ed00 	.word	0xe000ed00

08001570 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001570:	b480      	push	{r7}
 8001572:	b083      	sub	sp, #12
 8001574:	af00      	add	r7, sp, #0
 8001576:	4603      	mov	r3, r0
 8001578:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800157a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800157e:	2b00      	cmp	r3, #0
 8001580:	db0b      	blt.n	800159a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001582:	79fb      	ldrb	r3, [r7, #7]
 8001584:	f003 021f 	and.w	r2, r3, #31
 8001588:	4907      	ldr	r1, [pc, #28]	@ (80015a8 <__NVIC_EnableIRQ+0x38>)
 800158a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800158e:	095b      	lsrs	r3, r3, #5
 8001590:	2001      	movs	r0, #1
 8001592:	fa00 f202 	lsl.w	r2, r0, r2
 8001596:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800159a:	bf00      	nop
 800159c:	370c      	adds	r7, #12
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr
 80015a6:	bf00      	nop
 80015a8:	e000e100 	.word	0xe000e100

080015ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b083      	sub	sp, #12
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	4603      	mov	r3, r0
 80015b4:	6039      	str	r1, [r7, #0]
 80015b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	db0a      	blt.n	80015d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	b2da      	uxtb	r2, r3
 80015c4:	490c      	ldr	r1, [pc, #48]	@ (80015f8 <__NVIC_SetPriority+0x4c>)
 80015c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ca:	0112      	lsls	r2, r2, #4
 80015cc:	b2d2      	uxtb	r2, r2
 80015ce:	440b      	add	r3, r1
 80015d0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015d4:	e00a      	b.n	80015ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	b2da      	uxtb	r2, r3
 80015da:	4908      	ldr	r1, [pc, #32]	@ (80015fc <__NVIC_SetPriority+0x50>)
 80015dc:	79fb      	ldrb	r3, [r7, #7]
 80015de:	f003 030f 	and.w	r3, r3, #15
 80015e2:	3b04      	subs	r3, #4
 80015e4:	0112      	lsls	r2, r2, #4
 80015e6:	b2d2      	uxtb	r2, r2
 80015e8:	440b      	add	r3, r1
 80015ea:	761a      	strb	r2, [r3, #24]
}
 80015ec:	bf00      	nop
 80015ee:	370c      	adds	r7, #12
 80015f0:	46bd      	mov	sp, r7
 80015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f6:	4770      	bx	lr
 80015f8:	e000e100 	.word	0xe000e100
 80015fc:	e000ed00 	.word	0xe000ed00

08001600 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001600:	b480      	push	{r7}
 8001602:	b089      	sub	sp, #36	@ 0x24
 8001604:	af00      	add	r7, sp, #0
 8001606:	60f8      	str	r0, [r7, #12]
 8001608:	60b9      	str	r1, [r7, #8]
 800160a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	f003 0307 	and.w	r3, r3, #7
 8001612:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001614:	69fb      	ldr	r3, [r7, #28]
 8001616:	f1c3 0307 	rsb	r3, r3, #7
 800161a:	2b04      	cmp	r3, #4
 800161c:	bf28      	it	cs
 800161e:	2304      	movcs	r3, #4
 8001620:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001622:	69fb      	ldr	r3, [r7, #28]
 8001624:	3304      	adds	r3, #4
 8001626:	2b06      	cmp	r3, #6
 8001628:	d902      	bls.n	8001630 <NVIC_EncodePriority+0x30>
 800162a:	69fb      	ldr	r3, [r7, #28]
 800162c:	3b03      	subs	r3, #3
 800162e:	e000      	b.n	8001632 <NVIC_EncodePriority+0x32>
 8001630:	2300      	movs	r3, #0
 8001632:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001634:	f04f 32ff 	mov.w	r2, #4294967295
 8001638:	69bb      	ldr	r3, [r7, #24]
 800163a:	fa02 f303 	lsl.w	r3, r2, r3
 800163e:	43da      	mvns	r2, r3
 8001640:	68bb      	ldr	r3, [r7, #8]
 8001642:	401a      	ands	r2, r3
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001648:	f04f 31ff 	mov.w	r1, #4294967295
 800164c:	697b      	ldr	r3, [r7, #20]
 800164e:	fa01 f303 	lsl.w	r3, r1, r3
 8001652:	43d9      	mvns	r1, r3
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001658:	4313      	orrs	r3, r2
         );
}
 800165a:	4618      	mov	r0, r3
 800165c:	3724      	adds	r7, #36	@ 0x24
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr
	...

08001668 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	3b01      	subs	r3, #1
 8001674:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001678:	d301      	bcc.n	800167e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800167a:	2301      	movs	r3, #1
 800167c:	e00f      	b.n	800169e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800167e:	4a0a      	ldr	r2, [pc, #40]	@ (80016a8 <SysTick_Config+0x40>)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	3b01      	subs	r3, #1
 8001684:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001686:	210f      	movs	r1, #15
 8001688:	f04f 30ff 	mov.w	r0, #4294967295
 800168c:	f7ff ff8e 	bl	80015ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001690:	4b05      	ldr	r3, [pc, #20]	@ (80016a8 <SysTick_Config+0x40>)
 8001692:	2200      	movs	r2, #0
 8001694:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001696:	4b04      	ldr	r3, [pc, #16]	@ (80016a8 <SysTick_Config+0x40>)
 8001698:	2207      	movs	r2, #7
 800169a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800169c:	2300      	movs	r3, #0
}
 800169e:	4618      	mov	r0, r3
 80016a0:	3708      	adds	r7, #8
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	e000e010 	.word	0xe000e010

080016ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b082      	sub	sp, #8
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016b4:	6878      	ldr	r0, [r7, #4]
 80016b6:	f7ff ff29 	bl	800150c <__NVIC_SetPriorityGrouping>
}
 80016ba:	bf00      	nop
 80016bc:	3708      	adds	r7, #8
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}

080016c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016c2:	b580      	push	{r7, lr}
 80016c4:	b086      	sub	sp, #24
 80016c6:	af00      	add	r7, sp, #0
 80016c8:	4603      	mov	r3, r0
 80016ca:	60b9      	str	r1, [r7, #8]
 80016cc:	607a      	str	r2, [r7, #4]
 80016ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016d0:	2300      	movs	r3, #0
 80016d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016d4:	f7ff ff3e 	bl	8001554 <__NVIC_GetPriorityGrouping>
 80016d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016da:	687a      	ldr	r2, [r7, #4]
 80016dc:	68b9      	ldr	r1, [r7, #8]
 80016de:	6978      	ldr	r0, [r7, #20]
 80016e0:	f7ff ff8e 	bl	8001600 <NVIC_EncodePriority>
 80016e4:	4602      	mov	r2, r0
 80016e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016ea:	4611      	mov	r1, r2
 80016ec:	4618      	mov	r0, r3
 80016ee:	f7ff ff5d 	bl	80015ac <__NVIC_SetPriority>
}
 80016f2:	bf00      	nop
 80016f4:	3718      	adds	r7, #24
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}

080016fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016fa:	b580      	push	{r7, lr}
 80016fc:	b082      	sub	sp, #8
 80016fe:	af00      	add	r7, sp, #0
 8001700:	4603      	mov	r3, r0
 8001702:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001704:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001708:	4618      	mov	r0, r3
 800170a:	f7ff ff31 	bl	8001570 <__NVIC_EnableIRQ>
}
 800170e:	bf00      	nop
 8001710:	3708      	adds	r7, #8
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}

08001716 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001716:	b580      	push	{r7, lr}
 8001718:	b082      	sub	sp, #8
 800171a:	af00      	add	r7, sp, #0
 800171c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800171e:	6878      	ldr	r0, [r7, #4]
 8001720:	f7ff ffa2 	bl	8001668 <SysTick_Config>
 8001724:	4603      	mov	r3, r0
}
 8001726:	4618      	mov	r0, r3
 8001728:	3708      	adds	r7, #8
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
	...

08001730 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001730:	b480      	push	{r7}
 8001732:	b089      	sub	sp, #36	@ 0x24
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
 8001738:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800173a:	2300      	movs	r3, #0
 800173c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800173e:	2300      	movs	r3, #0
 8001740:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001742:	2300      	movs	r3, #0
 8001744:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001746:	2300      	movs	r3, #0
 8001748:	61fb      	str	r3, [r7, #28]
 800174a:	e165      	b.n	8001a18 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800174c:	2201      	movs	r2, #1
 800174e:	69fb      	ldr	r3, [r7, #28]
 8001750:	fa02 f303 	lsl.w	r3, r2, r3
 8001754:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	697a      	ldr	r2, [r7, #20]
 800175c:	4013      	ands	r3, r2
 800175e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001760:	693a      	ldr	r2, [r7, #16]
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	429a      	cmp	r2, r3
 8001766:	f040 8154 	bne.w	8001a12 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	f003 0303 	and.w	r3, r3, #3
 8001772:	2b01      	cmp	r3, #1
 8001774:	d005      	beq.n	8001782 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800177e:	2b02      	cmp	r3, #2
 8001780:	d130      	bne.n	80017e4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	689b      	ldr	r3, [r3, #8]
 8001786:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001788:	69fb      	ldr	r3, [r7, #28]
 800178a:	005b      	lsls	r3, r3, #1
 800178c:	2203      	movs	r2, #3
 800178e:	fa02 f303 	lsl.w	r3, r2, r3
 8001792:	43db      	mvns	r3, r3
 8001794:	69ba      	ldr	r2, [r7, #24]
 8001796:	4013      	ands	r3, r2
 8001798:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	68da      	ldr	r2, [r3, #12]
 800179e:	69fb      	ldr	r3, [r7, #28]
 80017a0:	005b      	lsls	r3, r3, #1
 80017a2:	fa02 f303 	lsl.w	r3, r2, r3
 80017a6:	69ba      	ldr	r2, [r7, #24]
 80017a8:	4313      	orrs	r3, r2
 80017aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	69ba      	ldr	r2, [r7, #24]
 80017b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017b8:	2201      	movs	r2, #1
 80017ba:	69fb      	ldr	r3, [r7, #28]
 80017bc:	fa02 f303 	lsl.w	r3, r2, r3
 80017c0:	43db      	mvns	r3, r3
 80017c2:	69ba      	ldr	r2, [r7, #24]
 80017c4:	4013      	ands	r3, r2
 80017c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	091b      	lsrs	r3, r3, #4
 80017ce:	f003 0201 	and.w	r2, r3, #1
 80017d2:	69fb      	ldr	r3, [r7, #28]
 80017d4:	fa02 f303 	lsl.w	r3, r2, r3
 80017d8:	69ba      	ldr	r2, [r7, #24]
 80017da:	4313      	orrs	r3, r2
 80017dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	69ba      	ldr	r2, [r7, #24]
 80017e2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	f003 0303 	and.w	r3, r3, #3
 80017ec:	2b03      	cmp	r3, #3
 80017ee:	d017      	beq.n	8001820 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	68db      	ldr	r3, [r3, #12]
 80017f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80017f6:	69fb      	ldr	r3, [r7, #28]
 80017f8:	005b      	lsls	r3, r3, #1
 80017fa:	2203      	movs	r2, #3
 80017fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001800:	43db      	mvns	r3, r3
 8001802:	69ba      	ldr	r2, [r7, #24]
 8001804:	4013      	ands	r3, r2
 8001806:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	689a      	ldr	r2, [r3, #8]
 800180c:	69fb      	ldr	r3, [r7, #28]
 800180e:	005b      	lsls	r3, r3, #1
 8001810:	fa02 f303 	lsl.w	r3, r2, r3
 8001814:	69ba      	ldr	r2, [r7, #24]
 8001816:	4313      	orrs	r3, r2
 8001818:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	69ba      	ldr	r2, [r7, #24]
 800181e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	f003 0303 	and.w	r3, r3, #3
 8001828:	2b02      	cmp	r3, #2
 800182a:	d123      	bne.n	8001874 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800182c:	69fb      	ldr	r3, [r7, #28]
 800182e:	08da      	lsrs	r2, r3, #3
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	3208      	adds	r2, #8
 8001834:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001838:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800183a:	69fb      	ldr	r3, [r7, #28]
 800183c:	f003 0307 	and.w	r3, r3, #7
 8001840:	009b      	lsls	r3, r3, #2
 8001842:	220f      	movs	r2, #15
 8001844:	fa02 f303 	lsl.w	r3, r2, r3
 8001848:	43db      	mvns	r3, r3
 800184a:	69ba      	ldr	r2, [r7, #24]
 800184c:	4013      	ands	r3, r2
 800184e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	691a      	ldr	r2, [r3, #16]
 8001854:	69fb      	ldr	r3, [r7, #28]
 8001856:	f003 0307 	and.w	r3, r3, #7
 800185a:	009b      	lsls	r3, r3, #2
 800185c:	fa02 f303 	lsl.w	r3, r2, r3
 8001860:	69ba      	ldr	r2, [r7, #24]
 8001862:	4313      	orrs	r3, r2
 8001864:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001866:	69fb      	ldr	r3, [r7, #28]
 8001868:	08da      	lsrs	r2, r3, #3
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	3208      	adds	r2, #8
 800186e:	69b9      	ldr	r1, [r7, #24]
 8001870:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800187a:	69fb      	ldr	r3, [r7, #28]
 800187c:	005b      	lsls	r3, r3, #1
 800187e:	2203      	movs	r2, #3
 8001880:	fa02 f303 	lsl.w	r3, r2, r3
 8001884:	43db      	mvns	r3, r3
 8001886:	69ba      	ldr	r2, [r7, #24]
 8001888:	4013      	ands	r3, r2
 800188a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	f003 0203 	and.w	r2, r3, #3
 8001894:	69fb      	ldr	r3, [r7, #28]
 8001896:	005b      	lsls	r3, r3, #1
 8001898:	fa02 f303 	lsl.w	r3, r2, r3
 800189c:	69ba      	ldr	r2, [r7, #24]
 800189e:	4313      	orrs	r3, r2
 80018a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	69ba      	ldr	r2, [r7, #24]
 80018a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	f000 80ae 	beq.w	8001a12 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018b6:	2300      	movs	r3, #0
 80018b8:	60fb      	str	r3, [r7, #12]
 80018ba:	4b5d      	ldr	r3, [pc, #372]	@ (8001a30 <HAL_GPIO_Init+0x300>)
 80018bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018be:	4a5c      	ldr	r2, [pc, #368]	@ (8001a30 <HAL_GPIO_Init+0x300>)
 80018c0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80018c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80018c6:	4b5a      	ldr	r3, [pc, #360]	@ (8001a30 <HAL_GPIO_Init+0x300>)
 80018c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80018ce:	60fb      	str	r3, [r7, #12]
 80018d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80018d2:	4a58      	ldr	r2, [pc, #352]	@ (8001a34 <HAL_GPIO_Init+0x304>)
 80018d4:	69fb      	ldr	r3, [r7, #28]
 80018d6:	089b      	lsrs	r3, r3, #2
 80018d8:	3302      	adds	r3, #2
 80018da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80018e0:	69fb      	ldr	r3, [r7, #28]
 80018e2:	f003 0303 	and.w	r3, r3, #3
 80018e6:	009b      	lsls	r3, r3, #2
 80018e8:	220f      	movs	r2, #15
 80018ea:	fa02 f303 	lsl.w	r3, r2, r3
 80018ee:	43db      	mvns	r3, r3
 80018f0:	69ba      	ldr	r2, [r7, #24]
 80018f2:	4013      	ands	r3, r2
 80018f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	4a4f      	ldr	r2, [pc, #316]	@ (8001a38 <HAL_GPIO_Init+0x308>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d025      	beq.n	800194a <HAL_GPIO_Init+0x21a>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	4a4e      	ldr	r2, [pc, #312]	@ (8001a3c <HAL_GPIO_Init+0x30c>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d01f      	beq.n	8001946 <HAL_GPIO_Init+0x216>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	4a4d      	ldr	r2, [pc, #308]	@ (8001a40 <HAL_GPIO_Init+0x310>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d019      	beq.n	8001942 <HAL_GPIO_Init+0x212>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	4a4c      	ldr	r2, [pc, #304]	@ (8001a44 <HAL_GPIO_Init+0x314>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d013      	beq.n	800193e <HAL_GPIO_Init+0x20e>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	4a4b      	ldr	r2, [pc, #300]	@ (8001a48 <HAL_GPIO_Init+0x318>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d00d      	beq.n	800193a <HAL_GPIO_Init+0x20a>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	4a4a      	ldr	r2, [pc, #296]	@ (8001a4c <HAL_GPIO_Init+0x31c>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d007      	beq.n	8001936 <HAL_GPIO_Init+0x206>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	4a49      	ldr	r2, [pc, #292]	@ (8001a50 <HAL_GPIO_Init+0x320>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d101      	bne.n	8001932 <HAL_GPIO_Init+0x202>
 800192e:	2306      	movs	r3, #6
 8001930:	e00c      	b.n	800194c <HAL_GPIO_Init+0x21c>
 8001932:	2307      	movs	r3, #7
 8001934:	e00a      	b.n	800194c <HAL_GPIO_Init+0x21c>
 8001936:	2305      	movs	r3, #5
 8001938:	e008      	b.n	800194c <HAL_GPIO_Init+0x21c>
 800193a:	2304      	movs	r3, #4
 800193c:	e006      	b.n	800194c <HAL_GPIO_Init+0x21c>
 800193e:	2303      	movs	r3, #3
 8001940:	e004      	b.n	800194c <HAL_GPIO_Init+0x21c>
 8001942:	2302      	movs	r3, #2
 8001944:	e002      	b.n	800194c <HAL_GPIO_Init+0x21c>
 8001946:	2301      	movs	r3, #1
 8001948:	e000      	b.n	800194c <HAL_GPIO_Init+0x21c>
 800194a:	2300      	movs	r3, #0
 800194c:	69fa      	ldr	r2, [r7, #28]
 800194e:	f002 0203 	and.w	r2, r2, #3
 8001952:	0092      	lsls	r2, r2, #2
 8001954:	4093      	lsls	r3, r2
 8001956:	69ba      	ldr	r2, [r7, #24]
 8001958:	4313      	orrs	r3, r2
 800195a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800195c:	4935      	ldr	r1, [pc, #212]	@ (8001a34 <HAL_GPIO_Init+0x304>)
 800195e:	69fb      	ldr	r3, [r7, #28]
 8001960:	089b      	lsrs	r3, r3, #2
 8001962:	3302      	adds	r3, #2
 8001964:	69ba      	ldr	r2, [r7, #24]
 8001966:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800196a:	4b3a      	ldr	r3, [pc, #232]	@ (8001a54 <HAL_GPIO_Init+0x324>)
 800196c:	689b      	ldr	r3, [r3, #8]
 800196e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001970:	693b      	ldr	r3, [r7, #16]
 8001972:	43db      	mvns	r3, r3
 8001974:	69ba      	ldr	r2, [r7, #24]
 8001976:	4013      	ands	r3, r2
 8001978:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001982:	2b00      	cmp	r3, #0
 8001984:	d003      	beq.n	800198e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001986:	69ba      	ldr	r2, [r7, #24]
 8001988:	693b      	ldr	r3, [r7, #16]
 800198a:	4313      	orrs	r3, r2
 800198c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800198e:	4a31      	ldr	r2, [pc, #196]	@ (8001a54 <HAL_GPIO_Init+0x324>)
 8001990:	69bb      	ldr	r3, [r7, #24]
 8001992:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001994:	4b2f      	ldr	r3, [pc, #188]	@ (8001a54 <HAL_GPIO_Init+0x324>)
 8001996:	68db      	ldr	r3, [r3, #12]
 8001998:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	43db      	mvns	r3, r3
 800199e:	69ba      	ldr	r2, [r7, #24]
 80019a0:	4013      	ands	r3, r2
 80019a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d003      	beq.n	80019b8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80019b0:	69ba      	ldr	r2, [r7, #24]
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	4313      	orrs	r3, r2
 80019b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80019b8:	4a26      	ldr	r2, [pc, #152]	@ (8001a54 <HAL_GPIO_Init+0x324>)
 80019ba:	69bb      	ldr	r3, [r7, #24]
 80019bc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80019be:	4b25      	ldr	r3, [pc, #148]	@ (8001a54 <HAL_GPIO_Init+0x324>)
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	43db      	mvns	r3, r3
 80019c8:	69ba      	ldr	r2, [r7, #24]
 80019ca:	4013      	ands	r3, r2
 80019cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d003      	beq.n	80019e2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80019da:	69ba      	ldr	r2, [r7, #24]
 80019dc:	693b      	ldr	r3, [r7, #16]
 80019de:	4313      	orrs	r3, r2
 80019e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80019e2:	4a1c      	ldr	r2, [pc, #112]	@ (8001a54 <HAL_GPIO_Init+0x324>)
 80019e4:	69bb      	ldr	r3, [r7, #24]
 80019e6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019e8:	4b1a      	ldr	r3, [pc, #104]	@ (8001a54 <HAL_GPIO_Init+0x324>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	43db      	mvns	r3, r3
 80019f2:	69ba      	ldr	r2, [r7, #24]
 80019f4:	4013      	ands	r3, r2
 80019f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d003      	beq.n	8001a0c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001a04:	69ba      	ldr	r2, [r7, #24]
 8001a06:	693b      	ldr	r3, [r7, #16]
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a0c:	4a11      	ldr	r2, [pc, #68]	@ (8001a54 <HAL_GPIO_Init+0x324>)
 8001a0e:	69bb      	ldr	r3, [r7, #24]
 8001a10:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a12:	69fb      	ldr	r3, [r7, #28]
 8001a14:	3301      	adds	r3, #1
 8001a16:	61fb      	str	r3, [r7, #28]
 8001a18:	69fb      	ldr	r3, [r7, #28]
 8001a1a:	2b0f      	cmp	r3, #15
 8001a1c:	f67f ae96 	bls.w	800174c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a20:	bf00      	nop
 8001a22:	bf00      	nop
 8001a24:	3724      	adds	r7, #36	@ 0x24
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr
 8001a2e:	bf00      	nop
 8001a30:	40023800 	.word	0x40023800
 8001a34:	40013800 	.word	0x40013800
 8001a38:	40020000 	.word	0x40020000
 8001a3c:	40020400 	.word	0x40020400
 8001a40:	40020800 	.word	0x40020800
 8001a44:	40020c00 	.word	0x40020c00
 8001a48:	40021000 	.word	0x40021000
 8001a4c:	40021400 	.word	0x40021400
 8001a50:	40021800 	.word	0x40021800
 8001a54:	40013c00 	.word	0x40013c00

08001a58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b083      	sub	sp, #12
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
 8001a60:	460b      	mov	r3, r1
 8001a62:	807b      	strh	r3, [r7, #2]
 8001a64:	4613      	mov	r3, r2
 8001a66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a68:	787b      	ldrb	r3, [r7, #1]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d003      	beq.n	8001a76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a6e:	887a      	ldrh	r2, [r7, #2]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001a74:	e003      	b.n	8001a7e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a76:	887b      	ldrh	r3, [r7, #2]
 8001a78:	041a      	lsls	r2, r3, #16
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	619a      	str	r2, [r3, #24]
}
 8001a7e:	bf00      	nop
 8001a80:	370c      	adds	r7, #12
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr
	...

08001a8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b084      	sub	sp, #16
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
 8001a94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d101      	bne.n	8001aa0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	e0cc      	b.n	8001c3a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001aa0:	4b68      	ldr	r3, [pc, #416]	@ (8001c44 <HAL_RCC_ClockConfig+0x1b8>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f003 030f 	and.w	r3, r3, #15
 8001aa8:	683a      	ldr	r2, [r7, #0]
 8001aaa:	429a      	cmp	r2, r3
 8001aac:	d90c      	bls.n	8001ac8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aae:	4b65      	ldr	r3, [pc, #404]	@ (8001c44 <HAL_RCC_ClockConfig+0x1b8>)
 8001ab0:	683a      	ldr	r2, [r7, #0]
 8001ab2:	b2d2      	uxtb	r2, r2
 8001ab4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ab6:	4b63      	ldr	r3, [pc, #396]	@ (8001c44 <HAL_RCC_ClockConfig+0x1b8>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f003 030f 	and.w	r3, r3, #15
 8001abe:	683a      	ldr	r2, [r7, #0]
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	d001      	beq.n	8001ac8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	e0b8      	b.n	8001c3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f003 0302 	and.w	r3, r3, #2
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d020      	beq.n	8001b16 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f003 0304 	and.w	r3, r3, #4
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d005      	beq.n	8001aec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ae0:	4b59      	ldr	r3, [pc, #356]	@ (8001c48 <HAL_RCC_ClockConfig+0x1bc>)
 8001ae2:	689b      	ldr	r3, [r3, #8]
 8001ae4:	4a58      	ldr	r2, [pc, #352]	@ (8001c48 <HAL_RCC_ClockConfig+0x1bc>)
 8001ae6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001aea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f003 0308 	and.w	r3, r3, #8
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d005      	beq.n	8001b04 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001af8:	4b53      	ldr	r3, [pc, #332]	@ (8001c48 <HAL_RCC_ClockConfig+0x1bc>)
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	4a52      	ldr	r2, [pc, #328]	@ (8001c48 <HAL_RCC_ClockConfig+0x1bc>)
 8001afe:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001b02:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b04:	4b50      	ldr	r3, [pc, #320]	@ (8001c48 <HAL_RCC_ClockConfig+0x1bc>)
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	494d      	ldr	r1, [pc, #308]	@ (8001c48 <HAL_RCC_ClockConfig+0x1bc>)
 8001b12:	4313      	orrs	r3, r2
 8001b14:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f003 0301 	and.w	r3, r3, #1
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d044      	beq.n	8001bac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	2b01      	cmp	r3, #1
 8001b28:	d107      	bne.n	8001b3a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b2a:	4b47      	ldr	r3, [pc, #284]	@ (8001c48 <HAL_RCC_ClockConfig+0x1bc>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d119      	bne.n	8001b6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
 8001b38:	e07f      	b.n	8001c3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	2b02      	cmp	r3, #2
 8001b40:	d003      	beq.n	8001b4a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b46:	2b03      	cmp	r3, #3
 8001b48:	d107      	bne.n	8001b5a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b4a:	4b3f      	ldr	r3, [pc, #252]	@ (8001c48 <HAL_RCC_ClockConfig+0x1bc>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d109      	bne.n	8001b6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
 8001b58:	e06f      	b.n	8001c3a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b5a:	4b3b      	ldr	r3, [pc, #236]	@ (8001c48 <HAL_RCC_ClockConfig+0x1bc>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f003 0302 	and.w	r3, r3, #2
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d101      	bne.n	8001b6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	e067      	b.n	8001c3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b6a:	4b37      	ldr	r3, [pc, #220]	@ (8001c48 <HAL_RCC_ClockConfig+0x1bc>)
 8001b6c:	689b      	ldr	r3, [r3, #8]
 8001b6e:	f023 0203 	bic.w	r2, r3, #3
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	4934      	ldr	r1, [pc, #208]	@ (8001c48 <HAL_RCC_ClockConfig+0x1bc>)
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b7c:	f7ff fcba 	bl	80014f4 <HAL_GetTick>
 8001b80:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b82:	e00a      	b.n	8001b9a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b84:	f7ff fcb6 	bl	80014f4 <HAL_GetTick>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	1ad3      	subs	r3, r2, r3
 8001b8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d901      	bls.n	8001b9a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b96:	2303      	movs	r3, #3
 8001b98:	e04f      	b.n	8001c3a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b9a:	4b2b      	ldr	r3, [pc, #172]	@ (8001c48 <HAL_RCC_ClockConfig+0x1bc>)
 8001b9c:	689b      	ldr	r3, [r3, #8]
 8001b9e:	f003 020c 	and.w	r2, r3, #12
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	009b      	lsls	r3, r3, #2
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	d1eb      	bne.n	8001b84 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001bac:	4b25      	ldr	r3, [pc, #148]	@ (8001c44 <HAL_RCC_ClockConfig+0x1b8>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f003 030f 	and.w	r3, r3, #15
 8001bb4:	683a      	ldr	r2, [r7, #0]
 8001bb6:	429a      	cmp	r2, r3
 8001bb8:	d20c      	bcs.n	8001bd4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bba:	4b22      	ldr	r3, [pc, #136]	@ (8001c44 <HAL_RCC_ClockConfig+0x1b8>)
 8001bbc:	683a      	ldr	r2, [r7, #0]
 8001bbe:	b2d2      	uxtb	r2, r2
 8001bc0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bc2:	4b20      	ldr	r3, [pc, #128]	@ (8001c44 <HAL_RCC_ClockConfig+0x1b8>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f003 030f 	and.w	r3, r3, #15
 8001bca:	683a      	ldr	r2, [r7, #0]
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	d001      	beq.n	8001bd4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	e032      	b.n	8001c3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f003 0304 	and.w	r3, r3, #4
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d008      	beq.n	8001bf2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001be0:	4b19      	ldr	r3, [pc, #100]	@ (8001c48 <HAL_RCC_ClockConfig+0x1bc>)
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	68db      	ldr	r3, [r3, #12]
 8001bec:	4916      	ldr	r1, [pc, #88]	@ (8001c48 <HAL_RCC_ClockConfig+0x1bc>)
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f003 0308 	and.w	r3, r3, #8
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d009      	beq.n	8001c12 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001bfe:	4b12      	ldr	r3, [pc, #72]	@ (8001c48 <HAL_RCC_ClockConfig+0x1bc>)
 8001c00:	689b      	ldr	r3, [r3, #8]
 8001c02:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	691b      	ldr	r3, [r3, #16]
 8001c0a:	00db      	lsls	r3, r3, #3
 8001c0c:	490e      	ldr	r1, [pc, #56]	@ (8001c48 <HAL_RCC_ClockConfig+0x1bc>)
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001c12:	f000 f855 	bl	8001cc0 <HAL_RCC_GetSysClockFreq>
 8001c16:	4602      	mov	r2, r0
 8001c18:	4b0b      	ldr	r3, [pc, #44]	@ (8001c48 <HAL_RCC_ClockConfig+0x1bc>)
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	091b      	lsrs	r3, r3, #4
 8001c1e:	f003 030f 	and.w	r3, r3, #15
 8001c22:	490a      	ldr	r1, [pc, #40]	@ (8001c4c <HAL_RCC_ClockConfig+0x1c0>)
 8001c24:	5ccb      	ldrb	r3, [r1, r3]
 8001c26:	fa22 f303 	lsr.w	r3, r2, r3
 8001c2a:	4a09      	ldr	r2, [pc, #36]	@ (8001c50 <HAL_RCC_ClockConfig+0x1c4>)
 8001c2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001c2e:	4b09      	ldr	r3, [pc, #36]	@ (8001c54 <HAL_RCC_ClockConfig+0x1c8>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4618      	mov	r0, r3
 8001c34:	f7ff fc1a 	bl	800146c <HAL_InitTick>

  return HAL_OK;
 8001c38:	2300      	movs	r3, #0
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	3710      	adds	r7, #16
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	40023c00 	.word	0x40023c00
 8001c48:	40023800 	.word	0x40023800
 8001c4c:	08009154 	.word	0x08009154
 8001c50:	20000000 	.word	0x20000000
 8001c54:	20000004 	.word	0x20000004

08001c58 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c5c:	4b03      	ldr	r3, [pc, #12]	@ (8001c6c <HAL_RCC_GetHCLKFreq+0x14>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	46bd      	mov	sp, r7
 8001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c68:	4770      	bx	lr
 8001c6a:	bf00      	nop
 8001c6c:	20000000 	.word	0x20000000

08001c70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001c74:	f7ff fff0 	bl	8001c58 <HAL_RCC_GetHCLKFreq>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	4b05      	ldr	r3, [pc, #20]	@ (8001c90 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	0a9b      	lsrs	r3, r3, #10
 8001c80:	f003 0307 	and.w	r3, r3, #7
 8001c84:	4903      	ldr	r1, [pc, #12]	@ (8001c94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c86:	5ccb      	ldrb	r3, [r1, r3]
 8001c88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	40023800 	.word	0x40023800
 8001c94:	08009164 	.word	0x08009164

08001c98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001c9c:	f7ff ffdc 	bl	8001c58 <HAL_RCC_GetHCLKFreq>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	4b05      	ldr	r3, [pc, #20]	@ (8001cb8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ca4:	689b      	ldr	r3, [r3, #8]
 8001ca6:	0b5b      	lsrs	r3, r3, #13
 8001ca8:	f003 0307 	and.w	r3, r3, #7
 8001cac:	4903      	ldr	r1, [pc, #12]	@ (8001cbc <HAL_RCC_GetPCLK2Freq+0x24>)
 8001cae:	5ccb      	ldrb	r3, [r1, r3]
 8001cb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	40023800 	.word	0x40023800
 8001cbc:	08009164 	.word	0x08009164

08001cc0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cc0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001cc4:	b0ae      	sub	sp, #184	@ 0xb8
 8001cc6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ce6:	4bcb      	ldr	r3, [pc, #812]	@ (8002014 <HAL_RCC_GetSysClockFreq+0x354>)
 8001ce8:	689b      	ldr	r3, [r3, #8]
 8001cea:	f003 030c 	and.w	r3, r3, #12
 8001cee:	2b0c      	cmp	r3, #12
 8001cf0:	f200 8206 	bhi.w	8002100 <HAL_RCC_GetSysClockFreq+0x440>
 8001cf4:	a201      	add	r2, pc, #4	@ (adr r2, 8001cfc <HAL_RCC_GetSysClockFreq+0x3c>)
 8001cf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cfa:	bf00      	nop
 8001cfc:	08001d31 	.word	0x08001d31
 8001d00:	08002101 	.word	0x08002101
 8001d04:	08002101 	.word	0x08002101
 8001d08:	08002101 	.word	0x08002101
 8001d0c:	08001d39 	.word	0x08001d39
 8001d10:	08002101 	.word	0x08002101
 8001d14:	08002101 	.word	0x08002101
 8001d18:	08002101 	.word	0x08002101
 8001d1c:	08001d41 	.word	0x08001d41
 8001d20:	08002101 	.word	0x08002101
 8001d24:	08002101 	.word	0x08002101
 8001d28:	08002101 	.word	0x08002101
 8001d2c:	08001f31 	.word	0x08001f31
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001d30:	4bb9      	ldr	r3, [pc, #740]	@ (8002018 <HAL_RCC_GetSysClockFreq+0x358>)
 8001d32:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 8001d36:	e1e7      	b.n	8002108 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001d38:	4bb8      	ldr	r3, [pc, #736]	@ (800201c <HAL_RCC_GetSysClockFreq+0x35c>)
 8001d3a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001d3e:	e1e3      	b.n	8002108 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d40:	4bb4      	ldr	r3, [pc, #720]	@ (8002014 <HAL_RCC_GetSysClockFreq+0x354>)
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001d48:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d4c:	4bb1      	ldr	r3, [pc, #708]	@ (8002014 <HAL_RCC_GetSysClockFreq+0x354>)
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d071      	beq.n	8001e3c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d58:	4bae      	ldr	r3, [pc, #696]	@ (8002014 <HAL_RCC_GetSysClockFreq+0x354>)
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	099b      	lsrs	r3, r3, #6
 8001d5e:	2200      	movs	r2, #0
 8001d60:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001d64:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001d68:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001d6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d70:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001d74:	2300      	movs	r3, #0
 8001d76:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001d7a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8001d7e:	4622      	mov	r2, r4
 8001d80:	462b      	mov	r3, r5
 8001d82:	f04f 0000 	mov.w	r0, #0
 8001d86:	f04f 0100 	mov.w	r1, #0
 8001d8a:	0159      	lsls	r1, r3, #5
 8001d8c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d90:	0150      	lsls	r0, r2, #5
 8001d92:	4602      	mov	r2, r0
 8001d94:	460b      	mov	r3, r1
 8001d96:	4621      	mov	r1, r4
 8001d98:	1a51      	subs	r1, r2, r1
 8001d9a:	6439      	str	r1, [r7, #64]	@ 0x40
 8001d9c:	4629      	mov	r1, r5
 8001d9e:	eb63 0301 	sbc.w	r3, r3, r1
 8001da2:	647b      	str	r3, [r7, #68]	@ 0x44
 8001da4:	f04f 0200 	mov.w	r2, #0
 8001da8:	f04f 0300 	mov.w	r3, #0
 8001dac:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8001db0:	4649      	mov	r1, r9
 8001db2:	018b      	lsls	r3, r1, #6
 8001db4:	4641      	mov	r1, r8
 8001db6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001dba:	4641      	mov	r1, r8
 8001dbc:	018a      	lsls	r2, r1, #6
 8001dbe:	4641      	mov	r1, r8
 8001dc0:	1a51      	subs	r1, r2, r1
 8001dc2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001dc4:	4649      	mov	r1, r9
 8001dc6:	eb63 0301 	sbc.w	r3, r3, r1
 8001dca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001dcc:	f04f 0200 	mov.w	r2, #0
 8001dd0:	f04f 0300 	mov.w	r3, #0
 8001dd4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8001dd8:	4649      	mov	r1, r9
 8001dda:	00cb      	lsls	r3, r1, #3
 8001ddc:	4641      	mov	r1, r8
 8001dde:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001de2:	4641      	mov	r1, r8
 8001de4:	00ca      	lsls	r2, r1, #3
 8001de6:	4610      	mov	r0, r2
 8001de8:	4619      	mov	r1, r3
 8001dea:	4603      	mov	r3, r0
 8001dec:	4622      	mov	r2, r4
 8001dee:	189b      	adds	r3, r3, r2
 8001df0:	633b      	str	r3, [r7, #48]	@ 0x30
 8001df2:	462b      	mov	r3, r5
 8001df4:	460a      	mov	r2, r1
 8001df6:	eb42 0303 	adc.w	r3, r2, r3
 8001dfa:	637b      	str	r3, [r7, #52]	@ 0x34
 8001dfc:	f04f 0200 	mov.w	r2, #0
 8001e00:	f04f 0300 	mov.w	r3, #0
 8001e04:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001e08:	4629      	mov	r1, r5
 8001e0a:	024b      	lsls	r3, r1, #9
 8001e0c:	4621      	mov	r1, r4
 8001e0e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001e12:	4621      	mov	r1, r4
 8001e14:	024a      	lsls	r2, r1, #9
 8001e16:	4610      	mov	r0, r2
 8001e18:	4619      	mov	r1, r3
 8001e1a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001e1e:	2200      	movs	r2, #0
 8001e20:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001e24:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001e28:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8001e2c:	f7fe fd46 	bl	80008bc <__aeabi_uldivmod>
 8001e30:	4602      	mov	r2, r0
 8001e32:	460b      	mov	r3, r1
 8001e34:	4613      	mov	r3, r2
 8001e36:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001e3a:	e067      	b.n	8001f0c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e3c:	4b75      	ldr	r3, [pc, #468]	@ (8002014 <HAL_RCC_GetSysClockFreq+0x354>)
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	099b      	lsrs	r3, r3, #6
 8001e42:	2200      	movs	r2, #0
 8001e44:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001e48:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8001e4c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001e50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e54:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001e56:	2300      	movs	r3, #0
 8001e58:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001e5a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8001e5e:	4622      	mov	r2, r4
 8001e60:	462b      	mov	r3, r5
 8001e62:	f04f 0000 	mov.w	r0, #0
 8001e66:	f04f 0100 	mov.w	r1, #0
 8001e6a:	0159      	lsls	r1, r3, #5
 8001e6c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e70:	0150      	lsls	r0, r2, #5
 8001e72:	4602      	mov	r2, r0
 8001e74:	460b      	mov	r3, r1
 8001e76:	4621      	mov	r1, r4
 8001e78:	1a51      	subs	r1, r2, r1
 8001e7a:	62b9      	str	r1, [r7, #40]	@ 0x28
 8001e7c:	4629      	mov	r1, r5
 8001e7e:	eb63 0301 	sbc.w	r3, r3, r1
 8001e82:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001e84:	f04f 0200 	mov.w	r2, #0
 8001e88:	f04f 0300 	mov.w	r3, #0
 8001e8c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8001e90:	4649      	mov	r1, r9
 8001e92:	018b      	lsls	r3, r1, #6
 8001e94:	4641      	mov	r1, r8
 8001e96:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001e9a:	4641      	mov	r1, r8
 8001e9c:	018a      	lsls	r2, r1, #6
 8001e9e:	4641      	mov	r1, r8
 8001ea0:	ebb2 0a01 	subs.w	sl, r2, r1
 8001ea4:	4649      	mov	r1, r9
 8001ea6:	eb63 0b01 	sbc.w	fp, r3, r1
 8001eaa:	f04f 0200 	mov.w	r2, #0
 8001eae:	f04f 0300 	mov.w	r3, #0
 8001eb2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001eb6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001eba:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001ebe:	4692      	mov	sl, r2
 8001ec0:	469b      	mov	fp, r3
 8001ec2:	4623      	mov	r3, r4
 8001ec4:	eb1a 0303 	adds.w	r3, sl, r3
 8001ec8:	623b      	str	r3, [r7, #32]
 8001eca:	462b      	mov	r3, r5
 8001ecc:	eb4b 0303 	adc.w	r3, fp, r3
 8001ed0:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ed2:	f04f 0200 	mov.w	r2, #0
 8001ed6:	f04f 0300 	mov.w	r3, #0
 8001eda:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001ede:	4629      	mov	r1, r5
 8001ee0:	028b      	lsls	r3, r1, #10
 8001ee2:	4621      	mov	r1, r4
 8001ee4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001ee8:	4621      	mov	r1, r4
 8001eea:	028a      	lsls	r2, r1, #10
 8001eec:	4610      	mov	r0, r2
 8001eee:	4619      	mov	r1, r3
 8001ef0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	673b      	str	r3, [r7, #112]	@ 0x70
 8001ef8:	677a      	str	r2, [r7, #116]	@ 0x74
 8001efa:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001efe:	f7fe fcdd 	bl	80008bc <__aeabi_uldivmod>
 8001f02:	4602      	mov	r2, r0
 8001f04:	460b      	mov	r3, r1
 8001f06:	4613      	mov	r3, r2
 8001f08:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001f0c:	4b41      	ldr	r3, [pc, #260]	@ (8002014 <HAL_RCC_GetSysClockFreq+0x354>)
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	0c1b      	lsrs	r3, r3, #16
 8001f12:	f003 0303 	and.w	r3, r3, #3
 8001f16:	3301      	adds	r3, #1
 8001f18:	005b      	lsls	r3, r3, #1
 8001f1a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 8001f1e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001f22:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001f26:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f2a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001f2e:	e0eb      	b.n	8002108 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f30:	4b38      	ldr	r3, [pc, #224]	@ (8002014 <HAL_RCC_GetSysClockFreq+0x354>)
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001f38:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001f3c:	4b35      	ldr	r3, [pc, #212]	@ (8002014 <HAL_RCC_GetSysClockFreq+0x354>)
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d06b      	beq.n	8002020 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f48:	4b32      	ldr	r3, [pc, #200]	@ (8002014 <HAL_RCC_GetSysClockFreq+0x354>)
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	099b      	lsrs	r3, r3, #6
 8001f4e:	2200      	movs	r2, #0
 8001f50:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001f52:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001f54:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001f56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f5a:	663b      	str	r3, [r7, #96]	@ 0x60
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	667b      	str	r3, [r7, #100]	@ 0x64
 8001f60:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001f64:	4622      	mov	r2, r4
 8001f66:	462b      	mov	r3, r5
 8001f68:	f04f 0000 	mov.w	r0, #0
 8001f6c:	f04f 0100 	mov.w	r1, #0
 8001f70:	0159      	lsls	r1, r3, #5
 8001f72:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f76:	0150      	lsls	r0, r2, #5
 8001f78:	4602      	mov	r2, r0
 8001f7a:	460b      	mov	r3, r1
 8001f7c:	4621      	mov	r1, r4
 8001f7e:	1a51      	subs	r1, r2, r1
 8001f80:	61b9      	str	r1, [r7, #24]
 8001f82:	4629      	mov	r1, r5
 8001f84:	eb63 0301 	sbc.w	r3, r3, r1
 8001f88:	61fb      	str	r3, [r7, #28]
 8001f8a:	f04f 0200 	mov.w	r2, #0
 8001f8e:	f04f 0300 	mov.w	r3, #0
 8001f92:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001f96:	4659      	mov	r1, fp
 8001f98:	018b      	lsls	r3, r1, #6
 8001f9a:	4651      	mov	r1, sl
 8001f9c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001fa0:	4651      	mov	r1, sl
 8001fa2:	018a      	lsls	r2, r1, #6
 8001fa4:	4651      	mov	r1, sl
 8001fa6:	ebb2 0801 	subs.w	r8, r2, r1
 8001faa:	4659      	mov	r1, fp
 8001fac:	eb63 0901 	sbc.w	r9, r3, r1
 8001fb0:	f04f 0200 	mov.w	r2, #0
 8001fb4:	f04f 0300 	mov.w	r3, #0
 8001fb8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001fbc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001fc0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001fc4:	4690      	mov	r8, r2
 8001fc6:	4699      	mov	r9, r3
 8001fc8:	4623      	mov	r3, r4
 8001fca:	eb18 0303 	adds.w	r3, r8, r3
 8001fce:	613b      	str	r3, [r7, #16]
 8001fd0:	462b      	mov	r3, r5
 8001fd2:	eb49 0303 	adc.w	r3, r9, r3
 8001fd6:	617b      	str	r3, [r7, #20]
 8001fd8:	f04f 0200 	mov.w	r2, #0
 8001fdc:	f04f 0300 	mov.w	r3, #0
 8001fe0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001fe4:	4629      	mov	r1, r5
 8001fe6:	024b      	lsls	r3, r1, #9
 8001fe8:	4621      	mov	r1, r4
 8001fea:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001fee:	4621      	mov	r1, r4
 8001ff0:	024a      	lsls	r2, r1, #9
 8001ff2:	4610      	mov	r0, r2
 8001ff4:	4619      	mov	r1, r3
 8001ff6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001ffe:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002000:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002004:	f7fe fc5a 	bl	80008bc <__aeabi_uldivmod>
 8002008:	4602      	mov	r2, r0
 800200a:	460b      	mov	r3, r1
 800200c:	4613      	mov	r3, r2
 800200e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002012:	e065      	b.n	80020e0 <HAL_RCC_GetSysClockFreq+0x420>
 8002014:	40023800 	.word	0x40023800
 8002018:	00f42400 	.word	0x00f42400
 800201c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002020:	4b3d      	ldr	r3, [pc, #244]	@ (8002118 <HAL_RCC_GetSysClockFreq+0x458>)
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	099b      	lsrs	r3, r3, #6
 8002026:	2200      	movs	r2, #0
 8002028:	4618      	mov	r0, r3
 800202a:	4611      	mov	r1, r2
 800202c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002030:	653b      	str	r3, [r7, #80]	@ 0x50
 8002032:	2300      	movs	r3, #0
 8002034:	657b      	str	r3, [r7, #84]	@ 0x54
 8002036:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800203a:	4642      	mov	r2, r8
 800203c:	464b      	mov	r3, r9
 800203e:	f04f 0000 	mov.w	r0, #0
 8002042:	f04f 0100 	mov.w	r1, #0
 8002046:	0159      	lsls	r1, r3, #5
 8002048:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800204c:	0150      	lsls	r0, r2, #5
 800204e:	4602      	mov	r2, r0
 8002050:	460b      	mov	r3, r1
 8002052:	4641      	mov	r1, r8
 8002054:	1a51      	subs	r1, r2, r1
 8002056:	60b9      	str	r1, [r7, #8]
 8002058:	4649      	mov	r1, r9
 800205a:	eb63 0301 	sbc.w	r3, r3, r1
 800205e:	60fb      	str	r3, [r7, #12]
 8002060:	f04f 0200 	mov.w	r2, #0
 8002064:	f04f 0300 	mov.w	r3, #0
 8002068:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800206c:	4659      	mov	r1, fp
 800206e:	018b      	lsls	r3, r1, #6
 8002070:	4651      	mov	r1, sl
 8002072:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002076:	4651      	mov	r1, sl
 8002078:	018a      	lsls	r2, r1, #6
 800207a:	4651      	mov	r1, sl
 800207c:	1a54      	subs	r4, r2, r1
 800207e:	4659      	mov	r1, fp
 8002080:	eb63 0501 	sbc.w	r5, r3, r1
 8002084:	f04f 0200 	mov.w	r2, #0
 8002088:	f04f 0300 	mov.w	r3, #0
 800208c:	00eb      	lsls	r3, r5, #3
 800208e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002092:	00e2      	lsls	r2, r4, #3
 8002094:	4614      	mov	r4, r2
 8002096:	461d      	mov	r5, r3
 8002098:	4643      	mov	r3, r8
 800209a:	18e3      	adds	r3, r4, r3
 800209c:	603b      	str	r3, [r7, #0]
 800209e:	464b      	mov	r3, r9
 80020a0:	eb45 0303 	adc.w	r3, r5, r3
 80020a4:	607b      	str	r3, [r7, #4]
 80020a6:	f04f 0200 	mov.w	r2, #0
 80020aa:	f04f 0300 	mov.w	r3, #0
 80020ae:	e9d7 4500 	ldrd	r4, r5, [r7]
 80020b2:	4629      	mov	r1, r5
 80020b4:	028b      	lsls	r3, r1, #10
 80020b6:	4621      	mov	r1, r4
 80020b8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80020bc:	4621      	mov	r1, r4
 80020be:	028a      	lsls	r2, r1, #10
 80020c0:	4610      	mov	r0, r2
 80020c2:	4619      	mov	r1, r3
 80020c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80020c8:	2200      	movs	r2, #0
 80020ca:	64bb      	str	r3, [r7, #72]	@ 0x48
 80020cc:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80020ce:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80020d2:	f7fe fbf3 	bl	80008bc <__aeabi_uldivmod>
 80020d6:	4602      	mov	r2, r0
 80020d8:	460b      	mov	r3, r1
 80020da:	4613      	mov	r3, r2
 80020dc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80020e0:	4b0d      	ldr	r3, [pc, #52]	@ (8002118 <HAL_RCC_GetSysClockFreq+0x458>)
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	0f1b      	lsrs	r3, r3, #28
 80020e6:	f003 0307 	and.w	r3, r3, #7
 80020ea:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 80020ee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80020f2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80020f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80020fa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80020fe:	e003      	b.n	8002108 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002100:	4b06      	ldr	r3, [pc, #24]	@ (800211c <HAL_RCC_GetSysClockFreq+0x45c>)
 8002102:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002106:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002108:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 800210c:	4618      	mov	r0, r3
 800210e:	37b8      	adds	r7, #184	@ 0xb8
 8002110:	46bd      	mov	sp, r7
 8002112:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002116:	bf00      	nop
 8002118:	40023800 	.word	0x40023800
 800211c:	00f42400 	.word	0x00f42400

08002120 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b086      	sub	sp, #24
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d101      	bne.n	8002132 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800212e:	2301      	movs	r3, #1
 8002130:	e28d      	b.n	800264e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 0301 	and.w	r3, r3, #1
 800213a:	2b00      	cmp	r3, #0
 800213c:	f000 8083 	beq.w	8002246 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002140:	4b94      	ldr	r3, [pc, #592]	@ (8002394 <HAL_RCC_OscConfig+0x274>)
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	f003 030c 	and.w	r3, r3, #12
 8002148:	2b04      	cmp	r3, #4
 800214a:	d019      	beq.n	8002180 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800214c:	4b91      	ldr	r3, [pc, #580]	@ (8002394 <HAL_RCC_OscConfig+0x274>)
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002154:	2b08      	cmp	r3, #8
 8002156:	d106      	bne.n	8002166 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002158:	4b8e      	ldr	r3, [pc, #568]	@ (8002394 <HAL_RCC_OscConfig+0x274>)
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002160:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002164:	d00c      	beq.n	8002180 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002166:	4b8b      	ldr	r3, [pc, #556]	@ (8002394 <HAL_RCC_OscConfig+0x274>)
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800216e:	2b0c      	cmp	r3, #12
 8002170:	d112      	bne.n	8002198 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002172:	4b88      	ldr	r3, [pc, #544]	@ (8002394 <HAL_RCC_OscConfig+0x274>)
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800217a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800217e:	d10b      	bne.n	8002198 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002180:	4b84      	ldr	r3, [pc, #528]	@ (8002394 <HAL_RCC_OscConfig+0x274>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002188:	2b00      	cmp	r3, #0
 800218a:	d05b      	beq.n	8002244 <HAL_RCC_OscConfig+0x124>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d157      	bne.n	8002244 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002194:	2301      	movs	r3, #1
 8002196:	e25a      	b.n	800264e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80021a0:	d106      	bne.n	80021b0 <HAL_RCC_OscConfig+0x90>
 80021a2:	4b7c      	ldr	r3, [pc, #496]	@ (8002394 <HAL_RCC_OscConfig+0x274>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a7b      	ldr	r2, [pc, #492]	@ (8002394 <HAL_RCC_OscConfig+0x274>)
 80021a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021ac:	6013      	str	r3, [r2, #0]
 80021ae:	e01d      	b.n	80021ec <HAL_RCC_OscConfig+0xcc>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80021b8:	d10c      	bne.n	80021d4 <HAL_RCC_OscConfig+0xb4>
 80021ba:	4b76      	ldr	r3, [pc, #472]	@ (8002394 <HAL_RCC_OscConfig+0x274>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a75      	ldr	r2, [pc, #468]	@ (8002394 <HAL_RCC_OscConfig+0x274>)
 80021c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80021c4:	6013      	str	r3, [r2, #0]
 80021c6:	4b73      	ldr	r3, [pc, #460]	@ (8002394 <HAL_RCC_OscConfig+0x274>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a72      	ldr	r2, [pc, #456]	@ (8002394 <HAL_RCC_OscConfig+0x274>)
 80021cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021d0:	6013      	str	r3, [r2, #0]
 80021d2:	e00b      	b.n	80021ec <HAL_RCC_OscConfig+0xcc>
 80021d4:	4b6f      	ldr	r3, [pc, #444]	@ (8002394 <HAL_RCC_OscConfig+0x274>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a6e      	ldr	r2, [pc, #440]	@ (8002394 <HAL_RCC_OscConfig+0x274>)
 80021da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80021de:	6013      	str	r3, [r2, #0]
 80021e0:	4b6c      	ldr	r3, [pc, #432]	@ (8002394 <HAL_RCC_OscConfig+0x274>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a6b      	ldr	r2, [pc, #428]	@ (8002394 <HAL_RCC_OscConfig+0x274>)
 80021e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80021ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d013      	beq.n	800221c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021f4:	f7ff f97e 	bl	80014f4 <HAL_GetTick>
 80021f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021fa:	e008      	b.n	800220e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021fc:	f7ff f97a 	bl	80014f4 <HAL_GetTick>
 8002200:	4602      	mov	r2, r0
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	1ad3      	subs	r3, r2, r3
 8002206:	2b64      	cmp	r3, #100	@ 0x64
 8002208:	d901      	bls.n	800220e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800220a:	2303      	movs	r3, #3
 800220c:	e21f      	b.n	800264e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800220e:	4b61      	ldr	r3, [pc, #388]	@ (8002394 <HAL_RCC_OscConfig+0x274>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002216:	2b00      	cmp	r3, #0
 8002218:	d0f0      	beq.n	80021fc <HAL_RCC_OscConfig+0xdc>
 800221a:	e014      	b.n	8002246 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800221c:	f7ff f96a 	bl	80014f4 <HAL_GetTick>
 8002220:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002222:	e008      	b.n	8002236 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002224:	f7ff f966 	bl	80014f4 <HAL_GetTick>
 8002228:	4602      	mov	r2, r0
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	1ad3      	subs	r3, r2, r3
 800222e:	2b64      	cmp	r3, #100	@ 0x64
 8002230:	d901      	bls.n	8002236 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002232:	2303      	movs	r3, #3
 8002234:	e20b      	b.n	800264e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002236:	4b57      	ldr	r3, [pc, #348]	@ (8002394 <HAL_RCC_OscConfig+0x274>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800223e:	2b00      	cmp	r3, #0
 8002240:	d1f0      	bne.n	8002224 <HAL_RCC_OscConfig+0x104>
 8002242:	e000      	b.n	8002246 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002244:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f003 0302 	and.w	r3, r3, #2
 800224e:	2b00      	cmp	r3, #0
 8002250:	d06f      	beq.n	8002332 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002252:	4b50      	ldr	r3, [pc, #320]	@ (8002394 <HAL_RCC_OscConfig+0x274>)
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	f003 030c 	and.w	r3, r3, #12
 800225a:	2b00      	cmp	r3, #0
 800225c:	d017      	beq.n	800228e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800225e:	4b4d      	ldr	r3, [pc, #308]	@ (8002394 <HAL_RCC_OscConfig+0x274>)
 8002260:	689b      	ldr	r3, [r3, #8]
 8002262:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002266:	2b08      	cmp	r3, #8
 8002268:	d105      	bne.n	8002276 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800226a:	4b4a      	ldr	r3, [pc, #296]	@ (8002394 <HAL_RCC_OscConfig+0x274>)
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002272:	2b00      	cmp	r3, #0
 8002274:	d00b      	beq.n	800228e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002276:	4b47      	ldr	r3, [pc, #284]	@ (8002394 <HAL_RCC_OscConfig+0x274>)
 8002278:	689b      	ldr	r3, [r3, #8]
 800227a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800227e:	2b0c      	cmp	r3, #12
 8002280:	d11c      	bne.n	80022bc <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002282:	4b44      	ldr	r3, [pc, #272]	@ (8002394 <HAL_RCC_OscConfig+0x274>)
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800228a:	2b00      	cmp	r3, #0
 800228c:	d116      	bne.n	80022bc <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800228e:	4b41      	ldr	r3, [pc, #260]	@ (8002394 <HAL_RCC_OscConfig+0x274>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f003 0302 	and.w	r3, r3, #2
 8002296:	2b00      	cmp	r3, #0
 8002298:	d005      	beq.n	80022a6 <HAL_RCC_OscConfig+0x186>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	68db      	ldr	r3, [r3, #12]
 800229e:	2b01      	cmp	r3, #1
 80022a0:	d001      	beq.n	80022a6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	e1d3      	b.n	800264e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022a6:	4b3b      	ldr	r3, [pc, #236]	@ (8002394 <HAL_RCC_OscConfig+0x274>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	691b      	ldr	r3, [r3, #16]
 80022b2:	00db      	lsls	r3, r3, #3
 80022b4:	4937      	ldr	r1, [pc, #220]	@ (8002394 <HAL_RCC_OscConfig+0x274>)
 80022b6:	4313      	orrs	r3, r2
 80022b8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022ba:	e03a      	b.n	8002332 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	68db      	ldr	r3, [r3, #12]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d020      	beq.n	8002306 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022c4:	4b34      	ldr	r3, [pc, #208]	@ (8002398 <HAL_RCC_OscConfig+0x278>)
 80022c6:	2201      	movs	r2, #1
 80022c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022ca:	f7ff f913 	bl	80014f4 <HAL_GetTick>
 80022ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022d0:	e008      	b.n	80022e4 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022d2:	f7ff f90f 	bl	80014f4 <HAL_GetTick>
 80022d6:	4602      	mov	r2, r0
 80022d8:	693b      	ldr	r3, [r7, #16]
 80022da:	1ad3      	subs	r3, r2, r3
 80022dc:	2b02      	cmp	r3, #2
 80022de:	d901      	bls.n	80022e4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80022e0:	2303      	movs	r3, #3
 80022e2:	e1b4      	b.n	800264e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022e4:	4b2b      	ldr	r3, [pc, #172]	@ (8002394 <HAL_RCC_OscConfig+0x274>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f003 0302 	and.w	r3, r3, #2
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d0f0      	beq.n	80022d2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022f0:	4b28      	ldr	r3, [pc, #160]	@ (8002394 <HAL_RCC_OscConfig+0x274>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	691b      	ldr	r3, [r3, #16]
 80022fc:	00db      	lsls	r3, r3, #3
 80022fe:	4925      	ldr	r1, [pc, #148]	@ (8002394 <HAL_RCC_OscConfig+0x274>)
 8002300:	4313      	orrs	r3, r2
 8002302:	600b      	str	r3, [r1, #0]
 8002304:	e015      	b.n	8002332 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002306:	4b24      	ldr	r3, [pc, #144]	@ (8002398 <HAL_RCC_OscConfig+0x278>)
 8002308:	2200      	movs	r2, #0
 800230a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800230c:	f7ff f8f2 	bl	80014f4 <HAL_GetTick>
 8002310:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002312:	e008      	b.n	8002326 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002314:	f7ff f8ee 	bl	80014f4 <HAL_GetTick>
 8002318:	4602      	mov	r2, r0
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	1ad3      	subs	r3, r2, r3
 800231e:	2b02      	cmp	r3, #2
 8002320:	d901      	bls.n	8002326 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002322:	2303      	movs	r3, #3
 8002324:	e193      	b.n	800264e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002326:	4b1b      	ldr	r3, [pc, #108]	@ (8002394 <HAL_RCC_OscConfig+0x274>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f003 0302 	and.w	r3, r3, #2
 800232e:	2b00      	cmp	r3, #0
 8002330:	d1f0      	bne.n	8002314 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 0308 	and.w	r3, r3, #8
 800233a:	2b00      	cmp	r3, #0
 800233c:	d036      	beq.n	80023ac <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	695b      	ldr	r3, [r3, #20]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d016      	beq.n	8002374 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002346:	4b15      	ldr	r3, [pc, #84]	@ (800239c <HAL_RCC_OscConfig+0x27c>)
 8002348:	2201      	movs	r2, #1
 800234a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800234c:	f7ff f8d2 	bl	80014f4 <HAL_GetTick>
 8002350:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002352:	e008      	b.n	8002366 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002354:	f7ff f8ce 	bl	80014f4 <HAL_GetTick>
 8002358:	4602      	mov	r2, r0
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	1ad3      	subs	r3, r2, r3
 800235e:	2b02      	cmp	r3, #2
 8002360:	d901      	bls.n	8002366 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002362:	2303      	movs	r3, #3
 8002364:	e173      	b.n	800264e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002366:	4b0b      	ldr	r3, [pc, #44]	@ (8002394 <HAL_RCC_OscConfig+0x274>)
 8002368:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800236a:	f003 0302 	and.w	r3, r3, #2
 800236e:	2b00      	cmp	r3, #0
 8002370:	d0f0      	beq.n	8002354 <HAL_RCC_OscConfig+0x234>
 8002372:	e01b      	b.n	80023ac <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002374:	4b09      	ldr	r3, [pc, #36]	@ (800239c <HAL_RCC_OscConfig+0x27c>)
 8002376:	2200      	movs	r2, #0
 8002378:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800237a:	f7ff f8bb 	bl	80014f4 <HAL_GetTick>
 800237e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002380:	e00e      	b.n	80023a0 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002382:	f7ff f8b7 	bl	80014f4 <HAL_GetTick>
 8002386:	4602      	mov	r2, r0
 8002388:	693b      	ldr	r3, [r7, #16]
 800238a:	1ad3      	subs	r3, r2, r3
 800238c:	2b02      	cmp	r3, #2
 800238e:	d907      	bls.n	80023a0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002390:	2303      	movs	r3, #3
 8002392:	e15c      	b.n	800264e <HAL_RCC_OscConfig+0x52e>
 8002394:	40023800 	.word	0x40023800
 8002398:	42470000 	.word	0x42470000
 800239c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023a0:	4b8a      	ldr	r3, [pc, #552]	@ (80025cc <HAL_RCC_OscConfig+0x4ac>)
 80023a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80023a4:	f003 0302 	and.w	r3, r3, #2
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d1ea      	bne.n	8002382 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 0304 	and.w	r3, r3, #4
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	f000 8097 	beq.w	80024e8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023ba:	2300      	movs	r3, #0
 80023bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023be:	4b83      	ldr	r3, [pc, #524]	@ (80025cc <HAL_RCC_OscConfig+0x4ac>)
 80023c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d10f      	bne.n	80023ea <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023ca:	2300      	movs	r3, #0
 80023cc:	60bb      	str	r3, [r7, #8]
 80023ce:	4b7f      	ldr	r3, [pc, #508]	@ (80025cc <HAL_RCC_OscConfig+0x4ac>)
 80023d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023d2:	4a7e      	ldr	r2, [pc, #504]	@ (80025cc <HAL_RCC_OscConfig+0x4ac>)
 80023d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80023da:	4b7c      	ldr	r3, [pc, #496]	@ (80025cc <HAL_RCC_OscConfig+0x4ac>)
 80023dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023e2:	60bb      	str	r3, [r7, #8]
 80023e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023e6:	2301      	movs	r3, #1
 80023e8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023ea:	4b79      	ldr	r3, [pc, #484]	@ (80025d0 <HAL_RCC_OscConfig+0x4b0>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d118      	bne.n	8002428 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023f6:	4b76      	ldr	r3, [pc, #472]	@ (80025d0 <HAL_RCC_OscConfig+0x4b0>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a75      	ldr	r2, [pc, #468]	@ (80025d0 <HAL_RCC_OscConfig+0x4b0>)
 80023fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002400:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002402:	f7ff f877 	bl	80014f4 <HAL_GetTick>
 8002406:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002408:	e008      	b.n	800241c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800240a:	f7ff f873 	bl	80014f4 <HAL_GetTick>
 800240e:	4602      	mov	r2, r0
 8002410:	693b      	ldr	r3, [r7, #16]
 8002412:	1ad3      	subs	r3, r2, r3
 8002414:	2b02      	cmp	r3, #2
 8002416:	d901      	bls.n	800241c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002418:	2303      	movs	r3, #3
 800241a:	e118      	b.n	800264e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800241c:	4b6c      	ldr	r3, [pc, #432]	@ (80025d0 <HAL_RCC_OscConfig+0x4b0>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002424:	2b00      	cmp	r3, #0
 8002426:	d0f0      	beq.n	800240a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	2b01      	cmp	r3, #1
 800242e:	d106      	bne.n	800243e <HAL_RCC_OscConfig+0x31e>
 8002430:	4b66      	ldr	r3, [pc, #408]	@ (80025cc <HAL_RCC_OscConfig+0x4ac>)
 8002432:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002434:	4a65      	ldr	r2, [pc, #404]	@ (80025cc <HAL_RCC_OscConfig+0x4ac>)
 8002436:	f043 0301 	orr.w	r3, r3, #1
 800243a:	6713      	str	r3, [r2, #112]	@ 0x70
 800243c:	e01c      	b.n	8002478 <HAL_RCC_OscConfig+0x358>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	2b05      	cmp	r3, #5
 8002444:	d10c      	bne.n	8002460 <HAL_RCC_OscConfig+0x340>
 8002446:	4b61      	ldr	r3, [pc, #388]	@ (80025cc <HAL_RCC_OscConfig+0x4ac>)
 8002448:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800244a:	4a60      	ldr	r2, [pc, #384]	@ (80025cc <HAL_RCC_OscConfig+0x4ac>)
 800244c:	f043 0304 	orr.w	r3, r3, #4
 8002450:	6713      	str	r3, [r2, #112]	@ 0x70
 8002452:	4b5e      	ldr	r3, [pc, #376]	@ (80025cc <HAL_RCC_OscConfig+0x4ac>)
 8002454:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002456:	4a5d      	ldr	r2, [pc, #372]	@ (80025cc <HAL_RCC_OscConfig+0x4ac>)
 8002458:	f043 0301 	orr.w	r3, r3, #1
 800245c:	6713      	str	r3, [r2, #112]	@ 0x70
 800245e:	e00b      	b.n	8002478 <HAL_RCC_OscConfig+0x358>
 8002460:	4b5a      	ldr	r3, [pc, #360]	@ (80025cc <HAL_RCC_OscConfig+0x4ac>)
 8002462:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002464:	4a59      	ldr	r2, [pc, #356]	@ (80025cc <HAL_RCC_OscConfig+0x4ac>)
 8002466:	f023 0301 	bic.w	r3, r3, #1
 800246a:	6713      	str	r3, [r2, #112]	@ 0x70
 800246c:	4b57      	ldr	r3, [pc, #348]	@ (80025cc <HAL_RCC_OscConfig+0x4ac>)
 800246e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002470:	4a56      	ldr	r2, [pc, #344]	@ (80025cc <HAL_RCC_OscConfig+0x4ac>)
 8002472:	f023 0304 	bic.w	r3, r3, #4
 8002476:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d015      	beq.n	80024ac <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002480:	f7ff f838 	bl	80014f4 <HAL_GetTick>
 8002484:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002486:	e00a      	b.n	800249e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002488:	f7ff f834 	bl	80014f4 <HAL_GetTick>
 800248c:	4602      	mov	r2, r0
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	1ad3      	subs	r3, r2, r3
 8002492:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002496:	4293      	cmp	r3, r2
 8002498:	d901      	bls.n	800249e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800249a:	2303      	movs	r3, #3
 800249c:	e0d7      	b.n	800264e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800249e:	4b4b      	ldr	r3, [pc, #300]	@ (80025cc <HAL_RCC_OscConfig+0x4ac>)
 80024a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024a2:	f003 0302 	and.w	r3, r3, #2
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d0ee      	beq.n	8002488 <HAL_RCC_OscConfig+0x368>
 80024aa:	e014      	b.n	80024d6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024ac:	f7ff f822 	bl	80014f4 <HAL_GetTick>
 80024b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024b2:	e00a      	b.n	80024ca <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024b4:	f7ff f81e 	bl	80014f4 <HAL_GetTick>
 80024b8:	4602      	mov	r2, r0
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	1ad3      	subs	r3, r2, r3
 80024be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d901      	bls.n	80024ca <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80024c6:	2303      	movs	r3, #3
 80024c8:	e0c1      	b.n	800264e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024ca:	4b40      	ldr	r3, [pc, #256]	@ (80025cc <HAL_RCC_OscConfig+0x4ac>)
 80024cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024ce:	f003 0302 	and.w	r3, r3, #2
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d1ee      	bne.n	80024b4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80024d6:	7dfb      	ldrb	r3, [r7, #23]
 80024d8:	2b01      	cmp	r3, #1
 80024da:	d105      	bne.n	80024e8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024dc:	4b3b      	ldr	r3, [pc, #236]	@ (80025cc <HAL_RCC_OscConfig+0x4ac>)
 80024de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024e0:	4a3a      	ldr	r2, [pc, #232]	@ (80025cc <HAL_RCC_OscConfig+0x4ac>)
 80024e2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80024e6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	699b      	ldr	r3, [r3, #24]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	f000 80ad 	beq.w	800264c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80024f2:	4b36      	ldr	r3, [pc, #216]	@ (80025cc <HAL_RCC_OscConfig+0x4ac>)
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	f003 030c 	and.w	r3, r3, #12
 80024fa:	2b08      	cmp	r3, #8
 80024fc:	d060      	beq.n	80025c0 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	699b      	ldr	r3, [r3, #24]
 8002502:	2b02      	cmp	r3, #2
 8002504:	d145      	bne.n	8002592 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002506:	4b33      	ldr	r3, [pc, #204]	@ (80025d4 <HAL_RCC_OscConfig+0x4b4>)
 8002508:	2200      	movs	r2, #0
 800250a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800250c:	f7fe fff2 	bl	80014f4 <HAL_GetTick>
 8002510:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002512:	e008      	b.n	8002526 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002514:	f7fe ffee 	bl	80014f4 <HAL_GetTick>
 8002518:	4602      	mov	r2, r0
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	1ad3      	subs	r3, r2, r3
 800251e:	2b02      	cmp	r3, #2
 8002520:	d901      	bls.n	8002526 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002522:	2303      	movs	r3, #3
 8002524:	e093      	b.n	800264e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002526:	4b29      	ldr	r3, [pc, #164]	@ (80025cc <HAL_RCC_OscConfig+0x4ac>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800252e:	2b00      	cmp	r3, #0
 8002530:	d1f0      	bne.n	8002514 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	69da      	ldr	r2, [r3, #28]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6a1b      	ldr	r3, [r3, #32]
 800253a:	431a      	orrs	r2, r3
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002540:	019b      	lsls	r3, r3, #6
 8002542:	431a      	orrs	r2, r3
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002548:	085b      	lsrs	r3, r3, #1
 800254a:	3b01      	subs	r3, #1
 800254c:	041b      	lsls	r3, r3, #16
 800254e:	431a      	orrs	r2, r3
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002554:	061b      	lsls	r3, r3, #24
 8002556:	431a      	orrs	r2, r3
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800255c:	071b      	lsls	r3, r3, #28
 800255e:	491b      	ldr	r1, [pc, #108]	@ (80025cc <HAL_RCC_OscConfig+0x4ac>)
 8002560:	4313      	orrs	r3, r2
 8002562:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002564:	4b1b      	ldr	r3, [pc, #108]	@ (80025d4 <HAL_RCC_OscConfig+0x4b4>)
 8002566:	2201      	movs	r2, #1
 8002568:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800256a:	f7fe ffc3 	bl	80014f4 <HAL_GetTick>
 800256e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002570:	e008      	b.n	8002584 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002572:	f7fe ffbf 	bl	80014f4 <HAL_GetTick>
 8002576:	4602      	mov	r2, r0
 8002578:	693b      	ldr	r3, [r7, #16]
 800257a:	1ad3      	subs	r3, r2, r3
 800257c:	2b02      	cmp	r3, #2
 800257e:	d901      	bls.n	8002584 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002580:	2303      	movs	r3, #3
 8002582:	e064      	b.n	800264e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002584:	4b11      	ldr	r3, [pc, #68]	@ (80025cc <HAL_RCC_OscConfig+0x4ac>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800258c:	2b00      	cmp	r3, #0
 800258e:	d0f0      	beq.n	8002572 <HAL_RCC_OscConfig+0x452>
 8002590:	e05c      	b.n	800264c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002592:	4b10      	ldr	r3, [pc, #64]	@ (80025d4 <HAL_RCC_OscConfig+0x4b4>)
 8002594:	2200      	movs	r2, #0
 8002596:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002598:	f7fe ffac 	bl	80014f4 <HAL_GetTick>
 800259c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800259e:	e008      	b.n	80025b2 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025a0:	f7fe ffa8 	bl	80014f4 <HAL_GetTick>
 80025a4:	4602      	mov	r2, r0
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	1ad3      	subs	r3, r2, r3
 80025aa:	2b02      	cmp	r3, #2
 80025ac:	d901      	bls.n	80025b2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80025ae:	2303      	movs	r3, #3
 80025b0:	e04d      	b.n	800264e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025b2:	4b06      	ldr	r3, [pc, #24]	@ (80025cc <HAL_RCC_OscConfig+0x4ac>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d1f0      	bne.n	80025a0 <HAL_RCC_OscConfig+0x480>
 80025be:	e045      	b.n	800264c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	699b      	ldr	r3, [r3, #24]
 80025c4:	2b01      	cmp	r3, #1
 80025c6:	d107      	bne.n	80025d8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80025c8:	2301      	movs	r3, #1
 80025ca:	e040      	b.n	800264e <HAL_RCC_OscConfig+0x52e>
 80025cc:	40023800 	.word	0x40023800
 80025d0:	40007000 	.word	0x40007000
 80025d4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80025d8:	4b1f      	ldr	r3, [pc, #124]	@ (8002658 <HAL_RCC_OscConfig+0x538>)
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	699b      	ldr	r3, [r3, #24]
 80025e2:	2b01      	cmp	r3, #1
 80025e4:	d030      	beq.n	8002648 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025f0:	429a      	cmp	r2, r3
 80025f2:	d129      	bne.n	8002648 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025fe:	429a      	cmp	r2, r3
 8002600:	d122      	bne.n	8002648 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002602:	68fa      	ldr	r2, [r7, #12]
 8002604:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002608:	4013      	ands	r3, r2
 800260a:	687a      	ldr	r2, [r7, #4]
 800260c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800260e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002610:	4293      	cmp	r3, r2
 8002612:	d119      	bne.n	8002648 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800261e:	085b      	lsrs	r3, r3, #1
 8002620:	3b01      	subs	r3, #1
 8002622:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002624:	429a      	cmp	r2, r3
 8002626:	d10f      	bne.n	8002648 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002632:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002634:	429a      	cmp	r2, r3
 8002636:	d107      	bne.n	8002648 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002642:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002644:	429a      	cmp	r2, r3
 8002646:	d001      	beq.n	800264c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002648:	2301      	movs	r3, #1
 800264a:	e000      	b.n	800264e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800264c:	2300      	movs	r3, #0
}
 800264e:	4618      	mov	r0, r3
 8002650:	3718      	adds	r7, #24
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop
 8002658:	40023800 	.word	0x40023800

0800265c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b082      	sub	sp, #8
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d101      	bne.n	800266e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	e07b      	b.n	8002766 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002672:	2b00      	cmp	r3, #0
 8002674:	d108      	bne.n	8002688 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800267e:	d009      	beq.n	8002694 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2200      	movs	r2, #0
 8002684:	61da      	str	r2, [r3, #28]
 8002686:	e005      	b.n	8002694 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2200      	movs	r2, #0
 800268c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2200      	movs	r2, #0
 8002692:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2200      	movs	r2, #0
 8002698:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d106      	bne.n	80026b4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2200      	movs	r2, #0
 80026aa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80026ae:	6878      	ldr	r0, [r7, #4]
 80026b0:	f7fe fbc0 	bl	8000e34 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2202      	movs	r2, #2
 80026b8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	681a      	ldr	r2, [r3, #0]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80026ca:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80026dc:	431a      	orrs	r2, r3
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	68db      	ldr	r3, [r3, #12]
 80026e2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80026e6:	431a      	orrs	r2, r3
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	691b      	ldr	r3, [r3, #16]
 80026ec:	f003 0302 	and.w	r3, r3, #2
 80026f0:	431a      	orrs	r2, r3
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	695b      	ldr	r3, [r3, #20]
 80026f6:	f003 0301 	and.w	r3, r3, #1
 80026fa:	431a      	orrs	r2, r3
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	699b      	ldr	r3, [r3, #24]
 8002700:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002704:	431a      	orrs	r2, r3
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	69db      	ldr	r3, [r3, #28]
 800270a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800270e:	431a      	orrs	r2, r3
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6a1b      	ldr	r3, [r3, #32]
 8002714:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002718:	ea42 0103 	orr.w	r1, r2, r3
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002720:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	430a      	orrs	r2, r1
 800272a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	699b      	ldr	r3, [r3, #24]
 8002730:	0c1b      	lsrs	r3, r3, #16
 8002732:	f003 0104 	and.w	r1, r3, #4
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800273a:	f003 0210 	and.w	r2, r3, #16
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	430a      	orrs	r2, r1
 8002744:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	69da      	ldr	r2, [r3, #28]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002754:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2200      	movs	r2, #0
 800275a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2201      	movs	r2, #1
 8002760:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002764:	2300      	movs	r3, #0
}
 8002766:	4618      	mov	r0, r3
 8002768:	3708      	adds	r7, #8
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}

0800276e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800276e:	b580      	push	{r7, lr}
 8002770:	b088      	sub	sp, #32
 8002772:	af00      	add	r7, sp, #0
 8002774:	60f8      	str	r0, [r7, #12]
 8002776:	60b9      	str	r1, [r7, #8]
 8002778:	603b      	str	r3, [r7, #0]
 800277a:	4613      	mov	r3, r2
 800277c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800277e:	2300      	movs	r3, #0
 8002780:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002788:	2b01      	cmp	r3, #1
 800278a:	d101      	bne.n	8002790 <HAL_SPI_Transmit+0x22>
 800278c:	2302      	movs	r3, #2
 800278e:	e12d      	b.n	80029ec <HAL_SPI_Transmit+0x27e>
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	2201      	movs	r2, #1
 8002794:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002798:	f7fe feac 	bl	80014f4 <HAL_GetTick>
 800279c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800279e:	88fb      	ldrh	r3, [r7, #6]
 80027a0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	2b01      	cmp	r3, #1
 80027ac:	d002      	beq.n	80027b4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80027ae:	2302      	movs	r3, #2
 80027b0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80027b2:	e116      	b.n	80029e2 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d002      	beq.n	80027c0 <HAL_SPI_Transmit+0x52>
 80027ba:	88fb      	ldrh	r3, [r7, #6]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d102      	bne.n	80027c6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80027c4:	e10d      	b.n	80029e2 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	2203      	movs	r2, #3
 80027ca:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	2200      	movs	r2, #0
 80027d2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	68ba      	ldr	r2, [r7, #8]
 80027d8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	88fa      	ldrh	r2, [r7, #6]
 80027de:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	88fa      	ldrh	r2, [r7, #6]
 80027e4:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	2200      	movs	r2, #0
 80027ea:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	2200      	movs	r2, #0
 80027f0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	2200      	movs	r2, #0
 80027f6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	2200      	movs	r2, #0
 80027fc:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	2200      	movs	r2, #0
 8002802:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	689b      	ldr	r3, [r3, #8]
 8002808:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800280c:	d10f      	bne.n	800282e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	681a      	ldr	r2, [r3, #0]
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800281c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	681a      	ldr	r2, [r3, #0]
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800282c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002838:	2b40      	cmp	r3, #64	@ 0x40
 800283a:	d007      	beq.n	800284c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	681a      	ldr	r2, [r3, #0]
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800284a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	68db      	ldr	r3, [r3, #12]
 8002850:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002854:	d14f      	bne.n	80028f6 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d002      	beq.n	8002864 <HAL_SPI_Transmit+0xf6>
 800285e:	8afb      	ldrh	r3, [r7, #22]
 8002860:	2b01      	cmp	r3, #1
 8002862:	d142      	bne.n	80028ea <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002868:	881a      	ldrh	r2, [r3, #0]
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002874:	1c9a      	adds	r2, r3, #2
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800287e:	b29b      	uxth	r3, r3
 8002880:	3b01      	subs	r3, #1
 8002882:	b29a      	uxth	r2, r3
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002888:	e02f      	b.n	80028ea <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	f003 0302 	and.w	r3, r3, #2
 8002894:	2b02      	cmp	r3, #2
 8002896:	d112      	bne.n	80028be <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800289c:	881a      	ldrh	r2, [r3, #0]
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028a8:	1c9a      	adds	r2, r3, #2
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80028b2:	b29b      	uxth	r3, r3
 80028b4:	3b01      	subs	r3, #1
 80028b6:	b29a      	uxth	r2, r3
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	86da      	strh	r2, [r3, #54]	@ 0x36
 80028bc:	e015      	b.n	80028ea <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80028be:	f7fe fe19 	bl	80014f4 <HAL_GetTick>
 80028c2:	4602      	mov	r2, r0
 80028c4:	69bb      	ldr	r3, [r7, #24]
 80028c6:	1ad3      	subs	r3, r2, r3
 80028c8:	683a      	ldr	r2, [r7, #0]
 80028ca:	429a      	cmp	r2, r3
 80028cc:	d803      	bhi.n	80028d6 <HAL_SPI_Transmit+0x168>
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028d4:	d102      	bne.n	80028dc <HAL_SPI_Transmit+0x16e>
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d106      	bne.n	80028ea <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 80028dc:	2303      	movs	r3, #3
 80028de:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	2201      	movs	r2, #1
 80028e4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 80028e8:	e07b      	b.n	80029e2 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80028ee:	b29b      	uxth	r3, r3
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d1ca      	bne.n	800288a <HAL_SPI_Transmit+0x11c>
 80028f4:	e050      	b.n	8002998 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d002      	beq.n	8002904 <HAL_SPI_Transmit+0x196>
 80028fe:	8afb      	ldrh	r3, [r7, #22]
 8002900:	2b01      	cmp	r3, #1
 8002902:	d144      	bne.n	800298e <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	330c      	adds	r3, #12
 800290e:	7812      	ldrb	r2, [r2, #0]
 8002910:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002916:	1c5a      	adds	r2, r3, #1
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002920:	b29b      	uxth	r3, r3
 8002922:	3b01      	subs	r3, #1
 8002924:	b29a      	uxth	r2, r3
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800292a:	e030      	b.n	800298e <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	f003 0302 	and.w	r3, r3, #2
 8002936:	2b02      	cmp	r3, #2
 8002938:	d113      	bne.n	8002962 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	330c      	adds	r3, #12
 8002944:	7812      	ldrb	r2, [r2, #0]
 8002946:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800294c:	1c5a      	adds	r2, r3, #1
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002956:	b29b      	uxth	r3, r3
 8002958:	3b01      	subs	r3, #1
 800295a:	b29a      	uxth	r2, r3
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002960:	e015      	b.n	800298e <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002962:	f7fe fdc7 	bl	80014f4 <HAL_GetTick>
 8002966:	4602      	mov	r2, r0
 8002968:	69bb      	ldr	r3, [r7, #24]
 800296a:	1ad3      	subs	r3, r2, r3
 800296c:	683a      	ldr	r2, [r7, #0]
 800296e:	429a      	cmp	r2, r3
 8002970:	d803      	bhi.n	800297a <HAL_SPI_Transmit+0x20c>
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002978:	d102      	bne.n	8002980 <HAL_SPI_Transmit+0x212>
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d106      	bne.n	800298e <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8002980:	2303      	movs	r3, #3
 8002982:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	2201      	movs	r2, #1
 8002988:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 800298c:	e029      	b.n	80029e2 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002992:	b29b      	uxth	r3, r3
 8002994:	2b00      	cmp	r3, #0
 8002996:	d1c9      	bne.n	800292c <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002998:	69ba      	ldr	r2, [r7, #24]
 800299a:	6839      	ldr	r1, [r7, #0]
 800299c:	68f8      	ldr	r0, [r7, #12]
 800299e:	f000 fa61 	bl	8002e64 <SPI_EndRxTxTransaction>
 80029a2:	4603      	mov	r3, r0
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d002      	beq.n	80029ae <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	2220      	movs	r2, #32
 80029ac:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d10a      	bne.n	80029cc <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80029b6:	2300      	movs	r3, #0
 80029b8:	613b      	str	r3, [r7, #16]
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	68db      	ldr	r3, [r3, #12]
 80029c0:	613b      	str	r3, [r7, #16]
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	613b      	str	r3, [r7, #16]
 80029ca:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d002      	beq.n	80029da <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 80029d4:	2301      	movs	r3, #1
 80029d6:	77fb      	strb	r3, [r7, #31]
 80029d8:	e003      	b.n	80029e2 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	2201      	movs	r2, #1
 80029de:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	2200      	movs	r2, #0
 80029e6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80029ea:	7ffb      	ldrb	r3, [r7, #31]
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	3720      	adds	r7, #32
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}

080029f4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b08c      	sub	sp, #48	@ 0x30
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	60f8      	str	r0, [r7, #12]
 80029fc:	60b9      	str	r1, [r7, #8]
 80029fe:	607a      	str	r2, [r7, #4]
 8002a00:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002a02:	2301      	movs	r3, #1
 8002a04:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002a06:	2300      	movs	r3, #0
 8002a08:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002a12:	2b01      	cmp	r3, #1
 8002a14:	d101      	bne.n	8002a1a <HAL_SPI_TransmitReceive+0x26>
 8002a16:	2302      	movs	r3, #2
 8002a18:	e198      	b.n	8002d4c <HAL_SPI_TransmitReceive+0x358>
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002a22:	f7fe fd67 	bl	80014f4 <HAL_GetTick>
 8002a26:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002a2e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002a38:	887b      	ldrh	r3, [r7, #2]
 8002a3a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002a3c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002a40:	2b01      	cmp	r3, #1
 8002a42:	d00f      	beq.n	8002a64 <HAL_SPI_TransmitReceive+0x70>
 8002a44:	69fb      	ldr	r3, [r7, #28]
 8002a46:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002a4a:	d107      	bne.n	8002a5c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d103      	bne.n	8002a5c <HAL_SPI_TransmitReceive+0x68>
 8002a54:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002a58:	2b04      	cmp	r3, #4
 8002a5a:	d003      	beq.n	8002a64 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002a5c:	2302      	movs	r3, #2
 8002a5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8002a62:	e16d      	b.n	8002d40 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d005      	beq.n	8002a76 <HAL_SPI_TransmitReceive+0x82>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d002      	beq.n	8002a76 <HAL_SPI_TransmitReceive+0x82>
 8002a70:	887b      	ldrh	r3, [r7, #2]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d103      	bne.n	8002a7e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8002a7c:	e160      	b.n	8002d40 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002a84:	b2db      	uxtb	r3, r3
 8002a86:	2b04      	cmp	r3, #4
 8002a88:	d003      	beq.n	8002a92 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	2205      	movs	r2, #5
 8002a8e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	2200      	movs	r2, #0
 8002a96:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	687a      	ldr	r2, [r7, #4]
 8002a9c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	887a      	ldrh	r2, [r7, #2]
 8002aa2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	887a      	ldrh	r2, [r7, #2]
 8002aa8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	68ba      	ldr	r2, [r7, #8]
 8002aae:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	887a      	ldrh	r2, [r7, #2]
 8002ab4:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	887a      	ldrh	r2, [r7, #2]
 8002aba:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ad2:	2b40      	cmp	r3, #64	@ 0x40
 8002ad4:	d007      	beq.n	8002ae6 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002ae4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	68db      	ldr	r3, [r3, #12]
 8002aea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002aee:	d17c      	bne.n	8002bea <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d002      	beq.n	8002afe <HAL_SPI_TransmitReceive+0x10a>
 8002af8:	8b7b      	ldrh	r3, [r7, #26]
 8002afa:	2b01      	cmp	r3, #1
 8002afc:	d16a      	bne.n	8002bd4 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b02:	881a      	ldrh	r2, [r3, #0]
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b0e:	1c9a      	adds	r2, r3, #2
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002b18:	b29b      	uxth	r3, r3
 8002b1a:	3b01      	subs	r3, #1
 8002b1c:	b29a      	uxth	r2, r3
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002b22:	e057      	b.n	8002bd4 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	f003 0302 	and.w	r3, r3, #2
 8002b2e:	2b02      	cmp	r3, #2
 8002b30:	d11b      	bne.n	8002b6a <HAL_SPI_TransmitReceive+0x176>
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002b36:	b29b      	uxth	r3, r3
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d016      	beq.n	8002b6a <HAL_SPI_TransmitReceive+0x176>
 8002b3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b3e:	2b01      	cmp	r3, #1
 8002b40:	d113      	bne.n	8002b6a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b46:	881a      	ldrh	r2, [r3, #0]
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b52:	1c9a      	adds	r2, r3, #2
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002b5c:	b29b      	uxth	r3, r3
 8002b5e:	3b01      	subs	r3, #1
 8002b60:	b29a      	uxth	r2, r3
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002b66:	2300      	movs	r3, #0
 8002b68:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	f003 0301 	and.w	r3, r3, #1
 8002b74:	2b01      	cmp	r3, #1
 8002b76:	d119      	bne.n	8002bac <HAL_SPI_TransmitReceive+0x1b8>
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002b7c:	b29b      	uxth	r3, r3
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d014      	beq.n	8002bac <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	68da      	ldr	r2, [r3, #12]
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b8c:	b292      	uxth	r2, r2
 8002b8e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b94:	1c9a      	adds	r2, r3, #2
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002b9e:	b29b      	uxth	r3, r3
 8002ba0:	3b01      	subs	r3, #1
 8002ba2:	b29a      	uxth	r2, r3
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002bac:	f7fe fca2 	bl	80014f4 <HAL_GetTick>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bb4:	1ad3      	subs	r3, r2, r3
 8002bb6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002bb8:	429a      	cmp	r2, r3
 8002bba:	d80b      	bhi.n	8002bd4 <HAL_SPI_TransmitReceive+0x1e0>
 8002bbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002bbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bc2:	d007      	beq.n	8002bd4 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8002bc4:	2303      	movs	r3, #3
 8002bc6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	2201      	movs	r2, #1
 8002bce:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8002bd2:	e0b5      	b.n	8002d40 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002bd8:	b29b      	uxth	r3, r3
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d1a2      	bne.n	8002b24 <HAL_SPI_TransmitReceive+0x130>
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002be2:	b29b      	uxth	r3, r3
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d19d      	bne.n	8002b24 <HAL_SPI_TransmitReceive+0x130>
 8002be8:	e080      	b.n	8002cec <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d002      	beq.n	8002bf8 <HAL_SPI_TransmitReceive+0x204>
 8002bf2:	8b7b      	ldrh	r3, [r7, #26]
 8002bf4:	2b01      	cmp	r3, #1
 8002bf6:	d16f      	bne.n	8002cd8 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	330c      	adds	r3, #12
 8002c02:	7812      	ldrb	r2, [r2, #0]
 8002c04:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c0a:	1c5a      	adds	r2, r3, #1
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002c14:	b29b      	uxth	r3, r3
 8002c16:	3b01      	subs	r3, #1
 8002c18:	b29a      	uxth	r2, r3
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002c1e:	e05b      	b.n	8002cd8 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	689b      	ldr	r3, [r3, #8]
 8002c26:	f003 0302 	and.w	r3, r3, #2
 8002c2a:	2b02      	cmp	r3, #2
 8002c2c:	d11c      	bne.n	8002c68 <HAL_SPI_TransmitReceive+0x274>
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002c32:	b29b      	uxth	r3, r3
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d017      	beq.n	8002c68 <HAL_SPI_TransmitReceive+0x274>
 8002c38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c3a:	2b01      	cmp	r3, #1
 8002c3c:	d114      	bne.n	8002c68 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	330c      	adds	r3, #12
 8002c48:	7812      	ldrb	r2, [r2, #0]
 8002c4a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c50:	1c5a      	adds	r2, r3, #1
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002c5a:	b29b      	uxth	r3, r3
 8002c5c:	3b01      	subs	r3, #1
 8002c5e:	b29a      	uxth	r2, r3
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002c64:	2300      	movs	r3, #0
 8002c66:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	f003 0301 	and.w	r3, r3, #1
 8002c72:	2b01      	cmp	r3, #1
 8002c74:	d119      	bne.n	8002caa <HAL_SPI_TransmitReceive+0x2b6>
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002c7a:	b29b      	uxth	r3, r3
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d014      	beq.n	8002caa <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	68da      	ldr	r2, [r3, #12]
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c8a:	b2d2      	uxtb	r2, r2
 8002c8c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c92:	1c5a      	adds	r2, r3, #1
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002c9c:	b29b      	uxth	r3, r3
 8002c9e:	3b01      	subs	r3, #1
 8002ca0:	b29a      	uxth	r2, r3
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002caa:	f7fe fc23 	bl	80014f4 <HAL_GetTick>
 8002cae:	4602      	mov	r2, r0
 8002cb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cb2:	1ad3      	subs	r3, r2, r3
 8002cb4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002cb6:	429a      	cmp	r2, r3
 8002cb8:	d803      	bhi.n	8002cc2 <HAL_SPI_TransmitReceive+0x2ce>
 8002cba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cc0:	d102      	bne.n	8002cc8 <HAL_SPI_TransmitReceive+0x2d4>
 8002cc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d107      	bne.n	8002cd8 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8002cc8:	2303      	movs	r3, #3
 8002cca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	2201      	movs	r2, #1
 8002cd2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8002cd6:	e033      	b.n	8002d40 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002cdc:	b29b      	uxth	r3, r3
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d19e      	bne.n	8002c20 <HAL_SPI_TransmitReceive+0x22c>
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002ce6:	b29b      	uxth	r3, r3
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d199      	bne.n	8002c20 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002cec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002cee:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002cf0:	68f8      	ldr	r0, [r7, #12]
 8002cf2:	f000 f8b7 	bl	8002e64 <SPI_EndRxTxTransaction>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d006      	beq.n	8002d0a <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	2220      	movs	r2, #32
 8002d06:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8002d08:	e01a      	b.n	8002d40 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	689b      	ldr	r3, [r3, #8]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d10a      	bne.n	8002d28 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002d12:	2300      	movs	r3, #0
 8002d14:	617b      	str	r3, [r7, #20]
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	68db      	ldr	r3, [r3, #12]
 8002d1c:	617b      	str	r3, [r7, #20]
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	617b      	str	r3, [r7, #20]
 8002d26:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d003      	beq.n	8002d38 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002d36:	e003      	b.n	8002d40 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	2200      	movs	r2, #0
 8002d44:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8002d48:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	3730      	adds	r7, #48	@ 0x30
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}

08002d54 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b088      	sub	sp, #32
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	60f8      	str	r0, [r7, #12]
 8002d5c:	60b9      	str	r1, [r7, #8]
 8002d5e:	603b      	str	r3, [r7, #0]
 8002d60:	4613      	mov	r3, r2
 8002d62:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002d64:	f7fe fbc6 	bl	80014f4 <HAL_GetTick>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d6c:	1a9b      	subs	r3, r3, r2
 8002d6e:	683a      	ldr	r2, [r7, #0]
 8002d70:	4413      	add	r3, r2
 8002d72:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002d74:	f7fe fbbe 	bl	80014f4 <HAL_GetTick>
 8002d78:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002d7a:	4b39      	ldr	r3, [pc, #228]	@ (8002e60 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	015b      	lsls	r3, r3, #5
 8002d80:	0d1b      	lsrs	r3, r3, #20
 8002d82:	69fa      	ldr	r2, [r7, #28]
 8002d84:	fb02 f303 	mul.w	r3, r2, r3
 8002d88:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002d8a:	e054      	b.n	8002e36 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d92:	d050      	beq.n	8002e36 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002d94:	f7fe fbae 	bl	80014f4 <HAL_GetTick>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	69bb      	ldr	r3, [r7, #24]
 8002d9c:	1ad3      	subs	r3, r2, r3
 8002d9e:	69fa      	ldr	r2, [r7, #28]
 8002da0:	429a      	cmp	r2, r3
 8002da2:	d902      	bls.n	8002daa <SPI_WaitFlagStateUntilTimeout+0x56>
 8002da4:	69fb      	ldr	r3, [r7, #28]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d13d      	bne.n	8002e26 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	685a      	ldr	r2, [r3, #4]
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002db8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002dc2:	d111      	bne.n	8002de8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002dcc:	d004      	beq.n	8002dd8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002dd6:	d107      	bne.n	8002de8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002de6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002df0:	d10f      	bne.n	8002e12 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002e00:	601a      	str	r2, [r3, #0]
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	681a      	ldr	r2, [r3, #0]
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002e10:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	2201      	movs	r2, #1
 8002e16:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8002e22:	2303      	movs	r3, #3
 8002e24:	e017      	b.n	8002e56 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d101      	bne.n	8002e30 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	3b01      	subs	r3, #1
 8002e34:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	689a      	ldr	r2, [r3, #8]
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	4013      	ands	r3, r2
 8002e40:	68ba      	ldr	r2, [r7, #8]
 8002e42:	429a      	cmp	r2, r3
 8002e44:	bf0c      	ite	eq
 8002e46:	2301      	moveq	r3, #1
 8002e48:	2300      	movne	r3, #0
 8002e4a:	b2db      	uxtb	r3, r3
 8002e4c:	461a      	mov	r2, r3
 8002e4e:	79fb      	ldrb	r3, [r7, #7]
 8002e50:	429a      	cmp	r2, r3
 8002e52:	d19b      	bne.n	8002d8c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002e54:	2300      	movs	r3, #0
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	3720      	adds	r7, #32
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}
 8002e5e:	bf00      	nop
 8002e60:	20000000 	.word	0x20000000

08002e64 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b088      	sub	sp, #32
 8002e68:	af02      	add	r7, sp, #8
 8002e6a:	60f8      	str	r0, [r7, #12]
 8002e6c:	60b9      	str	r1, [r7, #8]
 8002e6e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	9300      	str	r3, [sp, #0]
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	2201      	movs	r2, #1
 8002e78:	2102      	movs	r1, #2
 8002e7a:	68f8      	ldr	r0, [r7, #12]
 8002e7c:	f7ff ff6a 	bl	8002d54 <SPI_WaitFlagStateUntilTimeout>
 8002e80:	4603      	mov	r3, r0
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d007      	beq.n	8002e96 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e8a:	f043 0220 	orr.w	r2, r3, #32
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002e92:	2303      	movs	r3, #3
 8002e94:	e032      	b.n	8002efc <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002e96:	4b1b      	ldr	r3, [pc, #108]	@ (8002f04 <SPI_EndRxTxTransaction+0xa0>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a1b      	ldr	r2, [pc, #108]	@ (8002f08 <SPI_EndRxTxTransaction+0xa4>)
 8002e9c:	fba2 2303 	umull	r2, r3, r2, r3
 8002ea0:	0d5b      	lsrs	r3, r3, #21
 8002ea2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002ea6:	fb02 f303 	mul.w	r3, r2, r3
 8002eaa:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002eb4:	d112      	bne.n	8002edc <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	9300      	str	r3, [sp, #0]
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	2180      	movs	r1, #128	@ 0x80
 8002ec0:	68f8      	ldr	r0, [r7, #12]
 8002ec2:	f7ff ff47 	bl	8002d54 <SPI_WaitFlagStateUntilTimeout>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d016      	beq.n	8002efa <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ed0:	f043 0220 	orr.w	r2, r3, #32
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8002ed8:	2303      	movs	r3, #3
 8002eda:	e00f      	b.n	8002efc <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d00a      	beq.n	8002ef8 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	3b01      	subs	r3, #1
 8002ee6:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	689b      	ldr	r3, [r3, #8]
 8002eee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ef2:	2b80      	cmp	r3, #128	@ 0x80
 8002ef4:	d0f2      	beq.n	8002edc <SPI_EndRxTxTransaction+0x78>
 8002ef6:	e000      	b.n	8002efa <SPI_EndRxTxTransaction+0x96>
        break;
 8002ef8:	bf00      	nop
  }

  return HAL_OK;
 8002efa:	2300      	movs	r3, #0
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	3718      	adds	r7, #24
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}
 8002f04:	20000000 	.word	0x20000000
 8002f08:	165e9f81 	.word	0x165e9f81

08002f0c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b082      	sub	sp, #8
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d101      	bne.n	8002f1e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e041      	b.n	8002fa2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f24:	b2db      	uxtb	r3, r3
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d106      	bne.n	8002f38 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f32:	6878      	ldr	r0, [r7, #4]
 8002f34:	f7fe f938 	bl	80011a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2202      	movs	r2, #2
 8002f3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	3304      	adds	r3, #4
 8002f48:	4619      	mov	r1, r3
 8002f4a:	4610      	mov	r0, r2
 8002f4c:	f000 fae6 	bl	800351c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2201      	movs	r2, #1
 8002f54:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2201      	movs	r2, #1
 8002f64:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2201      	movs	r2, #1
 8002f74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2201      	movs	r2, #1
 8002f84:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2201      	movs	r2, #1
 8002f94:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002fa0:	2300      	movs	r3, #0
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	3708      	adds	r7, #8
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}
	...

08002fac <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002fac:	b480      	push	{r7}
 8002fae:	b085      	sub	sp, #20
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002fba:	b2db      	uxtb	r3, r3
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	d001      	beq.n	8002fc4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	e046      	b.n	8003052 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2202      	movs	r2, #2
 8002fc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a23      	ldr	r2, [pc, #140]	@ (8003060 <HAL_TIM_Base_Start+0xb4>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d022      	beq.n	800301c <HAL_TIM_Base_Start+0x70>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002fde:	d01d      	beq.n	800301c <HAL_TIM_Base_Start+0x70>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a1f      	ldr	r2, [pc, #124]	@ (8003064 <HAL_TIM_Base_Start+0xb8>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d018      	beq.n	800301c <HAL_TIM_Base_Start+0x70>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a1e      	ldr	r2, [pc, #120]	@ (8003068 <HAL_TIM_Base_Start+0xbc>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d013      	beq.n	800301c <HAL_TIM_Base_Start+0x70>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a1c      	ldr	r2, [pc, #112]	@ (800306c <HAL_TIM_Base_Start+0xc0>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d00e      	beq.n	800301c <HAL_TIM_Base_Start+0x70>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a1b      	ldr	r2, [pc, #108]	@ (8003070 <HAL_TIM_Base_Start+0xc4>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d009      	beq.n	800301c <HAL_TIM_Base_Start+0x70>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a19      	ldr	r2, [pc, #100]	@ (8003074 <HAL_TIM_Base_Start+0xc8>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d004      	beq.n	800301c <HAL_TIM_Base_Start+0x70>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a18      	ldr	r2, [pc, #96]	@ (8003078 <HAL_TIM_Base_Start+0xcc>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d111      	bne.n	8003040 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	f003 0307 	and.w	r3, r3, #7
 8003026:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	2b06      	cmp	r3, #6
 800302c:	d010      	beq.n	8003050 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	681a      	ldr	r2, [r3, #0]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f042 0201 	orr.w	r2, r2, #1
 800303c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800303e:	e007      	b.n	8003050 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f042 0201 	orr.w	r2, r2, #1
 800304e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003050:	2300      	movs	r3, #0
}
 8003052:	4618      	mov	r0, r3
 8003054:	3714      	adds	r7, #20
 8003056:	46bd      	mov	sp, r7
 8003058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305c:	4770      	bx	lr
 800305e:	bf00      	nop
 8003060:	40010000 	.word	0x40010000
 8003064:	40000400 	.word	0x40000400
 8003068:	40000800 	.word	0x40000800
 800306c:	40000c00 	.word	0x40000c00
 8003070:	40010400 	.word	0x40010400
 8003074:	40014000 	.word	0x40014000
 8003078:	40001800 	.word	0x40001800

0800307c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800307c:	b480      	push	{r7}
 800307e:	b085      	sub	sp, #20
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800308a:	b2db      	uxtb	r3, r3
 800308c:	2b01      	cmp	r3, #1
 800308e:	d001      	beq.n	8003094 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	e04e      	b.n	8003132 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2202      	movs	r2, #2
 8003098:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	68da      	ldr	r2, [r3, #12]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f042 0201 	orr.w	r2, r2, #1
 80030aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a23      	ldr	r2, [pc, #140]	@ (8003140 <HAL_TIM_Base_Start_IT+0xc4>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d022      	beq.n	80030fc <HAL_TIM_Base_Start_IT+0x80>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80030be:	d01d      	beq.n	80030fc <HAL_TIM_Base_Start_IT+0x80>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a1f      	ldr	r2, [pc, #124]	@ (8003144 <HAL_TIM_Base_Start_IT+0xc8>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d018      	beq.n	80030fc <HAL_TIM_Base_Start_IT+0x80>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a1e      	ldr	r2, [pc, #120]	@ (8003148 <HAL_TIM_Base_Start_IT+0xcc>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d013      	beq.n	80030fc <HAL_TIM_Base_Start_IT+0x80>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a1c      	ldr	r2, [pc, #112]	@ (800314c <HAL_TIM_Base_Start_IT+0xd0>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d00e      	beq.n	80030fc <HAL_TIM_Base_Start_IT+0x80>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a1b      	ldr	r2, [pc, #108]	@ (8003150 <HAL_TIM_Base_Start_IT+0xd4>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d009      	beq.n	80030fc <HAL_TIM_Base_Start_IT+0x80>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a19      	ldr	r2, [pc, #100]	@ (8003154 <HAL_TIM_Base_Start_IT+0xd8>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d004      	beq.n	80030fc <HAL_TIM_Base_Start_IT+0x80>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a18      	ldr	r2, [pc, #96]	@ (8003158 <HAL_TIM_Base_Start_IT+0xdc>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d111      	bne.n	8003120 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	689b      	ldr	r3, [r3, #8]
 8003102:	f003 0307 	and.w	r3, r3, #7
 8003106:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	2b06      	cmp	r3, #6
 800310c:	d010      	beq.n	8003130 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	681a      	ldr	r2, [r3, #0]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f042 0201 	orr.w	r2, r2, #1
 800311c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800311e:	e007      	b.n	8003130 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	681a      	ldr	r2, [r3, #0]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f042 0201 	orr.w	r2, r2, #1
 800312e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003130:	2300      	movs	r3, #0
}
 8003132:	4618      	mov	r0, r3
 8003134:	3714      	adds	r7, #20
 8003136:	46bd      	mov	sp, r7
 8003138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313c:	4770      	bx	lr
 800313e:	bf00      	nop
 8003140:	40010000 	.word	0x40010000
 8003144:	40000400 	.word	0x40000400
 8003148:	40000800 	.word	0x40000800
 800314c:	40000c00 	.word	0x40000c00
 8003150:	40010400 	.word	0x40010400
 8003154:	40014000 	.word	0x40014000
 8003158:	40001800 	.word	0x40001800

0800315c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b084      	sub	sp, #16
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	68db      	ldr	r3, [r3, #12]
 800316a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	691b      	ldr	r3, [r3, #16]
 8003172:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	f003 0302 	and.w	r3, r3, #2
 800317a:	2b00      	cmp	r3, #0
 800317c:	d020      	beq.n	80031c0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	f003 0302 	and.w	r3, r3, #2
 8003184:	2b00      	cmp	r3, #0
 8003186:	d01b      	beq.n	80031c0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f06f 0202 	mvn.w	r2, #2
 8003190:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2201      	movs	r2, #1
 8003196:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	699b      	ldr	r3, [r3, #24]
 800319e:	f003 0303 	and.w	r3, r3, #3
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d003      	beq.n	80031ae <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80031a6:	6878      	ldr	r0, [r7, #4]
 80031a8:	f000 f999 	bl	80034de <HAL_TIM_IC_CaptureCallback>
 80031ac:	e005      	b.n	80031ba <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80031ae:	6878      	ldr	r0, [r7, #4]
 80031b0:	f000 f98b 	bl	80034ca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031b4:	6878      	ldr	r0, [r7, #4]
 80031b6:	f000 f99c 	bl	80034f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2200      	movs	r2, #0
 80031be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	f003 0304 	and.w	r3, r3, #4
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d020      	beq.n	800320c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	f003 0304 	and.w	r3, r3, #4
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d01b      	beq.n	800320c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f06f 0204 	mvn.w	r2, #4
 80031dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2202      	movs	r2, #2
 80031e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	699b      	ldr	r3, [r3, #24]
 80031ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d003      	beq.n	80031fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031f2:	6878      	ldr	r0, [r7, #4]
 80031f4:	f000 f973 	bl	80034de <HAL_TIM_IC_CaptureCallback>
 80031f8:	e005      	b.n	8003206 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	f000 f965 	bl	80034ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003200:	6878      	ldr	r0, [r7, #4]
 8003202:	f000 f976 	bl	80034f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2200      	movs	r2, #0
 800320a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	f003 0308 	and.w	r3, r3, #8
 8003212:	2b00      	cmp	r3, #0
 8003214:	d020      	beq.n	8003258 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	f003 0308 	and.w	r3, r3, #8
 800321c:	2b00      	cmp	r3, #0
 800321e:	d01b      	beq.n	8003258 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f06f 0208 	mvn.w	r2, #8
 8003228:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2204      	movs	r2, #4
 800322e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	69db      	ldr	r3, [r3, #28]
 8003236:	f003 0303 	and.w	r3, r3, #3
 800323a:	2b00      	cmp	r3, #0
 800323c:	d003      	beq.n	8003246 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800323e:	6878      	ldr	r0, [r7, #4]
 8003240:	f000 f94d 	bl	80034de <HAL_TIM_IC_CaptureCallback>
 8003244:	e005      	b.n	8003252 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003246:	6878      	ldr	r0, [r7, #4]
 8003248:	f000 f93f 	bl	80034ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800324c:	6878      	ldr	r0, [r7, #4]
 800324e:	f000 f950 	bl	80034f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2200      	movs	r2, #0
 8003256:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	f003 0310 	and.w	r3, r3, #16
 800325e:	2b00      	cmp	r3, #0
 8003260:	d020      	beq.n	80032a4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	f003 0310 	and.w	r3, r3, #16
 8003268:	2b00      	cmp	r3, #0
 800326a:	d01b      	beq.n	80032a4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f06f 0210 	mvn.w	r2, #16
 8003274:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2208      	movs	r2, #8
 800327a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	69db      	ldr	r3, [r3, #28]
 8003282:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003286:	2b00      	cmp	r3, #0
 8003288:	d003      	beq.n	8003292 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800328a:	6878      	ldr	r0, [r7, #4]
 800328c:	f000 f927 	bl	80034de <HAL_TIM_IC_CaptureCallback>
 8003290:	e005      	b.n	800329e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003292:	6878      	ldr	r0, [r7, #4]
 8003294:	f000 f919 	bl	80034ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003298:	6878      	ldr	r0, [r7, #4]
 800329a:	f000 f92a 	bl	80034f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2200      	movs	r2, #0
 80032a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	f003 0301 	and.w	r3, r3, #1
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d00c      	beq.n	80032c8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	f003 0301 	and.w	r3, r3, #1
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d007      	beq.n	80032c8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f06f 0201 	mvn.w	r2, #1
 80032c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80032c2:	6878      	ldr	r0, [r7, #4]
 80032c4:	f7fd ffae 	bl	8001224 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d00c      	beq.n	80032ec <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d007      	beq.n	80032ec <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80032e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80032e6:	6878      	ldr	r0, [r7, #4]
 80032e8:	f000 fae4 	bl	80038b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d00c      	beq.n	8003310 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d007      	beq.n	8003310 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003308:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800330a:	6878      	ldr	r0, [r7, #4]
 800330c:	f000 f8fb 	bl	8003506 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	f003 0320 	and.w	r3, r3, #32
 8003316:	2b00      	cmp	r3, #0
 8003318:	d00c      	beq.n	8003334 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	f003 0320 	and.w	r3, r3, #32
 8003320:	2b00      	cmp	r3, #0
 8003322:	d007      	beq.n	8003334 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f06f 0220 	mvn.w	r2, #32
 800332c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	f000 fab6 	bl	80038a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003334:	bf00      	nop
 8003336:	3710      	adds	r7, #16
 8003338:	46bd      	mov	sp, r7
 800333a:	bd80      	pop	{r7, pc}

0800333c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b084      	sub	sp, #16
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
 8003344:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003346:	2300      	movs	r3, #0
 8003348:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003350:	2b01      	cmp	r3, #1
 8003352:	d101      	bne.n	8003358 <HAL_TIM_ConfigClockSource+0x1c>
 8003354:	2302      	movs	r3, #2
 8003356:	e0b4      	b.n	80034c2 <HAL_TIM_ConfigClockSource+0x186>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2201      	movs	r2, #1
 800335c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2202      	movs	r2, #2
 8003364:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003376:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800337e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	68ba      	ldr	r2, [r7, #8]
 8003386:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003390:	d03e      	beq.n	8003410 <HAL_TIM_ConfigClockSource+0xd4>
 8003392:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003396:	f200 8087 	bhi.w	80034a8 <HAL_TIM_ConfigClockSource+0x16c>
 800339a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800339e:	f000 8086 	beq.w	80034ae <HAL_TIM_ConfigClockSource+0x172>
 80033a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80033a6:	d87f      	bhi.n	80034a8 <HAL_TIM_ConfigClockSource+0x16c>
 80033a8:	2b70      	cmp	r3, #112	@ 0x70
 80033aa:	d01a      	beq.n	80033e2 <HAL_TIM_ConfigClockSource+0xa6>
 80033ac:	2b70      	cmp	r3, #112	@ 0x70
 80033ae:	d87b      	bhi.n	80034a8 <HAL_TIM_ConfigClockSource+0x16c>
 80033b0:	2b60      	cmp	r3, #96	@ 0x60
 80033b2:	d050      	beq.n	8003456 <HAL_TIM_ConfigClockSource+0x11a>
 80033b4:	2b60      	cmp	r3, #96	@ 0x60
 80033b6:	d877      	bhi.n	80034a8 <HAL_TIM_ConfigClockSource+0x16c>
 80033b8:	2b50      	cmp	r3, #80	@ 0x50
 80033ba:	d03c      	beq.n	8003436 <HAL_TIM_ConfigClockSource+0xfa>
 80033bc:	2b50      	cmp	r3, #80	@ 0x50
 80033be:	d873      	bhi.n	80034a8 <HAL_TIM_ConfigClockSource+0x16c>
 80033c0:	2b40      	cmp	r3, #64	@ 0x40
 80033c2:	d058      	beq.n	8003476 <HAL_TIM_ConfigClockSource+0x13a>
 80033c4:	2b40      	cmp	r3, #64	@ 0x40
 80033c6:	d86f      	bhi.n	80034a8 <HAL_TIM_ConfigClockSource+0x16c>
 80033c8:	2b30      	cmp	r3, #48	@ 0x30
 80033ca:	d064      	beq.n	8003496 <HAL_TIM_ConfigClockSource+0x15a>
 80033cc:	2b30      	cmp	r3, #48	@ 0x30
 80033ce:	d86b      	bhi.n	80034a8 <HAL_TIM_ConfigClockSource+0x16c>
 80033d0:	2b20      	cmp	r3, #32
 80033d2:	d060      	beq.n	8003496 <HAL_TIM_ConfigClockSource+0x15a>
 80033d4:	2b20      	cmp	r3, #32
 80033d6:	d867      	bhi.n	80034a8 <HAL_TIM_ConfigClockSource+0x16c>
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d05c      	beq.n	8003496 <HAL_TIM_ConfigClockSource+0x15a>
 80033dc:	2b10      	cmp	r3, #16
 80033de:	d05a      	beq.n	8003496 <HAL_TIM_ConfigClockSource+0x15a>
 80033e0:	e062      	b.n	80034a8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80033f2:	f000 f9b9 	bl	8003768 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	689b      	ldr	r3, [r3, #8]
 80033fc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80033fe:	68bb      	ldr	r3, [r7, #8]
 8003400:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003404:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	68ba      	ldr	r2, [r7, #8]
 800340c:	609a      	str	r2, [r3, #8]
      break;
 800340e:	e04f      	b.n	80034b0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003420:	f000 f9a2 	bl	8003768 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	689a      	ldr	r2, [r3, #8]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003432:	609a      	str	r2, [r3, #8]
      break;
 8003434:	e03c      	b.n	80034b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003442:	461a      	mov	r2, r3
 8003444:	f000 f916 	bl	8003674 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	2150      	movs	r1, #80	@ 0x50
 800344e:	4618      	mov	r0, r3
 8003450:	f000 f96f 	bl	8003732 <TIM_ITRx_SetConfig>
      break;
 8003454:	e02c      	b.n	80034b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003462:	461a      	mov	r2, r3
 8003464:	f000 f935 	bl	80036d2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	2160      	movs	r1, #96	@ 0x60
 800346e:	4618      	mov	r0, r3
 8003470:	f000 f95f 	bl	8003732 <TIM_ITRx_SetConfig>
      break;
 8003474:	e01c      	b.n	80034b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003482:	461a      	mov	r2, r3
 8003484:	f000 f8f6 	bl	8003674 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	2140      	movs	r1, #64	@ 0x40
 800348e:	4618      	mov	r0, r3
 8003490:	f000 f94f 	bl	8003732 <TIM_ITRx_SetConfig>
      break;
 8003494:	e00c      	b.n	80034b0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681a      	ldr	r2, [r3, #0]
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4619      	mov	r1, r3
 80034a0:	4610      	mov	r0, r2
 80034a2:	f000 f946 	bl	8003732 <TIM_ITRx_SetConfig>
      break;
 80034a6:	e003      	b.n	80034b0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80034a8:	2301      	movs	r3, #1
 80034aa:	73fb      	strb	r3, [r7, #15]
      break;
 80034ac:	e000      	b.n	80034b0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80034ae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2201      	movs	r2, #1
 80034b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2200      	movs	r2, #0
 80034bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80034c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	3710      	adds	r7, #16
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}

080034ca <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80034ca:	b480      	push	{r7}
 80034cc:	b083      	sub	sp, #12
 80034ce:	af00      	add	r7, sp, #0
 80034d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80034d2:	bf00      	nop
 80034d4:	370c      	adds	r7, #12
 80034d6:	46bd      	mov	sp, r7
 80034d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034dc:	4770      	bx	lr

080034de <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80034de:	b480      	push	{r7}
 80034e0:	b083      	sub	sp, #12
 80034e2:	af00      	add	r7, sp, #0
 80034e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80034e6:	bf00      	nop
 80034e8:	370c      	adds	r7, #12
 80034ea:	46bd      	mov	sp, r7
 80034ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f0:	4770      	bx	lr

080034f2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80034f2:	b480      	push	{r7}
 80034f4:	b083      	sub	sp, #12
 80034f6:	af00      	add	r7, sp, #0
 80034f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80034fa:	bf00      	nop
 80034fc:	370c      	adds	r7, #12
 80034fe:	46bd      	mov	sp, r7
 8003500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003504:	4770      	bx	lr

08003506 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003506:	b480      	push	{r7}
 8003508:	b083      	sub	sp, #12
 800350a:	af00      	add	r7, sp, #0
 800350c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800350e:	bf00      	nop
 8003510:	370c      	adds	r7, #12
 8003512:	46bd      	mov	sp, r7
 8003514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003518:	4770      	bx	lr
	...

0800351c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800351c:	b480      	push	{r7}
 800351e:	b085      	sub	sp, #20
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
 8003524:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	4a46      	ldr	r2, [pc, #280]	@ (8003648 <TIM_Base_SetConfig+0x12c>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d013      	beq.n	800355c <TIM_Base_SetConfig+0x40>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800353a:	d00f      	beq.n	800355c <TIM_Base_SetConfig+0x40>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	4a43      	ldr	r2, [pc, #268]	@ (800364c <TIM_Base_SetConfig+0x130>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d00b      	beq.n	800355c <TIM_Base_SetConfig+0x40>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	4a42      	ldr	r2, [pc, #264]	@ (8003650 <TIM_Base_SetConfig+0x134>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d007      	beq.n	800355c <TIM_Base_SetConfig+0x40>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	4a41      	ldr	r2, [pc, #260]	@ (8003654 <TIM_Base_SetConfig+0x138>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d003      	beq.n	800355c <TIM_Base_SetConfig+0x40>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	4a40      	ldr	r2, [pc, #256]	@ (8003658 <TIM_Base_SetConfig+0x13c>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d108      	bne.n	800356e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003562:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	68fa      	ldr	r2, [r7, #12]
 800356a:	4313      	orrs	r3, r2
 800356c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	4a35      	ldr	r2, [pc, #212]	@ (8003648 <TIM_Base_SetConfig+0x12c>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d02b      	beq.n	80035ce <TIM_Base_SetConfig+0xb2>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800357c:	d027      	beq.n	80035ce <TIM_Base_SetConfig+0xb2>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	4a32      	ldr	r2, [pc, #200]	@ (800364c <TIM_Base_SetConfig+0x130>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d023      	beq.n	80035ce <TIM_Base_SetConfig+0xb2>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	4a31      	ldr	r2, [pc, #196]	@ (8003650 <TIM_Base_SetConfig+0x134>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d01f      	beq.n	80035ce <TIM_Base_SetConfig+0xb2>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	4a30      	ldr	r2, [pc, #192]	@ (8003654 <TIM_Base_SetConfig+0x138>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d01b      	beq.n	80035ce <TIM_Base_SetConfig+0xb2>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	4a2f      	ldr	r2, [pc, #188]	@ (8003658 <TIM_Base_SetConfig+0x13c>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d017      	beq.n	80035ce <TIM_Base_SetConfig+0xb2>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	4a2e      	ldr	r2, [pc, #184]	@ (800365c <TIM_Base_SetConfig+0x140>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d013      	beq.n	80035ce <TIM_Base_SetConfig+0xb2>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	4a2d      	ldr	r2, [pc, #180]	@ (8003660 <TIM_Base_SetConfig+0x144>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d00f      	beq.n	80035ce <TIM_Base_SetConfig+0xb2>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	4a2c      	ldr	r2, [pc, #176]	@ (8003664 <TIM_Base_SetConfig+0x148>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d00b      	beq.n	80035ce <TIM_Base_SetConfig+0xb2>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	4a2b      	ldr	r2, [pc, #172]	@ (8003668 <TIM_Base_SetConfig+0x14c>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d007      	beq.n	80035ce <TIM_Base_SetConfig+0xb2>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	4a2a      	ldr	r2, [pc, #168]	@ (800366c <TIM_Base_SetConfig+0x150>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d003      	beq.n	80035ce <TIM_Base_SetConfig+0xb2>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	4a29      	ldr	r2, [pc, #164]	@ (8003670 <TIM_Base_SetConfig+0x154>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d108      	bne.n	80035e0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80035d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	68db      	ldr	r3, [r3, #12]
 80035da:	68fa      	ldr	r2, [r7, #12]
 80035dc:	4313      	orrs	r3, r2
 80035de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	695b      	ldr	r3, [r3, #20]
 80035ea:	4313      	orrs	r3, r2
 80035ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	68fa      	ldr	r2, [r7, #12]
 80035f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	689a      	ldr	r2, [r3, #8]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	681a      	ldr	r2, [r3, #0]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	4a10      	ldr	r2, [pc, #64]	@ (8003648 <TIM_Base_SetConfig+0x12c>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d003      	beq.n	8003614 <TIM_Base_SetConfig+0xf8>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	4a12      	ldr	r2, [pc, #72]	@ (8003658 <TIM_Base_SetConfig+0x13c>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d103      	bne.n	800361c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	691a      	ldr	r2, [r3, #16]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2201      	movs	r2, #1
 8003620:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	691b      	ldr	r3, [r3, #16]
 8003626:	f003 0301 	and.w	r3, r3, #1
 800362a:	2b01      	cmp	r3, #1
 800362c:	d105      	bne.n	800363a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	691b      	ldr	r3, [r3, #16]
 8003632:	f023 0201 	bic.w	r2, r3, #1
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	611a      	str	r2, [r3, #16]
  }
}
 800363a:	bf00      	nop
 800363c:	3714      	adds	r7, #20
 800363e:	46bd      	mov	sp, r7
 8003640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003644:	4770      	bx	lr
 8003646:	bf00      	nop
 8003648:	40010000 	.word	0x40010000
 800364c:	40000400 	.word	0x40000400
 8003650:	40000800 	.word	0x40000800
 8003654:	40000c00 	.word	0x40000c00
 8003658:	40010400 	.word	0x40010400
 800365c:	40014000 	.word	0x40014000
 8003660:	40014400 	.word	0x40014400
 8003664:	40014800 	.word	0x40014800
 8003668:	40001800 	.word	0x40001800
 800366c:	40001c00 	.word	0x40001c00
 8003670:	40002000 	.word	0x40002000

08003674 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003674:	b480      	push	{r7}
 8003676:	b087      	sub	sp, #28
 8003678:	af00      	add	r7, sp, #0
 800367a:	60f8      	str	r0, [r7, #12]
 800367c:	60b9      	str	r1, [r7, #8]
 800367e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	6a1b      	ldr	r3, [r3, #32]
 8003684:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	6a1b      	ldr	r3, [r3, #32]
 800368a:	f023 0201 	bic.w	r2, r3, #1
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	699b      	ldr	r3, [r3, #24]
 8003696:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003698:	693b      	ldr	r3, [r7, #16]
 800369a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800369e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	011b      	lsls	r3, r3, #4
 80036a4:	693a      	ldr	r2, [r7, #16]
 80036a6:	4313      	orrs	r3, r2
 80036a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	f023 030a 	bic.w	r3, r3, #10
 80036b0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80036b2:	697a      	ldr	r2, [r7, #20]
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	4313      	orrs	r3, r2
 80036b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	693a      	ldr	r2, [r7, #16]
 80036be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	697a      	ldr	r2, [r7, #20]
 80036c4:	621a      	str	r2, [r3, #32]
}
 80036c6:	bf00      	nop
 80036c8:	371c      	adds	r7, #28
 80036ca:	46bd      	mov	sp, r7
 80036cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d0:	4770      	bx	lr

080036d2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80036d2:	b480      	push	{r7}
 80036d4:	b087      	sub	sp, #28
 80036d6:	af00      	add	r7, sp, #0
 80036d8:	60f8      	str	r0, [r7, #12]
 80036da:	60b9      	str	r1, [r7, #8]
 80036dc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	6a1b      	ldr	r3, [r3, #32]
 80036e2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	6a1b      	ldr	r3, [r3, #32]
 80036e8:	f023 0210 	bic.w	r2, r3, #16
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	699b      	ldr	r3, [r3, #24]
 80036f4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80036fc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	031b      	lsls	r3, r3, #12
 8003702:	693a      	ldr	r2, [r7, #16]
 8003704:	4313      	orrs	r3, r2
 8003706:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800370e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	011b      	lsls	r3, r3, #4
 8003714:	697a      	ldr	r2, [r7, #20]
 8003716:	4313      	orrs	r3, r2
 8003718:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	693a      	ldr	r2, [r7, #16]
 800371e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	697a      	ldr	r2, [r7, #20]
 8003724:	621a      	str	r2, [r3, #32]
}
 8003726:	bf00      	nop
 8003728:	371c      	adds	r7, #28
 800372a:	46bd      	mov	sp, r7
 800372c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003730:	4770      	bx	lr

08003732 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003732:	b480      	push	{r7}
 8003734:	b085      	sub	sp, #20
 8003736:	af00      	add	r7, sp, #0
 8003738:	6078      	str	r0, [r7, #4]
 800373a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003748:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800374a:	683a      	ldr	r2, [r7, #0]
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	4313      	orrs	r3, r2
 8003750:	f043 0307 	orr.w	r3, r3, #7
 8003754:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	68fa      	ldr	r2, [r7, #12]
 800375a:	609a      	str	r2, [r3, #8]
}
 800375c:	bf00      	nop
 800375e:	3714      	adds	r7, #20
 8003760:	46bd      	mov	sp, r7
 8003762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003766:	4770      	bx	lr

08003768 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003768:	b480      	push	{r7}
 800376a:	b087      	sub	sp, #28
 800376c:	af00      	add	r7, sp, #0
 800376e:	60f8      	str	r0, [r7, #12]
 8003770:	60b9      	str	r1, [r7, #8]
 8003772:	607a      	str	r2, [r7, #4]
 8003774:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	689b      	ldr	r3, [r3, #8]
 800377a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800377c:	697b      	ldr	r3, [r7, #20]
 800377e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003782:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	021a      	lsls	r2, r3, #8
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	431a      	orrs	r2, r3
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	4313      	orrs	r3, r2
 8003790:	697a      	ldr	r2, [r7, #20]
 8003792:	4313      	orrs	r3, r2
 8003794:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	697a      	ldr	r2, [r7, #20]
 800379a:	609a      	str	r2, [r3, #8]
}
 800379c:	bf00      	nop
 800379e:	371c      	adds	r7, #28
 80037a0:	46bd      	mov	sp, r7
 80037a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a6:	4770      	bx	lr

080037a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80037a8:	b480      	push	{r7}
 80037aa:	b085      	sub	sp, #20
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
 80037b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80037b8:	2b01      	cmp	r3, #1
 80037ba:	d101      	bne.n	80037c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80037bc:	2302      	movs	r3, #2
 80037be:	e05a      	b.n	8003876 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2201      	movs	r2, #1
 80037c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2202      	movs	r2, #2
 80037cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	689b      	ldr	r3, [r3, #8]
 80037de:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80037e6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	68fa      	ldr	r2, [r7, #12]
 80037ee:	4313      	orrs	r3, r2
 80037f0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	68fa      	ldr	r2, [r7, #12]
 80037f8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a21      	ldr	r2, [pc, #132]	@ (8003884 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d022      	beq.n	800384a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800380c:	d01d      	beq.n	800384a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a1d      	ldr	r2, [pc, #116]	@ (8003888 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d018      	beq.n	800384a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a1b      	ldr	r2, [pc, #108]	@ (800388c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d013      	beq.n	800384a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a1a      	ldr	r2, [pc, #104]	@ (8003890 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d00e      	beq.n	800384a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a18      	ldr	r2, [pc, #96]	@ (8003894 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d009      	beq.n	800384a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a17      	ldr	r2, [pc, #92]	@ (8003898 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d004      	beq.n	800384a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a15      	ldr	r2, [pc, #84]	@ (800389c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d10c      	bne.n	8003864 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003850:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	68ba      	ldr	r2, [r7, #8]
 8003858:	4313      	orrs	r3, r2
 800385a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	68ba      	ldr	r2, [r7, #8]
 8003862:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2201      	movs	r2, #1
 8003868:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2200      	movs	r2, #0
 8003870:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003874:	2300      	movs	r3, #0
}
 8003876:	4618      	mov	r0, r3
 8003878:	3714      	adds	r7, #20
 800387a:	46bd      	mov	sp, r7
 800387c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003880:	4770      	bx	lr
 8003882:	bf00      	nop
 8003884:	40010000 	.word	0x40010000
 8003888:	40000400 	.word	0x40000400
 800388c:	40000800 	.word	0x40000800
 8003890:	40000c00 	.word	0x40000c00
 8003894:	40010400 	.word	0x40010400
 8003898:	40014000 	.word	0x40014000
 800389c:	40001800 	.word	0x40001800

080038a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b083      	sub	sp, #12
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80038a8:	bf00      	nop
 80038aa:	370c      	adds	r7, #12
 80038ac:	46bd      	mov	sp, r7
 80038ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b2:	4770      	bx	lr

080038b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b083      	sub	sp, #12
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80038bc:	bf00      	nop
 80038be:	370c      	adds	r7, #12
 80038c0:	46bd      	mov	sp, r7
 80038c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c6:	4770      	bx	lr

080038c8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b082      	sub	sp, #8
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d101      	bne.n	80038da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	e042      	b.n	8003960 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80038e0:	b2db      	uxtb	r3, r3
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d106      	bne.n	80038f4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2200      	movs	r2, #0
 80038ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80038ee:	6878      	ldr	r0, [r7, #4]
 80038f0:	f7fd fd14 	bl	800131c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2224      	movs	r2, #36	@ 0x24
 80038f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	68da      	ldr	r2, [r3, #12]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800390a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800390c:	6878      	ldr	r0, [r7, #4]
 800390e:	f000 f973 	bl	8003bf8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	691a      	ldr	r2, [r3, #16]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003920:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	695a      	ldr	r2, [r3, #20]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003930:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	68da      	ldr	r2, [r3, #12]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003940:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2200      	movs	r2, #0
 8003946:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2220      	movs	r2, #32
 800394c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2220      	movs	r2, #32
 8003954:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2200      	movs	r2, #0
 800395c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800395e:	2300      	movs	r3, #0
}
 8003960:	4618      	mov	r0, r3
 8003962:	3708      	adds	r7, #8
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}

08003968 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b08a      	sub	sp, #40	@ 0x28
 800396c:	af02      	add	r7, sp, #8
 800396e:	60f8      	str	r0, [r7, #12]
 8003970:	60b9      	str	r1, [r7, #8]
 8003972:	603b      	str	r3, [r7, #0]
 8003974:	4613      	mov	r3, r2
 8003976:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003978:	2300      	movs	r3, #0
 800397a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003982:	b2db      	uxtb	r3, r3
 8003984:	2b20      	cmp	r3, #32
 8003986:	d175      	bne.n	8003a74 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d002      	beq.n	8003994 <HAL_UART_Transmit+0x2c>
 800398e:	88fb      	ldrh	r3, [r7, #6]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d101      	bne.n	8003998 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003994:	2301      	movs	r3, #1
 8003996:	e06e      	b.n	8003a76 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	2200      	movs	r2, #0
 800399c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	2221      	movs	r2, #33	@ 0x21
 80039a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80039a6:	f7fd fda5 	bl	80014f4 <HAL_GetTick>
 80039aa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	88fa      	ldrh	r2, [r7, #6]
 80039b0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	88fa      	ldrh	r2, [r7, #6]
 80039b6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80039c0:	d108      	bne.n	80039d4 <HAL_UART_Transmit+0x6c>
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	691b      	ldr	r3, [r3, #16]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d104      	bne.n	80039d4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80039ca:	2300      	movs	r3, #0
 80039cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	61bb      	str	r3, [r7, #24]
 80039d2:	e003      	b.n	80039dc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80039d8:	2300      	movs	r3, #0
 80039da:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80039dc:	e02e      	b.n	8003a3c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	9300      	str	r3, [sp, #0]
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	2200      	movs	r2, #0
 80039e6:	2180      	movs	r1, #128	@ 0x80
 80039e8:	68f8      	ldr	r0, [r7, #12]
 80039ea:	f000 f848 	bl	8003a7e <UART_WaitOnFlagUntilTimeout>
 80039ee:	4603      	mov	r3, r0
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d005      	beq.n	8003a00 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	2220      	movs	r2, #32
 80039f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80039fc:	2303      	movs	r3, #3
 80039fe:	e03a      	b.n	8003a76 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003a00:	69fb      	ldr	r3, [r7, #28]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d10b      	bne.n	8003a1e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003a06:	69bb      	ldr	r3, [r7, #24]
 8003a08:	881b      	ldrh	r3, [r3, #0]
 8003a0a:	461a      	mov	r2, r3
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a14:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003a16:	69bb      	ldr	r3, [r7, #24]
 8003a18:	3302      	adds	r3, #2
 8003a1a:	61bb      	str	r3, [r7, #24]
 8003a1c:	e007      	b.n	8003a2e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003a1e:	69fb      	ldr	r3, [r7, #28]
 8003a20:	781a      	ldrb	r2, [r3, #0]
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003a28:	69fb      	ldr	r3, [r7, #28]
 8003a2a:	3301      	adds	r3, #1
 8003a2c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003a32:	b29b      	uxth	r3, r3
 8003a34:	3b01      	subs	r3, #1
 8003a36:	b29a      	uxth	r2, r3
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003a40:	b29b      	uxth	r3, r3
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d1cb      	bne.n	80039de <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	9300      	str	r3, [sp, #0]
 8003a4a:	697b      	ldr	r3, [r7, #20]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	2140      	movs	r1, #64	@ 0x40
 8003a50:	68f8      	ldr	r0, [r7, #12]
 8003a52:	f000 f814 	bl	8003a7e <UART_WaitOnFlagUntilTimeout>
 8003a56:	4603      	mov	r3, r0
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d005      	beq.n	8003a68 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	2220      	movs	r2, #32
 8003a60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003a64:	2303      	movs	r3, #3
 8003a66:	e006      	b.n	8003a76 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	2220      	movs	r2, #32
 8003a6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003a70:	2300      	movs	r3, #0
 8003a72:	e000      	b.n	8003a76 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003a74:	2302      	movs	r3, #2
  }
}
 8003a76:	4618      	mov	r0, r3
 8003a78:	3720      	adds	r7, #32
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}

08003a7e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003a7e:	b580      	push	{r7, lr}
 8003a80:	b086      	sub	sp, #24
 8003a82:	af00      	add	r7, sp, #0
 8003a84:	60f8      	str	r0, [r7, #12]
 8003a86:	60b9      	str	r1, [r7, #8]
 8003a88:	603b      	str	r3, [r7, #0]
 8003a8a:	4613      	mov	r3, r2
 8003a8c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a8e:	e03b      	b.n	8003b08 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a90:	6a3b      	ldr	r3, [r7, #32]
 8003a92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a96:	d037      	beq.n	8003b08 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a98:	f7fd fd2c 	bl	80014f4 <HAL_GetTick>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	1ad3      	subs	r3, r2, r3
 8003aa2:	6a3a      	ldr	r2, [r7, #32]
 8003aa4:	429a      	cmp	r2, r3
 8003aa6:	d302      	bcc.n	8003aae <UART_WaitOnFlagUntilTimeout+0x30>
 8003aa8:	6a3b      	ldr	r3, [r7, #32]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d101      	bne.n	8003ab2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003aae:	2303      	movs	r3, #3
 8003ab0:	e03a      	b.n	8003b28 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	68db      	ldr	r3, [r3, #12]
 8003ab8:	f003 0304 	and.w	r3, r3, #4
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d023      	beq.n	8003b08 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	2b80      	cmp	r3, #128	@ 0x80
 8003ac4:	d020      	beq.n	8003b08 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	2b40      	cmp	r3, #64	@ 0x40
 8003aca:	d01d      	beq.n	8003b08 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f003 0308 	and.w	r3, r3, #8
 8003ad6:	2b08      	cmp	r3, #8
 8003ad8:	d116      	bne.n	8003b08 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003ada:	2300      	movs	r3, #0
 8003adc:	617b      	str	r3, [r7, #20]
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	617b      	str	r3, [r7, #20]
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	617b      	str	r3, [r7, #20]
 8003aee:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003af0:	68f8      	ldr	r0, [r7, #12]
 8003af2:	f000 f81d 	bl	8003b30 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	2208      	movs	r2, #8
 8003afa:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	2200      	movs	r2, #0
 8003b00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003b04:	2301      	movs	r3, #1
 8003b06:	e00f      	b.n	8003b28 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	681a      	ldr	r2, [r3, #0]
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	4013      	ands	r3, r2
 8003b12:	68ba      	ldr	r2, [r7, #8]
 8003b14:	429a      	cmp	r2, r3
 8003b16:	bf0c      	ite	eq
 8003b18:	2301      	moveq	r3, #1
 8003b1a:	2300      	movne	r3, #0
 8003b1c:	b2db      	uxtb	r3, r3
 8003b1e:	461a      	mov	r2, r3
 8003b20:	79fb      	ldrb	r3, [r7, #7]
 8003b22:	429a      	cmp	r2, r3
 8003b24:	d0b4      	beq.n	8003a90 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003b26:	2300      	movs	r3, #0
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	3718      	adds	r7, #24
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bd80      	pop	{r7, pc}

08003b30 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b095      	sub	sp, #84	@ 0x54
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	330c      	adds	r3, #12
 8003b3e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b42:	e853 3f00 	ldrex	r3, [r3]
 8003b46:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003b48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b4a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003b4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	330c      	adds	r3, #12
 8003b56:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003b58:	643a      	str	r2, [r7, #64]	@ 0x40
 8003b5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b5c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003b5e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003b60:	e841 2300 	strex	r3, r2, [r1]
 8003b64:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003b66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d1e5      	bne.n	8003b38 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	3314      	adds	r3, #20
 8003b72:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b74:	6a3b      	ldr	r3, [r7, #32]
 8003b76:	e853 3f00 	ldrex	r3, [r3]
 8003b7a:	61fb      	str	r3, [r7, #28]
   return(result);
 8003b7c:	69fb      	ldr	r3, [r7, #28]
 8003b7e:	f023 0301 	bic.w	r3, r3, #1
 8003b82:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	3314      	adds	r3, #20
 8003b8a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003b8c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003b8e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b90:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003b92:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003b94:	e841 2300 	strex	r3, r2, [r1]
 8003b98:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003b9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d1e5      	bne.n	8003b6c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ba4:	2b01      	cmp	r3, #1
 8003ba6:	d119      	bne.n	8003bdc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	330c      	adds	r3, #12
 8003bae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	e853 3f00 	ldrex	r3, [r3]
 8003bb6:	60bb      	str	r3, [r7, #8]
   return(result);
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	f023 0310 	bic.w	r3, r3, #16
 8003bbe:	647b      	str	r3, [r7, #68]	@ 0x44
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	330c      	adds	r3, #12
 8003bc6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003bc8:	61ba      	str	r2, [r7, #24]
 8003bca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bcc:	6979      	ldr	r1, [r7, #20]
 8003bce:	69ba      	ldr	r2, [r7, #24]
 8003bd0:	e841 2300 	strex	r3, r2, [r1]
 8003bd4:	613b      	str	r3, [r7, #16]
   return(result);
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d1e5      	bne.n	8003ba8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2220      	movs	r2, #32
 8003be0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2200      	movs	r2, #0
 8003be8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003bea:	bf00      	nop
 8003bec:	3754      	adds	r7, #84	@ 0x54
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf4:	4770      	bx	lr
	...

08003bf8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003bf8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003bfc:	b0c0      	sub	sp, #256	@ 0x100
 8003bfe:	af00      	add	r7, sp, #0
 8003c00:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	691b      	ldr	r3, [r3, #16]
 8003c0c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003c10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c14:	68d9      	ldr	r1, [r3, #12]
 8003c16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c1a:	681a      	ldr	r2, [r3, #0]
 8003c1c:	ea40 0301 	orr.w	r3, r0, r1
 8003c20:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003c22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c26:	689a      	ldr	r2, [r3, #8]
 8003c28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c2c:	691b      	ldr	r3, [r3, #16]
 8003c2e:	431a      	orrs	r2, r3
 8003c30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c34:	695b      	ldr	r3, [r3, #20]
 8003c36:	431a      	orrs	r2, r3
 8003c38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c3c:	69db      	ldr	r3, [r3, #28]
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003c44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	68db      	ldr	r3, [r3, #12]
 8003c4c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003c50:	f021 010c 	bic.w	r1, r1, #12
 8003c54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c58:	681a      	ldr	r2, [r3, #0]
 8003c5a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003c5e:	430b      	orrs	r3, r1
 8003c60:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003c62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	695b      	ldr	r3, [r3, #20]
 8003c6a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003c6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c72:	6999      	ldr	r1, [r3, #24]
 8003c74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c78:	681a      	ldr	r2, [r3, #0]
 8003c7a:	ea40 0301 	orr.w	r3, r0, r1
 8003c7e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003c80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c84:	681a      	ldr	r2, [r3, #0]
 8003c86:	4b8f      	ldr	r3, [pc, #572]	@ (8003ec4 <UART_SetConfig+0x2cc>)
 8003c88:	429a      	cmp	r2, r3
 8003c8a:	d005      	beq.n	8003c98 <UART_SetConfig+0xa0>
 8003c8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c90:	681a      	ldr	r2, [r3, #0]
 8003c92:	4b8d      	ldr	r3, [pc, #564]	@ (8003ec8 <UART_SetConfig+0x2d0>)
 8003c94:	429a      	cmp	r2, r3
 8003c96:	d104      	bne.n	8003ca2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003c98:	f7fd fffe 	bl	8001c98 <HAL_RCC_GetPCLK2Freq>
 8003c9c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003ca0:	e003      	b.n	8003caa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003ca2:	f7fd ffe5 	bl	8001c70 <HAL_RCC_GetPCLK1Freq>
 8003ca6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003caa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cae:	69db      	ldr	r3, [r3, #28]
 8003cb0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003cb4:	f040 810c 	bne.w	8003ed0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003cb8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003cc2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003cc6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003cca:	4622      	mov	r2, r4
 8003ccc:	462b      	mov	r3, r5
 8003cce:	1891      	adds	r1, r2, r2
 8003cd0:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003cd2:	415b      	adcs	r3, r3
 8003cd4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003cd6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003cda:	4621      	mov	r1, r4
 8003cdc:	eb12 0801 	adds.w	r8, r2, r1
 8003ce0:	4629      	mov	r1, r5
 8003ce2:	eb43 0901 	adc.w	r9, r3, r1
 8003ce6:	f04f 0200 	mov.w	r2, #0
 8003cea:	f04f 0300 	mov.w	r3, #0
 8003cee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003cf2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003cf6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003cfa:	4690      	mov	r8, r2
 8003cfc:	4699      	mov	r9, r3
 8003cfe:	4623      	mov	r3, r4
 8003d00:	eb18 0303 	adds.w	r3, r8, r3
 8003d04:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003d08:	462b      	mov	r3, r5
 8003d0a:	eb49 0303 	adc.w	r3, r9, r3
 8003d0e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003d12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003d1e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003d22:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003d26:	460b      	mov	r3, r1
 8003d28:	18db      	adds	r3, r3, r3
 8003d2a:	653b      	str	r3, [r7, #80]	@ 0x50
 8003d2c:	4613      	mov	r3, r2
 8003d2e:	eb42 0303 	adc.w	r3, r2, r3
 8003d32:	657b      	str	r3, [r7, #84]	@ 0x54
 8003d34:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003d38:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003d3c:	f7fc fdbe 	bl	80008bc <__aeabi_uldivmod>
 8003d40:	4602      	mov	r2, r0
 8003d42:	460b      	mov	r3, r1
 8003d44:	4b61      	ldr	r3, [pc, #388]	@ (8003ecc <UART_SetConfig+0x2d4>)
 8003d46:	fba3 2302 	umull	r2, r3, r3, r2
 8003d4a:	095b      	lsrs	r3, r3, #5
 8003d4c:	011c      	lsls	r4, r3, #4
 8003d4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003d52:	2200      	movs	r2, #0
 8003d54:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003d58:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003d5c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003d60:	4642      	mov	r2, r8
 8003d62:	464b      	mov	r3, r9
 8003d64:	1891      	adds	r1, r2, r2
 8003d66:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003d68:	415b      	adcs	r3, r3
 8003d6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003d6c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003d70:	4641      	mov	r1, r8
 8003d72:	eb12 0a01 	adds.w	sl, r2, r1
 8003d76:	4649      	mov	r1, r9
 8003d78:	eb43 0b01 	adc.w	fp, r3, r1
 8003d7c:	f04f 0200 	mov.w	r2, #0
 8003d80:	f04f 0300 	mov.w	r3, #0
 8003d84:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003d88:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003d8c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003d90:	4692      	mov	sl, r2
 8003d92:	469b      	mov	fp, r3
 8003d94:	4643      	mov	r3, r8
 8003d96:	eb1a 0303 	adds.w	r3, sl, r3
 8003d9a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003d9e:	464b      	mov	r3, r9
 8003da0:	eb4b 0303 	adc.w	r3, fp, r3
 8003da4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003da8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	2200      	movs	r2, #0
 8003db0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003db4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003db8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003dbc:	460b      	mov	r3, r1
 8003dbe:	18db      	adds	r3, r3, r3
 8003dc0:	643b      	str	r3, [r7, #64]	@ 0x40
 8003dc2:	4613      	mov	r3, r2
 8003dc4:	eb42 0303 	adc.w	r3, r2, r3
 8003dc8:	647b      	str	r3, [r7, #68]	@ 0x44
 8003dca:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003dce:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003dd2:	f7fc fd73 	bl	80008bc <__aeabi_uldivmod>
 8003dd6:	4602      	mov	r2, r0
 8003dd8:	460b      	mov	r3, r1
 8003dda:	4611      	mov	r1, r2
 8003ddc:	4b3b      	ldr	r3, [pc, #236]	@ (8003ecc <UART_SetConfig+0x2d4>)
 8003dde:	fba3 2301 	umull	r2, r3, r3, r1
 8003de2:	095b      	lsrs	r3, r3, #5
 8003de4:	2264      	movs	r2, #100	@ 0x64
 8003de6:	fb02 f303 	mul.w	r3, r2, r3
 8003dea:	1acb      	subs	r3, r1, r3
 8003dec:	00db      	lsls	r3, r3, #3
 8003dee:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003df2:	4b36      	ldr	r3, [pc, #216]	@ (8003ecc <UART_SetConfig+0x2d4>)
 8003df4:	fba3 2302 	umull	r2, r3, r3, r2
 8003df8:	095b      	lsrs	r3, r3, #5
 8003dfa:	005b      	lsls	r3, r3, #1
 8003dfc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003e00:	441c      	add	r4, r3
 8003e02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003e06:	2200      	movs	r2, #0
 8003e08:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003e0c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003e10:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003e14:	4642      	mov	r2, r8
 8003e16:	464b      	mov	r3, r9
 8003e18:	1891      	adds	r1, r2, r2
 8003e1a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003e1c:	415b      	adcs	r3, r3
 8003e1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003e20:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003e24:	4641      	mov	r1, r8
 8003e26:	1851      	adds	r1, r2, r1
 8003e28:	6339      	str	r1, [r7, #48]	@ 0x30
 8003e2a:	4649      	mov	r1, r9
 8003e2c:	414b      	adcs	r3, r1
 8003e2e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003e30:	f04f 0200 	mov.w	r2, #0
 8003e34:	f04f 0300 	mov.w	r3, #0
 8003e38:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003e3c:	4659      	mov	r1, fp
 8003e3e:	00cb      	lsls	r3, r1, #3
 8003e40:	4651      	mov	r1, sl
 8003e42:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e46:	4651      	mov	r1, sl
 8003e48:	00ca      	lsls	r2, r1, #3
 8003e4a:	4610      	mov	r0, r2
 8003e4c:	4619      	mov	r1, r3
 8003e4e:	4603      	mov	r3, r0
 8003e50:	4642      	mov	r2, r8
 8003e52:	189b      	adds	r3, r3, r2
 8003e54:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003e58:	464b      	mov	r3, r9
 8003e5a:	460a      	mov	r2, r1
 8003e5c:	eb42 0303 	adc.w	r3, r2, r3
 8003e60:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003e64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003e70:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003e74:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003e78:	460b      	mov	r3, r1
 8003e7a:	18db      	adds	r3, r3, r3
 8003e7c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003e7e:	4613      	mov	r3, r2
 8003e80:	eb42 0303 	adc.w	r3, r2, r3
 8003e84:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003e86:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003e8a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003e8e:	f7fc fd15 	bl	80008bc <__aeabi_uldivmod>
 8003e92:	4602      	mov	r2, r0
 8003e94:	460b      	mov	r3, r1
 8003e96:	4b0d      	ldr	r3, [pc, #52]	@ (8003ecc <UART_SetConfig+0x2d4>)
 8003e98:	fba3 1302 	umull	r1, r3, r3, r2
 8003e9c:	095b      	lsrs	r3, r3, #5
 8003e9e:	2164      	movs	r1, #100	@ 0x64
 8003ea0:	fb01 f303 	mul.w	r3, r1, r3
 8003ea4:	1ad3      	subs	r3, r2, r3
 8003ea6:	00db      	lsls	r3, r3, #3
 8003ea8:	3332      	adds	r3, #50	@ 0x32
 8003eaa:	4a08      	ldr	r2, [pc, #32]	@ (8003ecc <UART_SetConfig+0x2d4>)
 8003eac:	fba2 2303 	umull	r2, r3, r2, r3
 8003eb0:	095b      	lsrs	r3, r3, #5
 8003eb2:	f003 0207 	and.w	r2, r3, #7
 8003eb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4422      	add	r2, r4
 8003ebe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003ec0:	e106      	b.n	80040d0 <UART_SetConfig+0x4d8>
 8003ec2:	bf00      	nop
 8003ec4:	40011000 	.word	0x40011000
 8003ec8:	40011400 	.word	0x40011400
 8003ecc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003ed0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003eda:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003ede:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003ee2:	4642      	mov	r2, r8
 8003ee4:	464b      	mov	r3, r9
 8003ee6:	1891      	adds	r1, r2, r2
 8003ee8:	6239      	str	r1, [r7, #32]
 8003eea:	415b      	adcs	r3, r3
 8003eec:	627b      	str	r3, [r7, #36]	@ 0x24
 8003eee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003ef2:	4641      	mov	r1, r8
 8003ef4:	1854      	adds	r4, r2, r1
 8003ef6:	4649      	mov	r1, r9
 8003ef8:	eb43 0501 	adc.w	r5, r3, r1
 8003efc:	f04f 0200 	mov.w	r2, #0
 8003f00:	f04f 0300 	mov.w	r3, #0
 8003f04:	00eb      	lsls	r3, r5, #3
 8003f06:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003f0a:	00e2      	lsls	r2, r4, #3
 8003f0c:	4614      	mov	r4, r2
 8003f0e:	461d      	mov	r5, r3
 8003f10:	4643      	mov	r3, r8
 8003f12:	18e3      	adds	r3, r4, r3
 8003f14:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003f18:	464b      	mov	r3, r9
 8003f1a:	eb45 0303 	adc.w	r3, r5, r3
 8003f1e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003f22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003f2e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003f32:	f04f 0200 	mov.w	r2, #0
 8003f36:	f04f 0300 	mov.w	r3, #0
 8003f3a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003f3e:	4629      	mov	r1, r5
 8003f40:	008b      	lsls	r3, r1, #2
 8003f42:	4621      	mov	r1, r4
 8003f44:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003f48:	4621      	mov	r1, r4
 8003f4a:	008a      	lsls	r2, r1, #2
 8003f4c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003f50:	f7fc fcb4 	bl	80008bc <__aeabi_uldivmod>
 8003f54:	4602      	mov	r2, r0
 8003f56:	460b      	mov	r3, r1
 8003f58:	4b60      	ldr	r3, [pc, #384]	@ (80040dc <UART_SetConfig+0x4e4>)
 8003f5a:	fba3 2302 	umull	r2, r3, r3, r2
 8003f5e:	095b      	lsrs	r3, r3, #5
 8003f60:	011c      	lsls	r4, r3, #4
 8003f62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003f66:	2200      	movs	r2, #0
 8003f68:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003f6c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003f70:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003f74:	4642      	mov	r2, r8
 8003f76:	464b      	mov	r3, r9
 8003f78:	1891      	adds	r1, r2, r2
 8003f7a:	61b9      	str	r1, [r7, #24]
 8003f7c:	415b      	adcs	r3, r3
 8003f7e:	61fb      	str	r3, [r7, #28]
 8003f80:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003f84:	4641      	mov	r1, r8
 8003f86:	1851      	adds	r1, r2, r1
 8003f88:	6139      	str	r1, [r7, #16]
 8003f8a:	4649      	mov	r1, r9
 8003f8c:	414b      	adcs	r3, r1
 8003f8e:	617b      	str	r3, [r7, #20]
 8003f90:	f04f 0200 	mov.w	r2, #0
 8003f94:	f04f 0300 	mov.w	r3, #0
 8003f98:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003f9c:	4659      	mov	r1, fp
 8003f9e:	00cb      	lsls	r3, r1, #3
 8003fa0:	4651      	mov	r1, sl
 8003fa2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003fa6:	4651      	mov	r1, sl
 8003fa8:	00ca      	lsls	r2, r1, #3
 8003faa:	4610      	mov	r0, r2
 8003fac:	4619      	mov	r1, r3
 8003fae:	4603      	mov	r3, r0
 8003fb0:	4642      	mov	r2, r8
 8003fb2:	189b      	adds	r3, r3, r2
 8003fb4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003fb8:	464b      	mov	r3, r9
 8003fba:	460a      	mov	r2, r1
 8003fbc:	eb42 0303 	adc.w	r3, r2, r3
 8003fc0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003fc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	2200      	movs	r2, #0
 8003fcc:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003fce:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003fd0:	f04f 0200 	mov.w	r2, #0
 8003fd4:	f04f 0300 	mov.w	r3, #0
 8003fd8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003fdc:	4649      	mov	r1, r9
 8003fde:	008b      	lsls	r3, r1, #2
 8003fe0:	4641      	mov	r1, r8
 8003fe2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003fe6:	4641      	mov	r1, r8
 8003fe8:	008a      	lsls	r2, r1, #2
 8003fea:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003fee:	f7fc fc65 	bl	80008bc <__aeabi_uldivmod>
 8003ff2:	4602      	mov	r2, r0
 8003ff4:	460b      	mov	r3, r1
 8003ff6:	4611      	mov	r1, r2
 8003ff8:	4b38      	ldr	r3, [pc, #224]	@ (80040dc <UART_SetConfig+0x4e4>)
 8003ffa:	fba3 2301 	umull	r2, r3, r3, r1
 8003ffe:	095b      	lsrs	r3, r3, #5
 8004000:	2264      	movs	r2, #100	@ 0x64
 8004002:	fb02 f303 	mul.w	r3, r2, r3
 8004006:	1acb      	subs	r3, r1, r3
 8004008:	011b      	lsls	r3, r3, #4
 800400a:	3332      	adds	r3, #50	@ 0x32
 800400c:	4a33      	ldr	r2, [pc, #204]	@ (80040dc <UART_SetConfig+0x4e4>)
 800400e:	fba2 2303 	umull	r2, r3, r2, r3
 8004012:	095b      	lsrs	r3, r3, #5
 8004014:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004018:	441c      	add	r4, r3
 800401a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800401e:	2200      	movs	r2, #0
 8004020:	673b      	str	r3, [r7, #112]	@ 0x70
 8004022:	677a      	str	r2, [r7, #116]	@ 0x74
 8004024:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004028:	4642      	mov	r2, r8
 800402a:	464b      	mov	r3, r9
 800402c:	1891      	adds	r1, r2, r2
 800402e:	60b9      	str	r1, [r7, #8]
 8004030:	415b      	adcs	r3, r3
 8004032:	60fb      	str	r3, [r7, #12]
 8004034:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004038:	4641      	mov	r1, r8
 800403a:	1851      	adds	r1, r2, r1
 800403c:	6039      	str	r1, [r7, #0]
 800403e:	4649      	mov	r1, r9
 8004040:	414b      	adcs	r3, r1
 8004042:	607b      	str	r3, [r7, #4]
 8004044:	f04f 0200 	mov.w	r2, #0
 8004048:	f04f 0300 	mov.w	r3, #0
 800404c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004050:	4659      	mov	r1, fp
 8004052:	00cb      	lsls	r3, r1, #3
 8004054:	4651      	mov	r1, sl
 8004056:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800405a:	4651      	mov	r1, sl
 800405c:	00ca      	lsls	r2, r1, #3
 800405e:	4610      	mov	r0, r2
 8004060:	4619      	mov	r1, r3
 8004062:	4603      	mov	r3, r0
 8004064:	4642      	mov	r2, r8
 8004066:	189b      	adds	r3, r3, r2
 8004068:	66bb      	str	r3, [r7, #104]	@ 0x68
 800406a:	464b      	mov	r3, r9
 800406c:	460a      	mov	r2, r1
 800406e:	eb42 0303 	adc.w	r3, r2, r3
 8004072:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004074:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	2200      	movs	r2, #0
 800407c:	663b      	str	r3, [r7, #96]	@ 0x60
 800407e:	667a      	str	r2, [r7, #100]	@ 0x64
 8004080:	f04f 0200 	mov.w	r2, #0
 8004084:	f04f 0300 	mov.w	r3, #0
 8004088:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800408c:	4649      	mov	r1, r9
 800408e:	008b      	lsls	r3, r1, #2
 8004090:	4641      	mov	r1, r8
 8004092:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004096:	4641      	mov	r1, r8
 8004098:	008a      	lsls	r2, r1, #2
 800409a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800409e:	f7fc fc0d 	bl	80008bc <__aeabi_uldivmod>
 80040a2:	4602      	mov	r2, r0
 80040a4:	460b      	mov	r3, r1
 80040a6:	4b0d      	ldr	r3, [pc, #52]	@ (80040dc <UART_SetConfig+0x4e4>)
 80040a8:	fba3 1302 	umull	r1, r3, r3, r2
 80040ac:	095b      	lsrs	r3, r3, #5
 80040ae:	2164      	movs	r1, #100	@ 0x64
 80040b0:	fb01 f303 	mul.w	r3, r1, r3
 80040b4:	1ad3      	subs	r3, r2, r3
 80040b6:	011b      	lsls	r3, r3, #4
 80040b8:	3332      	adds	r3, #50	@ 0x32
 80040ba:	4a08      	ldr	r2, [pc, #32]	@ (80040dc <UART_SetConfig+0x4e4>)
 80040bc:	fba2 2303 	umull	r2, r3, r2, r3
 80040c0:	095b      	lsrs	r3, r3, #5
 80040c2:	f003 020f 	and.w	r2, r3, #15
 80040c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4422      	add	r2, r4
 80040ce:	609a      	str	r2, [r3, #8]
}
 80040d0:	bf00      	nop
 80040d2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80040d6:	46bd      	mov	sp, r7
 80040d8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80040dc:	51eb851f 	.word	0x51eb851f

080040e0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80040e4:	4904      	ldr	r1, [pc, #16]	@ (80040f8 <MX_FATFS_Init+0x18>)
 80040e6:	4805      	ldr	r0, [pc, #20]	@ (80040fc <MX_FATFS_Init+0x1c>)
 80040e8:	f004 f9e2 	bl	80084b0 <FATFS_LinkDriver>
 80040ec:	4603      	mov	r3, r0
 80040ee:	461a      	mov	r2, r3
 80040f0:	4b03      	ldr	r3, [pc, #12]	@ (8004100 <MX_FATFS_Init+0x20>)
 80040f2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80040f4:	bf00      	nop
 80040f6:	bd80      	pop	{r7, pc}
 80040f8:	200001d4 	.word	0x200001d4
 80040fc:	2000000c 	.word	0x2000000c
 8004100:	200001d0 	.word	0x200001d0

08004104 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8004104:	b480      	push	{r7}
 8004106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8004108:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800410a:	4618      	mov	r0, r3
 800410c:	46bd      	mov	sp, r7
 800410e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004112:	4770      	bx	lr

08004114 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b082      	sub	sp, #8
 8004118:	af00      	add	r7, sp, #0
 800411a:	4603      	mov	r3, r0
 800411c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = SD_disk_initialize(pdrv);;
 800411e:	79fb      	ldrb	r3, [r7, #7]
 8004120:	4618      	mov	r0, r3
 8004122:	f000 fa0f 	bl	8004544 <SD_disk_initialize>
 8004126:	4603      	mov	r3, r0
 8004128:	461a      	mov	r2, r3
 800412a:	4b04      	ldr	r3, [pc, #16]	@ (800413c <USER_initialize+0x28>)
 800412c:	701a      	strb	r2, [r3, #0]
    return Stat;
 800412e:	4b03      	ldr	r3, [pc, #12]	@ (800413c <USER_initialize+0x28>)
 8004130:	781b      	ldrb	r3, [r3, #0]
 8004132:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8004134:	4618      	mov	r0, r3
 8004136:	3708      	adds	r7, #8
 8004138:	46bd      	mov	sp, r7
 800413a:	bd80      	pop	{r7, pc}
 800413c:	20000009 	.word	0x20000009

08004140 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b082      	sub	sp, #8
 8004144:	af00      	add	r7, sp, #0
 8004146:	4603      	mov	r3, r0
 8004148:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = SD_disk_status(pdrv);
 800414a:	79fb      	ldrb	r3, [r7, #7]
 800414c:	4618      	mov	r0, r3
 800414e:	f000 fadf 	bl	8004710 <SD_disk_status>
 8004152:	4603      	mov	r3, r0
 8004154:	461a      	mov	r2, r3
 8004156:	4b04      	ldr	r3, [pc, #16]	@ (8004168 <USER_status+0x28>)
 8004158:	701a      	strb	r2, [r3, #0]
    return Stat;
 800415a:	4b03      	ldr	r3, [pc, #12]	@ (8004168 <USER_status+0x28>)
 800415c:	781b      	ldrb	r3, [r3, #0]
 800415e:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8004160:	4618      	mov	r0, r3
 8004162:	3708      	adds	r7, #8
 8004164:	46bd      	mov	sp, r7
 8004166:	bd80      	pop	{r7, pc}
 8004168:	20000009 	.word	0x20000009

0800416c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b084      	sub	sp, #16
 8004170:	af00      	add	r7, sp, #0
 8004172:	60b9      	str	r1, [r7, #8]
 8004174:	607a      	str	r2, [r7, #4]
 8004176:	603b      	str	r3, [r7, #0]
 8004178:	4603      	mov	r3, r0
 800417a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 800417c:	7bf8      	ldrb	r0, [r7, #15]
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	687a      	ldr	r2, [r7, #4]
 8004182:	68b9      	ldr	r1, [r7, #8]
 8004184:	f000 fada 	bl	800473c <SD_disk_read>
 8004188:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800418a:	4618      	mov	r0, r3
 800418c:	3710      	adds	r7, #16
 800418e:	46bd      	mov	sp, r7
 8004190:	bd80      	pop	{r7, pc}

08004192 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8004192:	b580      	push	{r7, lr}
 8004194:	b084      	sub	sp, #16
 8004196:	af00      	add	r7, sp, #0
 8004198:	60b9      	str	r1, [r7, #8]
 800419a:	607a      	str	r2, [r7, #4]
 800419c:	603b      	str	r3, [r7, #0]
 800419e:	4603      	mov	r3, r0
 80041a0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 80041a2:	7bf8      	ldrb	r0, [r7, #15]
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	687a      	ldr	r2, [r7, #4]
 80041a8:	68b9      	ldr	r1, [r7, #8]
 80041aa:	f000 fb31 	bl	8004810 <SD_disk_write>
 80041ae:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 80041b0:	4618      	mov	r0, r3
 80041b2:	3710      	adds	r7, #16
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bd80      	pop	{r7, pc}

080041b8 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b084      	sub	sp, #16
 80041bc:	af00      	add	r7, sp, #0
 80041be:	4603      	mov	r3, r0
 80041c0:	603a      	str	r2, [r7, #0]
 80041c2:	71fb      	strb	r3, [r7, #7]
 80041c4:	460b      	mov	r3, r1
 80041c6:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = SD_disk_ioctl(pdrv, cmd, buff);
 80041c8:	79b9      	ldrb	r1, [r7, #6]
 80041ca:	79fb      	ldrb	r3, [r7, #7]
 80041cc:	683a      	ldr	r2, [r7, #0]
 80041ce:	4618      	mov	r0, r3
 80041d0:	f000 fba2 	bl	8004918 <SD_disk_ioctl>
 80041d4:	4603      	mov	r3, r0
 80041d6:	73fb      	strb	r3, [r7, #15]
    return res;
 80041d8:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 80041da:	4618      	mov	r0, r3
 80041dc:	3710      	adds	r7, #16
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}
	...

080041e4 <SELECT>:

//-----[ SPI Functions ]-----

/* slave select */
static void SELECT(void)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 80041e8:	2200      	movs	r2, #0
 80041ea:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80041ee:	4802      	ldr	r0, [pc, #8]	@ (80041f8 <SELECT+0x14>)
 80041f0:	f7fd fc32 	bl	8001a58 <HAL_GPIO_WritePin>
}
 80041f4:	bf00      	nop
 80041f6:	bd80      	pop	{r7, pc}
 80041f8:	40020800 	.word	0x40020800

080041fc <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8004200:	2201      	movs	r2, #1
 8004202:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004206:	4802      	ldr	r0, [pc, #8]	@ (8004210 <DESELECT+0x14>)
 8004208:	f7fd fc26 	bl	8001a58 <HAL_GPIO_WritePin>
}
 800420c:	bf00      	nop
 800420e:	bd80      	pop	{r7, pc}
 8004210:	40020800 	.word	0x40020800

08004214 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b082      	sub	sp, #8
 8004218:	af00      	add	r7, sp, #0
 800421a:	4603      	mov	r3, r0
 800421c:	71fb      	strb	r3, [r7, #7]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800421e:	bf00      	nop
 8004220:	4b08      	ldr	r3, [pc, #32]	@ (8004244 <SPI_TxByte+0x30>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	689b      	ldr	r3, [r3, #8]
 8004226:	f003 0302 	and.w	r3, r3, #2
 800422a:	2b02      	cmp	r3, #2
 800422c:	d1f8      	bne.n	8004220 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 800422e:	1df9      	adds	r1, r7, #7
 8004230:	2364      	movs	r3, #100	@ 0x64
 8004232:	2201      	movs	r2, #1
 8004234:	4803      	ldr	r0, [pc, #12]	@ (8004244 <SPI_TxByte+0x30>)
 8004236:	f7fe fa9a 	bl	800276e <HAL_SPI_Transmit>
}
 800423a:	bf00      	nop
 800423c:	3708      	adds	r7, #8
 800423e:	46bd      	mov	sp, r7
 8004240:	bd80      	pop	{r7, pc}
 8004242:	bf00      	nop
 8004244:	20000090 	.word	0x20000090

08004248 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b082      	sub	sp, #8
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
 8004250:	460b      	mov	r3, r1
 8004252:	807b      	strh	r3, [r7, #2]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8004254:	bf00      	nop
 8004256:	4b08      	ldr	r3, [pc, #32]	@ (8004278 <SPI_TxBuffer+0x30>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	689b      	ldr	r3, [r3, #8]
 800425c:	f003 0302 	and.w	r3, r3, #2
 8004260:	2b02      	cmp	r3, #2
 8004262:	d1f8      	bne.n	8004256 <SPI_TxBuffer+0xe>
  HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8004264:	887a      	ldrh	r2, [r7, #2]
 8004266:	2364      	movs	r3, #100	@ 0x64
 8004268:	6879      	ldr	r1, [r7, #4]
 800426a:	4803      	ldr	r0, [pc, #12]	@ (8004278 <SPI_TxBuffer+0x30>)
 800426c:	f7fe fa7f 	bl	800276e <HAL_SPI_Transmit>
}
 8004270:	bf00      	nop
 8004272:	3708      	adds	r7, #8
 8004274:	46bd      	mov	sp, r7
 8004276:	bd80      	pop	{r7, pc}
 8004278:	20000090 	.word	0x20000090

0800427c <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b084      	sub	sp, #16
 8004280:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 8004282:	23ff      	movs	r3, #255	@ 0xff
 8004284:	71fb      	strb	r3, [r7, #7]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8004286:	bf00      	nop
 8004288:	4b09      	ldr	r3, [pc, #36]	@ (80042b0 <SPI_RxByte+0x34>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	689b      	ldr	r3, [r3, #8]
 800428e:	f003 0302 	and.w	r3, r3, #2
 8004292:	2b02      	cmp	r3, #2
 8004294:	d1f8      	bne.n	8004288 <SPI_RxByte+0xc>
  HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8004296:	1dba      	adds	r2, r7, #6
 8004298:	1df9      	adds	r1, r7, #7
 800429a:	2364      	movs	r3, #100	@ 0x64
 800429c:	9300      	str	r3, [sp, #0]
 800429e:	2301      	movs	r3, #1
 80042a0:	4803      	ldr	r0, [pc, #12]	@ (80042b0 <SPI_RxByte+0x34>)
 80042a2:	f7fe fba7 	bl	80029f4 <HAL_SPI_TransmitReceive>
  return data;
 80042a6:	79bb      	ldrb	r3, [r7, #6]
}
 80042a8:	4618      	mov	r0, r3
 80042aa:	3708      	adds	r7, #8
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bd80      	pop	{r7, pc}
 80042b0:	20000090 	.word	0x20000090

080042b4 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b082      	sub	sp, #8
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 80042bc:	f7ff ffde 	bl	800427c <SPI_RxByte>
 80042c0:	4603      	mov	r3, r0
 80042c2:	461a      	mov	r2, r3
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	701a      	strb	r2, [r3, #0]
}
 80042c8:	bf00      	nop
 80042ca:	3708      	adds	r7, #8
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bd80      	pop	{r7, pc}

080042d0 <SD_ReadyWait>:

//-----[ SD Card Functions ]-----

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b082      	sub	sp, #8
 80042d4:	af00      	add	r7, sp, #0
  uint8_t res;
  /* timeout 500ms */
  Timer2 = 500;
 80042d6:	4b0a      	ldr	r3, [pc, #40]	@ (8004300 <SD_ReadyWait+0x30>)
 80042d8:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80042dc:	801a      	strh	r2, [r3, #0]
  /* if SD goes ready, receives 0xFF */
  do {
    res = SPI_RxByte();
 80042de:	f7ff ffcd 	bl	800427c <SPI_RxByte>
 80042e2:	4603      	mov	r3, r0
 80042e4:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 80042e6:	79fb      	ldrb	r3, [r7, #7]
 80042e8:	2bff      	cmp	r3, #255	@ 0xff
 80042ea:	d003      	beq.n	80042f4 <SD_ReadyWait+0x24>
 80042ec:	4b04      	ldr	r3, [pc, #16]	@ (8004300 <SD_ReadyWait+0x30>)
 80042ee:	881b      	ldrh	r3, [r3, #0]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d1f4      	bne.n	80042de <SD_ReadyWait+0xe>
  return res;
 80042f4:	79fb      	ldrb	r3, [r7, #7]
}
 80042f6:	4618      	mov	r0, r3
 80042f8:	3708      	adds	r7, #8
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd80      	pop	{r7, pc}
 80042fe:	bf00      	nop
 8004300:	200001da 	.word	0x200001da

08004304 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b084      	sub	sp, #16
 8004308:	af00      	add	r7, sp, #0
  uint8_t args[6];
  uint32_t cnt = 0x1FFF;
 800430a:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 800430e:	60fb      	str	r3, [r7, #12]
  /* transmit bytes to wake up */
  DESELECT();
 8004310:	f7ff ff74 	bl	80041fc <DESELECT>
  for(int i = 0; i < 10; i++)
 8004314:	2300      	movs	r3, #0
 8004316:	60bb      	str	r3, [r7, #8]
 8004318:	e005      	b.n	8004326 <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 800431a:	20ff      	movs	r0, #255	@ 0xff
 800431c:	f7ff ff7a 	bl	8004214 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	3301      	adds	r3, #1
 8004324:	60bb      	str	r3, [r7, #8]
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	2b09      	cmp	r3, #9
 800432a:	ddf6      	ble.n	800431a <SD_PowerOn+0x16>
  }
  /* slave select */
  SELECT();
 800432c:	f7ff ff5a 	bl	80041e4 <SELECT>
  /* make idle state */
  args[0] = CMD0;   /* CMD0:GO_IDLE_STATE */
 8004330:	2340      	movs	r3, #64	@ 0x40
 8004332:	703b      	strb	r3, [r7, #0]
  args[1] = 0;
 8004334:	2300      	movs	r3, #0
 8004336:	707b      	strb	r3, [r7, #1]
  args[2] = 0;
 8004338:	2300      	movs	r3, #0
 800433a:	70bb      	strb	r3, [r7, #2]
  args[3] = 0;
 800433c:	2300      	movs	r3, #0
 800433e:	70fb      	strb	r3, [r7, #3]
  args[4] = 0;
 8004340:	2300      	movs	r3, #0
 8004342:	713b      	strb	r3, [r7, #4]
  args[5] = 0x95;
 8004344:	2395      	movs	r3, #149	@ 0x95
 8004346:	717b      	strb	r3, [r7, #5]
  SPI_TxBuffer(args, sizeof(args));
 8004348:	463b      	mov	r3, r7
 800434a:	2106      	movs	r1, #6
 800434c:	4618      	mov	r0, r3
 800434e:	f7ff ff7b 	bl	8004248 <SPI_TxBuffer>
  /* wait response */
  while ((SPI_RxByte() != 0x01) && cnt)
 8004352:	e002      	b.n	800435a <SD_PowerOn+0x56>
  {
    cnt--;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	3b01      	subs	r3, #1
 8004358:	60fb      	str	r3, [r7, #12]
  while ((SPI_RxByte() != 0x01) && cnt)
 800435a:	f7ff ff8f 	bl	800427c <SPI_RxByte>
 800435e:	4603      	mov	r3, r0
 8004360:	2b01      	cmp	r3, #1
 8004362:	d002      	beq.n	800436a <SD_PowerOn+0x66>
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d1f4      	bne.n	8004354 <SD_PowerOn+0x50>
  }
  DESELECT();
 800436a:	f7ff ff47 	bl	80041fc <DESELECT>
  SPI_TxByte(0XFF);
 800436e:	20ff      	movs	r0, #255	@ 0xff
 8004370:	f7ff ff50 	bl	8004214 <SPI_TxByte>
  PowerFlag = 1;
 8004374:	4b03      	ldr	r3, [pc, #12]	@ (8004384 <SD_PowerOn+0x80>)
 8004376:	2201      	movs	r2, #1
 8004378:	701a      	strb	r2, [r3, #0]
}
 800437a:	bf00      	nop
 800437c:	3710      	adds	r7, #16
 800437e:	46bd      	mov	sp, r7
 8004380:	bd80      	pop	{r7, pc}
 8004382:	bf00      	nop
 8004384:	200001dd 	.word	0x200001dd

08004388 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 8004388:	b480      	push	{r7}
 800438a:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 800438c:	4b03      	ldr	r3, [pc, #12]	@ (800439c <SD_PowerOff+0x14>)
 800438e:	2200      	movs	r2, #0
 8004390:	701a      	strb	r2, [r3, #0]
}
 8004392:	bf00      	nop
 8004394:	46bd      	mov	sp, r7
 8004396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439a:	4770      	bx	lr
 800439c:	200001dd 	.word	0x200001dd

080043a0 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 80043a0:	b480      	push	{r7}
 80043a2:	af00      	add	r7, sp, #0
  return PowerFlag;
 80043a4:	4b03      	ldr	r3, [pc, #12]	@ (80043b4 <SD_CheckPower+0x14>)
 80043a6:	781b      	ldrb	r3, [r3, #0]
}
 80043a8:	4618      	mov	r0, r3
 80043aa:	46bd      	mov	sp, r7
 80043ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b0:	4770      	bx	lr
 80043b2:	bf00      	nop
 80043b4:	200001dd 	.word	0x200001dd

080043b8 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b084      	sub	sp, #16
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
 80043c0:	6039      	str	r1, [r7, #0]
  uint8_t token;
  /* timeout 200ms */
  Timer1 = 200;
 80043c2:	4b13      	ldr	r3, [pc, #76]	@ (8004410 <SD_RxDataBlock+0x58>)
 80043c4:	22c8      	movs	r2, #200	@ 0xc8
 80043c6:	801a      	strh	r2, [r3, #0]
  /* loop until receive a response or timeout */
  do {
    token = SPI_RxByte();
 80043c8:	f7ff ff58 	bl	800427c <SPI_RxByte>
 80043cc:	4603      	mov	r3, r0
 80043ce:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 80043d0:	7bfb      	ldrb	r3, [r7, #15]
 80043d2:	2bff      	cmp	r3, #255	@ 0xff
 80043d4:	d103      	bne.n	80043de <SD_RxDataBlock+0x26>
 80043d6:	4b0e      	ldr	r3, [pc, #56]	@ (8004410 <SD_RxDataBlock+0x58>)
 80043d8:	881b      	ldrh	r3, [r3, #0]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d1f4      	bne.n	80043c8 <SD_RxDataBlock+0x10>
  /* invalid response */
  if(token != 0xFE) return FALSE;
 80043de:	7bfb      	ldrb	r3, [r7, #15]
 80043e0:	2bfe      	cmp	r3, #254	@ 0xfe
 80043e2:	d001      	beq.n	80043e8 <SD_RxDataBlock+0x30>
 80043e4:	2300      	movs	r3, #0
 80043e6:	e00f      	b.n	8004408 <SD_RxDataBlock+0x50>
  /* receive data */
  do {
    SPI_RxBytePtr(buff++);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	1c5a      	adds	r2, r3, #1
 80043ec:	607a      	str	r2, [r7, #4]
 80043ee:	4618      	mov	r0, r3
 80043f0:	f7ff ff60 	bl	80042b4 <SPI_RxBytePtr>
  } while(len--);
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	1e5a      	subs	r2, r3, #1
 80043f8:	603a      	str	r2, [r7, #0]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d1f4      	bne.n	80043e8 <SD_RxDataBlock+0x30>
  /* discard CRC */
  SPI_RxByte();
 80043fe:	f7ff ff3d 	bl	800427c <SPI_RxByte>
  SPI_RxByte();
 8004402:	f7ff ff3b 	bl	800427c <SPI_RxByte>
  return TRUE;
 8004406:	2301      	movs	r3, #1
}
 8004408:	4618      	mov	r0, r3
 800440a:	3710      	adds	r7, #16
 800440c:	46bd      	mov	sp, r7
 800440e:	bd80      	pop	{r7, pc}
 8004410:	200001d8 	.word	0x200001d8

08004414 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b084      	sub	sp, #16
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
 800441c:	460b      	mov	r3, r1
 800441e:	70fb      	strb	r3, [r7, #3]
  uint8_t resp;
  uint8_t i = 0;
 8004420:	2300      	movs	r3, #0
 8004422:	73bb      	strb	r3, [r7, #14]
  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return FALSE;
 8004424:	f7ff ff54 	bl	80042d0 <SD_ReadyWait>
 8004428:	4603      	mov	r3, r0
 800442a:	2bff      	cmp	r3, #255	@ 0xff
 800442c:	d001      	beq.n	8004432 <SD_TxDataBlock+0x1e>
 800442e:	2300      	movs	r3, #0
 8004430:	e02f      	b.n	8004492 <SD_TxDataBlock+0x7e>
  /* transmit token */
  SPI_TxByte(token);
 8004432:	78fb      	ldrb	r3, [r7, #3]
 8004434:	4618      	mov	r0, r3
 8004436:	f7ff feed 	bl	8004214 <SPI_TxByte>
  /* if it's not STOP token, transmit data */
  if (token != 0xFD)
 800443a:	78fb      	ldrb	r3, [r7, #3]
 800443c:	2bfd      	cmp	r3, #253	@ 0xfd
 800443e:	d020      	beq.n	8004482 <SD_TxDataBlock+0x6e>
  {
    SPI_TxBuffer((uint8_t*)buff, 512);
 8004440:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004444:	6878      	ldr	r0, [r7, #4]
 8004446:	f7ff feff 	bl	8004248 <SPI_TxBuffer>
    /* discard CRC */
    SPI_RxByte();
 800444a:	f7ff ff17 	bl	800427c <SPI_RxByte>
    SPI_RxByte();
 800444e:	f7ff ff15 	bl	800427c <SPI_RxByte>
    /* receive response */
    while (i <= 64)
 8004452:	e00b      	b.n	800446c <SD_TxDataBlock+0x58>
    {
      resp = SPI_RxByte();
 8004454:	f7ff ff12 	bl	800427c <SPI_RxByte>
 8004458:	4603      	mov	r3, r0
 800445a:	73fb      	strb	r3, [r7, #15]
      /* transmit 0x05 accepted */
      if ((resp & 0x1F) == 0x05) break;
 800445c:	7bfb      	ldrb	r3, [r7, #15]
 800445e:	f003 031f 	and.w	r3, r3, #31
 8004462:	2b05      	cmp	r3, #5
 8004464:	d006      	beq.n	8004474 <SD_TxDataBlock+0x60>
      i++;
 8004466:	7bbb      	ldrb	r3, [r7, #14]
 8004468:	3301      	adds	r3, #1
 800446a:	73bb      	strb	r3, [r7, #14]
    while (i <= 64)
 800446c:	7bbb      	ldrb	r3, [r7, #14]
 800446e:	2b40      	cmp	r3, #64	@ 0x40
 8004470:	d9f0      	bls.n	8004454 <SD_TxDataBlock+0x40>
 8004472:	e000      	b.n	8004476 <SD_TxDataBlock+0x62>
      if ((resp & 0x1F) == 0x05) break;
 8004474:	bf00      	nop
    }
    /* recv buffer clear */
    while (SPI_RxByte() == 0);
 8004476:	bf00      	nop
 8004478:	f7ff ff00 	bl	800427c <SPI_RxByte>
 800447c:	4603      	mov	r3, r0
 800447e:	2b00      	cmp	r3, #0
 8004480:	d0fa      	beq.n	8004478 <SD_TxDataBlock+0x64>
  }
  /* transmit 0x05 accepted */
  if ((resp & 0x1F) == 0x05) return TRUE;
 8004482:	7bfb      	ldrb	r3, [r7, #15]
 8004484:	f003 031f 	and.w	r3, r3, #31
 8004488:	2b05      	cmp	r3, #5
 800448a:	d101      	bne.n	8004490 <SD_TxDataBlock+0x7c>
 800448c:	2301      	movs	r3, #1
 800448e:	e000      	b.n	8004492 <SD_TxDataBlock+0x7e>

  return FALSE;
 8004490:	2300      	movs	r3, #0
}
 8004492:	4618      	mov	r0, r3
 8004494:	3710      	adds	r7, #16
 8004496:	46bd      	mov	sp, r7
 8004498:	bd80      	pop	{r7, pc}

0800449a <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 800449a:	b580      	push	{r7, lr}
 800449c:	b084      	sub	sp, #16
 800449e:	af00      	add	r7, sp, #0
 80044a0:	4603      	mov	r3, r0
 80044a2:	6039      	str	r1, [r7, #0]
 80044a4:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;
  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return 0xFF;
 80044a6:	f7ff ff13 	bl	80042d0 <SD_ReadyWait>
 80044aa:	4603      	mov	r3, r0
 80044ac:	2bff      	cmp	r3, #255	@ 0xff
 80044ae:	d001      	beq.n	80044b4 <SD_SendCmd+0x1a>
 80044b0:	23ff      	movs	r3, #255	@ 0xff
 80044b2:	e042      	b.n	800453a <SD_SendCmd+0xa0>
  /* transmit command */
  SPI_TxByte(cmd);          /* Command */
 80044b4:	79fb      	ldrb	r3, [r7, #7]
 80044b6:	4618      	mov	r0, r3
 80044b8:	f7ff feac 	bl	8004214 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 24));   /* Argument[31..24] */
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	0e1b      	lsrs	r3, r3, #24
 80044c0:	b2db      	uxtb	r3, r3
 80044c2:	4618      	mov	r0, r3
 80044c4:	f7ff fea6 	bl	8004214 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 16));   /* Argument[23..16] */
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	0c1b      	lsrs	r3, r3, #16
 80044cc:	b2db      	uxtb	r3, r3
 80044ce:	4618      	mov	r0, r3
 80044d0:	f7ff fea0 	bl	8004214 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 8));  /* Argument[15..8] */
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	0a1b      	lsrs	r3, r3, #8
 80044d8:	b2db      	uxtb	r3, r3
 80044da:	4618      	mov	r0, r3
 80044dc:	f7ff fe9a 	bl	8004214 <SPI_TxByte>
  SPI_TxByte((uint8_t)arg);       /* Argument[7..0] */
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	b2db      	uxtb	r3, r3
 80044e4:	4618      	mov	r0, r3
 80044e6:	f7ff fe95 	bl	8004214 <SPI_TxByte>
  /* prepare CRC */
  if(cmd == CMD0) crc = 0x95; /* CRC for CMD0(0) */
 80044ea:	79fb      	ldrb	r3, [r7, #7]
 80044ec:	2b40      	cmp	r3, #64	@ 0x40
 80044ee:	d102      	bne.n	80044f6 <SD_SendCmd+0x5c>
 80044f0:	2395      	movs	r3, #149	@ 0x95
 80044f2:	73fb      	strb	r3, [r7, #15]
 80044f4:	e007      	b.n	8004506 <SD_SendCmd+0x6c>
  else if(cmd == CMD8) crc = 0x87;  /* CRC for CMD8(0x1AA) */
 80044f6:	79fb      	ldrb	r3, [r7, #7]
 80044f8:	2b48      	cmp	r3, #72	@ 0x48
 80044fa:	d102      	bne.n	8004502 <SD_SendCmd+0x68>
 80044fc:	2387      	movs	r3, #135	@ 0x87
 80044fe:	73fb      	strb	r3, [r7, #15]
 8004500:	e001      	b.n	8004506 <SD_SendCmd+0x6c>
  else crc = 1;
 8004502:	2301      	movs	r3, #1
 8004504:	73fb      	strb	r3, [r7, #15]
  /* transmit CRC */
  SPI_TxByte(crc);
 8004506:	7bfb      	ldrb	r3, [r7, #15]
 8004508:	4618      	mov	r0, r3
 800450a:	f7ff fe83 	bl	8004214 <SPI_TxByte>
  /* Skip a stuff byte when STOP_TRANSMISSION */
  if (cmd == CMD12) SPI_RxByte();
 800450e:	79fb      	ldrb	r3, [r7, #7]
 8004510:	2b4c      	cmp	r3, #76	@ 0x4c
 8004512:	d101      	bne.n	8004518 <SD_SendCmd+0x7e>
 8004514:	f7ff feb2 	bl	800427c <SPI_RxByte>
  /* receive response */
  uint8_t n = 10;
 8004518:	230a      	movs	r3, #10
 800451a:	73bb      	strb	r3, [r7, #14]
  do {
    res = SPI_RxByte();
 800451c:	f7ff feae 	bl	800427c <SPI_RxByte>
 8004520:	4603      	mov	r3, r0
 8004522:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 8004524:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8004528:	2b00      	cmp	r3, #0
 800452a:	da05      	bge.n	8004538 <SD_SendCmd+0x9e>
 800452c:	7bbb      	ldrb	r3, [r7, #14]
 800452e:	3b01      	subs	r3, #1
 8004530:	73bb      	strb	r3, [r7, #14]
 8004532:	7bbb      	ldrb	r3, [r7, #14]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d1f1      	bne.n	800451c <SD_SendCmd+0x82>

  return res;
 8004538:	7b7b      	ldrb	r3, [r7, #13]
}
 800453a:	4618      	mov	r0, r3
 800453c:	3710      	adds	r7, #16
 800453e:	46bd      	mov	sp, r7
 8004540:	bd80      	pop	{r7, pc}
	...

08004544 <SD_disk_initialize>:

//-----[ user_diskio.c Functions ]-----

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8004544:	b590      	push	{r4, r7, lr}
 8004546:	b085      	sub	sp, #20
 8004548:	af00      	add	r7, sp, #0
 800454a:	4603      	mov	r3, r0
 800454c:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];
  /* single drive, drv should be 0 */
  if(drv) return STA_NOINIT;
 800454e:	79fb      	ldrb	r3, [r7, #7]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d001      	beq.n	8004558 <SD_disk_initialize+0x14>
 8004554:	2301      	movs	r3, #1
 8004556:	e0d1      	b.n	80046fc <SD_disk_initialize+0x1b8>
  /* no disk */
  if(Stat & STA_NODISK) return Stat;
 8004558:	4b6a      	ldr	r3, [pc, #424]	@ (8004704 <SD_disk_initialize+0x1c0>)
 800455a:	781b      	ldrb	r3, [r3, #0]
 800455c:	b2db      	uxtb	r3, r3
 800455e:	f003 0302 	and.w	r3, r3, #2
 8004562:	2b00      	cmp	r3, #0
 8004564:	d003      	beq.n	800456e <SD_disk_initialize+0x2a>
 8004566:	4b67      	ldr	r3, [pc, #412]	@ (8004704 <SD_disk_initialize+0x1c0>)
 8004568:	781b      	ldrb	r3, [r3, #0]
 800456a:	b2db      	uxtb	r3, r3
 800456c:	e0c6      	b.n	80046fc <SD_disk_initialize+0x1b8>
  /* power on */
  SD_PowerOn();
 800456e:	f7ff fec9 	bl	8004304 <SD_PowerOn>
  /* slave select */
  SELECT();
 8004572:	f7ff fe37 	bl	80041e4 <SELECT>
  /* check disk type */
  type = 0;
 8004576:	2300      	movs	r3, #0
 8004578:	73bb      	strb	r3, [r7, #14]
  /* send GO_IDLE_STATE command */
  if (SD_SendCmd(CMD0, 0) == 1)
 800457a:	2100      	movs	r1, #0
 800457c:	2040      	movs	r0, #64	@ 0x40
 800457e:	f7ff ff8c 	bl	800449a <SD_SendCmd>
 8004582:	4603      	mov	r3, r0
 8004584:	2b01      	cmp	r3, #1
 8004586:	f040 80a1 	bne.w	80046cc <SD_disk_initialize+0x188>
  {
    /* timeout 1 sec */
    Timer1 = 1000;
 800458a:	4b5f      	ldr	r3, [pc, #380]	@ (8004708 <SD_disk_initialize+0x1c4>)
 800458c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004590:	801a      	strh	r2, [r3, #0]
    /* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8004592:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8004596:	2048      	movs	r0, #72	@ 0x48
 8004598:	f7ff ff7f 	bl	800449a <SD_SendCmd>
 800459c:	4603      	mov	r3, r0
 800459e:	2b01      	cmp	r3, #1
 80045a0:	d155      	bne.n	800464e <SD_disk_initialize+0x10a>
    {
      /* operation condition register */
      for (n = 0; n < 4; n++)
 80045a2:	2300      	movs	r3, #0
 80045a4:	73fb      	strb	r3, [r7, #15]
 80045a6:	e00c      	b.n	80045c2 <SD_disk_initialize+0x7e>
      {
        ocr[n] = SPI_RxByte();
 80045a8:	7bfc      	ldrb	r4, [r7, #15]
 80045aa:	f7ff fe67 	bl	800427c <SPI_RxByte>
 80045ae:	4603      	mov	r3, r0
 80045b0:	461a      	mov	r2, r3
 80045b2:	f104 0310 	add.w	r3, r4, #16
 80045b6:	443b      	add	r3, r7
 80045b8:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 80045bc:	7bfb      	ldrb	r3, [r7, #15]
 80045be:	3301      	adds	r3, #1
 80045c0:	73fb      	strb	r3, [r7, #15]
 80045c2:	7bfb      	ldrb	r3, [r7, #15]
 80045c4:	2b03      	cmp	r3, #3
 80045c6:	d9ef      	bls.n	80045a8 <SD_disk_initialize+0x64>
      }
      /* voltage range 2.7-3.6V */
      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 80045c8:	7abb      	ldrb	r3, [r7, #10]
 80045ca:	2b01      	cmp	r3, #1
 80045cc:	d17e      	bne.n	80046cc <SD_disk_initialize+0x188>
 80045ce:	7afb      	ldrb	r3, [r7, #11]
 80045d0:	2baa      	cmp	r3, #170	@ 0xaa
 80045d2:	d17b      	bne.n	80046cc <SD_disk_initialize+0x188>
      {
        /* ACMD41 with HCS bit */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80045d4:	2100      	movs	r1, #0
 80045d6:	2077      	movs	r0, #119	@ 0x77
 80045d8:	f7ff ff5f 	bl	800449a <SD_SendCmd>
 80045dc:	4603      	mov	r3, r0
 80045de:	2b01      	cmp	r3, #1
 80045e0:	d807      	bhi.n	80045f2 <SD_disk_initialize+0xae>
 80045e2:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80045e6:	2069      	movs	r0, #105	@ 0x69
 80045e8:	f7ff ff57 	bl	800449a <SD_SendCmd>
 80045ec:	4603      	mov	r3, r0
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d004      	beq.n	80045fc <SD_disk_initialize+0xb8>
        } while (Timer1);
 80045f2:	4b45      	ldr	r3, [pc, #276]	@ (8004708 <SD_disk_initialize+0x1c4>)
 80045f4:	881b      	ldrh	r3, [r3, #0]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d1ec      	bne.n	80045d4 <SD_disk_initialize+0x90>
 80045fa:	e000      	b.n	80045fe <SD_disk_initialize+0xba>
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80045fc:	bf00      	nop

        /* READ_OCR */
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 80045fe:	4b42      	ldr	r3, [pc, #264]	@ (8004708 <SD_disk_initialize+0x1c4>)
 8004600:	881b      	ldrh	r3, [r3, #0]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d062      	beq.n	80046cc <SD_disk_initialize+0x188>
 8004606:	2100      	movs	r1, #0
 8004608:	207a      	movs	r0, #122	@ 0x7a
 800460a:	f7ff ff46 	bl	800449a <SD_SendCmd>
 800460e:	4603      	mov	r3, r0
 8004610:	2b00      	cmp	r3, #0
 8004612:	d15b      	bne.n	80046cc <SD_disk_initialize+0x188>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 8004614:	2300      	movs	r3, #0
 8004616:	73fb      	strb	r3, [r7, #15]
 8004618:	e00c      	b.n	8004634 <SD_disk_initialize+0xf0>
          {
            ocr[n] = SPI_RxByte();
 800461a:	7bfc      	ldrb	r4, [r7, #15]
 800461c:	f7ff fe2e 	bl	800427c <SPI_RxByte>
 8004620:	4603      	mov	r3, r0
 8004622:	461a      	mov	r2, r3
 8004624:	f104 0310 	add.w	r3, r4, #16
 8004628:	443b      	add	r3, r7
 800462a:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 800462e:	7bfb      	ldrb	r3, [r7, #15]
 8004630:	3301      	adds	r3, #1
 8004632:	73fb      	strb	r3, [r7, #15]
 8004634:	7bfb      	ldrb	r3, [r7, #15]
 8004636:	2b03      	cmp	r3, #3
 8004638:	d9ef      	bls.n	800461a <SD_disk_initialize+0xd6>
          }

          /* SDv2 (HC or SC) */
          type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 800463a:	7a3b      	ldrb	r3, [r7, #8]
 800463c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004640:	2b00      	cmp	r3, #0
 8004642:	d001      	beq.n	8004648 <SD_disk_initialize+0x104>
 8004644:	230c      	movs	r3, #12
 8004646:	e000      	b.n	800464a <SD_disk_initialize+0x106>
 8004648:	2304      	movs	r3, #4
 800464a:	73bb      	strb	r3, [r7, #14]
 800464c:	e03e      	b.n	80046cc <SD_disk_initialize+0x188>
      }
    }
    else
    {
      /* SDC V1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 800464e:	2100      	movs	r1, #0
 8004650:	2077      	movs	r0, #119	@ 0x77
 8004652:	f7ff ff22 	bl	800449a <SD_SendCmd>
 8004656:	4603      	mov	r3, r0
 8004658:	2b01      	cmp	r3, #1
 800465a:	d808      	bhi.n	800466e <SD_disk_initialize+0x12a>
 800465c:	2100      	movs	r1, #0
 800465e:	2069      	movs	r0, #105	@ 0x69
 8004660:	f7ff ff1b 	bl	800449a <SD_SendCmd>
 8004664:	4603      	mov	r3, r0
 8004666:	2b01      	cmp	r3, #1
 8004668:	d801      	bhi.n	800466e <SD_disk_initialize+0x12a>
 800466a:	2302      	movs	r3, #2
 800466c:	e000      	b.n	8004670 <SD_disk_initialize+0x12c>
 800466e:	2301      	movs	r3, #1
 8004670:	73bb      	strb	r3, [r7, #14]
      do
      {
        if (type == CT_SD1)
 8004672:	7bbb      	ldrb	r3, [r7, #14]
 8004674:	2b02      	cmp	r3, #2
 8004676:	d10e      	bne.n	8004696 <SD_disk_initialize+0x152>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8004678:	2100      	movs	r1, #0
 800467a:	2077      	movs	r0, #119	@ 0x77
 800467c:	f7ff ff0d 	bl	800449a <SD_SendCmd>
 8004680:	4603      	mov	r3, r0
 8004682:	2b01      	cmp	r3, #1
 8004684:	d80e      	bhi.n	80046a4 <SD_disk_initialize+0x160>
 8004686:	2100      	movs	r1, #0
 8004688:	2069      	movs	r0, #105	@ 0x69
 800468a:	f7ff ff06 	bl	800449a <SD_SendCmd>
 800468e:	4603      	mov	r3, r0
 8004690:	2b00      	cmp	r3, #0
 8004692:	d107      	bne.n	80046a4 <SD_disk_initialize+0x160>
 8004694:	e00c      	b.n	80046b0 <SD_disk_initialize+0x16c>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8004696:	2100      	movs	r1, #0
 8004698:	2041      	movs	r0, #65	@ 0x41
 800469a:	f7ff fefe 	bl	800449a <SD_SendCmd>
 800469e:	4603      	mov	r3, r0
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d004      	beq.n	80046ae <SD_disk_initialize+0x16a>
        }
      } while (Timer1);
 80046a4:	4b18      	ldr	r3, [pc, #96]	@ (8004708 <SD_disk_initialize+0x1c4>)
 80046a6:	881b      	ldrh	r3, [r3, #0]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d1e2      	bne.n	8004672 <SD_disk_initialize+0x12e>
 80046ac:	e000      	b.n	80046b0 <SD_disk_initialize+0x16c>
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80046ae:	bf00      	nop
      /* SET_BLOCKLEN */
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 80046b0:	4b15      	ldr	r3, [pc, #84]	@ (8004708 <SD_disk_initialize+0x1c4>)
 80046b2:	881b      	ldrh	r3, [r3, #0]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d007      	beq.n	80046c8 <SD_disk_initialize+0x184>
 80046b8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80046bc:	2050      	movs	r0, #80	@ 0x50
 80046be:	f7ff feec 	bl	800449a <SD_SendCmd>
 80046c2:	4603      	mov	r3, r0
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d001      	beq.n	80046cc <SD_disk_initialize+0x188>
 80046c8:	2300      	movs	r3, #0
 80046ca:	73bb      	strb	r3, [r7, #14]
    }
  }
  CardType = type;
 80046cc:	4a0f      	ldr	r2, [pc, #60]	@ (800470c <SD_disk_initialize+0x1c8>)
 80046ce:	7bbb      	ldrb	r3, [r7, #14]
 80046d0:	7013      	strb	r3, [r2, #0]
  /* Idle */
  DESELECT();
 80046d2:	f7ff fd93 	bl	80041fc <DESELECT>
  SPI_RxByte();
 80046d6:	f7ff fdd1 	bl	800427c <SPI_RxByte>
  /* Clear STA_NOINIT */
  if (type)
 80046da:	7bbb      	ldrb	r3, [r7, #14]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d008      	beq.n	80046f2 <SD_disk_initialize+0x1ae>
  {
    Stat &= ~STA_NOINIT;
 80046e0:	4b08      	ldr	r3, [pc, #32]	@ (8004704 <SD_disk_initialize+0x1c0>)
 80046e2:	781b      	ldrb	r3, [r3, #0]
 80046e4:	b2db      	uxtb	r3, r3
 80046e6:	f023 0301 	bic.w	r3, r3, #1
 80046ea:	b2da      	uxtb	r2, r3
 80046ec:	4b05      	ldr	r3, [pc, #20]	@ (8004704 <SD_disk_initialize+0x1c0>)
 80046ee:	701a      	strb	r2, [r3, #0]
 80046f0:	e001      	b.n	80046f6 <SD_disk_initialize+0x1b2>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 80046f2:	f7ff fe49 	bl	8004388 <SD_PowerOff>
  }
  return Stat;
 80046f6:	4b03      	ldr	r3, [pc, #12]	@ (8004704 <SD_disk_initialize+0x1c0>)
 80046f8:	781b      	ldrb	r3, [r3, #0]
 80046fa:	b2db      	uxtb	r3, r3
}
 80046fc:	4618      	mov	r0, r3
 80046fe:	3714      	adds	r7, #20
 8004700:	46bd      	mov	sp, r7
 8004702:	bd90      	pop	{r4, r7, pc}
 8004704:	20000020 	.word	0x20000020
 8004708:	200001d8 	.word	0x200001d8
 800470c:	200001dc 	.word	0x200001dc

08004710 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 8004710:	b480      	push	{r7}
 8004712:	b083      	sub	sp, #12
 8004714:	af00      	add	r7, sp, #0
 8004716:	4603      	mov	r3, r0
 8004718:	71fb      	strb	r3, [r7, #7]
  if (drv) return STA_NOINIT;
 800471a:	79fb      	ldrb	r3, [r7, #7]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d001      	beq.n	8004724 <SD_disk_status+0x14>
 8004720:	2301      	movs	r3, #1
 8004722:	e002      	b.n	800472a <SD_disk_status+0x1a>
  return Stat;
 8004724:	4b04      	ldr	r3, [pc, #16]	@ (8004738 <SD_disk_status+0x28>)
 8004726:	781b      	ldrb	r3, [r3, #0]
 8004728:	b2db      	uxtb	r3, r3
}
 800472a:	4618      	mov	r0, r3
 800472c:	370c      	adds	r7, #12
 800472e:	46bd      	mov	sp, r7
 8004730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004734:	4770      	bx	lr
 8004736:	bf00      	nop
 8004738:	20000020 	.word	0x20000020

0800473c <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b084      	sub	sp, #16
 8004740:	af00      	add	r7, sp, #0
 8004742:	60b9      	str	r1, [r7, #8]
 8004744:	607a      	str	r2, [r7, #4]
 8004746:	603b      	str	r3, [r7, #0]
 8004748:	4603      	mov	r3, r0
 800474a:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 800474c:	7bfb      	ldrb	r3, [r7, #15]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d102      	bne.n	8004758 <SD_disk_read+0x1c>
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d101      	bne.n	800475c <SD_disk_read+0x20>
 8004758:	2304      	movs	r3, #4
 800475a:	e051      	b.n	8004800 <SD_disk_read+0xc4>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800475c:	4b2a      	ldr	r3, [pc, #168]	@ (8004808 <SD_disk_read+0xcc>)
 800475e:	781b      	ldrb	r3, [r3, #0]
 8004760:	b2db      	uxtb	r3, r3
 8004762:	f003 0301 	and.w	r3, r3, #1
 8004766:	2b00      	cmp	r3, #0
 8004768:	d001      	beq.n	800476e <SD_disk_read+0x32>
 800476a:	2303      	movs	r3, #3
 800476c:	e048      	b.n	8004800 <SD_disk_read+0xc4>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 800476e:	4b27      	ldr	r3, [pc, #156]	@ (800480c <SD_disk_read+0xd0>)
 8004770:	781b      	ldrb	r3, [r3, #0]
 8004772:	f003 0304 	and.w	r3, r3, #4
 8004776:	2b00      	cmp	r3, #0
 8004778:	d102      	bne.n	8004780 <SD_disk_read+0x44>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	025b      	lsls	r3, r3, #9
 800477e:	607b      	str	r3, [r7, #4]

  SELECT();
 8004780:	f7ff fd30 	bl	80041e4 <SELECT>

  if (count == 1)
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	2b01      	cmp	r3, #1
 8004788:	d111      	bne.n	80047ae <SD_disk_read+0x72>
  {
    /* READ_SINGLE_BLOCK */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 800478a:	6879      	ldr	r1, [r7, #4]
 800478c:	2051      	movs	r0, #81	@ 0x51
 800478e:	f7ff fe84 	bl	800449a <SD_SendCmd>
 8004792:	4603      	mov	r3, r0
 8004794:	2b00      	cmp	r3, #0
 8004796:	d129      	bne.n	80047ec <SD_disk_read+0xb0>
 8004798:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800479c:	68b8      	ldr	r0, [r7, #8]
 800479e:	f7ff fe0b 	bl	80043b8 <SD_RxDataBlock>
 80047a2:	4603      	mov	r3, r0
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d021      	beq.n	80047ec <SD_disk_read+0xb0>
 80047a8:	2300      	movs	r3, #0
 80047aa:	603b      	str	r3, [r7, #0]
 80047ac:	e01e      	b.n	80047ec <SD_disk_read+0xb0>
  }
  else
  {
    /* READ_MULTIPLE_BLOCK */
    if (SD_SendCmd(CMD18, sector) == 0)
 80047ae:	6879      	ldr	r1, [r7, #4]
 80047b0:	2052      	movs	r0, #82	@ 0x52
 80047b2:	f7ff fe72 	bl	800449a <SD_SendCmd>
 80047b6:	4603      	mov	r3, r0
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d117      	bne.n	80047ec <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512)) break;
 80047bc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80047c0:	68b8      	ldr	r0, [r7, #8]
 80047c2:	f7ff fdf9 	bl	80043b8 <SD_RxDataBlock>
 80047c6:	4603      	mov	r3, r0
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d00a      	beq.n	80047e2 <SD_disk_read+0xa6>
        buff += 512;
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80047d2:	60bb      	str	r3, [r7, #8]
      } while (--count);
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	3b01      	subs	r3, #1
 80047d8:	603b      	str	r3, [r7, #0]
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d1ed      	bne.n	80047bc <SD_disk_read+0x80>
 80047e0:	e000      	b.n	80047e4 <SD_disk_read+0xa8>
        if (!SD_RxDataBlock(buff, 512)) break;
 80047e2:	bf00      	nop

      /* STOP_TRANSMISSION */
      SD_SendCmd(CMD12, 0);
 80047e4:	2100      	movs	r1, #0
 80047e6:	204c      	movs	r0, #76	@ 0x4c
 80047e8:	f7ff fe57 	bl	800449a <SD_SendCmd>
    }
  }

  /* Idle */
  DESELECT();
 80047ec:	f7ff fd06 	bl	80041fc <DESELECT>
  SPI_RxByte();
 80047f0:	f7ff fd44 	bl	800427c <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	bf14      	ite	ne
 80047fa:	2301      	movne	r3, #1
 80047fc:	2300      	moveq	r3, #0
 80047fe:	b2db      	uxtb	r3, r3
}
 8004800:	4618      	mov	r0, r3
 8004802:	3710      	adds	r7, #16
 8004804:	46bd      	mov	sp, r7
 8004806:	bd80      	pop	{r7, pc}
 8004808:	20000020 	.word	0x20000020
 800480c:	200001dc 	.word	0x200001dc

08004810 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b084      	sub	sp, #16
 8004814:	af00      	add	r7, sp, #0
 8004816:	60b9      	str	r1, [r7, #8]
 8004818:	607a      	str	r2, [r7, #4]
 800481a:	603b      	str	r3, [r7, #0]
 800481c:	4603      	mov	r3, r0
 800481e:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 8004820:	7bfb      	ldrb	r3, [r7, #15]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d102      	bne.n	800482c <SD_disk_write+0x1c>
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d101      	bne.n	8004830 <SD_disk_write+0x20>
 800482c:	2304      	movs	r3, #4
 800482e:	e06b      	b.n	8004908 <SD_disk_write+0xf8>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8004830:	4b37      	ldr	r3, [pc, #220]	@ (8004910 <SD_disk_write+0x100>)
 8004832:	781b      	ldrb	r3, [r3, #0]
 8004834:	b2db      	uxtb	r3, r3
 8004836:	f003 0301 	and.w	r3, r3, #1
 800483a:	2b00      	cmp	r3, #0
 800483c:	d001      	beq.n	8004842 <SD_disk_write+0x32>
 800483e:	2303      	movs	r3, #3
 8004840:	e062      	b.n	8004908 <SD_disk_write+0xf8>

  /* write protection */
  if (Stat & STA_PROTECT) return RES_WRPRT;
 8004842:	4b33      	ldr	r3, [pc, #204]	@ (8004910 <SD_disk_write+0x100>)
 8004844:	781b      	ldrb	r3, [r3, #0]
 8004846:	b2db      	uxtb	r3, r3
 8004848:	f003 0304 	and.w	r3, r3, #4
 800484c:	2b00      	cmp	r3, #0
 800484e:	d001      	beq.n	8004854 <SD_disk_write+0x44>
 8004850:	2302      	movs	r3, #2
 8004852:	e059      	b.n	8004908 <SD_disk_write+0xf8>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 8004854:	4b2f      	ldr	r3, [pc, #188]	@ (8004914 <SD_disk_write+0x104>)
 8004856:	781b      	ldrb	r3, [r3, #0]
 8004858:	f003 0304 	and.w	r3, r3, #4
 800485c:	2b00      	cmp	r3, #0
 800485e:	d102      	bne.n	8004866 <SD_disk_write+0x56>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	025b      	lsls	r3, r3, #9
 8004864:	607b      	str	r3, [r7, #4]

  SELECT();
 8004866:	f7ff fcbd 	bl	80041e4 <SELECT>

  if (count == 1)
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	2b01      	cmp	r3, #1
 800486e:	d110      	bne.n	8004892 <SD_disk_write+0x82>
  {
    /* WRITE_BLOCK */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8004870:	6879      	ldr	r1, [r7, #4]
 8004872:	2058      	movs	r0, #88	@ 0x58
 8004874:	f7ff fe11 	bl	800449a <SD_SendCmd>
 8004878:	4603      	mov	r3, r0
 800487a:	2b00      	cmp	r3, #0
 800487c:	d13a      	bne.n	80048f4 <SD_disk_write+0xe4>
 800487e:	21fe      	movs	r1, #254	@ 0xfe
 8004880:	68b8      	ldr	r0, [r7, #8]
 8004882:	f7ff fdc7 	bl	8004414 <SD_TxDataBlock>
 8004886:	4603      	mov	r3, r0
 8004888:	2b00      	cmp	r3, #0
 800488a:	d033      	beq.n	80048f4 <SD_disk_write+0xe4>
      count = 0;
 800488c:	2300      	movs	r3, #0
 800488e:	603b      	str	r3, [r7, #0]
 8004890:	e030      	b.n	80048f4 <SD_disk_write+0xe4>
  }
  else
  {
    /* WRITE_MULTIPLE_BLOCK */
    if (CardType & CT_SD1)
 8004892:	4b20      	ldr	r3, [pc, #128]	@ (8004914 <SD_disk_write+0x104>)
 8004894:	781b      	ldrb	r3, [r3, #0]
 8004896:	f003 0302 	and.w	r3, r3, #2
 800489a:	2b00      	cmp	r3, #0
 800489c:	d007      	beq.n	80048ae <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 800489e:	2100      	movs	r1, #0
 80048a0:	2077      	movs	r0, #119	@ 0x77
 80048a2:	f7ff fdfa 	bl	800449a <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 80048a6:	6839      	ldr	r1, [r7, #0]
 80048a8:	2057      	movs	r0, #87	@ 0x57
 80048aa:	f7ff fdf6 	bl	800449a <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 80048ae:	6879      	ldr	r1, [r7, #4]
 80048b0:	2059      	movs	r0, #89	@ 0x59
 80048b2:	f7ff fdf2 	bl	800449a <SD_SendCmd>
 80048b6:	4603      	mov	r3, r0
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d11b      	bne.n	80048f4 <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 80048bc:	21fc      	movs	r1, #252	@ 0xfc
 80048be:	68b8      	ldr	r0, [r7, #8]
 80048c0:	f7ff fda8 	bl	8004414 <SD_TxDataBlock>
 80048c4:	4603      	mov	r3, r0
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d00a      	beq.n	80048e0 <SD_disk_write+0xd0>
        buff += 512;
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80048d0:	60bb      	str	r3, [r7, #8]
      } while (--count);
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	3b01      	subs	r3, #1
 80048d6:	603b      	str	r3, [r7, #0]
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d1ee      	bne.n	80048bc <SD_disk_write+0xac>
 80048de:	e000      	b.n	80048e2 <SD_disk_write+0xd2>
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 80048e0:	bf00      	nop

      /* STOP_TRAN token */
      if(!SD_TxDataBlock(0, 0xFD))
 80048e2:	21fd      	movs	r1, #253	@ 0xfd
 80048e4:	2000      	movs	r0, #0
 80048e6:	f7ff fd95 	bl	8004414 <SD_TxDataBlock>
 80048ea:	4603      	mov	r3, r0
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d101      	bne.n	80048f4 <SD_disk_write+0xe4>
      {
        count = 1;
 80048f0:	2301      	movs	r3, #1
 80048f2:	603b      	str	r3, [r7, #0]
      }
    }
  }

  /* Idle */
  DESELECT();
 80048f4:	f7ff fc82 	bl	80041fc <DESELECT>
  SPI_RxByte();
 80048f8:	f7ff fcc0 	bl	800427c <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	bf14      	ite	ne
 8004902:	2301      	movne	r3, #1
 8004904:	2300      	moveq	r3, #0
 8004906:	b2db      	uxtb	r3, r3
}
 8004908:	4618      	mov	r0, r3
 800490a:	3710      	adds	r7, #16
 800490c:	46bd      	mov	sp, r7
 800490e:	bd80      	pop	{r7, pc}
 8004910:	20000020 	.word	0x20000020
 8004914:	200001dc 	.word	0x200001dc

08004918 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8004918:	b590      	push	{r4, r7, lr}
 800491a:	b08b      	sub	sp, #44	@ 0x2c
 800491c:	af00      	add	r7, sp, #0
 800491e:	4603      	mov	r3, r0
 8004920:	603a      	str	r2, [r7, #0]
 8004922:	71fb      	strb	r3, [r7, #7]
 8004924:	460b      	mov	r3, r1
 8004926:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  uint8_t n, csd[16], *ptr = buff;
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	623b      	str	r3, [r7, #32]
  WORD csize;

  /* pdrv should be 0 */
  if (drv) return RES_PARERR;
 800492c:	79fb      	ldrb	r3, [r7, #7]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d001      	beq.n	8004936 <SD_disk_ioctl+0x1e>
 8004932:	2304      	movs	r3, #4
 8004934:	e113      	b.n	8004b5e <SD_disk_ioctl+0x246>
  res = RES_ERROR;
 8004936:	2301      	movs	r3, #1
 8004938:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  if (ctrl == CTRL_POWER)
 800493c:	79bb      	ldrb	r3, [r7, #6]
 800493e:	2b05      	cmp	r3, #5
 8004940:	d124      	bne.n	800498c <SD_disk_ioctl+0x74>
  {
    switch (*ptr)
 8004942:	6a3b      	ldr	r3, [r7, #32]
 8004944:	781b      	ldrb	r3, [r3, #0]
 8004946:	2b02      	cmp	r3, #2
 8004948:	d012      	beq.n	8004970 <SD_disk_ioctl+0x58>
 800494a:	2b02      	cmp	r3, #2
 800494c:	dc1a      	bgt.n	8004984 <SD_disk_ioctl+0x6c>
 800494e:	2b00      	cmp	r3, #0
 8004950:	d002      	beq.n	8004958 <SD_disk_ioctl+0x40>
 8004952:	2b01      	cmp	r3, #1
 8004954:	d006      	beq.n	8004964 <SD_disk_ioctl+0x4c>
 8004956:	e015      	b.n	8004984 <SD_disk_ioctl+0x6c>
    {
    case 0:
      SD_PowerOff();    /* Power Off */
 8004958:	f7ff fd16 	bl	8004388 <SD_PowerOff>
      res = RES_OK;
 800495c:	2300      	movs	r3, #0
 800495e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8004962:	e0fa      	b.n	8004b5a <SD_disk_ioctl+0x242>
    case 1:
      SD_PowerOn();   /* Power On */
 8004964:	f7ff fcce 	bl	8004304 <SD_PowerOn>
      res = RES_OK;
 8004968:	2300      	movs	r3, #0
 800496a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800496e:	e0f4      	b.n	8004b5a <SD_disk_ioctl+0x242>
    case 2:
      *(ptr + 1) = SD_CheckPower();
 8004970:	6a3b      	ldr	r3, [r7, #32]
 8004972:	1c5c      	adds	r4, r3, #1
 8004974:	f7ff fd14 	bl	80043a0 <SD_CheckPower>
 8004978:	4603      	mov	r3, r0
 800497a:	7023      	strb	r3, [r4, #0]
      res = RES_OK;   /* Power Check */
 800497c:	2300      	movs	r3, #0
 800497e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8004982:	e0ea      	b.n	8004b5a <SD_disk_ioctl+0x242>
    default:
      res = RES_PARERR;
 8004984:	2304      	movs	r3, #4
 8004986:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800498a:	e0e6      	b.n	8004b5a <SD_disk_ioctl+0x242>
    }
  }
  else
  {
    /* no disk */
    if (Stat & STA_NOINIT){
 800498c:	4b76      	ldr	r3, [pc, #472]	@ (8004b68 <SD_disk_ioctl+0x250>)
 800498e:	781b      	ldrb	r3, [r3, #0]
 8004990:	b2db      	uxtb	r3, r3
 8004992:	f003 0301 	and.w	r3, r3, #1
 8004996:	2b00      	cmp	r3, #0
 8004998:	d001      	beq.n	800499e <SD_disk_ioctl+0x86>
    	return RES_NOTRDY;
 800499a:	2303      	movs	r3, #3
 800499c:	e0df      	b.n	8004b5e <SD_disk_ioctl+0x246>
    }
    SELECT();
 800499e:	f7ff fc21 	bl	80041e4 <SELECT>
    switch (ctrl)
 80049a2:	79bb      	ldrb	r3, [r7, #6]
 80049a4:	2b0d      	cmp	r3, #13
 80049a6:	f200 80c9 	bhi.w	8004b3c <SD_disk_ioctl+0x224>
 80049aa:	a201      	add	r2, pc, #4	@ (adr r2, 80049b0 <SD_disk_ioctl+0x98>)
 80049ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049b0:	08004aa7 	.word	0x08004aa7
 80049b4:	080049e9 	.word	0x080049e9
 80049b8:	08004a97 	.word	0x08004a97
 80049bc:	08004b3d 	.word	0x08004b3d
 80049c0:	08004b3d 	.word	0x08004b3d
 80049c4:	08004b3d 	.word	0x08004b3d
 80049c8:	08004b3d 	.word	0x08004b3d
 80049cc:	08004b3d 	.word	0x08004b3d
 80049d0:	08004b3d 	.word	0x08004b3d
 80049d4:	08004b3d 	.word	0x08004b3d
 80049d8:	08004b3d 	.word	0x08004b3d
 80049dc:	08004ab9 	.word	0x08004ab9
 80049e0:	08004add 	.word	0x08004add
 80049e4:	08004b01 	.word	0x08004b01
    {
    case GET_SECTOR_COUNT:
      /* SEND_CSD */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 80049e8:	2100      	movs	r1, #0
 80049ea:	2049      	movs	r0, #73	@ 0x49
 80049ec:	f7ff fd55 	bl	800449a <SD_SendCmd>
 80049f0:	4603      	mov	r3, r0
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	f040 80a6 	bne.w	8004b44 <SD_disk_ioctl+0x22c>
 80049f8:	f107 030c 	add.w	r3, r7, #12
 80049fc:	2110      	movs	r1, #16
 80049fe:	4618      	mov	r0, r3
 8004a00:	f7ff fcda 	bl	80043b8 <SD_RxDataBlock>
 8004a04:	4603      	mov	r3, r0
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	f000 809c 	beq.w	8004b44 <SD_disk_ioctl+0x22c>
      {
        if ((csd[0] >> 6) == 1)
 8004a0c:	7b3b      	ldrb	r3, [r7, #12]
 8004a0e:	099b      	lsrs	r3, r3, #6
 8004a10:	b2db      	uxtb	r3, r3
 8004a12:	2b01      	cmp	r3, #1
 8004a14:	d10d      	bne.n	8004a32 <SD_disk_ioctl+0x11a>
        {
          /* SDC V2 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8004a16:	7d7b      	ldrb	r3, [r7, #21]
 8004a18:	461a      	mov	r2, r3
 8004a1a:	7d3b      	ldrb	r3, [r7, #20]
 8004a1c:	021b      	lsls	r3, r3, #8
 8004a1e:	b29b      	uxth	r3, r3
 8004a20:	4413      	add	r3, r2
 8004a22:	b29b      	uxth	r3, r3
 8004a24:	3301      	adds	r3, #1
 8004a26:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 8004a28:	8bfb      	ldrh	r3, [r7, #30]
 8004a2a:	029a      	lsls	r2, r3, #10
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	601a      	str	r2, [r3, #0]
 8004a30:	e02d      	b.n	8004a8e <SD_disk_ioctl+0x176>
        }
        else
        {
          /* MMC or SDC V1 */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8004a32:	7c7b      	ldrb	r3, [r7, #17]
 8004a34:	f003 030f 	and.w	r3, r3, #15
 8004a38:	b2da      	uxtb	r2, r3
 8004a3a:	7dbb      	ldrb	r3, [r7, #22]
 8004a3c:	09db      	lsrs	r3, r3, #7
 8004a3e:	b2db      	uxtb	r3, r3
 8004a40:	4413      	add	r3, r2
 8004a42:	b2da      	uxtb	r2, r3
 8004a44:	7d7b      	ldrb	r3, [r7, #21]
 8004a46:	005b      	lsls	r3, r3, #1
 8004a48:	b2db      	uxtb	r3, r3
 8004a4a:	f003 0306 	and.w	r3, r3, #6
 8004a4e:	b2db      	uxtb	r3, r3
 8004a50:	4413      	add	r3, r2
 8004a52:	b2db      	uxtb	r3, r3
 8004a54:	3302      	adds	r3, #2
 8004a56:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8004a5a:	7d3b      	ldrb	r3, [r7, #20]
 8004a5c:	099b      	lsrs	r3, r3, #6
 8004a5e:	b2db      	uxtb	r3, r3
 8004a60:	461a      	mov	r2, r3
 8004a62:	7cfb      	ldrb	r3, [r7, #19]
 8004a64:	009b      	lsls	r3, r3, #2
 8004a66:	b29b      	uxth	r3, r3
 8004a68:	4413      	add	r3, r2
 8004a6a:	b29a      	uxth	r2, r3
 8004a6c:	7cbb      	ldrb	r3, [r7, #18]
 8004a6e:	029b      	lsls	r3, r3, #10
 8004a70:	b29b      	uxth	r3, r3
 8004a72:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004a76:	b29b      	uxth	r3, r3
 8004a78:	4413      	add	r3, r2
 8004a7a:	b29b      	uxth	r3, r3
 8004a7c:	3301      	adds	r3, #1
 8004a7e:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8004a80:	8bfa      	ldrh	r2, [r7, #30]
 8004a82:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004a86:	3b09      	subs	r3, #9
 8004a88:	409a      	lsls	r2, r3
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	601a      	str	r2, [r3, #0]
        }
        res = RES_OK;
 8004a8e:	2300      	movs	r3, #0
 8004a90:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
      break;
 8004a94:	e056      	b.n	8004b44 <SD_disk_ioctl+0x22c>
    case GET_SECTOR_SIZE:
      *(WORD*) buff = 512;
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004a9c:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8004aa4:	e055      	b.n	8004b52 <SD_disk_ioctl+0x23a>
    case CTRL_SYNC:
      if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8004aa6:	f7ff fc13 	bl	80042d0 <SD_ReadyWait>
 8004aaa:	4603      	mov	r3, r0
 8004aac:	2bff      	cmp	r3, #255	@ 0xff
 8004aae:	d14b      	bne.n	8004b48 <SD_disk_ioctl+0x230>
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8004ab6:	e047      	b.n	8004b48 <SD_disk_ioctl+0x230>
    case MMC_GET_CSD:
      /* SEND_CSD */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8004ab8:	2100      	movs	r1, #0
 8004aba:	2049      	movs	r0, #73	@ 0x49
 8004abc:	f7ff fced 	bl	800449a <SD_SendCmd>
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d142      	bne.n	8004b4c <SD_disk_ioctl+0x234>
 8004ac6:	2110      	movs	r1, #16
 8004ac8:	6a38      	ldr	r0, [r7, #32]
 8004aca:	f7ff fc75 	bl	80043b8 <SD_RxDataBlock>
 8004ace:	4603      	mov	r3, r0
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d03b      	beq.n	8004b4c <SD_disk_ioctl+0x234>
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8004ada:	e037      	b.n	8004b4c <SD_disk_ioctl+0x234>
    case MMC_GET_CID:
      /* SEND_CID */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8004adc:	2100      	movs	r1, #0
 8004ade:	204a      	movs	r0, #74	@ 0x4a
 8004ae0:	f7ff fcdb 	bl	800449a <SD_SendCmd>
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d132      	bne.n	8004b50 <SD_disk_ioctl+0x238>
 8004aea:	2110      	movs	r1, #16
 8004aec:	6a38      	ldr	r0, [r7, #32]
 8004aee:	f7ff fc63 	bl	80043b8 <SD_RxDataBlock>
 8004af2:	4603      	mov	r3, r0
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d02b      	beq.n	8004b50 <SD_disk_ioctl+0x238>
 8004af8:	2300      	movs	r3, #0
 8004afa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8004afe:	e027      	b.n	8004b50 <SD_disk_ioctl+0x238>
    case MMC_GET_OCR:
      /* READ_OCR */
      if (SD_SendCmd(CMD58, 0) == 0)
 8004b00:	2100      	movs	r1, #0
 8004b02:	207a      	movs	r0, #122	@ 0x7a
 8004b04:	f7ff fcc9 	bl	800449a <SD_SendCmd>
 8004b08:	4603      	mov	r3, r0
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d116      	bne.n	8004b3c <SD_disk_ioctl+0x224>
      {
        for (n = 0; n < 4; n++)
 8004b0e:	2300      	movs	r3, #0
 8004b10:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8004b14:	e00b      	b.n	8004b2e <SD_disk_ioctl+0x216>
        {
          *ptr++ = SPI_RxByte();
 8004b16:	6a3c      	ldr	r4, [r7, #32]
 8004b18:	1c63      	adds	r3, r4, #1
 8004b1a:	623b      	str	r3, [r7, #32]
 8004b1c:	f7ff fbae 	bl	800427c <SPI_RxByte>
 8004b20:	4603      	mov	r3, r0
 8004b22:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8004b24:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004b28:	3301      	adds	r3, #1
 8004b2a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8004b2e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004b32:	2b03      	cmp	r3, #3
 8004b34:	d9ef      	bls.n	8004b16 <SD_disk_ioctl+0x1fe>
        }
        res = RES_OK;
 8004b36:	2300      	movs	r3, #0
 8004b38:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
    default:
      res = RES_PARERR;
 8004b3c:	2304      	movs	r3, #4
 8004b3e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8004b42:	e006      	b.n	8004b52 <SD_disk_ioctl+0x23a>
      break;
 8004b44:	bf00      	nop
 8004b46:	e004      	b.n	8004b52 <SD_disk_ioctl+0x23a>
      break;
 8004b48:	bf00      	nop
 8004b4a:	e002      	b.n	8004b52 <SD_disk_ioctl+0x23a>
      break;
 8004b4c:	bf00      	nop
 8004b4e:	e000      	b.n	8004b52 <SD_disk_ioctl+0x23a>
      break;
 8004b50:	bf00      	nop
    }
    DESELECT();
 8004b52:	f7ff fb53 	bl	80041fc <DESELECT>
    SPI_RxByte();
 8004b56:	f7ff fb91 	bl	800427c <SPI_RxByte>
  }
  return res;
 8004b5a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8004b5e:	4618      	mov	r0, r3
 8004b60:	372c      	adds	r7, #44	@ 0x2c
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bd90      	pop	{r4, r7, pc}
 8004b66:	bf00      	nop
 8004b68:	20000020 	.word	0x20000020

08004b6c <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b085      	sub	sp, #20
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	4603      	mov	r3, r0
 8004b74:	6039      	str	r1, [r7, #0]
 8004b76:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8004b78:	88fb      	ldrh	r3, [r7, #6]
 8004b7a:	2b7f      	cmp	r3, #127	@ 0x7f
 8004b7c:	d802      	bhi.n	8004b84 <ff_convert+0x18>
		c = chr;
 8004b7e:	88fb      	ldrh	r3, [r7, #6]
 8004b80:	81fb      	strh	r3, [r7, #14]
 8004b82:	e025      	b.n	8004bd0 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d00b      	beq.n	8004ba2 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8004b8a:	88fb      	ldrh	r3, [r7, #6]
 8004b8c:	2bff      	cmp	r3, #255	@ 0xff
 8004b8e:	d805      	bhi.n	8004b9c <ff_convert+0x30>
 8004b90:	88fb      	ldrh	r3, [r7, #6]
 8004b92:	3b80      	subs	r3, #128	@ 0x80
 8004b94:	4a12      	ldr	r2, [pc, #72]	@ (8004be0 <ff_convert+0x74>)
 8004b96:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004b9a:	e000      	b.n	8004b9e <ff_convert+0x32>
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	81fb      	strh	r3, [r7, #14]
 8004ba0:	e016      	b.n	8004bd0 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	81fb      	strh	r3, [r7, #14]
 8004ba6:	e009      	b.n	8004bbc <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8004ba8:	89fb      	ldrh	r3, [r7, #14]
 8004baa:	4a0d      	ldr	r2, [pc, #52]	@ (8004be0 <ff_convert+0x74>)
 8004bac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004bb0:	88fa      	ldrh	r2, [r7, #6]
 8004bb2:	429a      	cmp	r2, r3
 8004bb4:	d006      	beq.n	8004bc4 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8004bb6:	89fb      	ldrh	r3, [r7, #14]
 8004bb8:	3301      	adds	r3, #1
 8004bba:	81fb      	strh	r3, [r7, #14]
 8004bbc:	89fb      	ldrh	r3, [r7, #14]
 8004bbe:	2b7f      	cmp	r3, #127	@ 0x7f
 8004bc0:	d9f2      	bls.n	8004ba8 <ff_convert+0x3c>
 8004bc2:	e000      	b.n	8004bc6 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8004bc4:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8004bc6:	89fb      	ldrh	r3, [r7, #14]
 8004bc8:	3380      	adds	r3, #128	@ 0x80
 8004bca:	b29b      	uxth	r3, r3
 8004bcc:	b2db      	uxtb	r3, r3
 8004bce:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8004bd0:	89fb      	ldrh	r3, [r7, #14]
}
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	3714      	adds	r7, #20
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bdc:	4770      	bx	lr
 8004bde:	bf00      	nop
 8004be0:	0800916c 	.word	0x0800916c

08004be4 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8004be4:	b480      	push	{r7}
 8004be6:	b087      	sub	sp, #28
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	4603      	mov	r3, r0
 8004bec:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8004bee:	88fb      	ldrh	r3, [r7, #6]
 8004bf0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004bf4:	d201      	bcs.n	8004bfa <ff_wtoupper+0x16>
 8004bf6:	4b3e      	ldr	r3, [pc, #248]	@ (8004cf0 <ff_wtoupper+0x10c>)
 8004bf8:	e000      	b.n	8004bfc <ff_wtoupper+0x18>
 8004bfa:	4b3e      	ldr	r3, [pc, #248]	@ (8004cf4 <ff_wtoupper+0x110>)
 8004bfc:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8004bfe:	697b      	ldr	r3, [r7, #20]
 8004c00:	1c9a      	adds	r2, r3, #2
 8004c02:	617a      	str	r2, [r7, #20]
 8004c04:	881b      	ldrh	r3, [r3, #0]
 8004c06:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8004c08:	8a7b      	ldrh	r3, [r7, #18]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d068      	beq.n	8004ce0 <ff_wtoupper+0xfc>
 8004c0e:	88fa      	ldrh	r2, [r7, #6]
 8004c10:	8a7b      	ldrh	r3, [r7, #18]
 8004c12:	429a      	cmp	r2, r3
 8004c14:	d364      	bcc.n	8004ce0 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8004c16:	697b      	ldr	r3, [r7, #20]
 8004c18:	1c9a      	adds	r2, r3, #2
 8004c1a:	617a      	str	r2, [r7, #20]
 8004c1c:	881b      	ldrh	r3, [r3, #0]
 8004c1e:	823b      	strh	r3, [r7, #16]
 8004c20:	8a3b      	ldrh	r3, [r7, #16]
 8004c22:	0a1b      	lsrs	r3, r3, #8
 8004c24:	81fb      	strh	r3, [r7, #14]
 8004c26:	8a3b      	ldrh	r3, [r7, #16]
 8004c28:	b2db      	uxtb	r3, r3
 8004c2a:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8004c2c:	88fa      	ldrh	r2, [r7, #6]
 8004c2e:	8a79      	ldrh	r1, [r7, #18]
 8004c30:	8a3b      	ldrh	r3, [r7, #16]
 8004c32:	440b      	add	r3, r1
 8004c34:	429a      	cmp	r2, r3
 8004c36:	da49      	bge.n	8004ccc <ff_wtoupper+0xe8>
			switch (cmd) {
 8004c38:	89fb      	ldrh	r3, [r7, #14]
 8004c3a:	2b08      	cmp	r3, #8
 8004c3c:	d84f      	bhi.n	8004cde <ff_wtoupper+0xfa>
 8004c3e:	a201      	add	r2, pc, #4	@ (adr r2, 8004c44 <ff_wtoupper+0x60>)
 8004c40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c44:	08004c69 	.word	0x08004c69
 8004c48:	08004c7b 	.word	0x08004c7b
 8004c4c:	08004c91 	.word	0x08004c91
 8004c50:	08004c99 	.word	0x08004c99
 8004c54:	08004ca1 	.word	0x08004ca1
 8004c58:	08004ca9 	.word	0x08004ca9
 8004c5c:	08004cb1 	.word	0x08004cb1
 8004c60:	08004cb9 	.word	0x08004cb9
 8004c64:	08004cc1 	.word	0x08004cc1
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8004c68:	88fa      	ldrh	r2, [r7, #6]
 8004c6a:	8a7b      	ldrh	r3, [r7, #18]
 8004c6c:	1ad3      	subs	r3, r2, r3
 8004c6e:	005b      	lsls	r3, r3, #1
 8004c70:	697a      	ldr	r2, [r7, #20]
 8004c72:	4413      	add	r3, r2
 8004c74:	881b      	ldrh	r3, [r3, #0]
 8004c76:	80fb      	strh	r3, [r7, #6]
 8004c78:	e027      	b.n	8004cca <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8004c7a:	88fa      	ldrh	r2, [r7, #6]
 8004c7c:	8a7b      	ldrh	r3, [r7, #18]
 8004c7e:	1ad3      	subs	r3, r2, r3
 8004c80:	b29b      	uxth	r3, r3
 8004c82:	f003 0301 	and.w	r3, r3, #1
 8004c86:	b29b      	uxth	r3, r3
 8004c88:	88fa      	ldrh	r2, [r7, #6]
 8004c8a:	1ad3      	subs	r3, r2, r3
 8004c8c:	80fb      	strh	r3, [r7, #6]
 8004c8e:	e01c      	b.n	8004cca <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8004c90:	88fb      	ldrh	r3, [r7, #6]
 8004c92:	3b10      	subs	r3, #16
 8004c94:	80fb      	strh	r3, [r7, #6]
 8004c96:	e018      	b.n	8004cca <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8004c98:	88fb      	ldrh	r3, [r7, #6]
 8004c9a:	3b20      	subs	r3, #32
 8004c9c:	80fb      	strh	r3, [r7, #6]
 8004c9e:	e014      	b.n	8004cca <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8004ca0:	88fb      	ldrh	r3, [r7, #6]
 8004ca2:	3b30      	subs	r3, #48	@ 0x30
 8004ca4:	80fb      	strh	r3, [r7, #6]
 8004ca6:	e010      	b.n	8004cca <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8004ca8:	88fb      	ldrh	r3, [r7, #6]
 8004caa:	3b1a      	subs	r3, #26
 8004cac:	80fb      	strh	r3, [r7, #6]
 8004cae:	e00c      	b.n	8004cca <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8004cb0:	88fb      	ldrh	r3, [r7, #6]
 8004cb2:	3308      	adds	r3, #8
 8004cb4:	80fb      	strh	r3, [r7, #6]
 8004cb6:	e008      	b.n	8004cca <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8004cb8:	88fb      	ldrh	r3, [r7, #6]
 8004cba:	3b50      	subs	r3, #80	@ 0x50
 8004cbc:	80fb      	strh	r3, [r7, #6]
 8004cbe:	e004      	b.n	8004cca <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8004cc0:	88fb      	ldrh	r3, [r7, #6]
 8004cc2:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 8004cc6:	80fb      	strh	r3, [r7, #6]
 8004cc8:	bf00      	nop
			}
			break;
 8004cca:	e008      	b.n	8004cde <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8004ccc:	89fb      	ldrh	r3, [r7, #14]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d195      	bne.n	8004bfe <ff_wtoupper+0x1a>
 8004cd2:	8a3b      	ldrh	r3, [r7, #16]
 8004cd4:	005b      	lsls	r3, r3, #1
 8004cd6:	697a      	ldr	r2, [r7, #20]
 8004cd8:	4413      	add	r3, r2
 8004cda:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8004cdc:	e78f      	b.n	8004bfe <ff_wtoupper+0x1a>
			break;
 8004cde:	bf00      	nop
	}

	return chr;
 8004ce0:	88fb      	ldrh	r3, [r7, #6]
}
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	371c      	adds	r7, #28
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cec:	4770      	bx	lr
 8004cee:	bf00      	nop
 8004cf0:	0800926c 	.word	0x0800926c
 8004cf4:	08009460 	.word	0x08009460

08004cf8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b084      	sub	sp, #16
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	4603      	mov	r3, r0
 8004d00:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8004d02:	79fb      	ldrb	r3, [r7, #7]
 8004d04:	4a08      	ldr	r2, [pc, #32]	@ (8004d28 <disk_status+0x30>)
 8004d06:	009b      	lsls	r3, r3, #2
 8004d08:	4413      	add	r3, r2
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	79fa      	ldrb	r2, [r7, #7]
 8004d10:	4905      	ldr	r1, [pc, #20]	@ (8004d28 <disk_status+0x30>)
 8004d12:	440a      	add	r2, r1
 8004d14:	7a12      	ldrb	r2, [r2, #8]
 8004d16:	4610      	mov	r0, r2
 8004d18:	4798      	blx	r3
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	73fb      	strb	r3, [r7, #15]
  return stat;
 8004d1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d20:	4618      	mov	r0, r3
 8004d22:	3710      	adds	r7, #16
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bd80      	pop	{r7, pc}
 8004d28:	20000408 	.word	0x20000408

08004d2c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b084      	sub	sp, #16
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	4603      	mov	r3, r0
 8004d34:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8004d36:	2300      	movs	r3, #0
 8004d38:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8004d3a:	79fb      	ldrb	r3, [r7, #7]
 8004d3c:	4a0e      	ldr	r2, [pc, #56]	@ (8004d78 <disk_initialize+0x4c>)
 8004d3e:	5cd3      	ldrb	r3, [r2, r3]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d114      	bne.n	8004d6e <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8004d44:	79fb      	ldrb	r3, [r7, #7]
 8004d46:	4a0c      	ldr	r2, [pc, #48]	@ (8004d78 <disk_initialize+0x4c>)
 8004d48:	009b      	lsls	r3, r3, #2
 8004d4a:	4413      	add	r3, r2
 8004d4c:	685b      	ldr	r3, [r3, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	79fa      	ldrb	r2, [r7, #7]
 8004d52:	4909      	ldr	r1, [pc, #36]	@ (8004d78 <disk_initialize+0x4c>)
 8004d54:	440a      	add	r2, r1
 8004d56:	7a12      	ldrb	r2, [r2, #8]
 8004d58:	4610      	mov	r0, r2
 8004d5a:	4798      	blx	r3
 8004d5c:	4603      	mov	r3, r0
 8004d5e:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 8004d60:	7bfb      	ldrb	r3, [r7, #15]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d103      	bne.n	8004d6e <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 8004d66:	79fb      	ldrb	r3, [r7, #7]
 8004d68:	4a03      	ldr	r2, [pc, #12]	@ (8004d78 <disk_initialize+0x4c>)
 8004d6a:	2101      	movs	r1, #1
 8004d6c:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 8004d6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d70:	4618      	mov	r0, r3
 8004d72:	3710      	adds	r7, #16
 8004d74:	46bd      	mov	sp, r7
 8004d76:	bd80      	pop	{r7, pc}
 8004d78:	20000408 	.word	0x20000408

08004d7c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8004d7c:	b590      	push	{r4, r7, lr}
 8004d7e:	b087      	sub	sp, #28
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	60b9      	str	r1, [r7, #8]
 8004d84:	607a      	str	r2, [r7, #4]
 8004d86:	603b      	str	r3, [r7, #0]
 8004d88:	4603      	mov	r3, r0
 8004d8a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8004d8c:	7bfb      	ldrb	r3, [r7, #15]
 8004d8e:	4a0a      	ldr	r2, [pc, #40]	@ (8004db8 <disk_read+0x3c>)
 8004d90:	009b      	lsls	r3, r3, #2
 8004d92:	4413      	add	r3, r2
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	689c      	ldr	r4, [r3, #8]
 8004d98:	7bfb      	ldrb	r3, [r7, #15]
 8004d9a:	4a07      	ldr	r2, [pc, #28]	@ (8004db8 <disk_read+0x3c>)
 8004d9c:	4413      	add	r3, r2
 8004d9e:	7a18      	ldrb	r0, [r3, #8]
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	687a      	ldr	r2, [r7, #4]
 8004da4:	68b9      	ldr	r1, [r7, #8]
 8004da6:	47a0      	blx	r4
 8004da8:	4603      	mov	r3, r0
 8004daa:	75fb      	strb	r3, [r7, #23]
  return res;
 8004dac:	7dfb      	ldrb	r3, [r7, #23]
}
 8004dae:	4618      	mov	r0, r3
 8004db0:	371c      	adds	r7, #28
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bd90      	pop	{r4, r7, pc}
 8004db6:	bf00      	nop
 8004db8:	20000408 	.word	0x20000408

08004dbc <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8004dbc:	b590      	push	{r4, r7, lr}
 8004dbe:	b087      	sub	sp, #28
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	60b9      	str	r1, [r7, #8]
 8004dc4:	607a      	str	r2, [r7, #4]
 8004dc6:	603b      	str	r3, [r7, #0]
 8004dc8:	4603      	mov	r3, r0
 8004dca:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8004dcc:	7bfb      	ldrb	r3, [r7, #15]
 8004dce:	4a0a      	ldr	r2, [pc, #40]	@ (8004df8 <disk_write+0x3c>)
 8004dd0:	009b      	lsls	r3, r3, #2
 8004dd2:	4413      	add	r3, r2
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	68dc      	ldr	r4, [r3, #12]
 8004dd8:	7bfb      	ldrb	r3, [r7, #15]
 8004dda:	4a07      	ldr	r2, [pc, #28]	@ (8004df8 <disk_write+0x3c>)
 8004ddc:	4413      	add	r3, r2
 8004dde:	7a18      	ldrb	r0, [r3, #8]
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	687a      	ldr	r2, [r7, #4]
 8004de4:	68b9      	ldr	r1, [r7, #8]
 8004de6:	47a0      	blx	r4
 8004de8:	4603      	mov	r3, r0
 8004dea:	75fb      	strb	r3, [r7, #23]
  return res;
 8004dec:	7dfb      	ldrb	r3, [r7, #23]
}
 8004dee:	4618      	mov	r0, r3
 8004df0:	371c      	adds	r7, #28
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bd90      	pop	{r4, r7, pc}
 8004df6:	bf00      	nop
 8004df8:	20000408 	.word	0x20000408

08004dfc <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b084      	sub	sp, #16
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	4603      	mov	r3, r0
 8004e04:	603a      	str	r2, [r7, #0]
 8004e06:	71fb      	strb	r3, [r7, #7]
 8004e08:	460b      	mov	r3, r1
 8004e0a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8004e0c:	79fb      	ldrb	r3, [r7, #7]
 8004e0e:	4a09      	ldr	r2, [pc, #36]	@ (8004e34 <disk_ioctl+0x38>)
 8004e10:	009b      	lsls	r3, r3, #2
 8004e12:	4413      	add	r3, r2
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	691b      	ldr	r3, [r3, #16]
 8004e18:	79fa      	ldrb	r2, [r7, #7]
 8004e1a:	4906      	ldr	r1, [pc, #24]	@ (8004e34 <disk_ioctl+0x38>)
 8004e1c:	440a      	add	r2, r1
 8004e1e:	7a10      	ldrb	r0, [r2, #8]
 8004e20:	79b9      	ldrb	r1, [r7, #6]
 8004e22:	683a      	ldr	r2, [r7, #0]
 8004e24:	4798      	blx	r3
 8004e26:	4603      	mov	r3, r0
 8004e28:	73fb      	strb	r3, [r7, #15]
  return res;
 8004e2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	3710      	adds	r7, #16
 8004e30:	46bd      	mov	sp, r7
 8004e32:	bd80      	pop	{r7, pc}
 8004e34:	20000408 	.word	0x20000408

08004e38 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8004e38:	b480      	push	{r7}
 8004e3a:	b085      	sub	sp, #20
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	3301      	adds	r3, #1
 8004e44:	781b      	ldrb	r3, [r3, #0]
 8004e46:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8004e48:	89fb      	ldrh	r3, [r7, #14]
 8004e4a:	021b      	lsls	r3, r3, #8
 8004e4c:	b21a      	sxth	r2, r3
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	781b      	ldrb	r3, [r3, #0]
 8004e52:	b21b      	sxth	r3, r3
 8004e54:	4313      	orrs	r3, r2
 8004e56:	b21b      	sxth	r3, r3
 8004e58:	81fb      	strh	r3, [r7, #14]
	return rv;
 8004e5a:	89fb      	ldrh	r3, [r7, #14]
}
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	3714      	adds	r7, #20
 8004e60:	46bd      	mov	sp, r7
 8004e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e66:	4770      	bx	lr

08004e68 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b085      	sub	sp, #20
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	3303      	adds	r3, #3
 8004e74:	781b      	ldrb	r3, [r3, #0]
 8004e76:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	021b      	lsls	r3, r3, #8
 8004e7c:	687a      	ldr	r2, [r7, #4]
 8004e7e:	3202      	adds	r2, #2
 8004e80:	7812      	ldrb	r2, [r2, #0]
 8004e82:	4313      	orrs	r3, r2
 8004e84:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	021b      	lsls	r3, r3, #8
 8004e8a:	687a      	ldr	r2, [r7, #4]
 8004e8c:	3201      	adds	r2, #1
 8004e8e:	7812      	ldrb	r2, [r2, #0]
 8004e90:	4313      	orrs	r3, r2
 8004e92:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	021b      	lsls	r3, r3, #8
 8004e98:	687a      	ldr	r2, [r7, #4]
 8004e9a:	7812      	ldrb	r2, [r2, #0]
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	60fb      	str	r3, [r7, #12]
	return rv;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
}
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	3714      	adds	r7, #20
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eac:	4770      	bx	lr

08004eae <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8004eae:	b480      	push	{r7}
 8004eb0:	b083      	sub	sp, #12
 8004eb2:	af00      	add	r7, sp, #0
 8004eb4:	6078      	str	r0, [r7, #4]
 8004eb6:	460b      	mov	r3, r1
 8004eb8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	1c5a      	adds	r2, r3, #1
 8004ebe:	607a      	str	r2, [r7, #4]
 8004ec0:	887a      	ldrh	r2, [r7, #2]
 8004ec2:	b2d2      	uxtb	r2, r2
 8004ec4:	701a      	strb	r2, [r3, #0]
 8004ec6:	887b      	ldrh	r3, [r7, #2]
 8004ec8:	0a1b      	lsrs	r3, r3, #8
 8004eca:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	1c5a      	adds	r2, r3, #1
 8004ed0:	607a      	str	r2, [r7, #4]
 8004ed2:	887a      	ldrh	r2, [r7, #2]
 8004ed4:	b2d2      	uxtb	r2, r2
 8004ed6:	701a      	strb	r2, [r3, #0]
}
 8004ed8:	bf00      	nop
 8004eda:	370c      	adds	r7, #12
 8004edc:	46bd      	mov	sp, r7
 8004ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee2:	4770      	bx	lr

08004ee4 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	b083      	sub	sp, #12
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
 8004eec:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	1c5a      	adds	r2, r3, #1
 8004ef2:	607a      	str	r2, [r7, #4]
 8004ef4:	683a      	ldr	r2, [r7, #0]
 8004ef6:	b2d2      	uxtb	r2, r2
 8004ef8:	701a      	strb	r2, [r3, #0]
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	0a1b      	lsrs	r3, r3, #8
 8004efe:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	1c5a      	adds	r2, r3, #1
 8004f04:	607a      	str	r2, [r7, #4]
 8004f06:	683a      	ldr	r2, [r7, #0]
 8004f08:	b2d2      	uxtb	r2, r2
 8004f0a:	701a      	strb	r2, [r3, #0]
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	0a1b      	lsrs	r3, r3, #8
 8004f10:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	1c5a      	adds	r2, r3, #1
 8004f16:	607a      	str	r2, [r7, #4]
 8004f18:	683a      	ldr	r2, [r7, #0]
 8004f1a:	b2d2      	uxtb	r2, r2
 8004f1c:	701a      	strb	r2, [r3, #0]
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	0a1b      	lsrs	r3, r3, #8
 8004f22:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	1c5a      	adds	r2, r3, #1
 8004f28:	607a      	str	r2, [r7, #4]
 8004f2a:	683a      	ldr	r2, [r7, #0]
 8004f2c:	b2d2      	uxtb	r2, r2
 8004f2e:	701a      	strb	r2, [r3, #0]
}
 8004f30:	bf00      	nop
 8004f32:	370c      	adds	r7, #12
 8004f34:	46bd      	mov	sp, r7
 8004f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3a:	4770      	bx	lr

08004f3c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8004f3c:	b480      	push	{r7}
 8004f3e:	b087      	sub	sp, #28
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	60f8      	str	r0, [r7, #12]
 8004f44:	60b9      	str	r1, [r7, #8]
 8004f46:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d00d      	beq.n	8004f72 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8004f56:	693a      	ldr	r2, [r7, #16]
 8004f58:	1c53      	adds	r3, r2, #1
 8004f5a:	613b      	str	r3, [r7, #16]
 8004f5c:	697b      	ldr	r3, [r7, #20]
 8004f5e:	1c59      	adds	r1, r3, #1
 8004f60:	6179      	str	r1, [r7, #20]
 8004f62:	7812      	ldrb	r2, [r2, #0]
 8004f64:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	3b01      	subs	r3, #1
 8004f6a:	607b      	str	r3, [r7, #4]
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d1f1      	bne.n	8004f56 <mem_cpy+0x1a>
	}
}
 8004f72:	bf00      	nop
 8004f74:	371c      	adds	r7, #28
 8004f76:	46bd      	mov	sp, r7
 8004f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7c:	4770      	bx	lr

08004f7e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8004f7e:	b480      	push	{r7}
 8004f80:	b087      	sub	sp, #28
 8004f82:	af00      	add	r7, sp, #0
 8004f84:	60f8      	str	r0, [r7, #12]
 8004f86:	60b9      	str	r1, [r7, #8]
 8004f88:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8004f8e:	697b      	ldr	r3, [r7, #20]
 8004f90:	1c5a      	adds	r2, r3, #1
 8004f92:	617a      	str	r2, [r7, #20]
 8004f94:	68ba      	ldr	r2, [r7, #8]
 8004f96:	b2d2      	uxtb	r2, r2
 8004f98:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	3b01      	subs	r3, #1
 8004f9e:	607b      	str	r3, [r7, #4]
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d1f3      	bne.n	8004f8e <mem_set+0x10>
}
 8004fa6:	bf00      	nop
 8004fa8:	bf00      	nop
 8004faa:	371c      	adds	r7, #28
 8004fac:	46bd      	mov	sp, r7
 8004fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb2:	4770      	bx	lr

08004fb4 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8004fb4:	b480      	push	{r7}
 8004fb6:	b089      	sub	sp, #36	@ 0x24
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	60f8      	str	r0, [r7, #12]
 8004fbc:	60b9      	str	r1, [r7, #8]
 8004fbe:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	61fb      	str	r3, [r7, #28]
 8004fc4:	68bb      	ldr	r3, [r7, #8]
 8004fc6:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8004fc8:	2300      	movs	r3, #0
 8004fca:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8004fcc:	69fb      	ldr	r3, [r7, #28]
 8004fce:	1c5a      	adds	r2, r3, #1
 8004fd0:	61fa      	str	r2, [r7, #28]
 8004fd2:	781b      	ldrb	r3, [r3, #0]
 8004fd4:	4619      	mov	r1, r3
 8004fd6:	69bb      	ldr	r3, [r7, #24]
 8004fd8:	1c5a      	adds	r2, r3, #1
 8004fda:	61ba      	str	r2, [r7, #24]
 8004fdc:	781b      	ldrb	r3, [r3, #0]
 8004fde:	1acb      	subs	r3, r1, r3
 8004fe0:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	3b01      	subs	r3, #1
 8004fe6:	607b      	str	r3, [r7, #4]
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d002      	beq.n	8004ff4 <mem_cmp+0x40>
 8004fee:	697b      	ldr	r3, [r7, #20]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d0eb      	beq.n	8004fcc <mem_cmp+0x18>

	return r;
 8004ff4:	697b      	ldr	r3, [r7, #20]
}
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	3724      	adds	r7, #36	@ 0x24
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005000:	4770      	bx	lr

08005002 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8005002:	b480      	push	{r7}
 8005004:	b083      	sub	sp, #12
 8005006:	af00      	add	r7, sp, #0
 8005008:	6078      	str	r0, [r7, #4]
 800500a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800500c:	e002      	b.n	8005014 <chk_chr+0x12>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	3301      	adds	r3, #1
 8005012:	607b      	str	r3, [r7, #4]
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	781b      	ldrb	r3, [r3, #0]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d005      	beq.n	8005028 <chk_chr+0x26>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	781b      	ldrb	r3, [r3, #0]
 8005020:	461a      	mov	r2, r3
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	4293      	cmp	r3, r2
 8005026:	d1f2      	bne.n	800500e <chk_chr+0xc>
	return *str;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	781b      	ldrb	r3, [r3, #0]
}
 800502c:	4618      	mov	r0, r3
 800502e:	370c      	adds	r7, #12
 8005030:	46bd      	mov	sp, r7
 8005032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005036:	4770      	bx	lr

08005038 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005038:	b480      	push	{r7}
 800503a:	b085      	sub	sp, #20
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
 8005040:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005042:	2300      	movs	r3, #0
 8005044:	60bb      	str	r3, [r7, #8]
 8005046:	68bb      	ldr	r3, [r7, #8]
 8005048:	60fb      	str	r3, [r7, #12]
 800504a:	e029      	b.n	80050a0 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800504c:	4a27      	ldr	r2, [pc, #156]	@ (80050ec <chk_lock+0xb4>)
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	011b      	lsls	r3, r3, #4
 8005052:	4413      	add	r3, r2
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d01d      	beq.n	8005096 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800505a:	4a24      	ldr	r2, [pc, #144]	@ (80050ec <chk_lock+0xb4>)
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	011b      	lsls	r3, r3, #4
 8005060:	4413      	add	r3, r2
 8005062:	681a      	ldr	r2, [r3, #0]
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	429a      	cmp	r2, r3
 800506a:	d116      	bne.n	800509a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800506c:	4a1f      	ldr	r2, [pc, #124]	@ (80050ec <chk_lock+0xb4>)
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	011b      	lsls	r3, r3, #4
 8005072:	4413      	add	r3, r2
 8005074:	3304      	adds	r3, #4
 8005076:	681a      	ldr	r2, [r3, #0]
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800507c:	429a      	cmp	r2, r3
 800507e:	d10c      	bne.n	800509a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005080:	4a1a      	ldr	r2, [pc, #104]	@ (80050ec <chk_lock+0xb4>)
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	011b      	lsls	r3, r3, #4
 8005086:	4413      	add	r3, r2
 8005088:	3308      	adds	r3, #8
 800508a:	681a      	ldr	r2, [r3, #0]
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8005090:	429a      	cmp	r2, r3
 8005092:	d102      	bne.n	800509a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005094:	e007      	b.n	80050a6 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8005096:	2301      	movs	r3, #1
 8005098:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	3301      	adds	r3, #1
 800509e:	60fb      	str	r3, [r7, #12]
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	2b01      	cmp	r3, #1
 80050a4:	d9d2      	bls.n	800504c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	2b02      	cmp	r3, #2
 80050aa:	d109      	bne.n	80050c0 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80050ac:	68bb      	ldr	r3, [r7, #8]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d102      	bne.n	80050b8 <chk_lock+0x80>
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	2b02      	cmp	r3, #2
 80050b6:	d101      	bne.n	80050bc <chk_lock+0x84>
 80050b8:	2300      	movs	r3, #0
 80050ba:	e010      	b.n	80050de <chk_lock+0xa6>
 80050bc:	2312      	movs	r3, #18
 80050be:	e00e      	b.n	80050de <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d108      	bne.n	80050d8 <chk_lock+0xa0>
 80050c6:	4a09      	ldr	r2, [pc, #36]	@ (80050ec <chk_lock+0xb4>)
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	011b      	lsls	r3, r3, #4
 80050cc:	4413      	add	r3, r2
 80050ce:	330c      	adds	r3, #12
 80050d0:	881b      	ldrh	r3, [r3, #0]
 80050d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80050d6:	d101      	bne.n	80050dc <chk_lock+0xa4>
 80050d8:	2310      	movs	r3, #16
 80050da:	e000      	b.n	80050de <chk_lock+0xa6>
 80050dc:	2300      	movs	r3, #0
}
 80050de:	4618      	mov	r0, r3
 80050e0:	3714      	adds	r7, #20
 80050e2:	46bd      	mov	sp, r7
 80050e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e8:	4770      	bx	lr
 80050ea:	bf00      	nop
 80050ec:	200001e8 	.word	0x200001e8

080050f0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80050f0:	b480      	push	{r7}
 80050f2:	b083      	sub	sp, #12
 80050f4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80050f6:	2300      	movs	r3, #0
 80050f8:	607b      	str	r3, [r7, #4]
 80050fa:	e002      	b.n	8005102 <enq_lock+0x12>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	3301      	adds	r3, #1
 8005100:	607b      	str	r3, [r7, #4]
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2b01      	cmp	r3, #1
 8005106:	d806      	bhi.n	8005116 <enq_lock+0x26>
 8005108:	4a09      	ldr	r2, [pc, #36]	@ (8005130 <enq_lock+0x40>)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	011b      	lsls	r3, r3, #4
 800510e:	4413      	add	r3, r2
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d1f2      	bne.n	80050fc <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2b02      	cmp	r3, #2
 800511a:	bf14      	ite	ne
 800511c:	2301      	movne	r3, #1
 800511e:	2300      	moveq	r3, #0
 8005120:	b2db      	uxtb	r3, r3
}
 8005122:	4618      	mov	r0, r3
 8005124:	370c      	adds	r7, #12
 8005126:	46bd      	mov	sp, r7
 8005128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512c:	4770      	bx	lr
 800512e:	bf00      	nop
 8005130:	200001e8 	.word	0x200001e8

08005134 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005134:	b480      	push	{r7}
 8005136:	b085      	sub	sp, #20
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
 800513c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800513e:	2300      	movs	r3, #0
 8005140:	60fb      	str	r3, [r7, #12]
 8005142:	e01f      	b.n	8005184 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8005144:	4a41      	ldr	r2, [pc, #260]	@ (800524c <inc_lock+0x118>)
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	011b      	lsls	r3, r3, #4
 800514a:	4413      	add	r3, r2
 800514c:	681a      	ldr	r2, [r3, #0]
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	429a      	cmp	r2, r3
 8005154:	d113      	bne.n	800517e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8005156:	4a3d      	ldr	r2, [pc, #244]	@ (800524c <inc_lock+0x118>)
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	011b      	lsls	r3, r3, #4
 800515c:	4413      	add	r3, r2
 800515e:	3304      	adds	r3, #4
 8005160:	681a      	ldr	r2, [r3, #0]
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8005166:	429a      	cmp	r2, r3
 8005168:	d109      	bne.n	800517e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800516a:	4a38      	ldr	r2, [pc, #224]	@ (800524c <inc_lock+0x118>)
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	011b      	lsls	r3, r3, #4
 8005170:	4413      	add	r3, r2
 8005172:	3308      	adds	r3, #8
 8005174:	681a      	ldr	r2, [r3, #0]
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800517a:	429a      	cmp	r2, r3
 800517c:	d006      	beq.n	800518c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	3301      	adds	r3, #1
 8005182:	60fb      	str	r3, [r7, #12]
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	2b01      	cmp	r3, #1
 8005188:	d9dc      	bls.n	8005144 <inc_lock+0x10>
 800518a:	e000      	b.n	800518e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800518c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	2b02      	cmp	r3, #2
 8005192:	d132      	bne.n	80051fa <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005194:	2300      	movs	r3, #0
 8005196:	60fb      	str	r3, [r7, #12]
 8005198:	e002      	b.n	80051a0 <inc_lock+0x6c>
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	3301      	adds	r3, #1
 800519e:	60fb      	str	r3, [r7, #12]
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	2b01      	cmp	r3, #1
 80051a4:	d806      	bhi.n	80051b4 <inc_lock+0x80>
 80051a6:	4a29      	ldr	r2, [pc, #164]	@ (800524c <inc_lock+0x118>)
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	011b      	lsls	r3, r3, #4
 80051ac:	4413      	add	r3, r2
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d1f2      	bne.n	800519a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	2b02      	cmp	r3, #2
 80051b8:	d101      	bne.n	80051be <inc_lock+0x8a>
 80051ba:	2300      	movs	r3, #0
 80051bc:	e040      	b.n	8005240 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681a      	ldr	r2, [r3, #0]
 80051c2:	4922      	ldr	r1, [pc, #136]	@ (800524c <inc_lock+0x118>)
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	011b      	lsls	r3, r3, #4
 80051c8:	440b      	add	r3, r1
 80051ca:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	689a      	ldr	r2, [r3, #8]
 80051d0:	491e      	ldr	r1, [pc, #120]	@ (800524c <inc_lock+0x118>)
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	011b      	lsls	r3, r3, #4
 80051d6:	440b      	add	r3, r1
 80051d8:	3304      	adds	r3, #4
 80051da:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	695a      	ldr	r2, [r3, #20]
 80051e0:	491a      	ldr	r1, [pc, #104]	@ (800524c <inc_lock+0x118>)
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	011b      	lsls	r3, r3, #4
 80051e6:	440b      	add	r3, r1
 80051e8:	3308      	adds	r3, #8
 80051ea:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80051ec:	4a17      	ldr	r2, [pc, #92]	@ (800524c <inc_lock+0x118>)
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	011b      	lsls	r3, r3, #4
 80051f2:	4413      	add	r3, r2
 80051f4:	330c      	adds	r3, #12
 80051f6:	2200      	movs	r2, #0
 80051f8:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d009      	beq.n	8005214 <inc_lock+0xe0>
 8005200:	4a12      	ldr	r2, [pc, #72]	@ (800524c <inc_lock+0x118>)
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	011b      	lsls	r3, r3, #4
 8005206:	4413      	add	r3, r2
 8005208:	330c      	adds	r3, #12
 800520a:	881b      	ldrh	r3, [r3, #0]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d001      	beq.n	8005214 <inc_lock+0xe0>
 8005210:	2300      	movs	r3, #0
 8005212:	e015      	b.n	8005240 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d108      	bne.n	800522c <inc_lock+0xf8>
 800521a:	4a0c      	ldr	r2, [pc, #48]	@ (800524c <inc_lock+0x118>)
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	011b      	lsls	r3, r3, #4
 8005220:	4413      	add	r3, r2
 8005222:	330c      	adds	r3, #12
 8005224:	881b      	ldrh	r3, [r3, #0]
 8005226:	3301      	adds	r3, #1
 8005228:	b29a      	uxth	r2, r3
 800522a:	e001      	b.n	8005230 <inc_lock+0xfc>
 800522c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005230:	4906      	ldr	r1, [pc, #24]	@ (800524c <inc_lock+0x118>)
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	011b      	lsls	r3, r3, #4
 8005236:	440b      	add	r3, r1
 8005238:	330c      	adds	r3, #12
 800523a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	3301      	adds	r3, #1
}
 8005240:	4618      	mov	r0, r3
 8005242:	3714      	adds	r7, #20
 8005244:	46bd      	mov	sp, r7
 8005246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524a:	4770      	bx	lr
 800524c:	200001e8 	.word	0x200001e8

08005250 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8005250:	b480      	push	{r7}
 8005252:	b085      	sub	sp, #20
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	3b01      	subs	r3, #1
 800525c:	607b      	str	r3, [r7, #4]
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2b01      	cmp	r3, #1
 8005262:	d825      	bhi.n	80052b0 <dec_lock+0x60>
		n = Files[i].ctr;
 8005264:	4a17      	ldr	r2, [pc, #92]	@ (80052c4 <dec_lock+0x74>)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	011b      	lsls	r3, r3, #4
 800526a:	4413      	add	r3, r2
 800526c:	330c      	adds	r3, #12
 800526e:	881b      	ldrh	r3, [r3, #0]
 8005270:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8005272:	89fb      	ldrh	r3, [r7, #14]
 8005274:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005278:	d101      	bne.n	800527e <dec_lock+0x2e>
 800527a:	2300      	movs	r3, #0
 800527c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800527e:	89fb      	ldrh	r3, [r7, #14]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d002      	beq.n	800528a <dec_lock+0x3a>
 8005284:	89fb      	ldrh	r3, [r7, #14]
 8005286:	3b01      	subs	r3, #1
 8005288:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800528a:	4a0e      	ldr	r2, [pc, #56]	@ (80052c4 <dec_lock+0x74>)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	011b      	lsls	r3, r3, #4
 8005290:	4413      	add	r3, r2
 8005292:	330c      	adds	r3, #12
 8005294:	89fa      	ldrh	r2, [r7, #14]
 8005296:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8005298:	89fb      	ldrh	r3, [r7, #14]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d105      	bne.n	80052aa <dec_lock+0x5a>
 800529e:	4a09      	ldr	r2, [pc, #36]	@ (80052c4 <dec_lock+0x74>)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	011b      	lsls	r3, r3, #4
 80052a4:	4413      	add	r3, r2
 80052a6:	2200      	movs	r2, #0
 80052a8:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80052aa:	2300      	movs	r3, #0
 80052ac:	737b      	strb	r3, [r7, #13]
 80052ae:	e001      	b.n	80052b4 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80052b0:	2302      	movs	r3, #2
 80052b2:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80052b4:	7b7b      	ldrb	r3, [r7, #13]
}
 80052b6:	4618      	mov	r0, r3
 80052b8:	3714      	adds	r7, #20
 80052ba:	46bd      	mov	sp, r7
 80052bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c0:	4770      	bx	lr
 80052c2:	bf00      	nop
 80052c4:	200001e8 	.word	0x200001e8

080052c8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80052c8:	b480      	push	{r7}
 80052ca:	b085      	sub	sp, #20
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80052d0:	2300      	movs	r3, #0
 80052d2:	60fb      	str	r3, [r7, #12]
 80052d4:	e010      	b.n	80052f8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80052d6:	4a0d      	ldr	r2, [pc, #52]	@ (800530c <clear_lock+0x44>)
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	011b      	lsls	r3, r3, #4
 80052dc:	4413      	add	r3, r2
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	687a      	ldr	r2, [r7, #4]
 80052e2:	429a      	cmp	r2, r3
 80052e4:	d105      	bne.n	80052f2 <clear_lock+0x2a>
 80052e6:	4a09      	ldr	r2, [pc, #36]	@ (800530c <clear_lock+0x44>)
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	011b      	lsls	r3, r3, #4
 80052ec:	4413      	add	r3, r2
 80052ee:	2200      	movs	r2, #0
 80052f0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	3301      	adds	r3, #1
 80052f6:	60fb      	str	r3, [r7, #12]
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	2b01      	cmp	r3, #1
 80052fc:	d9eb      	bls.n	80052d6 <clear_lock+0xe>
	}
}
 80052fe:	bf00      	nop
 8005300:	bf00      	nop
 8005302:	3714      	adds	r7, #20
 8005304:	46bd      	mov	sp, r7
 8005306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530a:	4770      	bx	lr
 800530c:	200001e8 	.word	0x200001e8

08005310 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b086      	sub	sp, #24
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8005318:	2300      	movs	r3, #0
 800531a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	78db      	ldrb	r3, [r3, #3]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d034      	beq.n	800538e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005328:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	7858      	ldrb	r0, [r3, #1]
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8005334:	2301      	movs	r3, #1
 8005336:	697a      	ldr	r2, [r7, #20]
 8005338:	f7ff fd40 	bl	8004dbc <disk_write>
 800533c:	4603      	mov	r3, r0
 800533e:	2b00      	cmp	r3, #0
 8005340:	d002      	beq.n	8005348 <sync_window+0x38>
			res = FR_DISK_ERR;
 8005342:	2301      	movs	r3, #1
 8005344:	73fb      	strb	r3, [r7, #15]
 8005346:	e022      	b.n	800538e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2200      	movs	r2, #0
 800534c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005352:	697a      	ldr	r2, [r7, #20]
 8005354:	1ad2      	subs	r2, r2, r3
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6a1b      	ldr	r3, [r3, #32]
 800535a:	429a      	cmp	r2, r3
 800535c:	d217      	bcs.n	800538e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	789b      	ldrb	r3, [r3, #2]
 8005362:	613b      	str	r3, [r7, #16]
 8005364:	e010      	b.n	8005388 <sync_window+0x78>
					wsect += fs->fsize;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6a1b      	ldr	r3, [r3, #32]
 800536a:	697a      	ldr	r2, [r7, #20]
 800536c:	4413      	add	r3, r2
 800536e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	7858      	ldrb	r0, [r3, #1]
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800537a:	2301      	movs	r3, #1
 800537c:	697a      	ldr	r2, [r7, #20]
 800537e:	f7ff fd1d 	bl	8004dbc <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005382:	693b      	ldr	r3, [r7, #16]
 8005384:	3b01      	subs	r3, #1
 8005386:	613b      	str	r3, [r7, #16]
 8005388:	693b      	ldr	r3, [r7, #16]
 800538a:	2b01      	cmp	r3, #1
 800538c:	d8eb      	bhi.n	8005366 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800538e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005390:	4618      	mov	r0, r3
 8005392:	3718      	adds	r7, #24
 8005394:	46bd      	mov	sp, r7
 8005396:	bd80      	pop	{r7, pc}

08005398 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b084      	sub	sp, #16
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
 80053a0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80053a2:	2300      	movs	r3, #0
 80053a4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053aa:	683a      	ldr	r2, [r7, #0]
 80053ac:	429a      	cmp	r2, r3
 80053ae:	d01b      	beq.n	80053e8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80053b0:	6878      	ldr	r0, [r7, #4]
 80053b2:	f7ff ffad 	bl	8005310 <sync_window>
 80053b6:	4603      	mov	r3, r0
 80053b8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80053ba:	7bfb      	ldrb	r3, [r7, #15]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d113      	bne.n	80053e8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	7858      	ldrb	r0, [r3, #1]
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80053ca:	2301      	movs	r3, #1
 80053cc:	683a      	ldr	r2, [r7, #0]
 80053ce:	f7ff fcd5 	bl	8004d7c <disk_read>
 80053d2:	4603      	mov	r3, r0
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d004      	beq.n	80053e2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80053d8:	f04f 33ff 	mov.w	r3, #4294967295
 80053dc:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80053de:	2301      	movs	r3, #1
 80053e0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	683a      	ldr	r2, [r7, #0]
 80053e6:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 80053e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80053ea:	4618      	mov	r0, r3
 80053ec:	3710      	adds	r7, #16
 80053ee:	46bd      	mov	sp, r7
 80053f0:	bd80      	pop	{r7, pc}
	...

080053f4 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b084      	sub	sp, #16
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80053fc:	6878      	ldr	r0, [r7, #4]
 80053fe:	f7ff ff87 	bl	8005310 <sync_window>
 8005402:	4603      	mov	r3, r0
 8005404:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8005406:	7bfb      	ldrb	r3, [r7, #15]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d159      	bne.n	80054c0 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	781b      	ldrb	r3, [r3, #0]
 8005410:	2b03      	cmp	r3, #3
 8005412:	d149      	bne.n	80054a8 <sync_fs+0xb4>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	791b      	ldrb	r3, [r3, #4]
 8005418:	2b01      	cmp	r3, #1
 800541a:	d145      	bne.n	80054a8 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	899b      	ldrh	r3, [r3, #12]
 8005426:	461a      	mov	r2, r3
 8005428:	2100      	movs	r1, #0
 800542a:	f7ff fda8 	bl	8004f7e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	3338      	adds	r3, #56	@ 0x38
 8005432:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8005436:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800543a:	4618      	mov	r0, r3
 800543c:	f7ff fd37 	bl	8004eae <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	3338      	adds	r3, #56	@ 0x38
 8005444:	4921      	ldr	r1, [pc, #132]	@ (80054cc <sync_fs+0xd8>)
 8005446:	4618      	mov	r0, r3
 8005448:	f7ff fd4c 	bl	8004ee4 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	3338      	adds	r3, #56	@ 0x38
 8005450:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8005454:	491e      	ldr	r1, [pc, #120]	@ (80054d0 <sync_fs+0xdc>)
 8005456:	4618      	mov	r0, r3
 8005458:	f7ff fd44 	bl	8004ee4 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	3338      	adds	r3, #56	@ 0x38
 8005460:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	699b      	ldr	r3, [r3, #24]
 8005468:	4619      	mov	r1, r3
 800546a:	4610      	mov	r0, r2
 800546c:	f7ff fd3a 	bl	8004ee4 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	3338      	adds	r3, #56	@ 0x38
 8005474:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	695b      	ldr	r3, [r3, #20]
 800547c:	4619      	mov	r1, r3
 800547e:	4610      	mov	r0, r2
 8005480:	f7ff fd30 	bl	8004ee4 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005488:	1c5a      	adds	r2, r3, #1
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	635a      	str	r2, [r3, #52]	@ 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	7858      	ldrb	r0, [r3, #1]
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800549c:	2301      	movs	r3, #1
 800549e:	f7ff fc8d 	bl	8004dbc <disk_write>
			fs->fsi_flag = 0;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2200      	movs	r2, #0
 80054a6:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	785b      	ldrb	r3, [r3, #1]
 80054ac:	2200      	movs	r2, #0
 80054ae:	2100      	movs	r1, #0
 80054b0:	4618      	mov	r0, r3
 80054b2:	f7ff fca3 	bl	8004dfc <disk_ioctl>
 80054b6:	4603      	mov	r3, r0
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d001      	beq.n	80054c0 <sync_fs+0xcc>
 80054bc:	2301      	movs	r3, #1
 80054be:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80054c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80054c2:	4618      	mov	r0, r3
 80054c4:	3710      	adds	r7, #16
 80054c6:	46bd      	mov	sp, r7
 80054c8:	bd80      	pop	{r7, pc}
 80054ca:	bf00      	nop
 80054cc:	41615252 	.word	0x41615252
 80054d0:	61417272 	.word	0x61417272

080054d4 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80054d4:	b480      	push	{r7}
 80054d6:	b083      	sub	sp, #12
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
 80054dc:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	3b02      	subs	r3, #2
 80054e2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	69db      	ldr	r3, [r3, #28]
 80054e8:	3b02      	subs	r3, #2
 80054ea:	683a      	ldr	r2, [r7, #0]
 80054ec:	429a      	cmp	r2, r3
 80054ee:	d301      	bcc.n	80054f4 <clust2sect+0x20>
 80054f0:	2300      	movs	r3, #0
 80054f2:	e008      	b.n	8005506 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	895b      	ldrh	r3, [r3, #10]
 80054f8:	461a      	mov	r2, r3
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	fb03 f202 	mul.w	r2, r3, r2
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005504:	4413      	add	r3, r2
}
 8005506:	4618      	mov	r0, r3
 8005508:	370c      	adds	r7, #12
 800550a:	46bd      	mov	sp, r7
 800550c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005510:	4770      	bx	lr

08005512 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8005512:	b580      	push	{r7, lr}
 8005514:	b086      	sub	sp, #24
 8005516:	af00      	add	r7, sp, #0
 8005518:	6078      	str	r0, [r7, #4]
 800551a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	2b01      	cmp	r3, #1
 8005526:	d904      	bls.n	8005532 <get_fat+0x20>
 8005528:	693b      	ldr	r3, [r7, #16]
 800552a:	69db      	ldr	r3, [r3, #28]
 800552c:	683a      	ldr	r2, [r7, #0]
 800552e:	429a      	cmp	r2, r3
 8005530:	d302      	bcc.n	8005538 <get_fat+0x26>
		val = 1;	/* Internal error */
 8005532:	2301      	movs	r3, #1
 8005534:	617b      	str	r3, [r7, #20]
 8005536:	e0ba      	b.n	80056ae <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8005538:	f04f 33ff 	mov.w	r3, #4294967295
 800553c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800553e:	693b      	ldr	r3, [r7, #16]
 8005540:	781b      	ldrb	r3, [r3, #0]
 8005542:	2b03      	cmp	r3, #3
 8005544:	f000 8082 	beq.w	800564c <get_fat+0x13a>
 8005548:	2b03      	cmp	r3, #3
 800554a:	f300 80a6 	bgt.w	800569a <get_fat+0x188>
 800554e:	2b01      	cmp	r3, #1
 8005550:	d002      	beq.n	8005558 <get_fat+0x46>
 8005552:	2b02      	cmp	r3, #2
 8005554:	d055      	beq.n	8005602 <get_fat+0xf0>
 8005556:	e0a0      	b.n	800569a <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	60fb      	str	r3, [r7, #12]
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	085b      	lsrs	r3, r3, #1
 8005560:	68fa      	ldr	r2, [r7, #12]
 8005562:	4413      	add	r3, r2
 8005564:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005566:	693b      	ldr	r3, [r7, #16]
 8005568:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800556a:	693b      	ldr	r3, [r7, #16]
 800556c:	899b      	ldrh	r3, [r3, #12]
 800556e:	4619      	mov	r1, r3
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	fbb3 f3f1 	udiv	r3, r3, r1
 8005576:	4413      	add	r3, r2
 8005578:	4619      	mov	r1, r3
 800557a:	6938      	ldr	r0, [r7, #16]
 800557c:	f7ff ff0c 	bl	8005398 <move_window>
 8005580:	4603      	mov	r3, r0
 8005582:	2b00      	cmp	r3, #0
 8005584:	f040 808c 	bne.w	80056a0 <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	1c5a      	adds	r2, r3, #1
 800558c:	60fa      	str	r2, [r7, #12]
 800558e:	693a      	ldr	r2, [r7, #16]
 8005590:	8992      	ldrh	r2, [r2, #12]
 8005592:	fbb3 f1f2 	udiv	r1, r3, r2
 8005596:	fb01 f202 	mul.w	r2, r1, r2
 800559a:	1a9b      	subs	r3, r3, r2
 800559c:	693a      	ldr	r2, [r7, #16]
 800559e:	4413      	add	r3, r2
 80055a0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80055a4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80055a6:	693b      	ldr	r3, [r7, #16]
 80055a8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80055aa:	693b      	ldr	r3, [r7, #16]
 80055ac:	899b      	ldrh	r3, [r3, #12]
 80055ae:	4619      	mov	r1, r3
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80055b6:	4413      	add	r3, r2
 80055b8:	4619      	mov	r1, r3
 80055ba:	6938      	ldr	r0, [r7, #16]
 80055bc:	f7ff feec 	bl	8005398 <move_window>
 80055c0:	4603      	mov	r3, r0
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d16e      	bne.n	80056a4 <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 80055c6:	693b      	ldr	r3, [r7, #16]
 80055c8:	899b      	ldrh	r3, [r3, #12]
 80055ca:	461a      	mov	r2, r3
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	fbb3 f1f2 	udiv	r1, r3, r2
 80055d2:	fb01 f202 	mul.w	r2, r1, r2
 80055d6:	1a9b      	subs	r3, r3, r2
 80055d8:	693a      	ldr	r2, [r7, #16]
 80055da:	4413      	add	r3, r2
 80055dc:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80055e0:	021b      	lsls	r3, r3, #8
 80055e2:	68ba      	ldr	r2, [r7, #8]
 80055e4:	4313      	orrs	r3, r2
 80055e6:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	f003 0301 	and.w	r3, r3, #1
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d002      	beq.n	80055f8 <get_fat+0xe6>
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	091b      	lsrs	r3, r3, #4
 80055f6:	e002      	b.n	80055fe <get_fat+0xec>
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80055fe:	617b      	str	r3, [r7, #20]
			break;
 8005600:	e055      	b.n	80056ae <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005602:	693b      	ldr	r3, [r7, #16]
 8005604:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005606:	693b      	ldr	r3, [r7, #16]
 8005608:	899b      	ldrh	r3, [r3, #12]
 800560a:	085b      	lsrs	r3, r3, #1
 800560c:	b29b      	uxth	r3, r3
 800560e:	4619      	mov	r1, r3
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	fbb3 f3f1 	udiv	r3, r3, r1
 8005616:	4413      	add	r3, r2
 8005618:	4619      	mov	r1, r3
 800561a:	6938      	ldr	r0, [r7, #16]
 800561c:	f7ff febc 	bl	8005398 <move_window>
 8005620:	4603      	mov	r3, r0
 8005622:	2b00      	cmp	r3, #0
 8005624:	d140      	bne.n	80056a8 <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8005626:	693b      	ldr	r3, [r7, #16]
 8005628:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	005b      	lsls	r3, r3, #1
 8005630:	693a      	ldr	r2, [r7, #16]
 8005632:	8992      	ldrh	r2, [r2, #12]
 8005634:	fbb3 f0f2 	udiv	r0, r3, r2
 8005638:	fb00 f202 	mul.w	r2, r0, r2
 800563c:	1a9b      	subs	r3, r3, r2
 800563e:	440b      	add	r3, r1
 8005640:	4618      	mov	r0, r3
 8005642:	f7ff fbf9 	bl	8004e38 <ld_word>
 8005646:	4603      	mov	r3, r0
 8005648:	617b      	str	r3, [r7, #20]
			break;
 800564a:	e030      	b.n	80056ae <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800564c:	693b      	ldr	r3, [r7, #16]
 800564e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005650:	693b      	ldr	r3, [r7, #16]
 8005652:	899b      	ldrh	r3, [r3, #12]
 8005654:	089b      	lsrs	r3, r3, #2
 8005656:	b29b      	uxth	r3, r3
 8005658:	4619      	mov	r1, r3
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	fbb3 f3f1 	udiv	r3, r3, r1
 8005660:	4413      	add	r3, r2
 8005662:	4619      	mov	r1, r3
 8005664:	6938      	ldr	r0, [r7, #16]
 8005666:	f7ff fe97 	bl	8005398 <move_window>
 800566a:	4603      	mov	r3, r0
 800566c:	2b00      	cmp	r3, #0
 800566e:	d11d      	bne.n	80056ac <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8005670:	693b      	ldr	r3, [r7, #16]
 8005672:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	009b      	lsls	r3, r3, #2
 800567a:	693a      	ldr	r2, [r7, #16]
 800567c:	8992      	ldrh	r2, [r2, #12]
 800567e:	fbb3 f0f2 	udiv	r0, r3, r2
 8005682:	fb00 f202 	mul.w	r2, r0, r2
 8005686:	1a9b      	subs	r3, r3, r2
 8005688:	440b      	add	r3, r1
 800568a:	4618      	mov	r0, r3
 800568c:	f7ff fbec 	bl	8004e68 <ld_dword>
 8005690:	4603      	mov	r3, r0
 8005692:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8005696:	617b      	str	r3, [r7, #20]
			break;
 8005698:	e009      	b.n	80056ae <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800569a:	2301      	movs	r3, #1
 800569c:	617b      	str	r3, [r7, #20]
 800569e:	e006      	b.n	80056ae <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80056a0:	bf00      	nop
 80056a2:	e004      	b.n	80056ae <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80056a4:	bf00      	nop
 80056a6:	e002      	b.n	80056ae <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80056a8:	bf00      	nop
 80056aa:	e000      	b.n	80056ae <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80056ac:	bf00      	nop
		}
	}

	return val;
 80056ae:	697b      	ldr	r3, [r7, #20]
}
 80056b0:	4618      	mov	r0, r3
 80056b2:	3718      	adds	r7, #24
 80056b4:	46bd      	mov	sp, r7
 80056b6:	bd80      	pop	{r7, pc}

080056b8 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80056b8:	b590      	push	{r4, r7, lr}
 80056ba:	b089      	sub	sp, #36	@ 0x24
 80056bc:	af00      	add	r7, sp, #0
 80056be:	60f8      	str	r0, [r7, #12]
 80056c0:	60b9      	str	r1, [r7, #8]
 80056c2:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80056c4:	2302      	movs	r3, #2
 80056c6:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80056c8:	68bb      	ldr	r3, [r7, #8]
 80056ca:	2b01      	cmp	r3, #1
 80056cc:	f240 8109 	bls.w	80058e2 <put_fat+0x22a>
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	69db      	ldr	r3, [r3, #28]
 80056d4:	68ba      	ldr	r2, [r7, #8]
 80056d6:	429a      	cmp	r2, r3
 80056d8:	f080 8103 	bcs.w	80058e2 <put_fat+0x22a>
		switch (fs->fs_type) {
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	781b      	ldrb	r3, [r3, #0]
 80056e0:	2b03      	cmp	r3, #3
 80056e2:	f000 80b6 	beq.w	8005852 <put_fat+0x19a>
 80056e6:	2b03      	cmp	r3, #3
 80056e8:	f300 80fb 	bgt.w	80058e2 <put_fat+0x22a>
 80056ec:	2b01      	cmp	r3, #1
 80056ee:	d003      	beq.n	80056f8 <put_fat+0x40>
 80056f0:	2b02      	cmp	r3, #2
 80056f2:	f000 8083 	beq.w	80057fc <put_fat+0x144>
 80056f6:	e0f4      	b.n	80058e2 <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	61bb      	str	r3, [r7, #24]
 80056fc:	69bb      	ldr	r3, [r7, #24]
 80056fe:	085b      	lsrs	r3, r3, #1
 8005700:	69ba      	ldr	r2, [r7, #24]
 8005702:	4413      	add	r3, r2
 8005704:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	899b      	ldrh	r3, [r3, #12]
 800570e:	4619      	mov	r1, r3
 8005710:	69bb      	ldr	r3, [r7, #24]
 8005712:	fbb3 f3f1 	udiv	r3, r3, r1
 8005716:	4413      	add	r3, r2
 8005718:	4619      	mov	r1, r3
 800571a:	68f8      	ldr	r0, [r7, #12]
 800571c:	f7ff fe3c 	bl	8005398 <move_window>
 8005720:	4603      	mov	r3, r0
 8005722:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005724:	7ffb      	ldrb	r3, [r7, #31]
 8005726:	2b00      	cmp	r3, #0
 8005728:	f040 80d4 	bne.w	80058d4 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8005732:	69bb      	ldr	r3, [r7, #24]
 8005734:	1c5a      	adds	r2, r3, #1
 8005736:	61ba      	str	r2, [r7, #24]
 8005738:	68fa      	ldr	r2, [r7, #12]
 800573a:	8992      	ldrh	r2, [r2, #12]
 800573c:	fbb3 f0f2 	udiv	r0, r3, r2
 8005740:	fb00 f202 	mul.w	r2, r0, r2
 8005744:	1a9b      	subs	r3, r3, r2
 8005746:	440b      	add	r3, r1
 8005748:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	f003 0301 	and.w	r3, r3, #1
 8005750:	2b00      	cmp	r3, #0
 8005752:	d00d      	beq.n	8005770 <put_fat+0xb8>
 8005754:	697b      	ldr	r3, [r7, #20]
 8005756:	781b      	ldrb	r3, [r3, #0]
 8005758:	b25b      	sxtb	r3, r3
 800575a:	f003 030f 	and.w	r3, r3, #15
 800575e:	b25a      	sxtb	r2, r3
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	b2db      	uxtb	r3, r3
 8005764:	011b      	lsls	r3, r3, #4
 8005766:	b25b      	sxtb	r3, r3
 8005768:	4313      	orrs	r3, r2
 800576a:	b25b      	sxtb	r3, r3
 800576c:	b2db      	uxtb	r3, r3
 800576e:	e001      	b.n	8005774 <put_fat+0xbc>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	b2db      	uxtb	r3, r3
 8005774:	697a      	ldr	r2, [r7, #20]
 8005776:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	2201      	movs	r2, #1
 800577c:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	899b      	ldrh	r3, [r3, #12]
 8005786:	4619      	mov	r1, r3
 8005788:	69bb      	ldr	r3, [r7, #24]
 800578a:	fbb3 f3f1 	udiv	r3, r3, r1
 800578e:	4413      	add	r3, r2
 8005790:	4619      	mov	r1, r3
 8005792:	68f8      	ldr	r0, [r7, #12]
 8005794:	f7ff fe00 	bl	8005398 <move_window>
 8005798:	4603      	mov	r3, r0
 800579a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800579c:	7ffb      	ldrb	r3, [r7, #31]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	f040 809a 	bne.w	80058d8 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	899b      	ldrh	r3, [r3, #12]
 80057ae:	461a      	mov	r2, r3
 80057b0:	69bb      	ldr	r3, [r7, #24]
 80057b2:	fbb3 f0f2 	udiv	r0, r3, r2
 80057b6:	fb00 f202 	mul.w	r2, r0, r2
 80057ba:	1a9b      	subs	r3, r3, r2
 80057bc:	440b      	add	r3, r1
 80057be:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80057c0:	68bb      	ldr	r3, [r7, #8]
 80057c2:	f003 0301 	and.w	r3, r3, #1
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d003      	beq.n	80057d2 <put_fat+0x11a>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	091b      	lsrs	r3, r3, #4
 80057ce:	b2db      	uxtb	r3, r3
 80057d0:	e00e      	b.n	80057f0 <put_fat+0x138>
 80057d2:	697b      	ldr	r3, [r7, #20]
 80057d4:	781b      	ldrb	r3, [r3, #0]
 80057d6:	b25b      	sxtb	r3, r3
 80057d8:	f023 030f 	bic.w	r3, r3, #15
 80057dc:	b25a      	sxtb	r2, r3
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	0a1b      	lsrs	r3, r3, #8
 80057e2:	b25b      	sxtb	r3, r3
 80057e4:	f003 030f 	and.w	r3, r3, #15
 80057e8:	b25b      	sxtb	r3, r3
 80057ea:	4313      	orrs	r3, r2
 80057ec:	b25b      	sxtb	r3, r3
 80057ee:	b2db      	uxtb	r3, r3
 80057f0:	697a      	ldr	r2, [r7, #20]
 80057f2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	2201      	movs	r2, #1
 80057f8:	70da      	strb	r2, [r3, #3]
			break;
 80057fa:	e072      	b.n	80058e2 <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	899b      	ldrh	r3, [r3, #12]
 8005804:	085b      	lsrs	r3, r3, #1
 8005806:	b29b      	uxth	r3, r3
 8005808:	4619      	mov	r1, r3
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	fbb3 f3f1 	udiv	r3, r3, r1
 8005810:	4413      	add	r3, r2
 8005812:	4619      	mov	r1, r3
 8005814:	68f8      	ldr	r0, [r7, #12]
 8005816:	f7ff fdbf 	bl	8005398 <move_window>
 800581a:	4603      	mov	r3, r0
 800581c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800581e:	7ffb      	ldrb	r3, [r7, #31]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d15b      	bne.n	80058dc <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800582a:	68bb      	ldr	r3, [r7, #8]
 800582c:	005b      	lsls	r3, r3, #1
 800582e:	68fa      	ldr	r2, [r7, #12]
 8005830:	8992      	ldrh	r2, [r2, #12]
 8005832:	fbb3 f0f2 	udiv	r0, r3, r2
 8005836:	fb00 f202 	mul.w	r2, r0, r2
 800583a:	1a9b      	subs	r3, r3, r2
 800583c:	440b      	add	r3, r1
 800583e:	687a      	ldr	r2, [r7, #4]
 8005840:	b292      	uxth	r2, r2
 8005842:	4611      	mov	r1, r2
 8005844:	4618      	mov	r0, r3
 8005846:	f7ff fb32 	bl	8004eae <st_word>
			fs->wflag = 1;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	2201      	movs	r2, #1
 800584e:	70da      	strb	r2, [r3, #3]
			break;
 8005850:	e047      	b.n	80058e2 <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	899b      	ldrh	r3, [r3, #12]
 800585a:	089b      	lsrs	r3, r3, #2
 800585c:	b29b      	uxth	r3, r3
 800585e:	4619      	mov	r1, r3
 8005860:	68bb      	ldr	r3, [r7, #8]
 8005862:	fbb3 f3f1 	udiv	r3, r3, r1
 8005866:	4413      	add	r3, r2
 8005868:	4619      	mov	r1, r3
 800586a:	68f8      	ldr	r0, [r7, #12]
 800586c:	f7ff fd94 	bl	8005398 <move_window>
 8005870:	4603      	mov	r3, r0
 8005872:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005874:	7ffb      	ldrb	r3, [r7, #31]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d132      	bne.n	80058e0 <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8005886:	68bb      	ldr	r3, [r7, #8]
 8005888:	009b      	lsls	r3, r3, #2
 800588a:	68fa      	ldr	r2, [r7, #12]
 800588c:	8992      	ldrh	r2, [r2, #12]
 800588e:	fbb3 f0f2 	udiv	r0, r3, r2
 8005892:	fb00 f202 	mul.w	r2, r0, r2
 8005896:	1a9b      	subs	r3, r3, r2
 8005898:	440b      	add	r3, r1
 800589a:	4618      	mov	r0, r3
 800589c:	f7ff fae4 	bl	8004e68 <ld_dword>
 80058a0:	4603      	mov	r3, r0
 80058a2:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80058a6:	4323      	orrs	r3, r4
 80058a8:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	009b      	lsls	r3, r3, #2
 80058b4:	68fa      	ldr	r2, [r7, #12]
 80058b6:	8992      	ldrh	r2, [r2, #12]
 80058b8:	fbb3 f0f2 	udiv	r0, r3, r2
 80058bc:	fb00 f202 	mul.w	r2, r0, r2
 80058c0:	1a9b      	subs	r3, r3, r2
 80058c2:	440b      	add	r3, r1
 80058c4:	6879      	ldr	r1, [r7, #4]
 80058c6:	4618      	mov	r0, r3
 80058c8:	f7ff fb0c 	bl	8004ee4 <st_dword>
			fs->wflag = 1;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	2201      	movs	r2, #1
 80058d0:	70da      	strb	r2, [r3, #3]
			break;
 80058d2:	e006      	b.n	80058e2 <put_fat+0x22a>
			if (res != FR_OK) break;
 80058d4:	bf00      	nop
 80058d6:	e004      	b.n	80058e2 <put_fat+0x22a>
			if (res != FR_OK) break;
 80058d8:	bf00      	nop
 80058da:	e002      	b.n	80058e2 <put_fat+0x22a>
			if (res != FR_OK) break;
 80058dc:	bf00      	nop
 80058de:	e000      	b.n	80058e2 <put_fat+0x22a>
			if (res != FR_OK) break;
 80058e0:	bf00      	nop
		}
	}
	return res;
 80058e2:	7ffb      	ldrb	r3, [r7, #31]
}
 80058e4:	4618      	mov	r0, r3
 80058e6:	3724      	adds	r7, #36	@ 0x24
 80058e8:	46bd      	mov	sp, r7
 80058ea:	bd90      	pop	{r4, r7, pc}

080058ec <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b088      	sub	sp, #32
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	60f8      	str	r0, [r7, #12]
 80058f4:	60b9      	str	r1, [r7, #8]
 80058f6:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80058f8:	2300      	movs	r3, #0
 80058fa:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8005902:	68bb      	ldr	r3, [r7, #8]
 8005904:	2b01      	cmp	r3, #1
 8005906:	d904      	bls.n	8005912 <remove_chain+0x26>
 8005908:	69bb      	ldr	r3, [r7, #24]
 800590a:	69db      	ldr	r3, [r3, #28]
 800590c:	68ba      	ldr	r2, [r7, #8]
 800590e:	429a      	cmp	r2, r3
 8005910:	d301      	bcc.n	8005916 <remove_chain+0x2a>
 8005912:	2302      	movs	r3, #2
 8005914:	e04b      	b.n	80059ae <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d00c      	beq.n	8005936 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800591c:	f04f 32ff 	mov.w	r2, #4294967295
 8005920:	6879      	ldr	r1, [r7, #4]
 8005922:	69b8      	ldr	r0, [r7, #24]
 8005924:	f7ff fec8 	bl	80056b8 <put_fat>
 8005928:	4603      	mov	r3, r0
 800592a:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800592c:	7ffb      	ldrb	r3, [r7, #31]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d001      	beq.n	8005936 <remove_chain+0x4a>
 8005932:	7ffb      	ldrb	r3, [r7, #31]
 8005934:	e03b      	b.n	80059ae <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8005936:	68b9      	ldr	r1, [r7, #8]
 8005938:	68f8      	ldr	r0, [r7, #12]
 800593a:	f7ff fdea 	bl	8005512 <get_fat>
 800593e:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8005940:	697b      	ldr	r3, [r7, #20]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d031      	beq.n	80059aa <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8005946:	697b      	ldr	r3, [r7, #20]
 8005948:	2b01      	cmp	r3, #1
 800594a:	d101      	bne.n	8005950 <remove_chain+0x64>
 800594c:	2302      	movs	r3, #2
 800594e:	e02e      	b.n	80059ae <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8005950:	697b      	ldr	r3, [r7, #20]
 8005952:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005956:	d101      	bne.n	800595c <remove_chain+0x70>
 8005958:	2301      	movs	r3, #1
 800595a:	e028      	b.n	80059ae <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800595c:	2200      	movs	r2, #0
 800595e:	68b9      	ldr	r1, [r7, #8]
 8005960:	69b8      	ldr	r0, [r7, #24]
 8005962:	f7ff fea9 	bl	80056b8 <put_fat>
 8005966:	4603      	mov	r3, r0
 8005968:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800596a:	7ffb      	ldrb	r3, [r7, #31]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d001      	beq.n	8005974 <remove_chain+0x88>
 8005970:	7ffb      	ldrb	r3, [r7, #31]
 8005972:	e01c      	b.n	80059ae <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8005974:	69bb      	ldr	r3, [r7, #24]
 8005976:	699a      	ldr	r2, [r3, #24]
 8005978:	69bb      	ldr	r3, [r7, #24]
 800597a:	69db      	ldr	r3, [r3, #28]
 800597c:	3b02      	subs	r3, #2
 800597e:	429a      	cmp	r2, r3
 8005980:	d20b      	bcs.n	800599a <remove_chain+0xae>
			fs->free_clst++;
 8005982:	69bb      	ldr	r3, [r7, #24]
 8005984:	699b      	ldr	r3, [r3, #24]
 8005986:	1c5a      	adds	r2, r3, #1
 8005988:	69bb      	ldr	r3, [r7, #24]
 800598a:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800598c:	69bb      	ldr	r3, [r7, #24]
 800598e:	791b      	ldrb	r3, [r3, #4]
 8005990:	f043 0301 	orr.w	r3, r3, #1
 8005994:	b2da      	uxtb	r2, r3
 8005996:	69bb      	ldr	r3, [r7, #24]
 8005998:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800599a:	697b      	ldr	r3, [r7, #20]
 800599c:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800599e:	69bb      	ldr	r3, [r7, #24]
 80059a0:	69db      	ldr	r3, [r3, #28]
 80059a2:	68ba      	ldr	r2, [r7, #8]
 80059a4:	429a      	cmp	r2, r3
 80059a6:	d3c6      	bcc.n	8005936 <remove_chain+0x4a>
 80059a8:	e000      	b.n	80059ac <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80059aa:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80059ac:	2300      	movs	r3, #0
}
 80059ae:	4618      	mov	r0, r3
 80059b0:	3720      	adds	r7, #32
 80059b2:	46bd      	mov	sp, r7
 80059b4:	bd80      	pop	{r7, pc}

080059b6 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80059b6:	b580      	push	{r7, lr}
 80059b8:	b088      	sub	sp, #32
 80059ba:	af00      	add	r7, sp, #0
 80059bc:	6078      	str	r0, [r7, #4]
 80059be:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d10d      	bne.n	80059e8 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80059cc:	693b      	ldr	r3, [r7, #16]
 80059ce:	695b      	ldr	r3, [r3, #20]
 80059d0:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80059d2:	69bb      	ldr	r3, [r7, #24]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d004      	beq.n	80059e2 <create_chain+0x2c>
 80059d8:	693b      	ldr	r3, [r7, #16]
 80059da:	69db      	ldr	r3, [r3, #28]
 80059dc:	69ba      	ldr	r2, [r7, #24]
 80059de:	429a      	cmp	r2, r3
 80059e0:	d31b      	bcc.n	8005a1a <create_chain+0x64>
 80059e2:	2301      	movs	r3, #1
 80059e4:	61bb      	str	r3, [r7, #24]
 80059e6:	e018      	b.n	8005a1a <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80059e8:	6839      	ldr	r1, [r7, #0]
 80059ea:	6878      	ldr	r0, [r7, #4]
 80059ec:	f7ff fd91 	bl	8005512 <get_fat>
 80059f0:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	2b01      	cmp	r3, #1
 80059f6:	d801      	bhi.n	80059fc <create_chain+0x46>
 80059f8:	2301      	movs	r3, #1
 80059fa:	e070      	b.n	8005ade <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a02:	d101      	bne.n	8005a08 <create_chain+0x52>
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	e06a      	b.n	8005ade <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8005a08:	693b      	ldr	r3, [r7, #16]
 8005a0a:	69db      	ldr	r3, [r3, #28]
 8005a0c:	68fa      	ldr	r2, [r7, #12]
 8005a0e:	429a      	cmp	r2, r3
 8005a10:	d201      	bcs.n	8005a16 <create_chain+0x60>
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	e063      	b.n	8005ade <create_chain+0x128>
		scl = clst;
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8005a1a:	69bb      	ldr	r3, [r7, #24]
 8005a1c:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8005a1e:	69fb      	ldr	r3, [r7, #28]
 8005a20:	3301      	adds	r3, #1
 8005a22:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8005a24:	693b      	ldr	r3, [r7, #16]
 8005a26:	69db      	ldr	r3, [r3, #28]
 8005a28:	69fa      	ldr	r2, [r7, #28]
 8005a2a:	429a      	cmp	r2, r3
 8005a2c:	d307      	bcc.n	8005a3e <create_chain+0x88>
				ncl = 2;
 8005a2e:	2302      	movs	r3, #2
 8005a30:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8005a32:	69fa      	ldr	r2, [r7, #28]
 8005a34:	69bb      	ldr	r3, [r7, #24]
 8005a36:	429a      	cmp	r2, r3
 8005a38:	d901      	bls.n	8005a3e <create_chain+0x88>
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	e04f      	b.n	8005ade <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8005a3e:	69f9      	ldr	r1, [r7, #28]
 8005a40:	6878      	ldr	r0, [r7, #4]
 8005a42:	f7ff fd66 	bl	8005512 <get_fat>
 8005a46:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d00e      	beq.n	8005a6c <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	2b01      	cmp	r3, #1
 8005a52:	d003      	beq.n	8005a5c <create_chain+0xa6>
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a5a:	d101      	bne.n	8005a60 <create_chain+0xaa>
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	e03e      	b.n	8005ade <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8005a60:	69fa      	ldr	r2, [r7, #28]
 8005a62:	69bb      	ldr	r3, [r7, #24]
 8005a64:	429a      	cmp	r2, r3
 8005a66:	d1da      	bne.n	8005a1e <create_chain+0x68>
 8005a68:	2300      	movs	r3, #0
 8005a6a:	e038      	b.n	8005ade <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8005a6c:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8005a6e:	f04f 32ff 	mov.w	r2, #4294967295
 8005a72:	69f9      	ldr	r1, [r7, #28]
 8005a74:	6938      	ldr	r0, [r7, #16]
 8005a76:	f7ff fe1f 	bl	80056b8 <put_fat>
 8005a7a:	4603      	mov	r3, r0
 8005a7c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8005a7e:	7dfb      	ldrb	r3, [r7, #23]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d109      	bne.n	8005a98 <create_chain+0xe2>
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d006      	beq.n	8005a98 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8005a8a:	69fa      	ldr	r2, [r7, #28]
 8005a8c:	6839      	ldr	r1, [r7, #0]
 8005a8e:	6938      	ldr	r0, [r7, #16]
 8005a90:	f7ff fe12 	bl	80056b8 <put_fat>
 8005a94:	4603      	mov	r3, r0
 8005a96:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8005a98:	7dfb      	ldrb	r3, [r7, #23]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d116      	bne.n	8005acc <create_chain+0x116>
		fs->last_clst = ncl;
 8005a9e:	693b      	ldr	r3, [r7, #16]
 8005aa0:	69fa      	ldr	r2, [r7, #28]
 8005aa2:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8005aa4:	693b      	ldr	r3, [r7, #16]
 8005aa6:	699a      	ldr	r2, [r3, #24]
 8005aa8:	693b      	ldr	r3, [r7, #16]
 8005aaa:	69db      	ldr	r3, [r3, #28]
 8005aac:	3b02      	subs	r3, #2
 8005aae:	429a      	cmp	r2, r3
 8005ab0:	d804      	bhi.n	8005abc <create_chain+0x106>
 8005ab2:	693b      	ldr	r3, [r7, #16]
 8005ab4:	699b      	ldr	r3, [r3, #24]
 8005ab6:	1e5a      	subs	r2, r3, #1
 8005ab8:	693b      	ldr	r3, [r7, #16]
 8005aba:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8005abc:	693b      	ldr	r3, [r7, #16]
 8005abe:	791b      	ldrb	r3, [r3, #4]
 8005ac0:	f043 0301 	orr.w	r3, r3, #1
 8005ac4:	b2da      	uxtb	r2, r3
 8005ac6:	693b      	ldr	r3, [r7, #16]
 8005ac8:	711a      	strb	r2, [r3, #4]
 8005aca:	e007      	b.n	8005adc <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8005acc:	7dfb      	ldrb	r3, [r7, #23]
 8005ace:	2b01      	cmp	r3, #1
 8005ad0:	d102      	bne.n	8005ad8 <create_chain+0x122>
 8005ad2:	f04f 33ff 	mov.w	r3, #4294967295
 8005ad6:	e000      	b.n	8005ada <create_chain+0x124>
 8005ad8:	2301      	movs	r3, #1
 8005ada:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8005adc:	69fb      	ldr	r3, [r7, #28]
}
 8005ade:	4618      	mov	r0, r3
 8005ae0:	3720      	adds	r7, #32
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	bd80      	pop	{r7, pc}

08005ae6 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8005ae6:	b480      	push	{r7}
 8005ae8:	b087      	sub	sp, #28
 8005aea:	af00      	add	r7, sp, #0
 8005aec:	6078      	str	r0, [r7, #4]
 8005aee:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005afa:	3304      	adds	r3, #4
 8005afc:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	899b      	ldrh	r3, [r3, #12]
 8005b02:	461a      	mov	r2, r3
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	fbb3 f3f2 	udiv	r3, r3, r2
 8005b0a:	68fa      	ldr	r2, [r7, #12]
 8005b0c:	8952      	ldrh	r2, [r2, #10]
 8005b0e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005b12:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005b14:	693b      	ldr	r3, [r7, #16]
 8005b16:	1d1a      	adds	r2, r3, #4
 8005b18:	613a      	str	r2, [r7, #16]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8005b1e:	68bb      	ldr	r3, [r7, #8]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d101      	bne.n	8005b28 <clmt_clust+0x42>
 8005b24:	2300      	movs	r3, #0
 8005b26:	e010      	b.n	8005b4a <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8005b28:	697a      	ldr	r2, [r7, #20]
 8005b2a:	68bb      	ldr	r3, [r7, #8]
 8005b2c:	429a      	cmp	r2, r3
 8005b2e:	d307      	bcc.n	8005b40 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8005b30:	697a      	ldr	r2, [r7, #20]
 8005b32:	68bb      	ldr	r3, [r7, #8]
 8005b34:	1ad3      	subs	r3, r2, r3
 8005b36:	617b      	str	r3, [r7, #20]
 8005b38:	693b      	ldr	r3, [r7, #16]
 8005b3a:	3304      	adds	r3, #4
 8005b3c:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005b3e:	e7e9      	b.n	8005b14 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8005b40:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8005b42:	693b      	ldr	r3, [r7, #16]
 8005b44:	681a      	ldr	r2, [r3, #0]
 8005b46:	697b      	ldr	r3, [r7, #20]
 8005b48:	4413      	add	r3, r2
}
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	371c      	adds	r7, #28
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b54:	4770      	bx	lr

08005b56 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8005b56:	b580      	push	{r7, lr}
 8005b58:	b086      	sub	sp, #24
 8005b5a:	af00      	add	r7, sp, #0
 8005b5c:	6078      	str	r0, [r7, #4]
 8005b5e:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005b6c:	d204      	bcs.n	8005b78 <dir_sdi+0x22>
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	f003 031f 	and.w	r3, r3, #31
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d001      	beq.n	8005b7c <dir_sdi+0x26>
		return FR_INT_ERR;
 8005b78:	2302      	movs	r3, #2
 8005b7a:	e071      	b.n	8005c60 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	683a      	ldr	r2, [r7, #0]
 8005b80:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	689b      	ldr	r3, [r3, #8]
 8005b86:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8005b88:	697b      	ldr	r3, [r7, #20]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d106      	bne.n	8005b9c <dir_sdi+0x46>
 8005b8e:	693b      	ldr	r3, [r7, #16]
 8005b90:	781b      	ldrb	r3, [r3, #0]
 8005b92:	2b02      	cmp	r3, #2
 8005b94:	d902      	bls.n	8005b9c <dir_sdi+0x46>
		clst = fs->dirbase;
 8005b96:	693b      	ldr	r3, [r7, #16]
 8005b98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b9a:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8005b9c:	697b      	ldr	r3, [r7, #20]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d10c      	bne.n	8005bbc <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	095b      	lsrs	r3, r3, #5
 8005ba6:	693a      	ldr	r2, [r7, #16]
 8005ba8:	8912      	ldrh	r2, [r2, #8]
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d301      	bcc.n	8005bb2 <dir_sdi+0x5c>
 8005bae:	2302      	movs	r3, #2
 8005bb0:	e056      	b.n	8005c60 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8005bb2:	693b      	ldr	r3, [r7, #16]
 8005bb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	61da      	str	r2, [r3, #28]
 8005bba:	e02d      	b.n	8005c18 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8005bbc:	693b      	ldr	r3, [r7, #16]
 8005bbe:	895b      	ldrh	r3, [r3, #10]
 8005bc0:	461a      	mov	r2, r3
 8005bc2:	693b      	ldr	r3, [r7, #16]
 8005bc4:	899b      	ldrh	r3, [r3, #12]
 8005bc6:	fb02 f303 	mul.w	r3, r2, r3
 8005bca:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8005bcc:	e019      	b.n	8005c02 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6979      	ldr	r1, [r7, #20]
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	f7ff fc9d 	bl	8005512 <get_fat>
 8005bd8:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005bda:	697b      	ldr	r3, [r7, #20]
 8005bdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005be0:	d101      	bne.n	8005be6 <dir_sdi+0x90>
 8005be2:	2301      	movs	r3, #1
 8005be4:	e03c      	b.n	8005c60 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8005be6:	697b      	ldr	r3, [r7, #20]
 8005be8:	2b01      	cmp	r3, #1
 8005bea:	d904      	bls.n	8005bf6 <dir_sdi+0xa0>
 8005bec:	693b      	ldr	r3, [r7, #16]
 8005bee:	69db      	ldr	r3, [r3, #28]
 8005bf0:	697a      	ldr	r2, [r7, #20]
 8005bf2:	429a      	cmp	r2, r3
 8005bf4:	d301      	bcc.n	8005bfa <dir_sdi+0xa4>
 8005bf6:	2302      	movs	r3, #2
 8005bf8:	e032      	b.n	8005c60 <dir_sdi+0x10a>
			ofs -= csz;
 8005bfa:	683a      	ldr	r2, [r7, #0]
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	1ad3      	subs	r3, r2, r3
 8005c00:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8005c02:	683a      	ldr	r2, [r7, #0]
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	429a      	cmp	r2, r3
 8005c08:	d2e1      	bcs.n	8005bce <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8005c0a:	6979      	ldr	r1, [r7, #20]
 8005c0c:	6938      	ldr	r0, [r7, #16]
 8005c0e:	f7ff fc61 	bl	80054d4 <clust2sect>
 8005c12:	4602      	mov	r2, r0
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	697a      	ldr	r2, [r7, #20]
 8005c1c:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	69db      	ldr	r3, [r3, #28]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d101      	bne.n	8005c2a <dir_sdi+0xd4>
 8005c26:	2302      	movs	r3, #2
 8005c28:	e01a      	b.n	8005c60 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	69da      	ldr	r2, [r3, #28]
 8005c2e:	693b      	ldr	r3, [r7, #16]
 8005c30:	899b      	ldrh	r3, [r3, #12]
 8005c32:	4619      	mov	r1, r3
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	fbb3 f3f1 	udiv	r3, r3, r1
 8005c3a:	441a      	add	r2, r3
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8005c40:	693b      	ldr	r3, [r7, #16]
 8005c42:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8005c46:	693b      	ldr	r3, [r7, #16]
 8005c48:	899b      	ldrh	r3, [r3, #12]
 8005c4a:	461a      	mov	r2, r3
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	fbb3 f0f2 	udiv	r0, r3, r2
 8005c52:	fb00 f202 	mul.w	r2, r0, r2
 8005c56:	1a9b      	subs	r3, r3, r2
 8005c58:	18ca      	adds	r2, r1, r3
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8005c5e:	2300      	movs	r3, #0
}
 8005c60:	4618      	mov	r0, r3
 8005c62:	3718      	adds	r7, #24
 8005c64:	46bd      	mov	sp, r7
 8005c66:	bd80      	pop	{r7, pc}

08005c68 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b086      	sub	sp, #24
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
 8005c70:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	695b      	ldr	r3, [r3, #20]
 8005c7c:	3320      	adds	r3, #32
 8005c7e:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	69db      	ldr	r3, [r3, #28]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d003      	beq.n	8005c90 <dir_next+0x28>
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005c8e:	d301      	bcc.n	8005c94 <dir_next+0x2c>
 8005c90:	2304      	movs	r3, #4
 8005c92:	e0bb      	b.n	8005e0c <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	899b      	ldrh	r3, [r3, #12]
 8005c98:	461a      	mov	r2, r3
 8005c9a:	68bb      	ldr	r3, [r7, #8]
 8005c9c:	fbb3 f1f2 	udiv	r1, r3, r2
 8005ca0:	fb01 f202 	mul.w	r2, r1, r2
 8005ca4:	1a9b      	subs	r3, r3, r2
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	f040 809d 	bne.w	8005de6 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	69db      	ldr	r3, [r3, #28]
 8005cb0:	1c5a      	adds	r2, r3, #1
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	699b      	ldr	r3, [r3, #24]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d10b      	bne.n	8005cd6 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8005cbe:	68bb      	ldr	r3, [r7, #8]
 8005cc0:	095b      	lsrs	r3, r3, #5
 8005cc2:	68fa      	ldr	r2, [r7, #12]
 8005cc4:	8912      	ldrh	r2, [r2, #8]
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	f0c0 808d 	bcc.w	8005de6 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2200      	movs	r2, #0
 8005cd0:	61da      	str	r2, [r3, #28]
 8005cd2:	2304      	movs	r3, #4
 8005cd4:	e09a      	b.n	8005e0c <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	899b      	ldrh	r3, [r3, #12]
 8005cda:	461a      	mov	r2, r3
 8005cdc:	68bb      	ldr	r3, [r7, #8]
 8005cde:	fbb3 f3f2 	udiv	r3, r3, r2
 8005ce2:	68fa      	ldr	r2, [r7, #12]
 8005ce4:	8952      	ldrh	r2, [r2, #10]
 8005ce6:	3a01      	subs	r2, #1
 8005ce8:	4013      	ands	r3, r2
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d17b      	bne.n	8005de6 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8005cee:	687a      	ldr	r2, [r7, #4]
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	699b      	ldr	r3, [r3, #24]
 8005cf4:	4619      	mov	r1, r3
 8005cf6:	4610      	mov	r0, r2
 8005cf8:	f7ff fc0b 	bl	8005512 <get_fat>
 8005cfc:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8005cfe:	697b      	ldr	r3, [r7, #20]
 8005d00:	2b01      	cmp	r3, #1
 8005d02:	d801      	bhi.n	8005d08 <dir_next+0xa0>
 8005d04:	2302      	movs	r3, #2
 8005d06:	e081      	b.n	8005e0c <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8005d08:	697b      	ldr	r3, [r7, #20]
 8005d0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d0e:	d101      	bne.n	8005d14 <dir_next+0xac>
 8005d10:	2301      	movs	r3, #1
 8005d12:	e07b      	b.n	8005e0c <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	69db      	ldr	r3, [r3, #28]
 8005d18:	697a      	ldr	r2, [r7, #20]
 8005d1a:	429a      	cmp	r2, r3
 8005d1c:	d359      	bcc.n	8005dd2 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d104      	bne.n	8005d2e <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2200      	movs	r2, #0
 8005d28:	61da      	str	r2, [r3, #28]
 8005d2a:	2304      	movs	r3, #4
 8005d2c:	e06e      	b.n	8005e0c <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8005d2e:	687a      	ldr	r2, [r7, #4]
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	699b      	ldr	r3, [r3, #24]
 8005d34:	4619      	mov	r1, r3
 8005d36:	4610      	mov	r0, r2
 8005d38:	f7ff fe3d 	bl	80059b6 <create_chain>
 8005d3c:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8005d3e:	697b      	ldr	r3, [r7, #20]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d101      	bne.n	8005d48 <dir_next+0xe0>
 8005d44:	2307      	movs	r3, #7
 8005d46:	e061      	b.n	8005e0c <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8005d48:	697b      	ldr	r3, [r7, #20]
 8005d4a:	2b01      	cmp	r3, #1
 8005d4c:	d101      	bne.n	8005d52 <dir_next+0xea>
 8005d4e:	2302      	movs	r3, #2
 8005d50:	e05c      	b.n	8005e0c <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005d52:	697b      	ldr	r3, [r7, #20]
 8005d54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d58:	d101      	bne.n	8005d5e <dir_next+0xf6>
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	e056      	b.n	8005e0c <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8005d5e:	68f8      	ldr	r0, [r7, #12]
 8005d60:	f7ff fad6 	bl	8005310 <sync_window>
 8005d64:	4603      	mov	r3, r0
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d001      	beq.n	8005d6e <dir_next+0x106>
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	e04e      	b.n	8005e0c <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	899b      	ldrh	r3, [r3, #12]
 8005d78:	461a      	mov	r2, r3
 8005d7a:	2100      	movs	r1, #0
 8005d7c:	f7ff f8ff 	bl	8004f7e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8005d80:	2300      	movs	r3, #0
 8005d82:	613b      	str	r3, [r7, #16]
 8005d84:	6979      	ldr	r1, [r7, #20]
 8005d86:	68f8      	ldr	r0, [r7, #12]
 8005d88:	f7ff fba4 	bl	80054d4 <clust2sect>
 8005d8c:	4602      	mov	r2, r0
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	635a      	str	r2, [r3, #52]	@ 0x34
 8005d92:	e012      	b.n	8005dba <dir_next+0x152>
						fs->wflag = 1;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	2201      	movs	r2, #1
 8005d98:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8005d9a:	68f8      	ldr	r0, [r7, #12]
 8005d9c:	f7ff fab8 	bl	8005310 <sync_window>
 8005da0:	4603      	mov	r3, r0
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d001      	beq.n	8005daa <dir_next+0x142>
 8005da6:	2301      	movs	r3, #1
 8005da8:	e030      	b.n	8005e0c <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8005daa:	693b      	ldr	r3, [r7, #16]
 8005dac:	3301      	adds	r3, #1
 8005dae:	613b      	str	r3, [r7, #16]
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005db4:	1c5a      	adds	r2, r3, #1
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	635a      	str	r2, [r3, #52]	@ 0x34
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	895b      	ldrh	r3, [r3, #10]
 8005dbe:	461a      	mov	r2, r3
 8005dc0:	693b      	ldr	r3, [r7, #16]
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d3e6      	bcc.n	8005d94 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005dca:	693b      	ldr	r3, [r7, #16]
 8005dcc:	1ad2      	subs	r2, r2, r3
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	635a      	str	r2, [r3, #52]	@ 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	697a      	ldr	r2, [r7, #20]
 8005dd6:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8005dd8:	6979      	ldr	r1, [r7, #20]
 8005dda:	68f8      	ldr	r0, [r7, #12]
 8005ddc:	f7ff fb7a 	bl	80054d4 <clust2sect>
 8005de0:	4602      	mov	r2, r0
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	68ba      	ldr	r2, [r7, #8]
 8005dea:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	899b      	ldrh	r3, [r3, #12]
 8005df6:	461a      	mov	r2, r3
 8005df8:	68bb      	ldr	r3, [r7, #8]
 8005dfa:	fbb3 f0f2 	udiv	r0, r3, r2
 8005dfe:	fb00 f202 	mul.w	r2, r0, r2
 8005e02:	1a9b      	subs	r3, r3, r2
 8005e04:	18ca      	adds	r2, r1, r3
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8005e0a:	2300      	movs	r3, #0
}
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	3718      	adds	r7, #24
 8005e10:	46bd      	mov	sp, r7
 8005e12:	bd80      	pop	{r7, pc}

08005e14 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b086      	sub	sp, #24
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
 8005e1c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8005e24:	2100      	movs	r1, #0
 8005e26:	6878      	ldr	r0, [r7, #4]
 8005e28:	f7ff fe95 	bl	8005b56 <dir_sdi>
 8005e2c:	4603      	mov	r3, r0
 8005e2e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8005e30:	7dfb      	ldrb	r3, [r7, #23]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d12b      	bne.n	8005e8e <dir_alloc+0x7a>
		n = 0;
 8005e36:	2300      	movs	r3, #0
 8005e38:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	69db      	ldr	r3, [r3, #28]
 8005e3e:	4619      	mov	r1, r3
 8005e40:	68f8      	ldr	r0, [r7, #12]
 8005e42:	f7ff faa9 	bl	8005398 <move_window>
 8005e46:	4603      	mov	r3, r0
 8005e48:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8005e4a:	7dfb      	ldrb	r3, [r7, #23]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d11d      	bne.n	8005e8c <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6a1b      	ldr	r3, [r3, #32]
 8005e54:	781b      	ldrb	r3, [r3, #0]
 8005e56:	2be5      	cmp	r3, #229	@ 0xe5
 8005e58:	d004      	beq.n	8005e64 <dir_alloc+0x50>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6a1b      	ldr	r3, [r3, #32]
 8005e5e:	781b      	ldrb	r3, [r3, #0]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d107      	bne.n	8005e74 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8005e64:	693b      	ldr	r3, [r7, #16]
 8005e66:	3301      	adds	r3, #1
 8005e68:	613b      	str	r3, [r7, #16]
 8005e6a:	693a      	ldr	r2, [r7, #16]
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	429a      	cmp	r2, r3
 8005e70:	d102      	bne.n	8005e78 <dir_alloc+0x64>
 8005e72:	e00c      	b.n	8005e8e <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8005e74:	2300      	movs	r3, #0
 8005e76:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8005e78:	2101      	movs	r1, #1
 8005e7a:	6878      	ldr	r0, [r7, #4]
 8005e7c:	f7ff fef4 	bl	8005c68 <dir_next>
 8005e80:	4603      	mov	r3, r0
 8005e82:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8005e84:	7dfb      	ldrb	r3, [r7, #23]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d0d7      	beq.n	8005e3a <dir_alloc+0x26>
 8005e8a:	e000      	b.n	8005e8e <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8005e8c:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8005e8e:	7dfb      	ldrb	r3, [r7, #23]
 8005e90:	2b04      	cmp	r3, #4
 8005e92:	d101      	bne.n	8005e98 <dir_alloc+0x84>
 8005e94:	2307      	movs	r3, #7
 8005e96:	75fb      	strb	r3, [r7, #23]
	return res;
 8005e98:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	3718      	adds	r7, #24
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	bd80      	pop	{r7, pc}

08005ea2 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8005ea2:	b580      	push	{r7, lr}
 8005ea4:	b084      	sub	sp, #16
 8005ea6:	af00      	add	r7, sp, #0
 8005ea8:	6078      	str	r0, [r7, #4]
 8005eaa:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	331a      	adds	r3, #26
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	f7fe ffc1 	bl	8004e38 <ld_word>
 8005eb6:	4603      	mov	r3, r0
 8005eb8:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	781b      	ldrb	r3, [r3, #0]
 8005ebe:	2b03      	cmp	r3, #3
 8005ec0:	d109      	bne.n	8005ed6 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	3314      	adds	r3, #20
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	f7fe ffb6 	bl	8004e38 <ld_word>
 8005ecc:	4603      	mov	r3, r0
 8005ece:	041b      	lsls	r3, r3, #16
 8005ed0:	68fa      	ldr	r2, [r7, #12]
 8005ed2:	4313      	orrs	r3, r2
 8005ed4:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
}
 8005ed8:	4618      	mov	r0, r3
 8005eda:	3710      	adds	r7, #16
 8005edc:	46bd      	mov	sp, r7
 8005ede:	bd80      	pop	{r7, pc}

08005ee0 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b084      	sub	sp, #16
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	60f8      	str	r0, [r7, #12]
 8005ee8:	60b9      	str	r1, [r7, #8]
 8005eea:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8005eec:	68bb      	ldr	r3, [r7, #8]
 8005eee:	331a      	adds	r3, #26
 8005ef0:	687a      	ldr	r2, [r7, #4]
 8005ef2:	b292      	uxth	r2, r2
 8005ef4:	4611      	mov	r1, r2
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	f7fe ffd9 	bl	8004eae <st_word>
	if (fs->fs_type == FS_FAT32) {
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	781b      	ldrb	r3, [r3, #0]
 8005f00:	2b03      	cmp	r3, #3
 8005f02:	d109      	bne.n	8005f18 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	f103 0214 	add.w	r2, r3, #20
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	0c1b      	lsrs	r3, r3, #16
 8005f0e:	b29b      	uxth	r3, r3
 8005f10:	4619      	mov	r1, r3
 8005f12:	4610      	mov	r0, r2
 8005f14:	f7fe ffcb 	bl	8004eae <st_word>
	}
}
 8005f18:	bf00      	nop
 8005f1a:	3710      	adds	r7, #16
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	bd80      	pop	{r7, pc}

08005f20 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8005f20:	b590      	push	{r4, r7, lr}
 8005f22:	b087      	sub	sp, #28
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
 8005f28:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	331a      	adds	r3, #26
 8005f2e:	4618      	mov	r0, r3
 8005f30:	f7fe ff82 	bl	8004e38 <ld_word>
 8005f34:	4603      	mov	r3, r0
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d001      	beq.n	8005f3e <cmp_lfn+0x1e>
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	e059      	b.n	8005ff2 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	781b      	ldrb	r3, [r3, #0]
 8005f42:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005f46:	1e5a      	subs	r2, r3, #1
 8005f48:	4613      	mov	r3, r2
 8005f4a:	005b      	lsls	r3, r3, #1
 8005f4c:	4413      	add	r3, r2
 8005f4e:	009b      	lsls	r3, r3, #2
 8005f50:	4413      	add	r3, r2
 8005f52:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8005f54:	2301      	movs	r3, #1
 8005f56:	81fb      	strh	r3, [r7, #14]
 8005f58:	2300      	movs	r3, #0
 8005f5a:	613b      	str	r3, [r7, #16]
 8005f5c:	e033      	b.n	8005fc6 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8005f5e:	4a27      	ldr	r2, [pc, #156]	@ (8005ffc <cmp_lfn+0xdc>)
 8005f60:	693b      	ldr	r3, [r7, #16]
 8005f62:	4413      	add	r3, r2
 8005f64:	781b      	ldrb	r3, [r3, #0]
 8005f66:	461a      	mov	r2, r3
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	4413      	add	r3, r2
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	f7fe ff63 	bl	8004e38 <ld_word>
 8005f72:	4603      	mov	r3, r0
 8005f74:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8005f76:	89fb      	ldrh	r3, [r7, #14]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d01a      	beq.n	8005fb2 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8005f7c:	697b      	ldr	r3, [r7, #20]
 8005f7e:	2bfe      	cmp	r3, #254	@ 0xfe
 8005f80:	d812      	bhi.n	8005fa8 <cmp_lfn+0x88>
 8005f82:	89bb      	ldrh	r3, [r7, #12]
 8005f84:	4618      	mov	r0, r3
 8005f86:	f7fe fe2d 	bl	8004be4 <ff_wtoupper>
 8005f8a:	4603      	mov	r3, r0
 8005f8c:	461c      	mov	r4, r3
 8005f8e:	697b      	ldr	r3, [r7, #20]
 8005f90:	1c5a      	adds	r2, r3, #1
 8005f92:	617a      	str	r2, [r7, #20]
 8005f94:	005b      	lsls	r3, r3, #1
 8005f96:	687a      	ldr	r2, [r7, #4]
 8005f98:	4413      	add	r3, r2
 8005f9a:	881b      	ldrh	r3, [r3, #0]
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	f7fe fe21 	bl	8004be4 <ff_wtoupper>
 8005fa2:	4603      	mov	r3, r0
 8005fa4:	429c      	cmp	r4, r3
 8005fa6:	d001      	beq.n	8005fac <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8005fa8:	2300      	movs	r3, #0
 8005faa:	e022      	b.n	8005ff2 <cmp_lfn+0xd2>
			}
			wc = uc;
 8005fac:	89bb      	ldrh	r3, [r7, #12]
 8005fae:	81fb      	strh	r3, [r7, #14]
 8005fb0:	e006      	b.n	8005fc0 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8005fb2:	89bb      	ldrh	r3, [r7, #12]
 8005fb4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d001      	beq.n	8005fc0 <cmp_lfn+0xa0>
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	e018      	b.n	8005ff2 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8005fc0:	693b      	ldr	r3, [r7, #16]
 8005fc2:	3301      	adds	r3, #1
 8005fc4:	613b      	str	r3, [r7, #16]
 8005fc6:	693b      	ldr	r3, [r7, #16]
 8005fc8:	2b0c      	cmp	r3, #12
 8005fca:	d9c8      	bls.n	8005f5e <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	781b      	ldrb	r3, [r3, #0]
 8005fd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d00b      	beq.n	8005ff0 <cmp_lfn+0xd0>
 8005fd8:	89fb      	ldrh	r3, [r7, #14]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d008      	beq.n	8005ff0 <cmp_lfn+0xd0>
 8005fde:	697b      	ldr	r3, [r7, #20]
 8005fe0:	005b      	lsls	r3, r3, #1
 8005fe2:	687a      	ldr	r2, [r7, #4]
 8005fe4:	4413      	add	r3, r2
 8005fe6:	881b      	ldrh	r3, [r3, #0]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d001      	beq.n	8005ff0 <cmp_lfn+0xd0>
 8005fec:	2300      	movs	r3, #0
 8005fee:	e000      	b.n	8005ff2 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8005ff0:	2301      	movs	r3, #1
}
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	371c      	adds	r7, #28
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	bd90      	pop	{r4, r7, pc}
 8005ffa:	bf00      	nop
 8005ffc:	0800959c 	.word	0x0800959c

08006000 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b088      	sub	sp, #32
 8006004:	af00      	add	r7, sp, #0
 8006006:	60f8      	str	r0, [r7, #12]
 8006008:	60b9      	str	r1, [r7, #8]
 800600a:	4611      	mov	r1, r2
 800600c:	461a      	mov	r2, r3
 800600e:	460b      	mov	r3, r1
 8006010:	71fb      	strb	r3, [r7, #7]
 8006012:	4613      	mov	r3, r2
 8006014:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8006016:	68bb      	ldr	r3, [r7, #8]
 8006018:	330d      	adds	r3, #13
 800601a:	79ba      	ldrb	r2, [r7, #6]
 800601c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800601e:	68bb      	ldr	r3, [r7, #8]
 8006020:	330b      	adds	r3, #11
 8006022:	220f      	movs	r2, #15
 8006024:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8006026:	68bb      	ldr	r3, [r7, #8]
 8006028:	330c      	adds	r3, #12
 800602a:	2200      	movs	r2, #0
 800602c:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800602e:	68bb      	ldr	r3, [r7, #8]
 8006030:	331a      	adds	r3, #26
 8006032:	2100      	movs	r1, #0
 8006034:	4618      	mov	r0, r3
 8006036:	f7fe ff3a 	bl	8004eae <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800603a:	79fb      	ldrb	r3, [r7, #7]
 800603c:	1e5a      	subs	r2, r3, #1
 800603e:	4613      	mov	r3, r2
 8006040:	005b      	lsls	r3, r3, #1
 8006042:	4413      	add	r3, r2
 8006044:	009b      	lsls	r3, r3, #2
 8006046:	4413      	add	r3, r2
 8006048:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800604a:	2300      	movs	r3, #0
 800604c:	82fb      	strh	r3, [r7, #22]
 800604e:	2300      	movs	r3, #0
 8006050:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8006052:	8afb      	ldrh	r3, [r7, #22]
 8006054:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006058:	4293      	cmp	r3, r2
 800605a:	d007      	beq.n	800606c <put_lfn+0x6c>
 800605c:	69fb      	ldr	r3, [r7, #28]
 800605e:	1c5a      	adds	r2, r3, #1
 8006060:	61fa      	str	r2, [r7, #28]
 8006062:	005b      	lsls	r3, r3, #1
 8006064:	68fa      	ldr	r2, [r7, #12]
 8006066:	4413      	add	r3, r2
 8006068:	881b      	ldrh	r3, [r3, #0]
 800606a:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800606c:	4a17      	ldr	r2, [pc, #92]	@ (80060cc <put_lfn+0xcc>)
 800606e:	69bb      	ldr	r3, [r7, #24]
 8006070:	4413      	add	r3, r2
 8006072:	781b      	ldrb	r3, [r3, #0]
 8006074:	461a      	mov	r2, r3
 8006076:	68bb      	ldr	r3, [r7, #8]
 8006078:	4413      	add	r3, r2
 800607a:	8afa      	ldrh	r2, [r7, #22]
 800607c:	4611      	mov	r1, r2
 800607e:	4618      	mov	r0, r3
 8006080:	f7fe ff15 	bl	8004eae <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8006084:	8afb      	ldrh	r3, [r7, #22]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d102      	bne.n	8006090 <put_lfn+0x90>
 800608a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800608e:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8006090:	69bb      	ldr	r3, [r7, #24]
 8006092:	3301      	adds	r3, #1
 8006094:	61bb      	str	r3, [r7, #24]
 8006096:	69bb      	ldr	r3, [r7, #24]
 8006098:	2b0c      	cmp	r3, #12
 800609a:	d9da      	bls.n	8006052 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800609c:	8afb      	ldrh	r3, [r7, #22]
 800609e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d006      	beq.n	80060b4 <put_lfn+0xb4>
 80060a6:	69fb      	ldr	r3, [r7, #28]
 80060a8:	005b      	lsls	r3, r3, #1
 80060aa:	68fa      	ldr	r2, [r7, #12]
 80060ac:	4413      	add	r3, r2
 80060ae:	881b      	ldrh	r3, [r3, #0]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d103      	bne.n	80060bc <put_lfn+0xbc>
 80060b4:	79fb      	ldrb	r3, [r7, #7]
 80060b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80060ba:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	79fa      	ldrb	r2, [r7, #7]
 80060c0:	701a      	strb	r2, [r3, #0]
}
 80060c2:	bf00      	nop
 80060c4:	3720      	adds	r7, #32
 80060c6:	46bd      	mov	sp, r7
 80060c8:	bd80      	pop	{r7, pc}
 80060ca:	bf00      	nop
 80060cc:	0800959c 	.word	0x0800959c

080060d0 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b08c      	sub	sp, #48	@ 0x30
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	60f8      	str	r0, [r7, #12]
 80060d8:	60b9      	str	r1, [r7, #8]
 80060da:	607a      	str	r2, [r7, #4]
 80060dc:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 80060de:	220b      	movs	r2, #11
 80060e0:	68b9      	ldr	r1, [r7, #8]
 80060e2:	68f8      	ldr	r0, [r7, #12]
 80060e4:	f7fe ff2a 	bl	8004f3c <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	2b05      	cmp	r3, #5
 80060ec:	d92b      	bls.n	8006146 <gen_numname+0x76>
		sr = seq;
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 80060f2:	e022      	b.n	800613a <gen_numname+0x6a>
			wc = *lfn++;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	1c9a      	adds	r2, r3, #2
 80060f8:	607a      	str	r2, [r7, #4]
 80060fa:	881b      	ldrh	r3, [r3, #0]
 80060fc:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 80060fe:	2300      	movs	r3, #0
 8006100:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006102:	e017      	b.n	8006134 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8006104:	69fb      	ldr	r3, [r7, #28]
 8006106:	005a      	lsls	r2, r3, #1
 8006108:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800610a:	f003 0301 	and.w	r3, r3, #1
 800610e:	4413      	add	r3, r2
 8006110:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8006112:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006114:	085b      	lsrs	r3, r3, #1
 8006116:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8006118:	69fb      	ldr	r3, [r7, #28]
 800611a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800611e:	2b00      	cmp	r3, #0
 8006120:	d005      	beq.n	800612e <gen_numname+0x5e>
 8006122:	69fb      	ldr	r3, [r7, #28]
 8006124:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 8006128:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 800612c:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800612e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006130:	3301      	adds	r3, #1
 8006132:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006134:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006136:	2b0f      	cmp	r3, #15
 8006138:	d9e4      	bls.n	8006104 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	881b      	ldrh	r3, [r3, #0]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d1d8      	bne.n	80060f4 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8006142:	69fb      	ldr	r3, [r7, #28]
 8006144:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8006146:	2307      	movs	r3, #7
 8006148:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	b2db      	uxtb	r3, r3
 800614e:	f003 030f 	and.w	r3, r3, #15
 8006152:	b2db      	uxtb	r3, r3
 8006154:	3330      	adds	r3, #48	@ 0x30
 8006156:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 800615a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800615e:	2b39      	cmp	r3, #57	@ 0x39
 8006160:	d904      	bls.n	800616c <gen_numname+0x9c>
 8006162:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006166:	3307      	adds	r3, #7
 8006168:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 800616c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800616e:	1e5a      	subs	r2, r3, #1
 8006170:	62ba      	str	r2, [r7, #40]	@ 0x28
 8006172:	3330      	adds	r3, #48	@ 0x30
 8006174:	443b      	add	r3, r7
 8006176:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800617a:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	091b      	lsrs	r3, r3, #4
 8006182:	603b      	str	r3, [r7, #0]
	} while (seq);
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d1df      	bne.n	800614a <gen_numname+0x7a>
	ns[i] = '~';
 800618a:	f107 0214 	add.w	r2, r7, #20
 800618e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006190:	4413      	add	r3, r2
 8006192:	227e      	movs	r2, #126	@ 0x7e
 8006194:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8006196:	2300      	movs	r3, #0
 8006198:	627b      	str	r3, [r7, #36]	@ 0x24
 800619a:	e002      	b.n	80061a2 <gen_numname+0xd2>
 800619c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800619e:	3301      	adds	r3, #1
 80061a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80061a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80061a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061a6:	429a      	cmp	r2, r3
 80061a8:	d205      	bcs.n	80061b6 <gen_numname+0xe6>
 80061aa:	68fa      	ldr	r2, [r7, #12]
 80061ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061ae:	4413      	add	r3, r2
 80061b0:	781b      	ldrb	r3, [r3, #0]
 80061b2:	2b20      	cmp	r3, #32
 80061b4:	d1f2      	bne.n	800619c <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80061b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061b8:	2b07      	cmp	r3, #7
 80061ba:	d807      	bhi.n	80061cc <gen_numname+0xfc>
 80061bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061be:	1c5a      	adds	r2, r3, #1
 80061c0:	62ba      	str	r2, [r7, #40]	@ 0x28
 80061c2:	3330      	adds	r3, #48	@ 0x30
 80061c4:	443b      	add	r3, r7
 80061c6:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 80061ca:	e000      	b.n	80061ce <gen_numname+0xfe>
 80061cc:	2120      	movs	r1, #32
 80061ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061d0:	1c5a      	adds	r2, r3, #1
 80061d2:	627a      	str	r2, [r7, #36]	@ 0x24
 80061d4:	68fa      	ldr	r2, [r7, #12]
 80061d6:	4413      	add	r3, r2
 80061d8:	460a      	mov	r2, r1
 80061da:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 80061dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061de:	2b07      	cmp	r3, #7
 80061e0:	d9e9      	bls.n	80061b6 <gen_numname+0xe6>
}
 80061e2:	bf00      	nop
 80061e4:	bf00      	nop
 80061e6:	3730      	adds	r7, #48	@ 0x30
 80061e8:	46bd      	mov	sp, r7
 80061ea:	bd80      	pop	{r7, pc}

080061ec <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 80061ec:	b480      	push	{r7}
 80061ee:	b085      	sub	sp, #20
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 80061f4:	2300      	movs	r3, #0
 80061f6:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 80061f8:	230b      	movs	r3, #11
 80061fa:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 80061fc:	7bfb      	ldrb	r3, [r7, #15]
 80061fe:	b2da      	uxtb	r2, r3
 8006200:	0852      	lsrs	r2, r2, #1
 8006202:	01db      	lsls	r3, r3, #7
 8006204:	4313      	orrs	r3, r2
 8006206:	b2da      	uxtb	r2, r3
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	1c59      	adds	r1, r3, #1
 800620c:	6079      	str	r1, [r7, #4]
 800620e:	781b      	ldrb	r3, [r3, #0]
 8006210:	4413      	add	r3, r2
 8006212:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	3b01      	subs	r3, #1
 8006218:	60bb      	str	r3, [r7, #8]
 800621a:	68bb      	ldr	r3, [r7, #8]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d1ed      	bne.n	80061fc <sum_sfn+0x10>
	return sum;
 8006220:	7bfb      	ldrb	r3, [r7, #15]
}
 8006222:	4618      	mov	r0, r3
 8006224:	3714      	adds	r7, #20
 8006226:	46bd      	mov	sp, r7
 8006228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622c:	4770      	bx	lr

0800622e <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800622e:	b580      	push	{r7, lr}
 8006230:	b086      	sub	sp, #24
 8006232:	af00      	add	r7, sp, #0
 8006234:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800623c:	2100      	movs	r1, #0
 800623e:	6878      	ldr	r0, [r7, #4]
 8006240:	f7ff fc89 	bl	8005b56 <dir_sdi>
 8006244:	4603      	mov	r3, r0
 8006246:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8006248:	7dfb      	ldrb	r3, [r7, #23]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d001      	beq.n	8006252 <dir_find+0x24>
 800624e:	7dfb      	ldrb	r3, [r7, #23]
 8006250:	e0a9      	b.n	80063a6 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8006252:	23ff      	movs	r3, #255	@ 0xff
 8006254:	753b      	strb	r3, [r7, #20]
 8006256:	7d3b      	ldrb	r3, [r7, #20]
 8006258:	757b      	strb	r3, [r7, #21]
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	f04f 32ff 	mov.w	r2, #4294967295
 8006260:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	69db      	ldr	r3, [r3, #28]
 8006266:	4619      	mov	r1, r3
 8006268:	6938      	ldr	r0, [r7, #16]
 800626a:	f7ff f895 	bl	8005398 <move_window>
 800626e:	4603      	mov	r3, r0
 8006270:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006272:	7dfb      	ldrb	r3, [r7, #23]
 8006274:	2b00      	cmp	r3, #0
 8006276:	f040 8090 	bne.w	800639a <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6a1b      	ldr	r3, [r3, #32]
 800627e:	781b      	ldrb	r3, [r3, #0]
 8006280:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8006282:	7dbb      	ldrb	r3, [r7, #22]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d102      	bne.n	800628e <dir_find+0x60>
 8006288:	2304      	movs	r3, #4
 800628a:	75fb      	strb	r3, [r7, #23]
 800628c:	e08a      	b.n	80063a4 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6a1b      	ldr	r3, [r3, #32]
 8006292:	330b      	adds	r3, #11
 8006294:	781b      	ldrb	r3, [r3, #0]
 8006296:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800629a:	73fb      	strb	r3, [r7, #15]
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	7bfa      	ldrb	r2, [r7, #15]
 80062a0:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80062a2:	7dbb      	ldrb	r3, [r7, #22]
 80062a4:	2be5      	cmp	r3, #229	@ 0xe5
 80062a6:	d007      	beq.n	80062b8 <dir_find+0x8a>
 80062a8:	7bfb      	ldrb	r3, [r7, #15]
 80062aa:	f003 0308 	and.w	r3, r3, #8
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d009      	beq.n	80062c6 <dir_find+0x98>
 80062b2:	7bfb      	ldrb	r3, [r7, #15]
 80062b4:	2b0f      	cmp	r3, #15
 80062b6:	d006      	beq.n	80062c6 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80062b8:	23ff      	movs	r3, #255	@ 0xff
 80062ba:	757b      	strb	r3, [r7, #21]
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	f04f 32ff 	mov.w	r2, #4294967295
 80062c2:	631a      	str	r2, [r3, #48]	@ 0x30
 80062c4:	e05e      	b.n	8006384 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 80062c6:	7bfb      	ldrb	r3, [r7, #15]
 80062c8:	2b0f      	cmp	r3, #15
 80062ca:	d136      	bne.n	800633a <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80062d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d154      	bne.n	8006384 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 80062da:	7dbb      	ldrb	r3, [r7, #22]
 80062dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d00d      	beq.n	8006300 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6a1b      	ldr	r3, [r3, #32]
 80062e8:	7b5b      	ldrb	r3, [r3, #13]
 80062ea:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 80062ec:	7dbb      	ldrb	r3, [r7, #22]
 80062ee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80062f2:	75bb      	strb	r3, [r7, #22]
 80062f4:	7dbb      	ldrb	r3, [r7, #22]
 80062f6:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	695a      	ldr	r2, [r3, #20]
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8006300:	7dba      	ldrb	r2, [r7, #22]
 8006302:	7d7b      	ldrb	r3, [r7, #21]
 8006304:	429a      	cmp	r2, r3
 8006306:	d115      	bne.n	8006334 <dir_find+0x106>
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	6a1b      	ldr	r3, [r3, #32]
 800630c:	330d      	adds	r3, #13
 800630e:	781b      	ldrb	r3, [r3, #0]
 8006310:	7d3a      	ldrb	r2, [r7, #20]
 8006312:	429a      	cmp	r2, r3
 8006314:	d10e      	bne.n	8006334 <dir_find+0x106>
 8006316:	693b      	ldr	r3, [r7, #16]
 8006318:	691a      	ldr	r2, [r3, #16]
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6a1b      	ldr	r3, [r3, #32]
 800631e:	4619      	mov	r1, r3
 8006320:	4610      	mov	r0, r2
 8006322:	f7ff fdfd 	bl	8005f20 <cmp_lfn>
 8006326:	4603      	mov	r3, r0
 8006328:	2b00      	cmp	r3, #0
 800632a:	d003      	beq.n	8006334 <dir_find+0x106>
 800632c:	7d7b      	ldrb	r3, [r7, #21]
 800632e:	3b01      	subs	r3, #1
 8006330:	b2db      	uxtb	r3, r3
 8006332:	e000      	b.n	8006336 <dir_find+0x108>
 8006334:	23ff      	movs	r3, #255	@ 0xff
 8006336:	757b      	strb	r3, [r7, #21]
 8006338:	e024      	b.n	8006384 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800633a:	7d7b      	ldrb	r3, [r7, #21]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d109      	bne.n	8006354 <dir_find+0x126>
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	6a1b      	ldr	r3, [r3, #32]
 8006344:	4618      	mov	r0, r3
 8006346:	f7ff ff51 	bl	80061ec <sum_sfn>
 800634a:	4603      	mov	r3, r0
 800634c:	461a      	mov	r2, r3
 800634e:	7d3b      	ldrb	r3, [r7, #20]
 8006350:	4293      	cmp	r3, r2
 8006352:	d024      	beq.n	800639e <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800635a:	f003 0301 	and.w	r3, r3, #1
 800635e:	2b00      	cmp	r3, #0
 8006360:	d10a      	bne.n	8006378 <dir_find+0x14a>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	6a18      	ldr	r0, [r3, #32]
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	3324      	adds	r3, #36	@ 0x24
 800636a:	220b      	movs	r2, #11
 800636c:	4619      	mov	r1, r3
 800636e:	f7fe fe21 	bl	8004fb4 <mem_cmp>
 8006372:	4603      	mov	r3, r0
 8006374:	2b00      	cmp	r3, #0
 8006376:	d014      	beq.n	80063a2 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8006378:	23ff      	movs	r3, #255	@ 0xff
 800637a:	757b      	strb	r3, [r7, #21]
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	f04f 32ff 	mov.w	r2, #4294967295
 8006382:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8006384:	2100      	movs	r1, #0
 8006386:	6878      	ldr	r0, [r7, #4]
 8006388:	f7ff fc6e 	bl	8005c68 <dir_next>
 800638c:	4603      	mov	r3, r0
 800638e:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8006390:	7dfb      	ldrb	r3, [r7, #23]
 8006392:	2b00      	cmp	r3, #0
 8006394:	f43f af65 	beq.w	8006262 <dir_find+0x34>
 8006398:	e004      	b.n	80063a4 <dir_find+0x176>
		if (res != FR_OK) break;
 800639a:	bf00      	nop
 800639c:	e002      	b.n	80063a4 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800639e:	bf00      	nop
 80063a0:	e000      	b.n	80063a4 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80063a2:	bf00      	nop

	return res;
 80063a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80063a6:	4618      	mov	r0, r3
 80063a8:	3718      	adds	r7, #24
 80063aa:	46bd      	mov	sp, r7
 80063ac:	bd80      	pop	{r7, pc}
	...

080063b0 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b08c      	sub	sp, #48	@ 0x30
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80063c4:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d001      	beq.n	80063d0 <dir_register+0x20>
 80063cc:	2306      	movs	r3, #6
 80063ce:	e0e0      	b.n	8006592 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 80063d0:	2300      	movs	r3, #0
 80063d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80063d4:	e002      	b.n	80063dc <dir_register+0x2c>
 80063d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063d8:	3301      	adds	r3, #1
 80063da:	627b      	str	r3, [r7, #36]	@ 0x24
 80063dc:	69fb      	ldr	r3, [r7, #28]
 80063de:	691a      	ldr	r2, [r3, #16]
 80063e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063e2:	005b      	lsls	r3, r3, #1
 80063e4:	4413      	add	r3, r2
 80063e6:	881b      	ldrh	r3, [r3, #0]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d1f4      	bne.n	80063d6 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 80063f2:	f107 030c 	add.w	r3, r7, #12
 80063f6:	220c      	movs	r2, #12
 80063f8:	4618      	mov	r0, r3
 80063fa:	f7fe fd9f 	bl	8004f3c <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 80063fe:	7dfb      	ldrb	r3, [r7, #23]
 8006400:	f003 0301 	and.w	r3, r3, #1
 8006404:	2b00      	cmp	r3, #0
 8006406:	d032      	beq.n	800646e <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2240      	movs	r2, #64	@ 0x40
 800640c:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 8006410:	2301      	movs	r3, #1
 8006412:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006414:	e016      	b.n	8006444 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 800641c:	69fb      	ldr	r3, [r7, #28]
 800641e:	691a      	ldr	r2, [r3, #16]
 8006420:	f107 010c 	add.w	r1, r7, #12
 8006424:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006426:	f7ff fe53 	bl	80060d0 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800642a:	6878      	ldr	r0, [r7, #4]
 800642c:	f7ff feff 	bl	800622e <dir_find>
 8006430:	4603      	mov	r3, r0
 8006432:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 8006436:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800643a:	2b00      	cmp	r3, #0
 800643c:	d106      	bne.n	800644c <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800643e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006440:	3301      	adds	r3, #1
 8006442:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006444:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006446:	2b63      	cmp	r3, #99	@ 0x63
 8006448:	d9e5      	bls.n	8006416 <dir_register+0x66>
 800644a:	e000      	b.n	800644e <dir_register+0x9e>
			if (res != FR_OK) break;
 800644c:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800644e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006450:	2b64      	cmp	r3, #100	@ 0x64
 8006452:	d101      	bne.n	8006458 <dir_register+0xa8>
 8006454:	2307      	movs	r3, #7
 8006456:	e09c      	b.n	8006592 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8006458:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800645c:	2b04      	cmp	r3, #4
 800645e:	d002      	beq.n	8006466 <dir_register+0xb6>
 8006460:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006464:	e095      	b.n	8006592 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8006466:	7dfa      	ldrb	r2, [r7, #23]
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800646e:	7dfb      	ldrb	r3, [r7, #23]
 8006470:	f003 0302 	and.w	r3, r3, #2
 8006474:	2b00      	cmp	r3, #0
 8006476:	d007      	beq.n	8006488 <dir_register+0xd8>
 8006478:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800647a:	330c      	adds	r3, #12
 800647c:	4a47      	ldr	r2, [pc, #284]	@ (800659c <dir_register+0x1ec>)
 800647e:	fba2 2303 	umull	r2, r3, r2, r3
 8006482:	089b      	lsrs	r3, r3, #2
 8006484:	3301      	adds	r3, #1
 8006486:	e000      	b.n	800648a <dir_register+0xda>
 8006488:	2301      	movs	r3, #1
 800648a:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800648c:	6a39      	ldr	r1, [r7, #32]
 800648e:	6878      	ldr	r0, [r7, #4]
 8006490:	f7ff fcc0 	bl	8005e14 <dir_alloc>
 8006494:	4603      	mov	r3, r0
 8006496:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800649a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d148      	bne.n	8006534 <dir_register+0x184>
 80064a2:	6a3b      	ldr	r3, [r7, #32]
 80064a4:	3b01      	subs	r3, #1
 80064a6:	623b      	str	r3, [r7, #32]
 80064a8:	6a3b      	ldr	r3, [r7, #32]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d042      	beq.n	8006534 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	695a      	ldr	r2, [r3, #20]
 80064b2:	6a3b      	ldr	r3, [r7, #32]
 80064b4:	015b      	lsls	r3, r3, #5
 80064b6:	1ad3      	subs	r3, r2, r3
 80064b8:	4619      	mov	r1, r3
 80064ba:	6878      	ldr	r0, [r7, #4]
 80064bc:	f7ff fb4b 	bl	8005b56 <dir_sdi>
 80064c0:	4603      	mov	r3, r0
 80064c2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 80064c6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d132      	bne.n	8006534 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	3324      	adds	r3, #36	@ 0x24
 80064d2:	4618      	mov	r0, r3
 80064d4:	f7ff fe8a 	bl	80061ec <sum_sfn>
 80064d8:	4603      	mov	r3, r0
 80064da:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	69db      	ldr	r3, [r3, #28]
 80064e0:	4619      	mov	r1, r3
 80064e2:	69f8      	ldr	r0, [r7, #28]
 80064e4:	f7fe ff58 	bl	8005398 <move_window>
 80064e8:	4603      	mov	r3, r0
 80064ea:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 80064ee:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d11d      	bne.n	8006532 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 80064f6:	69fb      	ldr	r3, [r7, #28]
 80064f8:	6918      	ldr	r0, [r3, #16]
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6a19      	ldr	r1, [r3, #32]
 80064fe:	6a3b      	ldr	r3, [r7, #32]
 8006500:	b2da      	uxtb	r2, r3
 8006502:	7efb      	ldrb	r3, [r7, #27]
 8006504:	f7ff fd7c 	bl	8006000 <put_lfn>
				fs->wflag = 1;
 8006508:	69fb      	ldr	r3, [r7, #28]
 800650a:	2201      	movs	r2, #1
 800650c:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800650e:	2100      	movs	r1, #0
 8006510:	6878      	ldr	r0, [r7, #4]
 8006512:	f7ff fba9 	bl	8005c68 <dir_next>
 8006516:	4603      	mov	r3, r0
 8006518:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 800651c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006520:	2b00      	cmp	r3, #0
 8006522:	d107      	bne.n	8006534 <dir_register+0x184>
 8006524:	6a3b      	ldr	r3, [r7, #32]
 8006526:	3b01      	subs	r3, #1
 8006528:	623b      	str	r3, [r7, #32]
 800652a:	6a3b      	ldr	r3, [r7, #32]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d1d5      	bne.n	80064dc <dir_register+0x12c>
 8006530:	e000      	b.n	8006534 <dir_register+0x184>
				if (res != FR_OK) break;
 8006532:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8006534:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006538:	2b00      	cmp	r3, #0
 800653a:	d128      	bne.n	800658e <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	69db      	ldr	r3, [r3, #28]
 8006540:	4619      	mov	r1, r3
 8006542:	69f8      	ldr	r0, [r7, #28]
 8006544:	f7fe ff28 	bl	8005398 <move_window>
 8006548:	4603      	mov	r3, r0
 800654a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800654e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006552:	2b00      	cmp	r3, #0
 8006554:	d11b      	bne.n	800658e <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6a1b      	ldr	r3, [r3, #32]
 800655a:	2220      	movs	r2, #32
 800655c:	2100      	movs	r1, #0
 800655e:	4618      	mov	r0, r3
 8006560:	f7fe fd0d 	bl	8004f7e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	6a18      	ldr	r0, [r3, #32]
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	3324      	adds	r3, #36	@ 0x24
 800656c:	220b      	movs	r2, #11
 800656e:	4619      	mov	r1, r3
 8006570:	f7fe fce4 	bl	8004f3c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6a1b      	ldr	r3, [r3, #32]
 800657e:	330c      	adds	r3, #12
 8006580:	f002 0218 	and.w	r2, r2, #24
 8006584:	b2d2      	uxtb	r2, r2
 8006586:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8006588:	69fb      	ldr	r3, [r7, #28]
 800658a:	2201      	movs	r2, #1
 800658c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800658e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8006592:	4618      	mov	r0, r3
 8006594:	3730      	adds	r7, #48	@ 0x30
 8006596:	46bd      	mov	sp, r7
 8006598:	bd80      	pop	{r7, pc}
 800659a:	bf00      	nop
 800659c:	4ec4ec4f 	.word	0x4ec4ec4f

080065a0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b08a      	sub	sp, #40	@ 0x28
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
 80065a8:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	613b      	str	r3, [r7, #16]
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	691b      	ldr	r3, [r3, #16]
 80065b6:	60fb      	str	r3, [r7, #12]
 80065b8:	2300      	movs	r3, #0
 80065ba:	617b      	str	r3, [r7, #20]
 80065bc:	697b      	ldr	r3, [r7, #20]
 80065be:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 80065c0:	69bb      	ldr	r3, [r7, #24]
 80065c2:	1c5a      	adds	r2, r3, #1
 80065c4:	61ba      	str	r2, [r7, #24]
 80065c6:	693a      	ldr	r2, [r7, #16]
 80065c8:	4413      	add	r3, r2
 80065ca:	781b      	ldrb	r3, [r3, #0]
 80065cc:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 80065ce:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80065d0:	2b1f      	cmp	r3, #31
 80065d2:	d940      	bls.n	8006656 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 80065d4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80065d6:	2b2f      	cmp	r3, #47	@ 0x2f
 80065d8:	d006      	beq.n	80065e8 <create_name+0x48>
 80065da:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80065dc:	2b5c      	cmp	r3, #92	@ 0x5c
 80065de:	d110      	bne.n	8006602 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80065e0:	e002      	b.n	80065e8 <create_name+0x48>
 80065e2:	69bb      	ldr	r3, [r7, #24]
 80065e4:	3301      	adds	r3, #1
 80065e6:	61bb      	str	r3, [r7, #24]
 80065e8:	693a      	ldr	r2, [r7, #16]
 80065ea:	69bb      	ldr	r3, [r7, #24]
 80065ec:	4413      	add	r3, r2
 80065ee:	781b      	ldrb	r3, [r3, #0]
 80065f0:	2b2f      	cmp	r3, #47	@ 0x2f
 80065f2:	d0f6      	beq.n	80065e2 <create_name+0x42>
 80065f4:	693a      	ldr	r2, [r7, #16]
 80065f6:	69bb      	ldr	r3, [r7, #24]
 80065f8:	4413      	add	r3, r2
 80065fa:	781b      	ldrb	r3, [r3, #0]
 80065fc:	2b5c      	cmp	r3, #92	@ 0x5c
 80065fe:	d0f0      	beq.n	80065e2 <create_name+0x42>
			break;
 8006600:	e02a      	b.n	8006658 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8006602:	697b      	ldr	r3, [r7, #20]
 8006604:	2bfe      	cmp	r3, #254	@ 0xfe
 8006606:	d901      	bls.n	800660c <create_name+0x6c>
 8006608:	2306      	movs	r3, #6
 800660a:	e17d      	b.n	8006908 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800660c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800660e:	b2db      	uxtb	r3, r3
 8006610:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8006612:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006614:	2101      	movs	r1, #1
 8006616:	4618      	mov	r0, r3
 8006618:	f7fe faa8 	bl	8004b6c <ff_convert>
 800661c:	4603      	mov	r3, r0
 800661e:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8006620:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006622:	2b00      	cmp	r3, #0
 8006624:	d101      	bne.n	800662a <create_name+0x8a>
 8006626:	2306      	movs	r3, #6
 8006628:	e16e      	b.n	8006908 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800662a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800662c:	2b7f      	cmp	r3, #127	@ 0x7f
 800662e:	d809      	bhi.n	8006644 <create_name+0xa4>
 8006630:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006632:	4619      	mov	r1, r3
 8006634:	488d      	ldr	r0, [pc, #564]	@ (800686c <create_name+0x2cc>)
 8006636:	f7fe fce4 	bl	8005002 <chk_chr>
 800663a:	4603      	mov	r3, r0
 800663c:	2b00      	cmp	r3, #0
 800663e:	d001      	beq.n	8006644 <create_name+0xa4>
 8006640:	2306      	movs	r3, #6
 8006642:	e161      	b.n	8006908 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8006644:	697b      	ldr	r3, [r7, #20]
 8006646:	1c5a      	adds	r2, r3, #1
 8006648:	617a      	str	r2, [r7, #20]
 800664a:	005b      	lsls	r3, r3, #1
 800664c:	68fa      	ldr	r2, [r7, #12]
 800664e:	4413      	add	r3, r2
 8006650:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8006652:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8006654:	e7b4      	b.n	80065c0 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8006656:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8006658:	693a      	ldr	r2, [r7, #16]
 800665a:	69bb      	ldr	r3, [r7, #24]
 800665c:	441a      	add	r2, r3
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8006662:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006664:	2b1f      	cmp	r3, #31
 8006666:	d801      	bhi.n	800666c <create_name+0xcc>
 8006668:	2304      	movs	r3, #4
 800666a:	e000      	b.n	800666e <create_name+0xce>
 800666c:	2300      	movs	r3, #0
 800666e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8006672:	e011      	b.n	8006698 <create_name+0xf8>
		w = lfn[di - 1];
 8006674:	697b      	ldr	r3, [r7, #20]
 8006676:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800667a:	3b01      	subs	r3, #1
 800667c:	005b      	lsls	r3, r3, #1
 800667e:	68fa      	ldr	r2, [r7, #12]
 8006680:	4413      	add	r3, r2
 8006682:	881b      	ldrh	r3, [r3, #0]
 8006684:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 8006686:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006688:	2b20      	cmp	r3, #32
 800668a:	d002      	beq.n	8006692 <create_name+0xf2>
 800668c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800668e:	2b2e      	cmp	r3, #46	@ 0x2e
 8006690:	d106      	bne.n	80066a0 <create_name+0x100>
		di--;
 8006692:	697b      	ldr	r3, [r7, #20]
 8006694:	3b01      	subs	r3, #1
 8006696:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8006698:	697b      	ldr	r3, [r7, #20]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d1ea      	bne.n	8006674 <create_name+0xd4>
 800669e:	e000      	b.n	80066a2 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 80066a0:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 80066a2:	697b      	ldr	r3, [r7, #20]
 80066a4:	005b      	lsls	r3, r3, #1
 80066a6:	68fa      	ldr	r2, [r7, #12]
 80066a8:	4413      	add	r3, r2
 80066aa:	2200      	movs	r2, #0
 80066ac:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 80066ae:	697b      	ldr	r3, [r7, #20]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d101      	bne.n	80066b8 <create_name+0x118>
 80066b4:	2306      	movs	r3, #6
 80066b6:	e127      	b.n	8006908 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	3324      	adds	r3, #36	@ 0x24
 80066bc:	220b      	movs	r2, #11
 80066be:	2120      	movs	r1, #32
 80066c0:	4618      	mov	r0, r3
 80066c2:	f7fe fc5c 	bl	8004f7e <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 80066c6:	2300      	movs	r3, #0
 80066c8:	61bb      	str	r3, [r7, #24]
 80066ca:	e002      	b.n	80066d2 <create_name+0x132>
 80066cc:	69bb      	ldr	r3, [r7, #24]
 80066ce:	3301      	adds	r3, #1
 80066d0:	61bb      	str	r3, [r7, #24]
 80066d2:	69bb      	ldr	r3, [r7, #24]
 80066d4:	005b      	lsls	r3, r3, #1
 80066d6:	68fa      	ldr	r2, [r7, #12]
 80066d8:	4413      	add	r3, r2
 80066da:	881b      	ldrh	r3, [r3, #0]
 80066dc:	2b20      	cmp	r3, #32
 80066de:	d0f5      	beq.n	80066cc <create_name+0x12c>
 80066e0:	69bb      	ldr	r3, [r7, #24]
 80066e2:	005b      	lsls	r3, r3, #1
 80066e4:	68fa      	ldr	r2, [r7, #12]
 80066e6:	4413      	add	r3, r2
 80066e8:	881b      	ldrh	r3, [r3, #0]
 80066ea:	2b2e      	cmp	r3, #46	@ 0x2e
 80066ec:	d0ee      	beq.n	80066cc <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 80066ee:	69bb      	ldr	r3, [r7, #24]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d009      	beq.n	8006708 <create_name+0x168>
 80066f4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80066f8:	f043 0303 	orr.w	r3, r3, #3
 80066fc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8006700:	e002      	b.n	8006708 <create_name+0x168>
 8006702:	697b      	ldr	r3, [r7, #20]
 8006704:	3b01      	subs	r3, #1
 8006706:	617b      	str	r3, [r7, #20]
 8006708:	697b      	ldr	r3, [r7, #20]
 800670a:	2b00      	cmp	r3, #0
 800670c:	d009      	beq.n	8006722 <create_name+0x182>
 800670e:	697b      	ldr	r3, [r7, #20]
 8006710:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8006714:	3b01      	subs	r3, #1
 8006716:	005b      	lsls	r3, r3, #1
 8006718:	68fa      	ldr	r2, [r7, #12]
 800671a:	4413      	add	r3, r2
 800671c:	881b      	ldrh	r3, [r3, #0]
 800671e:	2b2e      	cmp	r3, #46	@ 0x2e
 8006720:	d1ef      	bne.n	8006702 <create_name+0x162>

	i = b = 0; ni = 8;
 8006722:	2300      	movs	r3, #0
 8006724:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8006728:	2300      	movs	r3, #0
 800672a:	623b      	str	r3, [r7, #32]
 800672c:	2308      	movs	r3, #8
 800672e:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8006730:	69bb      	ldr	r3, [r7, #24]
 8006732:	1c5a      	adds	r2, r3, #1
 8006734:	61ba      	str	r2, [r7, #24]
 8006736:	005b      	lsls	r3, r3, #1
 8006738:	68fa      	ldr	r2, [r7, #12]
 800673a:	4413      	add	r3, r2
 800673c:	881b      	ldrh	r3, [r3, #0]
 800673e:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 8006740:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006742:	2b00      	cmp	r3, #0
 8006744:	f000 8090 	beq.w	8006868 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8006748:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800674a:	2b20      	cmp	r3, #32
 800674c:	d006      	beq.n	800675c <create_name+0x1bc>
 800674e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006750:	2b2e      	cmp	r3, #46	@ 0x2e
 8006752:	d10a      	bne.n	800676a <create_name+0x1ca>
 8006754:	69ba      	ldr	r2, [r7, #24]
 8006756:	697b      	ldr	r3, [r7, #20]
 8006758:	429a      	cmp	r2, r3
 800675a:	d006      	beq.n	800676a <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800675c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006760:	f043 0303 	orr.w	r3, r3, #3
 8006764:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006768:	e07d      	b.n	8006866 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800676a:	6a3a      	ldr	r2, [r7, #32]
 800676c:	69fb      	ldr	r3, [r7, #28]
 800676e:	429a      	cmp	r2, r3
 8006770:	d203      	bcs.n	800677a <create_name+0x1da>
 8006772:	69ba      	ldr	r2, [r7, #24]
 8006774:	697b      	ldr	r3, [r7, #20]
 8006776:	429a      	cmp	r2, r3
 8006778:	d123      	bne.n	80067c2 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800677a:	69fb      	ldr	r3, [r7, #28]
 800677c:	2b0b      	cmp	r3, #11
 800677e:	d106      	bne.n	800678e <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8006780:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006784:	f043 0303 	orr.w	r3, r3, #3
 8006788:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800678c:	e075      	b.n	800687a <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800678e:	69ba      	ldr	r2, [r7, #24]
 8006790:	697b      	ldr	r3, [r7, #20]
 8006792:	429a      	cmp	r2, r3
 8006794:	d005      	beq.n	80067a2 <create_name+0x202>
 8006796:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800679a:	f043 0303 	orr.w	r3, r3, #3
 800679e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 80067a2:	69ba      	ldr	r2, [r7, #24]
 80067a4:	697b      	ldr	r3, [r7, #20]
 80067a6:	429a      	cmp	r2, r3
 80067a8:	d866      	bhi.n	8006878 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 80067aa:	697b      	ldr	r3, [r7, #20]
 80067ac:	61bb      	str	r3, [r7, #24]
 80067ae:	2308      	movs	r3, #8
 80067b0:	623b      	str	r3, [r7, #32]
 80067b2:	230b      	movs	r3, #11
 80067b4:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 80067b6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80067ba:	009b      	lsls	r3, r3, #2
 80067bc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80067c0:	e051      	b.n	8006866 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 80067c2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80067c4:	2b7f      	cmp	r3, #127	@ 0x7f
 80067c6:	d914      	bls.n	80067f2 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 80067c8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80067ca:	2100      	movs	r1, #0
 80067cc:	4618      	mov	r0, r3
 80067ce:	f7fe f9cd 	bl	8004b6c <ff_convert>
 80067d2:	4603      	mov	r3, r0
 80067d4:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 80067d6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d004      	beq.n	80067e6 <create_name+0x246>
 80067dc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80067de:	3b80      	subs	r3, #128	@ 0x80
 80067e0:	4a23      	ldr	r2, [pc, #140]	@ (8006870 <create_name+0x2d0>)
 80067e2:	5cd3      	ldrb	r3, [r2, r3]
 80067e4:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 80067e6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80067ea:	f043 0302 	orr.w	r3, r3, #2
 80067ee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 80067f2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d007      	beq.n	8006808 <create_name+0x268>
 80067f8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80067fa:	4619      	mov	r1, r3
 80067fc:	481d      	ldr	r0, [pc, #116]	@ (8006874 <create_name+0x2d4>)
 80067fe:	f7fe fc00 	bl	8005002 <chk_chr>
 8006802:	4603      	mov	r3, r0
 8006804:	2b00      	cmp	r3, #0
 8006806:	d008      	beq.n	800681a <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8006808:	235f      	movs	r3, #95	@ 0x5f
 800680a:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800680c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006810:	f043 0303 	orr.w	r3, r3, #3
 8006814:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006818:	e01b      	b.n	8006852 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800681a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800681c:	2b40      	cmp	r3, #64	@ 0x40
 800681e:	d909      	bls.n	8006834 <create_name+0x294>
 8006820:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006822:	2b5a      	cmp	r3, #90	@ 0x5a
 8006824:	d806      	bhi.n	8006834 <create_name+0x294>
					b |= 2;
 8006826:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800682a:	f043 0302 	orr.w	r3, r3, #2
 800682e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8006832:	e00e      	b.n	8006852 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8006834:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006836:	2b60      	cmp	r3, #96	@ 0x60
 8006838:	d90b      	bls.n	8006852 <create_name+0x2b2>
 800683a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800683c:	2b7a      	cmp	r3, #122	@ 0x7a
 800683e:	d808      	bhi.n	8006852 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8006840:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006844:	f043 0301 	orr.w	r3, r3, #1
 8006848:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800684c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800684e:	3b20      	subs	r3, #32
 8006850:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8006852:	6a3b      	ldr	r3, [r7, #32]
 8006854:	1c5a      	adds	r2, r3, #1
 8006856:	623a      	str	r2, [r7, #32]
 8006858:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800685a:	b2d1      	uxtb	r1, r2
 800685c:	687a      	ldr	r2, [r7, #4]
 800685e:	4413      	add	r3, r2
 8006860:	460a      	mov	r2, r1
 8006862:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 8006866:	e763      	b.n	8006730 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8006868:	bf00      	nop
 800686a:	e006      	b.n	800687a <create_name+0x2da>
 800686c:	08008fe4 	.word	0x08008fe4
 8006870:	0800951c 	.word	0x0800951c
 8006874:	08008ff0 	.word	0x08008ff0
			if (si > di) break;			/* No extension */
 8006878:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006880:	2be5      	cmp	r3, #229	@ 0xe5
 8006882:	d103      	bne.n	800688c <create_name+0x2ec>
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2205      	movs	r2, #5
 8006888:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 800688c:	69fb      	ldr	r3, [r7, #28]
 800688e:	2b08      	cmp	r3, #8
 8006890:	d104      	bne.n	800689c <create_name+0x2fc>
 8006892:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006896:	009b      	lsls	r3, r3, #2
 8006898:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800689c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80068a0:	f003 030c 	and.w	r3, r3, #12
 80068a4:	2b0c      	cmp	r3, #12
 80068a6:	d005      	beq.n	80068b4 <create_name+0x314>
 80068a8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80068ac:	f003 0303 	and.w	r3, r3, #3
 80068b0:	2b03      	cmp	r3, #3
 80068b2:	d105      	bne.n	80068c0 <create_name+0x320>
 80068b4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80068b8:	f043 0302 	orr.w	r3, r3, #2
 80068bc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 80068c0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80068c4:	f003 0302 	and.w	r3, r3, #2
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d117      	bne.n	80068fc <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 80068cc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80068d0:	f003 0303 	and.w	r3, r3, #3
 80068d4:	2b01      	cmp	r3, #1
 80068d6:	d105      	bne.n	80068e4 <create_name+0x344>
 80068d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80068dc:	f043 0310 	orr.w	r3, r3, #16
 80068e0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 80068e4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80068e8:	f003 030c 	and.w	r3, r3, #12
 80068ec:	2b04      	cmp	r3, #4
 80068ee:	d105      	bne.n	80068fc <create_name+0x35c>
 80068f0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80068f4:	f043 0308 	orr.w	r3, r3, #8
 80068f8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8006902:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 8006906:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8006908:	4618      	mov	r0, r3
 800690a:	3728      	adds	r7, #40	@ 0x28
 800690c:	46bd      	mov	sp, r7
 800690e:	bd80      	pop	{r7, pc}

08006910 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8006910:	b580      	push	{r7, lr}
 8006912:	b086      	sub	sp, #24
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
 8006918:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800691e:	693b      	ldr	r3, [r7, #16]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8006924:	e002      	b.n	800692c <follow_path+0x1c>
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	3301      	adds	r3, #1
 800692a:	603b      	str	r3, [r7, #0]
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	781b      	ldrb	r3, [r3, #0]
 8006930:	2b2f      	cmp	r3, #47	@ 0x2f
 8006932:	d0f8      	beq.n	8006926 <follow_path+0x16>
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	781b      	ldrb	r3, [r3, #0]
 8006938:	2b5c      	cmp	r3, #92	@ 0x5c
 800693a:	d0f4      	beq.n	8006926 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800693c:	693b      	ldr	r3, [r7, #16]
 800693e:	2200      	movs	r2, #0
 8006940:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	781b      	ldrb	r3, [r3, #0]
 8006946:	2b1f      	cmp	r3, #31
 8006948:	d80a      	bhi.n	8006960 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	2280      	movs	r2, #128	@ 0x80
 800694e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 8006952:	2100      	movs	r1, #0
 8006954:	6878      	ldr	r0, [r7, #4]
 8006956:	f7ff f8fe 	bl	8005b56 <dir_sdi>
 800695a:	4603      	mov	r3, r0
 800695c:	75fb      	strb	r3, [r7, #23]
 800695e:	e048      	b.n	80069f2 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006960:	463b      	mov	r3, r7
 8006962:	4619      	mov	r1, r3
 8006964:	6878      	ldr	r0, [r7, #4]
 8006966:	f7ff fe1b 	bl	80065a0 <create_name>
 800696a:	4603      	mov	r3, r0
 800696c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800696e:	7dfb      	ldrb	r3, [r7, #23]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d139      	bne.n	80069e8 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8006974:	6878      	ldr	r0, [r7, #4]
 8006976:	f7ff fc5a 	bl	800622e <dir_find>
 800697a:	4603      	mov	r3, r0
 800697c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8006984:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8006986:	7dfb      	ldrb	r3, [r7, #23]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d00a      	beq.n	80069a2 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800698c:	7dfb      	ldrb	r3, [r7, #23]
 800698e:	2b04      	cmp	r3, #4
 8006990:	d12c      	bne.n	80069ec <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8006992:	7afb      	ldrb	r3, [r7, #11]
 8006994:	f003 0304 	and.w	r3, r3, #4
 8006998:	2b00      	cmp	r3, #0
 800699a:	d127      	bne.n	80069ec <follow_path+0xdc>
 800699c:	2305      	movs	r3, #5
 800699e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80069a0:	e024      	b.n	80069ec <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80069a2:	7afb      	ldrb	r3, [r7, #11]
 80069a4:	f003 0304 	and.w	r3, r3, #4
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d121      	bne.n	80069f0 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80069ac:	693b      	ldr	r3, [r7, #16]
 80069ae:	799b      	ldrb	r3, [r3, #6]
 80069b0:	f003 0310 	and.w	r3, r3, #16
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d102      	bne.n	80069be <follow_path+0xae>
				res = FR_NO_PATH; break;
 80069b8:	2305      	movs	r3, #5
 80069ba:	75fb      	strb	r3, [r7, #23]
 80069bc:	e019      	b.n	80069f2 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	695b      	ldr	r3, [r3, #20]
 80069c8:	68fa      	ldr	r2, [r7, #12]
 80069ca:	8992      	ldrh	r2, [r2, #12]
 80069cc:	fbb3 f0f2 	udiv	r0, r3, r2
 80069d0:	fb00 f202 	mul.w	r2, r0, r2
 80069d4:	1a9b      	subs	r3, r3, r2
 80069d6:	440b      	add	r3, r1
 80069d8:	4619      	mov	r1, r3
 80069da:	68f8      	ldr	r0, [r7, #12]
 80069dc:	f7ff fa61 	bl	8005ea2 <ld_clust>
 80069e0:	4602      	mov	r2, r0
 80069e2:	693b      	ldr	r3, [r7, #16]
 80069e4:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80069e6:	e7bb      	b.n	8006960 <follow_path+0x50>
			if (res != FR_OK) break;
 80069e8:	bf00      	nop
 80069ea:	e002      	b.n	80069f2 <follow_path+0xe2>
				break;
 80069ec:	bf00      	nop
 80069ee:	e000      	b.n	80069f2 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80069f0:	bf00      	nop
			}
		}
	}

	return res;
 80069f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80069f4:	4618      	mov	r0, r3
 80069f6:	3718      	adds	r7, #24
 80069f8:	46bd      	mov	sp, r7
 80069fa:	bd80      	pop	{r7, pc}

080069fc <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80069fc:	b480      	push	{r7}
 80069fe:	b087      	sub	sp, #28
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8006a04:	f04f 33ff 	mov.w	r3, #4294967295
 8006a08:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d031      	beq.n	8006a76 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	617b      	str	r3, [r7, #20]
 8006a18:	e002      	b.n	8006a20 <get_ldnumber+0x24>
 8006a1a:	697b      	ldr	r3, [r7, #20]
 8006a1c:	3301      	adds	r3, #1
 8006a1e:	617b      	str	r3, [r7, #20]
 8006a20:	697b      	ldr	r3, [r7, #20]
 8006a22:	781b      	ldrb	r3, [r3, #0]
 8006a24:	2b1f      	cmp	r3, #31
 8006a26:	d903      	bls.n	8006a30 <get_ldnumber+0x34>
 8006a28:	697b      	ldr	r3, [r7, #20]
 8006a2a:	781b      	ldrb	r3, [r3, #0]
 8006a2c:	2b3a      	cmp	r3, #58	@ 0x3a
 8006a2e:	d1f4      	bne.n	8006a1a <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8006a30:	697b      	ldr	r3, [r7, #20]
 8006a32:	781b      	ldrb	r3, [r3, #0]
 8006a34:	2b3a      	cmp	r3, #58	@ 0x3a
 8006a36:	d11c      	bne.n	8006a72 <get_ldnumber+0x76>
			tp = *path;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	1c5a      	adds	r2, r3, #1
 8006a42:	60fa      	str	r2, [r7, #12]
 8006a44:	781b      	ldrb	r3, [r3, #0]
 8006a46:	3b30      	subs	r3, #48	@ 0x30
 8006a48:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8006a4a:	68bb      	ldr	r3, [r7, #8]
 8006a4c:	2b09      	cmp	r3, #9
 8006a4e:	d80e      	bhi.n	8006a6e <get_ldnumber+0x72>
 8006a50:	68fa      	ldr	r2, [r7, #12]
 8006a52:	697b      	ldr	r3, [r7, #20]
 8006a54:	429a      	cmp	r2, r3
 8006a56:	d10a      	bne.n	8006a6e <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8006a58:	68bb      	ldr	r3, [r7, #8]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d107      	bne.n	8006a6e <get_ldnumber+0x72>
					vol = (int)i;
 8006a5e:	68bb      	ldr	r3, [r7, #8]
 8006a60:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8006a62:	697b      	ldr	r3, [r7, #20]
 8006a64:	3301      	adds	r3, #1
 8006a66:	617b      	str	r3, [r7, #20]
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	697a      	ldr	r2, [r7, #20]
 8006a6c:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8006a6e:	693b      	ldr	r3, [r7, #16]
 8006a70:	e002      	b.n	8006a78 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8006a72:	2300      	movs	r3, #0
 8006a74:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8006a76:	693b      	ldr	r3, [r7, #16]
}
 8006a78:	4618      	mov	r0, r3
 8006a7a:	371c      	adds	r7, #28
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a82:	4770      	bx	lr

08006a84 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b082      	sub	sp, #8
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
 8006a8c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2200      	movs	r2, #0
 8006a92:	70da      	strb	r2, [r3, #3]
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	f04f 32ff 	mov.w	r2, #4294967295
 8006a9a:	635a      	str	r2, [r3, #52]	@ 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8006a9c:	6839      	ldr	r1, [r7, #0]
 8006a9e:	6878      	ldr	r0, [r7, #4]
 8006aa0:	f7fe fc7a 	bl	8005398 <move_window>
 8006aa4:	4603      	mov	r3, r0
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d001      	beq.n	8006aae <check_fs+0x2a>
 8006aaa:	2304      	movs	r3, #4
 8006aac:	e038      	b.n	8006b20 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	3338      	adds	r3, #56	@ 0x38
 8006ab2:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	f7fe f9be 	bl	8004e38 <ld_word>
 8006abc:	4603      	mov	r3, r0
 8006abe:	461a      	mov	r2, r3
 8006ac0:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8006ac4:	429a      	cmp	r2, r3
 8006ac6:	d001      	beq.n	8006acc <check_fs+0x48>
 8006ac8:	2303      	movs	r3, #3
 8006aca:	e029      	b.n	8006b20 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006ad2:	2be9      	cmp	r3, #233	@ 0xe9
 8006ad4:	d009      	beq.n	8006aea <check_fs+0x66>
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006adc:	2beb      	cmp	r3, #235	@ 0xeb
 8006ade:	d11e      	bne.n	8006b1e <check_fs+0x9a>
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8006ae6:	2b90      	cmp	r3, #144	@ 0x90
 8006ae8:	d119      	bne.n	8006b1e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	3338      	adds	r3, #56	@ 0x38
 8006aee:	3336      	adds	r3, #54	@ 0x36
 8006af0:	4618      	mov	r0, r3
 8006af2:	f7fe f9b9 	bl	8004e68 <ld_dword>
 8006af6:	4603      	mov	r3, r0
 8006af8:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8006afc:	4a0a      	ldr	r2, [pc, #40]	@ (8006b28 <check_fs+0xa4>)
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d101      	bne.n	8006b06 <check_fs+0x82>
 8006b02:	2300      	movs	r3, #0
 8006b04:	e00c      	b.n	8006b20 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	3338      	adds	r3, #56	@ 0x38
 8006b0a:	3352      	adds	r3, #82	@ 0x52
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	f7fe f9ab 	bl	8004e68 <ld_dword>
 8006b12:	4603      	mov	r3, r0
 8006b14:	4a05      	ldr	r2, [pc, #20]	@ (8006b2c <check_fs+0xa8>)
 8006b16:	4293      	cmp	r3, r2
 8006b18:	d101      	bne.n	8006b1e <check_fs+0x9a>
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	e000      	b.n	8006b20 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8006b1e:	2302      	movs	r3, #2
}
 8006b20:	4618      	mov	r0, r3
 8006b22:	3708      	adds	r7, #8
 8006b24:	46bd      	mov	sp, r7
 8006b26:	bd80      	pop	{r7, pc}
 8006b28:	00544146 	.word	0x00544146
 8006b2c:	33544146 	.word	0x33544146

08006b30 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b096      	sub	sp, #88	@ 0x58
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	60f8      	str	r0, [r7, #12]
 8006b38:	60b9      	str	r1, [r7, #8]
 8006b3a:	4613      	mov	r3, r2
 8006b3c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8006b3e:	68bb      	ldr	r3, [r7, #8]
 8006b40:	2200      	movs	r2, #0
 8006b42:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8006b44:	68f8      	ldr	r0, [r7, #12]
 8006b46:	f7ff ff59 	bl	80069fc <get_ldnumber>
 8006b4a:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8006b4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	da01      	bge.n	8006b56 <find_volume+0x26>
 8006b52:	230b      	movs	r3, #11
 8006b54:	e265      	b.n	8007022 <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8006b56:	4a9f      	ldr	r2, [pc, #636]	@ (8006dd4 <find_volume+0x2a4>)
 8006b58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b5e:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8006b60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d101      	bne.n	8006b6a <find_volume+0x3a>
 8006b66:	230c      	movs	r3, #12
 8006b68:	e25b      	b.n	8007022 <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8006b6a:	68bb      	ldr	r3, [r7, #8]
 8006b6c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006b6e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8006b70:	79fb      	ldrb	r3, [r7, #7]
 8006b72:	f023 0301 	bic.w	r3, r3, #1
 8006b76:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8006b78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b7a:	781b      	ldrb	r3, [r3, #0]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d01a      	beq.n	8006bb6 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8006b80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b82:	785b      	ldrb	r3, [r3, #1]
 8006b84:	4618      	mov	r0, r3
 8006b86:	f7fe f8b7 	bl	8004cf8 <disk_status>
 8006b8a:	4603      	mov	r3, r0
 8006b8c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8006b90:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006b94:	f003 0301 	and.w	r3, r3, #1
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d10c      	bne.n	8006bb6 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8006b9c:	79fb      	ldrb	r3, [r7, #7]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d007      	beq.n	8006bb2 <find_volume+0x82>
 8006ba2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006ba6:	f003 0304 	and.w	r3, r3, #4
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d001      	beq.n	8006bb2 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8006bae:	230a      	movs	r3, #10
 8006bb0:	e237      	b.n	8007022 <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	e235      	b.n	8007022 <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8006bb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bb8:	2200      	movs	r2, #0
 8006bba:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8006bbc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006bbe:	b2da      	uxtb	r2, r3
 8006bc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bc2:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8006bc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bc6:	785b      	ldrb	r3, [r3, #1]
 8006bc8:	4618      	mov	r0, r3
 8006bca:	f7fe f8af 	bl	8004d2c <disk_initialize>
 8006bce:	4603      	mov	r3, r0
 8006bd0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8006bd4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006bd8:	f003 0301 	and.w	r3, r3, #1
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d001      	beq.n	8006be4 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8006be0:	2303      	movs	r3, #3
 8006be2:	e21e      	b.n	8007022 <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8006be4:	79fb      	ldrb	r3, [r7, #7]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d007      	beq.n	8006bfa <find_volume+0xca>
 8006bea:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006bee:	f003 0304 	and.w	r3, r3, #4
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d001      	beq.n	8006bfa <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8006bf6:	230a      	movs	r3, #10
 8006bf8:	e213      	b.n	8007022 <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8006bfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bfc:	7858      	ldrb	r0, [r3, #1]
 8006bfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c00:	330c      	adds	r3, #12
 8006c02:	461a      	mov	r2, r3
 8006c04:	2102      	movs	r1, #2
 8006c06:	f7fe f8f9 	bl	8004dfc <disk_ioctl>
 8006c0a:	4603      	mov	r3, r0
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d001      	beq.n	8006c14 <find_volume+0xe4>
 8006c10:	2301      	movs	r3, #1
 8006c12:	e206      	b.n	8007022 <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8006c14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c16:	899b      	ldrh	r3, [r3, #12]
 8006c18:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c1c:	d80d      	bhi.n	8006c3a <find_volume+0x10a>
 8006c1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c20:	899b      	ldrh	r3, [r3, #12]
 8006c22:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006c26:	d308      	bcc.n	8006c3a <find_volume+0x10a>
 8006c28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c2a:	899b      	ldrh	r3, [r3, #12]
 8006c2c:	461a      	mov	r2, r3
 8006c2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c30:	899b      	ldrh	r3, [r3, #12]
 8006c32:	3b01      	subs	r3, #1
 8006c34:	4013      	ands	r3, r2
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d001      	beq.n	8006c3e <find_volume+0x10e>
 8006c3a:	2301      	movs	r3, #1
 8006c3c:	e1f1      	b.n	8007022 <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8006c3e:	2300      	movs	r3, #0
 8006c40:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8006c42:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006c44:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006c46:	f7ff ff1d 	bl	8006a84 <check_fs>
 8006c4a:	4603      	mov	r3, r0
 8006c4c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8006c50:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006c54:	2b02      	cmp	r3, #2
 8006c56:	d149      	bne.n	8006cec <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006c58:	2300      	movs	r3, #0
 8006c5a:	643b      	str	r3, [r7, #64]	@ 0x40
 8006c5c:	e01e      	b.n	8006c9c <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8006c5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c60:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8006c64:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006c66:	011b      	lsls	r3, r3, #4
 8006c68:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8006c6c:	4413      	add	r3, r2
 8006c6e:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8006c70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c72:	3304      	adds	r3, #4
 8006c74:	781b      	ldrb	r3, [r3, #0]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d006      	beq.n	8006c88 <find_volume+0x158>
 8006c7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c7c:	3308      	adds	r3, #8
 8006c7e:	4618      	mov	r0, r3
 8006c80:	f7fe f8f2 	bl	8004e68 <ld_dword>
 8006c84:	4602      	mov	r2, r0
 8006c86:	e000      	b.n	8006c8a <find_volume+0x15a>
 8006c88:	2200      	movs	r2, #0
 8006c8a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006c8c:	009b      	lsls	r3, r3, #2
 8006c8e:	3358      	adds	r3, #88	@ 0x58
 8006c90:	443b      	add	r3, r7
 8006c92:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006c96:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006c98:	3301      	adds	r3, #1
 8006c9a:	643b      	str	r3, [r7, #64]	@ 0x40
 8006c9c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006c9e:	2b03      	cmp	r3, #3
 8006ca0:	d9dd      	bls.n	8006c5e <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8006ca6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d002      	beq.n	8006cb2 <find_volume+0x182>
 8006cac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006cae:	3b01      	subs	r3, #1
 8006cb0:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8006cb2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006cb4:	009b      	lsls	r3, r3, #2
 8006cb6:	3358      	adds	r3, #88	@ 0x58
 8006cb8:	443b      	add	r3, r7
 8006cba:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8006cbe:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8006cc0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d005      	beq.n	8006cd2 <find_volume+0x1a2>
 8006cc6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006cc8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006cca:	f7ff fedb 	bl	8006a84 <check_fs>
 8006cce:	4603      	mov	r3, r0
 8006cd0:	e000      	b.n	8006cd4 <find_volume+0x1a4>
 8006cd2:	2303      	movs	r3, #3
 8006cd4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8006cd8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006cdc:	2b01      	cmp	r3, #1
 8006cde:	d905      	bls.n	8006cec <find_volume+0x1bc>
 8006ce0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006ce2:	3301      	adds	r3, #1
 8006ce4:	643b      	str	r3, [r7, #64]	@ 0x40
 8006ce6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006ce8:	2b03      	cmp	r3, #3
 8006cea:	d9e2      	bls.n	8006cb2 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8006cec:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006cf0:	2b04      	cmp	r3, #4
 8006cf2:	d101      	bne.n	8006cf8 <find_volume+0x1c8>
 8006cf4:	2301      	movs	r3, #1
 8006cf6:	e194      	b.n	8007022 <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8006cf8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006cfc:	2b01      	cmp	r3, #1
 8006cfe:	d901      	bls.n	8006d04 <find_volume+0x1d4>
 8006d00:	230d      	movs	r3, #13
 8006d02:	e18e      	b.n	8007022 <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8006d04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d06:	3338      	adds	r3, #56	@ 0x38
 8006d08:	330b      	adds	r3, #11
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	f7fe f894 	bl	8004e38 <ld_word>
 8006d10:	4603      	mov	r3, r0
 8006d12:	461a      	mov	r2, r3
 8006d14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d16:	899b      	ldrh	r3, [r3, #12]
 8006d18:	429a      	cmp	r2, r3
 8006d1a:	d001      	beq.n	8006d20 <find_volume+0x1f0>
 8006d1c:	230d      	movs	r3, #13
 8006d1e:	e180      	b.n	8007022 <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8006d20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d22:	3338      	adds	r3, #56	@ 0x38
 8006d24:	3316      	adds	r3, #22
 8006d26:	4618      	mov	r0, r3
 8006d28:	f7fe f886 	bl	8004e38 <ld_word>
 8006d2c:	4603      	mov	r3, r0
 8006d2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8006d30:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d106      	bne.n	8006d44 <find_volume+0x214>
 8006d36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d38:	3338      	adds	r3, #56	@ 0x38
 8006d3a:	3324      	adds	r3, #36	@ 0x24
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	f7fe f893 	bl	8004e68 <ld_dword>
 8006d42:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8006d44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d46:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006d48:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8006d4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d4c:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 8006d50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d52:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8006d54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d56:	789b      	ldrb	r3, [r3, #2]
 8006d58:	2b01      	cmp	r3, #1
 8006d5a:	d005      	beq.n	8006d68 <find_volume+0x238>
 8006d5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d5e:	789b      	ldrb	r3, [r3, #2]
 8006d60:	2b02      	cmp	r3, #2
 8006d62:	d001      	beq.n	8006d68 <find_volume+0x238>
 8006d64:	230d      	movs	r3, #13
 8006d66:	e15c      	b.n	8007022 <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8006d68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d6a:	789b      	ldrb	r3, [r3, #2]
 8006d6c:	461a      	mov	r2, r3
 8006d6e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006d70:	fb02 f303 	mul.w	r3, r2, r3
 8006d74:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8006d76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d78:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006d7c:	461a      	mov	r2, r3
 8006d7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d80:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8006d82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d84:	895b      	ldrh	r3, [r3, #10]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d008      	beq.n	8006d9c <find_volume+0x26c>
 8006d8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d8c:	895b      	ldrh	r3, [r3, #10]
 8006d8e:	461a      	mov	r2, r3
 8006d90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d92:	895b      	ldrh	r3, [r3, #10]
 8006d94:	3b01      	subs	r3, #1
 8006d96:	4013      	ands	r3, r2
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d001      	beq.n	8006da0 <find_volume+0x270>
 8006d9c:	230d      	movs	r3, #13
 8006d9e:	e140      	b.n	8007022 <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8006da0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006da2:	3338      	adds	r3, #56	@ 0x38
 8006da4:	3311      	adds	r3, #17
 8006da6:	4618      	mov	r0, r3
 8006da8:	f7fe f846 	bl	8004e38 <ld_word>
 8006dac:	4603      	mov	r3, r0
 8006dae:	461a      	mov	r2, r3
 8006db0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006db2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8006db4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006db6:	891b      	ldrh	r3, [r3, #8]
 8006db8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006dba:	8992      	ldrh	r2, [r2, #12]
 8006dbc:	0952      	lsrs	r2, r2, #5
 8006dbe:	b292      	uxth	r2, r2
 8006dc0:	fbb3 f1f2 	udiv	r1, r3, r2
 8006dc4:	fb01 f202 	mul.w	r2, r1, r2
 8006dc8:	1a9b      	subs	r3, r3, r2
 8006dca:	b29b      	uxth	r3, r3
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d003      	beq.n	8006dd8 <find_volume+0x2a8>
 8006dd0:	230d      	movs	r3, #13
 8006dd2:	e126      	b.n	8007022 <find_volume+0x4f2>
 8006dd4:	200001e0 	.word	0x200001e0

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8006dd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dda:	3338      	adds	r3, #56	@ 0x38
 8006ddc:	3313      	adds	r3, #19
 8006dde:	4618      	mov	r0, r3
 8006de0:	f7fe f82a 	bl	8004e38 <ld_word>
 8006de4:	4603      	mov	r3, r0
 8006de6:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8006de8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d106      	bne.n	8006dfc <find_volume+0x2cc>
 8006dee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006df0:	3338      	adds	r3, #56	@ 0x38
 8006df2:	3320      	adds	r3, #32
 8006df4:	4618      	mov	r0, r3
 8006df6:	f7fe f837 	bl	8004e68 <ld_dword>
 8006dfa:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8006dfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dfe:	3338      	adds	r3, #56	@ 0x38
 8006e00:	330e      	adds	r3, #14
 8006e02:	4618      	mov	r0, r3
 8006e04:	f7fe f818 	bl	8004e38 <ld_word>
 8006e08:	4603      	mov	r3, r0
 8006e0a:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8006e0c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d101      	bne.n	8006e16 <find_volume+0x2e6>
 8006e12:	230d      	movs	r3, #13
 8006e14:	e105      	b.n	8007022 <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8006e16:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8006e18:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006e1a:	4413      	add	r3, r2
 8006e1c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006e1e:	8911      	ldrh	r1, [r2, #8]
 8006e20:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006e22:	8992      	ldrh	r2, [r2, #12]
 8006e24:	0952      	lsrs	r2, r2, #5
 8006e26:	b292      	uxth	r2, r2
 8006e28:	fbb1 f2f2 	udiv	r2, r1, r2
 8006e2c:	b292      	uxth	r2, r2
 8006e2e:	4413      	add	r3, r2
 8006e30:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8006e32:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006e34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e36:	429a      	cmp	r2, r3
 8006e38:	d201      	bcs.n	8006e3e <find_volume+0x30e>
 8006e3a:	230d      	movs	r3, #13
 8006e3c:	e0f1      	b.n	8007022 <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8006e3e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006e40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e42:	1ad3      	subs	r3, r2, r3
 8006e44:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006e46:	8952      	ldrh	r2, [r2, #10]
 8006e48:	fbb3 f3f2 	udiv	r3, r3, r2
 8006e4c:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8006e4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d101      	bne.n	8006e58 <find_volume+0x328>
 8006e54:	230d      	movs	r3, #13
 8006e56:	e0e4      	b.n	8007022 <find_volume+0x4f2>
		fmt = FS_FAT32;
 8006e58:	2303      	movs	r3, #3
 8006e5a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8006e5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e60:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8006e64:	4293      	cmp	r3, r2
 8006e66:	d802      	bhi.n	8006e6e <find_volume+0x33e>
 8006e68:	2302      	movs	r3, #2
 8006e6a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8006e6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e70:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8006e74:	4293      	cmp	r3, r2
 8006e76:	d802      	bhi.n	8006e7e <find_volume+0x34e>
 8006e78:	2301      	movs	r3, #1
 8006e7a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8006e7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e80:	1c9a      	adds	r2, r3, #2
 8006e82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e84:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8006e86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e88:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006e8a:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8006e8c:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8006e8e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006e90:	441a      	add	r2, r3
 8006e92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e94:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8006e96:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006e98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e9a:	441a      	add	r2, r3
 8006e9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e9e:	631a      	str	r2, [r3, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 8006ea0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006ea4:	2b03      	cmp	r3, #3
 8006ea6:	d11e      	bne.n	8006ee6 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8006ea8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006eaa:	3338      	adds	r3, #56	@ 0x38
 8006eac:	332a      	adds	r3, #42	@ 0x2a
 8006eae:	4618      	mov	r0, r3
 8006eb0:	f7fd ffc2 	bl	8004e38 <ld_word>
 8006eb4:	4603      	mov	r3, r0
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d001      	beq.n	8006ebe <find_volume+0x38e>
 8006eba:	230d      	movs	r3, #13
 8006ebc:	e0b1      	b.n	8007022 <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8006ebe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ec0:	891b      	ldrh	r3, [r3, #8]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d001      	beq.n	8006eca <find_volume+0x39a>
 8006ec6:	230d      	movs	r3, #13
 8006ec8:	e0ab      	b.n	8007022 <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8006eca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ecc:	3338      	adds	r3, #56	@ 0x38
 8006ece:	332c      	adds	r3, #44	@ 0x2c
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	f7fd ffc9 	bl	8004e68 <ld_dword>
 8006ed6:	4602      	mov	r2, r0
 8006ed8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006eda:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8006edc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ede:	69db      	ldr	r3, [r3, #28]
 8006ee0:	009b      	lsls	r3, r3, #2
 8006ee2:	647b      	str	r3, [r7, #68]	@ 0x44
 8006ee4:	e01f      	b.n	8006f26 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8006ee6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ee8:	891b      	ldrh	r3, [r3, #8]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d101      	bne.n	8006ef2 <find_volume+0x3c2>
 8006eee:	230d      	movs	r3, #13
 8006ef0:	e097      	b.n	8007022 <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8006ef2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ef4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006ef6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006ef8:	441a      	add	r2, r3
 8006efa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006efc:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8006efe:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006f02:	2b02      	cmp	r3, #2
 8006f04:	d103      	bne.n	8006f0e <find_volume+0x3de>
 8006f06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f08:	69db      	ldr	r3, [r3, #28]
 8006f0a:	005b      	lsls	r3, r3, #1
 8006f0c:	e00a      	b.n	8006f24 <find_volume+0x3f4>
 8006f0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f10:	69da      	ldr	r2, [r3, #28]
 8006f12:	4613      	mov	r3, r2
 8006f14:	005b      	lsls	r3, r3, #1
 8006f16:	4413      	add	r3, r2
 8006f18:	085a      	lsrs	r2, r3, #1
 8006f1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f1c:	69db      	ldr	r3, [r3, #28]
 8006f1e:	f003 0301 	and.w	r3, r3, #1
 8006f22:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8006f24:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8006f26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f28:	6a1a      	ldr	r2, [r3, #32]
 8006f2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f2c:	899b      	ldrh	r3, [r3, #12]
 8006f2e:	4619      	mov	r1, r3
 8006f30:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006f32:	440b      	add	r3, r1
 8006f34:	3b01      	subs	r3, #1
 8006f36:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006f38:	8989      	ldrh	r1, [r1, #12]
 8006f3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8006f3e:	429a      	cmp	r2, r3
 8006f40:	d201      	bcs.n	8006f46 <find_volume+0x416>
 8006f42:	230d      	movs	r3, #13
 8006f44:	e06d      	b.n	8007022 <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8006f46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f48:	f04f 32ff 	mov.w	r2, #4294967295
 8006f4c:	619a      	str	r2, [r3, #24]
 8006f4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f50:	699a      	ldr	r2, [r3, #24]
 8006f52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f54:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8006f56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f58:	2280      	movs	r2, #128	@ 0x80
 8006f5a:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8006f5c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006f60:	2b03      	cmp	r3, #3
 8006f62:	d149      	bne.n	8006ff8 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8006f64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f66:	3338      	adds	r3, #56	@ 0x38
 8006f68:	3330      	adds	r3, #48	@ 0x30
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	f7fd ff64 	bl	8004e38 <ld_word>
 8006f70:	4603      	mov	r3, r0
 8006f72:	2b01      	cmp	r3, #1
 8006f74:	d140      	bne.n	8006ff8 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 8006f76:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006f78:	3301      	adds	r3, #1
 8006f7a:	4619      	mov	r1, r3
 8006f7c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006f7e:	f7fe fa0b 	bl	8005398 <move_window>
 8006f82:	4603      	mov	r3, r0
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d137      	bne.n	8006ff8 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8006f88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8006f8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f90:	3338      	adds	r3, #56	@ 0x38
 8006f92:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8006f96:	4618      	mov	r0, r3
 8006f98:	f7fd ff4e 	bl	8004e38 <ld_word>
 8006f9c:	4603      	mov	r3, r0
 8006f9e:	461a      	mov	r2, r3
 8006fa0:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8006fa4:	429a      	cmp	r2, r3
 8006fa6:	d127      	bne.n	8006ff8 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8006fa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006faa:	3338      	adds	r3, #56	@ 0x38
 8006fac:	4618      	mov	r0, r3
 8006fae:	f7fd ff5b 	bl	8004e68 <ld_dword>
 8006fb2:	4603      	mov	r3, r0
 8006fb4:	4a1d      	ldr	r2, [pc, #116]	@ (800702c <find_volume+0x4fc>)
 8006fb6:	4293      	cmp	r3, r2
 8006fb8:	d11e      	bne.n	8006ff8 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8006fba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fbc:	3338      	adds	r3, #56	@ 0x38
 8006fbe:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	f7fd ff50 	bl	8004e68 <ld_dword>
 8006fc8:	4603      	mov	r3, r0
 8006fca:	4a19      	ldr	r2, [pc, #100]	@ (8007030 <find_volume+0x500>)
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d113      	bne.n	8006ff8 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8006fd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fd2:	3338      	adds	r3, #56	@ 0x38
 8006fd4:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8006fd8:	4618      	mov	r0, r3
 8006fda:	f7fd ff45 	bl	8004e68 <ld_dword>
 8006fde:	4602      	mov	r2, r0
 8006fe0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fe2:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8006fe4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fe6:	3338      	adds	r3, #56	@ 0x38
 8006fe8:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8006fec:	4618      	mov	r0, r3
 8006fee:	f7fd ff3b 	bl	8004e68 <ld_dword>
 8006ff2:	4602      	mov	r2, r0
 8006ff4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ff6:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8006ff8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ffa:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8006ffe:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8007000:	4b0c      	ldr	r3, [pc, #48]	@ (8007034 <find_volume+0x504>)
 8007002:	881b      	ldrh	r3, [r3, #0]
 8007004:	3301      	adds	r3, #1
 8007006:	b29a      	uxth	r2, r3
 8007008:	4b0a      	ldr	r3, [pc, #40]	@ (8007034 <find_volume+0x504>)
 800700a:	801a      	strh	r2, [r3, #0]
 800700c:	4b09      	ldr	r3, [pc, #36]	@ (8007034 <find_volume+0x504>)
 800700e:	881a      	ldrh	r2, [r3, #0]
 8007010:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007012:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8007014:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007016:	4a08      	ldr	r2, [pc, #32]	@ (8007038 <find_volume+0x508>)
 8007018:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800701a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800701c:	f7fe f954 	bl	80052c8 <clear_lock>
#endif
	return FR_OK;
 8007020:	2300      	movs	r3, #0
}
 8007022:	4618      	mov	r0, r3
 8007024:	3758      	adds	r7, #88	@ 0x58
 8007026:	46bd      	mov	sp, r7
 8007028:	bd80      	pop	{r7, pc}
 800702a:	bf00      	nop
 800702c:	41615252 	.word	0x41615252
 8007030:	61417272 	.word	0x61417272
 8007034:	200001e4 	.word	0x200001e4
 8007038:	20000208 	.word	0x20000208

0800703c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800703c:	b580      	push	{r7, lr}
 800703e:	b084      	sub	sp, #16
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
 8007044:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8007046:	2309      	movs	r3, #9
 8007048:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d01c      	beq.n	800708a <validate+0x4e>
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d018      	beq.n	800708a <validate+0x4e>
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	781b      	ldrb	r3, [r3, #0]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d013      	beq.n	800708a <validate+0x4e>
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	889a      	ldrh	r2, [r3, #4]
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	88db      	ldrh	r3, [r3, #6]
 800706c:	429a      	cmp	r2, r3
 800706e:	d10c      	bne.n	800708a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	785b      	ldrb	r3, [r3, #1]
 8007076:	4618      	mov	r0, r3
 8007078:	f7fd fe3e 	bl	8004cf8 <disk_status>
 800707c:	4603      	mov	r3, r0
 800707e:	f003 0301 	and.w	r3, r3, #1
 8007082:	2b00      	cmp	r3, #0
 8007084:	d101      	bne.n	800708a <validate+0x4e>
			res = FR_OK;
 8007086:	2300      	movs	r3, #0
 8007088:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800708a:	7bfb      	ldrb	r3, [r7, #15]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d102      	bne.n	8007096 <validate+0x5a>
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	e000      	b.n	8007098 <validate+0x5c>
 8007096:	2300      	movs	r3, #0
 8007098:	683a      	ldr	r2, [r7, #0]
 800709a:	6013      	str	r3, [r2, #0]
	return res;
 800709c:	7bfb      	ldrb	r3, [r7, #15]
}
 800709e:	4618      	mov	r0, r3
 80070a0:	3710      	adds	r7, #16
 80070a2:	46bd      	mov	sp, r7
 80070a4:	bd80      	pop	{r7, pc}
	...

080070a8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b088      	sub	sp, #32
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	60f8      	str	r0, [r7, #12]
 80070b0:	60b9      	str	r1, [r7, #8]
 80070b2:	4613      	mov	r3, r2
 80070b4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80070b6:	68bb      	ldr	r3, [r7, #8]
 80070b8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80070ba:	f107 0310 	add.w	r3, r7, #16
 80070be:	4618      	mov	r0, r3
 80070c0:	f7ff fc9c 	bl	80069fc <get_ldnumber>
 80070c4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80070c6:	69fb      	ldr	r3, [r7, #28]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	da01      	bge.n	80070d0 <f_mount+0x28>
 80070cc:	230b      	movs	r3, #11
 80070ce:	e02b      	b.n	8007128 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80070d0:	4a17      	ldr	r2, [pc, #92]	@ (8007130 <f_mount+0x88>)
 80070d2:	69fb      	ldr	r3, [r7, #28]
 80070d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80070d8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80070da:	69bb      	ldr	r3, [r7, #24]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d005      	beq.n	80070ec <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80070e0:	69b8      	ldr	r0, [r7, #24]
 80070e2:	f7fe f8f1 	bl	80052c8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80070e6:	69bb      	ldr	r3, [r7, #24]
 80070e8:	2200      	movs	r2, #0
 80070ea:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d002      	beq.n	80070f8 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	2200      	movs	r2, #0
 80070f6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80070f8:	68fa      	ldr	r2, [r7, #12]
 80070fa:	490d      	ldr	r1, [pc, #52]	@ (8007130 <f_mount+0x88>)
 80070fc:	69fb      	ldr	r3, [r7, #28]
 80070fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d002      	beq.n	800710e <f_mount+0x66>
 8007108:	79fb      	ldrb	r3, [r7, #7]
 800710a:	2b01      	cmp	r3, #1
 800710c:	d001      	beq.n	8007112 <f_mount+0x6a>
 800710e:	2300      	movs	r3, #0
 8007110:	e00a      	b.n	8007128 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8007112:	f107 010c 	add.w	r1, r7, #12
 8007116:	f107 0308 	add.w	r3, r7, #8
 800711a:	2200      	movs	r2, #0
 800711c:	4618      	mov	r0, r3
 800711e:	f7ff fd07 	bl	8006b30 <find_volume>
 8007122:	4603      	mov	r3, r0
 8007124:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8007126:	7dfb      	ldrb	r3, [r7, #23]
}
 8007128:	4618      	mov	r0, r3
 800712a:	3720      	adds	r7, #32
 800712c:	46bd      	mov	sp, r7
 800712e:	bd80      	pop	{r7, pc}
 8007130:	200001e0 	.word	0x200001e0

08007134 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8007134:	b580      	push	{r7, lr}
 8007136:	b09a      	sub	sp, #104	@ 0x68
 8007138:	af00      	add	r7, sp, #0
 800713a:	60f8      	str	r0, [r7, #12]
 800713c:	60b9      	str	r1, [r7, #8]
 800713e:	4613      	mov	r3, r2
 8007140:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d101      	bne.n	800714c <f_open+0x18>
 8007148:	2309      	movs	r3, #9
 800714a:	e1b7      	b.n	80074bc <f_open+0x388>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800714c:	79fb      	ldrb	r3, [r7, #7]
 800714e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007152:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8007154:	79fa      	ldrb	r2, [r7, #7]
 8007156:	f107 0114 	add.w	r1, r7, #20
 800715a:	f107 0308 	add.w	r3, r7, #8
 800715e:	4618      	mov	r0, r3
 8007160:	f7ff fce6 	bl	8006b30 <find_volume>
 8007164:	4603      	mov	r3, r0
 8007166:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 800716a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800716e:	2b00      	cmp	r3, #0
 8007170:	f040 819b 	bne.w	80074aa <f_open+0x376>
		dj.obj.fs = fs;
 8007174:	697b      	ldr	r3, [r7, #20]
 8007176:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8007178:	68ba      	ldr	r2, [r7, #8]
 800717a:	f107 0318 	add.w	r3, r7, #24
 800717e:	4611      	mov	r1, r2
 8007180:	4618      	mov	r0, r3
 8007182:	f7ff fbc5 	bl	8006910 <follow_path>
 8007186:	4603      	mov	r3, r0
 8007188:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800718c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007190:	2b00      	cmp	r3, #0
 8007192:	d118      	bne.n	80071c6 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8007194:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8007198:	b25b      	sxtb	r3, r3
 800719a:	2b00      	cmp	r3, #0
 800719c:	da03      	bge.n	80071a6 <f_open+0x72>
				res = FR_INVALID_NAME;
 800719e:	2306      	movs	r3, #6
 80071a0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80071a4:	e00f      	b.n	80071c6 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80071a6:	79fb      	ldrb	r3, [r7, #7]
 80071a8:	2b01      	cmp	r3, #1
 80071aa:	bf8c      	ite	hi
 80071ac:	2301      	movhi	r3, #1
 80071ae:	2300      	movls	r3, #0
 80071b0:	b2db      	uxtb	r3, r3
 80071b2:	461a      	mov	r2, r3
 80071b4:	f107 0318 	add.w	r3, r7, #24
 80071b8:	4611      	mov	r1, r2
 80071ba:	4618      	mov	r0, r3
 80071bc:	f7fd ff3c 	bl	8005038 <chk_lock>
 80071c0:	4603      	mov	r3, r0
 80071c2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80071c6:	79fb      	ldrb	r3, [r7, #7]
 80071c8:	f003 031c 	and.w	r3, r3, #28
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d07f      	beq.n	80072d0 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 80071d0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d017      	beq.n	8007208 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80071d8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80071dc:	2b04      	cmp	r3, #4
 80071de:	d10e      	bne.n	80071fe <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80071e0:	f7fd ff86 	bl	80050f0 <enq_lock>
 80071e4:	4603      	mov	r3, r0
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d006      	beq.n	80071f8 <f_open+0xc4>
 80071ea:	f107 0318 	add.w	r3, r7, #24
 80071ee:	4618      	mov	r0, r3
 80071f0:	f7ff f8de 	bl	80063b0 <dir_register>
 80071f4:	4603      	mov	r3, r0
 80071f6:	e000      	b.n	80071fa <f_open+0xc6>
 80071f8:	2312      	movs	r3, #18
 80071fa:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80071fe:	79fb      	ldrb	r3, [r7, #7]
 8007200:	f043 0308 	orr.w	r3, r3, #8
 8007204:	71fb      	strb	r3, [r7, #7]
 8007206:	e010      	b.n	800722a <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8007208:	7fbb      	ldrb	r3, [r7, #30]
 800720a:	f003 0311 	and.w	r3, r3, #17
 800720e:	2b00      	cmp	r3, #0
 8007210:	d003      	beq.n	800721a <f_open+0xe6>
					res = FR_DENIED;
 8007212:	2307      	movs	r3, #7
 8007214:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8007218:	e007      	b.n	800722a <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800721a:	79fb      	ldrb	r3, [r7, #7]
 800721c:	f003 0304 	and.w	r3, r3, #4
 8007220:	2b00      	cmp	r3, #0
 8007222:	d002      	beq.n	800722a <f_open+0xf6>
 8007224:	2308      	movs	r3, #8
 8007226:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800722a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800722e:	2b00      	cmp	r3, #0
 8007230:	d168      	bne.n	8007304 <f_open+0x1d0>
 8007232:	79fb      	ldrb	r3, [r7, #7]
 8007234:	f003 0308 	and.w	r3, r3, #8
 8007238:	2b00      	cmp	r3, #0
 800723a:	d063      	beq.n	8007304 <f_open+0x1d0>
				dw = GET_FATTIME();
 800723c:	f7fc ff62 	bl	8004104 <get_fattime>
 8007240:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8007242:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007244:	330e      	adds	r3, #14
 8007246:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8007248:	4618      	mov	r0, r3
 800724a:	f7fd fe4b 	bl	8004ee4 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800724e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007250:	3316      	adds	r3, #22
 8007252:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8007254:	4618      	mov	r0, r3
 8007256:	f7fd fe45 	bl	8004ee4 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800725a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800725c:	330b      	adds	r3, #11
 800725e:	2220      	movs	r2, #32
 8007260:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8007262:	697b      	ldr	r3, [r7, #20]
 8007264:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007266:	4611      	mov	r1, r2
 8007268:	4618      	mov	r0, r3
 800726a:	f7fe fe1a 	bl	8005ea2 <ld_clust>
 800726e:	6578      	str	r0, [r7, #84]	@ 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8007270:	697b      	ldr	r3, [r7, #20]
 8007272:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007274:	2200      	movs	r2, #0
 8007276:	4618      	mov	r0, r3
 8007278:	f7fe fe32 	bl	8005ee0 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800727c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800727e:	331c      	adds	r3, #28
 8007280:	2100      	movs	r1, #0
 8007282:	4618      	mov	r0, r3
 8007284:	f7fd fe2e 	bl	8004ee4 <st_dword>
					fs->wflag = 1;
 8007288:	697b      	ldr	r3, [r7, #20]
 800728a:	2201      	movs	r2, #1
 800728c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800728e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007290:	2b00      	cmp	r3, #0
 8007292:	d037      	beq.n	8007304 <f_open+0x1d0>
						dw = fs->winsect;
 8007294:	697b      	ldr	r3, [r7, #20]
 8007296:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007298:	65bb      	str	r3, [r7, #88]	@ 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800729a:	f107 0318 	add.w	r3, r7, #24
 800729e:	2200      	movs	r2, #0
 80072a0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80072a2:	4618      	mov	r0, r3
 80072a4:	f7fe fb22 	bl	80058ec <remove_chain>
 80072a8:	4603      	mov	r3, r0
 80072aa:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 80072ae:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d126      	bne.n	8007304 <f_open+0x1d0>
							res = move_window(fs, dw);
 80072b6:	697b      	ldr	r3, [r7, #20]
 80072b8:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80072ba:	4618      	mov	r0, r3
 80072bc:	f7fe f86c 	bl	8005398 <move_window>
 80072c0:	4603      	mov	r3, r0
 80072c2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80072c6:	697b      	ldr	r3, [r7, #20]
 80072c8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80072ca:	3a01      	subs	r2, #1
 80072cc:	615a      	str	r2, [r3, #20]
 80072ce:	e019      	b.n	8007304 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80072d0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d115      	bne.n	8007304 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80072d8:	7fbb      	ldrb	r3, [r7, #30]
 80072da:	f003 0310 	and.w	r3, r3, #16
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d003      	beq.n	80072ea <f_open+0x1b6>
					res = FR_NO_FILE;
 80072e2:	2304      	movs	r3, #4
 80072e4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80072e8:	e00c      	b.n	8007304 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80072ea:	79fb      	ldrb	r3, [r7, #7]
 80072ec:	f003 0302 	and.w	r3, r3, #2
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d007      	beq.n	8007304 <f_open+0x1d0>
 80072f4:	7fbb      	ldrb	r3, [r7, #30]
 80072f6:	f003 0301 	and.w	r3, r3, #1
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d002      	beq.n	8007304 <f_open+0x1d0>
						res = FR_DENIED;
 80072fe:	2307      	movs	r3, #7
 8007300:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8007304:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007308:	2b00      	cmp	r3, #0
 800730a:	d126      	bne.n	800735a <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800730c:	79fb      	ldrb	r3, [r7, #7]
 800730e:	f003 0308 	and.w	r3, r3, #8
 8007312:	2b00      	cmp	r3, #0
 8007314:	d003      	beq.n	800731e <f_open+0x1ea>
				mode |= FA_MODIFIED;
 8007316:	79fb      	ldrb	r3, [r7, #7]
 8007318:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800731c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800731e:	697b      	ldr	r3, [r7, #20]
 8007320:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8007326:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800732c:	79fb      	ldrb	r3, [r7, #7]
 800732e:	2b01      	cmp	r3, #1
 8007330:	bf8c      	ite	hi
 8007332:	2301      	movhi	r3, #1
 8007334:	2300      	movls	r3, #0
 8007336:	b2db      	uxtb	r3, r3
 8007338:	461a      	mov	r2, r3
 800733a:	f107 0318 	add.w	r3, r7, #24
 800733e:	4611      	mov	r1, r2
 8007340:	4618      	mov	r0, r3
 8007342:	f7fd fef7 	bl	8005134 <inc_lock>
 8007346:	4602      	mov	r2, r0
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	691b      	ldr	r3, [r3, #16]
 8007350:	2b00      	cmp	r3, #0
 8007352:	d102      	bne.n	800735a <f_open+0x226>
 8007354:	2302      	movs	r3, #2
 8007356:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800735a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800735e:	2b00      	cmp	r3, #0
 8007360:	f040 80a3 	bne.w	80074aa <f_open+0x376>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8007364:	697b      	ldr	r3, [r7, #20]
 8007366:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007368:	4611      	mov	r1, r2
 800736a:	4618      	mov	r0, r3
 800736c:	f7fe fd99 	bl	8005ea2 <ld_clust>
 8007370:	4602      	mov	r2, r0
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8007376:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007378:	331c      	adds	r3, #28
 800737a:	4618      	mov	r0, r3
 800737c:	f7fd fd74 	bl	8004e68 <ld_dword>
 8007380:	4602      	mov	r2, r0
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	2200      	movs	r2, #0
 800738a:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800738c:	697a      	ldr	r2, [r7, #20]
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8007392:	697b      	ldr	r3, [r7, #20]
 8007394:	88da      	ldrh	r2, [r3, #6]
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	79fa      	ldrb	r2, [r7, #7]
 800739e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	2200      	movs	r2, #0
 80073a4:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	2200      	movs	r2, #0
 80073aa:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	2200      	movs	r2, #0
 80073b0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	3330      	adds	r3, #48	@ 0x30
 80073b6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80073ba:	2100      	movs	r1, #0
 80073bc:	4618      	mov	r0, r3
 80073be:	f7fd fdde 	bl	8004f7e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80073c2:	79fb      	ldrb	r3, [r7, #7]
 80073c4:	f003 0320 	and.w	r3, r3, #32
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d06e      	beq.n	80074aa <f_open+0x376>
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	68db      	ldr	r3, [r3, #12]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d06a      	beq.n	80074aa <f_open+0x376>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	68da      	ldr	r2, [r3, #12]
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80073dc:	697b      	ldr	r3, [r7, #20]
 80073de:	895b      	ldrh	r3, [r3, #10]
 80073e0:	461a      	mov	r2, r3
 80073e2:	697b      	ldr	r3, [r7, #20]
 80073e4:	899b      	ldrh	r3, [r3, #12]
 80073e6:	fb02 f303 	mul.w	r3, r2, r3
 80073ea:	653b      	str	r3, [r7, #80]	@ 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	689b      	ldr	r3, [r3, #8]
 80073f0:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	68db      	ldr	r3, [r3, #12]
 80073f6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80073f8:	e016      	b.n	8007428 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80073fe:	4618      	mov	r0, r3
 8007400:	f7fe f887 	bl	8005512 <get_fat>
 8007404:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8007406:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007408:	2b01      	cmp	r3, #1
 800740a:	d802      	bhi.n	8007412 <f_open+0x2de>
 800740c:	2302      	movs	r3, #2
 800740e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8007412:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007414:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007418:	d102      	bne.n	8007420 <f_open+0x2ec>
 800741a:	2301      	movs	r3, #1
 800741c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007420:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8007422:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007424:	1ad3      	subs	r3, r2, r3
 8007426:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007428:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800742c:	2b00      	cmp	r3, #0
 800742e:	d103      	bne.n	8007438 <f_open+0x304>
 8007430:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8007432:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007434:	429a      	cmp	r2, r3
 8007436:	d8e0      	bhi.n	80073fa <f_open+0x2c6>
				}
				fp->clust = clst;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800743c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800743e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007442:	2b00      	cmp	r3, #0
 8007444:	d131      	bne.n	80074aa <f_open+0x376>
 8007446:	697b      	ldr	r3, [r7, #20]
 8007448:	899b      	ldrh	r3, [r3, #12]
 800744a:	461a      	mov	r2, r3
 800744c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800744e:	fbb3 f1f2 	udiv	r1, r3, r2
 8007452:	fb01 f202 	mul.w	r2, r1, r2
 8007456:	1a9b      	subs	r3, r3, r2
 8007458:	2b00      	cmp	r3, #0
 800745a:	d026      	beq.n	80074aa <f_open+0x376>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800745c:	697b      	ldr	r3, [r7, #20]
 800745e:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8007460:	4618      	mov	r0, r3
 8007462:	f7fe f837 	bl	80054d4 <clust2sect>
 8007466:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8007468:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800746a:	2b00      	cmp	r3, #0
 800746c:	d103      	bne.n	8007476 <f_open+0x342>
						res = FR_INT_ERR;
 800746e:	2302      	movs	r3, #2
 8007470:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8007474:	e019      	b.n	80074aa <f_open+0x376>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8007476:	697b      	ldr	r3, [r7, #20]
 8007478:	899b      	ldrh	r3, [r3, #12]
 800747a:	461a      	mov	r2, r3
 800747c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800747e:	fbb3 f2f2 	udiv	r2, r3, r2
 8007482:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007484:	441a      	add	r2, r3
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800748a:	697b      	ldr	r3, [r7, #20]
 800748c:	7858      	ldrb	r0, [r3, #1]
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	6a1a      	ldr	r2, [r3, #32]
 8007498:	2301      	movs	r3, #1
 800749a:	f7fd fc6f 	bl	8004d7c <disk_read>
 800749e:	4603      	mov	r3, r0
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d002      	beq.n	80074aa <f_open+0x376>
 80074a4:	2301      	movs	r3, #1
 80074a6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80074aa:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d002      	beq.n	80074b8 <f_open+0x384>
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	2200      	movs	r2, #0
 80074b6:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80074b8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 80074bc:	4618      	mov	r0, r3
 80074be:	3768      	adds	r7, #104	@ 0x68
 80074c0:	46bd      	mov	sp, r7
 80074c2:	bd80      	pop	{r7, pc}

080074c4 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80074c4:	b580      	push	{r7, lr}
 80074c6:	b08c      	sub	sp, #48	@ 0x30
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	60f8      	str	r0, [r7, #12]
 80074cc:	60b9      	str	r1, [r7, #8]
 80074ce:	607a      	str	r2, [r7, #4]
 80074d0:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80074d2:	68bb      	ldr	r3, [r7, #8]
 80074d4:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	2200      	movs	r2, #0
 80074da:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	f107 0210 	add.w	r2, r7, #16
 80074e2:	4611      	mov	r1, r2
 80074e4:	4618      	mov	r0, r3
 80074e6:	f7ff fda9 	bl	800703c <validate>
 80074ea:	4603      	mov	r3, r0
 80074ec:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80074f0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d107      	bne.n	8007508 <f_write+0x44>
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	7d5b      	ldrb	r3, [r3, #21]
 80074fc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8007500:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007504:	2b00      	cmp	r3, #0
 8007506:	d002      	beq.n	800750e <f_write+0x4a>
 8007508:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800750c:	e16a      	b.n	80077e4 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	7d1b      	ldrb	r3, [r3, #20]
 8007512:	f003 0302 	and.w	r3, r3, #2
 8007516:	2b00      	cmp	r3, #0
 8007518:	d101      	bne.n	800751e <f_write+0x5a>
 800751a:	2307      	movs	r3, #7
 800751c:	e162      	b.n	80077e4 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	699a      	ldr	r2, [r3, #24]
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	441a      	add	r2, r3
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	699b      	ldr	r3, [r3, #24]
 800752a:	429a      	cmp	r2, r3
 800752c:	f080 814c 	bcs.w	80077c8 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	699b      	ldr	r3, [r3, #24]
 8007534:	43db      	mvns	r3, r3
 8007536:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8007538:	e146      	b.n	80077c8 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	699b      	ldr	r3, [r3, #24]
 800753e:	693a      	ldr	r2, [r7, #16]
 8007540:	8992      	ldrh	r2, [r2, #12]
 8007542:	fbb3 f1f2 	udiv	r1, r3, r2
 8007546:	fb01 f202 	mul.w	r2, r1, r2
 800754a:	1a9b      	subs	r3, r3, r2
 800754c:	2b00      	cmp	r3, #0
 800754e:	f040 80f1 	bne.w	8007734 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	699b      	ldr	r3, [r3, #24]
 8007556:	693a      	ldr	r2, [r7, #16]
 8007558:	8992      	ldrh	r2, [r2, #12]
 800755a:	fbb3 f3f2 	udiv	r3, r3, r2
 800755e:	693a      	ldr	r2, [r7, #16]
 8007560:	8952      	ldrh	r2, [r2, #10]
 8007562:	3a01      	subs	r2, #1
 8007564:	4013      	ands	r3, r2
 8007566:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8007568:	69bb      	ldr	r3, [r7, #24]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d143      	bne.n	80075f6 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	699b      	ldr	r3, [r3, #24]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d10c      	bne.n	8007590 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	689b      	ldr	r3, [r3, #8]
 800757a:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800757c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800757e:	2b00      	cmp	r3, #0
 8007580:	d11a      	bne.n	80075b8 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	2100      	movs	r1, #0
 8007586:	4618      	mov	r0, r3
 8007588:	f7fe fa15 	bl	80059b6 <create_chain>
 800758c:	62b8      	str	r0, [r7, #40]	@ 0x28
 800758e:	e013      	b.n	80075b8 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007594:	2b00      	cmp	r3, #0
 8007596:	d007      	beq.n	80075a8 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	699b      	ldr	r3, [r3, #24]
 800759c:	4619      	mov	r1, r3
 800759e:	68f8      	ldr	r0, [r7, #12]
 80075a0:	f7fe faa1 	bl	8005ae6 <clmt_clust>
 80075a4:	62b8      	str	r0, [r7, #40]	@ 0x28
 80075a6:	e007      	b.n	80075b8 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80075a8:	68fa      	ldr	r2, [r7, #12]
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	69db      	ldr	r3, [r3, #28]
 80075ae:	4619      	mov	r1, r3
 80075b0:	4610      	mov	r0, r2
 80075b2:	f7fe fa00 	bl	80059b6 <create_chain>
 80075b6:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80075b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	f000 8109 	beq.w	80077d2 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80075c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075c2:	2b01      	cmp	r3, #1
 80075c4:	d104      	bne.n	80075d0 <f_write+0x10c>
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	2202      	movs	r2, #2
 80075ca:	755a      	strb	r2, [r3, #21]
 80075cc:	2302      	movs	r3, #2
 80075ce:	e109      	b.n	80077e4 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80075d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075d6:	d104      	bne.n	80075e2 <f_write+0x11e>
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	2201      	movs	r2, #1
 80075dc:	755a      	strb	r2, [r3, #21]
 80075de:	2301      	movs	r3, #1
 80075e0:	e100      	b.n	80077e4 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80075e6:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	689b      	ldr	r3, [r3, #8]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d102      	bne.n	80075f6 <f_write+0x132>
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80075f4:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	7d1b      	ldrb	r3, [r3, #20]
 80075fa:	b25b      	sxtb	r3, r3
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	da18      	bge.n	8007632 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007600:	693b      	ldr	r3, [r7, #16]
 8007602:	7858      	ldrb	r0, [r3, #1]
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	6a1a      	ldr	r2, [r3, #32]
 800760e:	2301      	movs	r3, #1
 8007610:	f7fd fbd4 	bl	8004dbc <disk_write>
 8007614:	4603      	mov	r3, r0
 8007616:	2b00      	cmp	r3, #0
 8007618:	d004      	beq.n	8007624 <f_write+0x160>
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	2201      	movs	r2, #1
 800761e:	755a      	strb	r2, [r3, #21]
 8007620:	2301      	movs	r3, #1
 8007622:	e0df      	b.n	80077e4 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	7d1b      	ldrb	r3, [r3, #20]
 8007628:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800762c:	b2da      	uxtb	r2, r3
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8007632:	693a      	ldr	r2, [r7, #16]
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	69db      	ldr	r3, [r3, #28]
 8007638:	4619      	mov	r1, r3
 800763a:	4610      	mov	r0, r2
 800763c:	f7fd ff4a 	bl	80054d4 <clust2sect>
 8007640:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8007642:	697b      	ldr	r3, [r7, #20]
 8007644:	2b00      	cmp	r3, #0
 8007646:	d104      	bne.n	8007652 <f_write+0x18e>
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	2202      	movs	r2, #2
 800764c:	755a      	strb	r2, [r3, #21]
 800764e:	2302      	movs	r3, #2
 8007650:	e0c8      	b.n	80077e4 <f_write+0x320>
			sect += csect;
 8007652:	697a      	ldr	r2, [r7, #20]
 8007654:	69bb      	ldr	r3, [r7, #24]
 8007656:	4413      	add	r3, r2
 8007658:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800765a:	693b      	ldr	r3, [r7, #16]
 800765c:	899b      	ldrh	r3, [r3, #12]
 800765e:	461a      	mov	r2, r3
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	fbb3 f3f2 	udiv	r3, r3, r2
 8007666:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8007668:	6a3b      	ldr	r3, [r7, #32]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d043      	beq.n	80076f6 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800766e:	69ba      	ldr	r2, [r7, #24]
 8007670:	6a3b      	ldr	r3, [r7, #32]
 8007672:	4413      	add	r3, r2
 8007674:	693a      	ldr	r2, [r7, #16]
 8007676:	8952      	ldrh	r2, [r2, #10]
 8007678:	4293      	cmp	r3, r2
 800767a:	d905      	bls.n	8007688 <f_write+0x1c4>
					cc = fs->csize - csect;
 800767c:	693b      	ldr	r3, [r7, #16]
 800767e:	895b      	ldrh	r3, [r3, #10]
 8007680:	461a      	mov	r2, r3
 8007682:	69bb      	ldr	r3, [r7, #24]
 8007684:	1ad3      	subs	r3, r2, r3
 8007686:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007688:	693b      	ldr	r3, [r7, #16]
 800768a:	7858      	ldrb	r0, [r3, #1]
 800768c:	6a3b      	ldr	r3, [r7, #32]
 800768e:	697a      	ldr	r2, [r7, #20]
 8007690:	69f9      	ldr	r1, [r7, #28]
 8007692:	f7fd fb93 	bl	8004dbc <disk_write>
 8007696:	4603      	mov	r3, r0
 8007698:	2b00      	cmp	r3, #0
 800769a:	d004      	beq.n	80076a6 <f_write+0x1e2>
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	2201      	movs	r2, #1
 80076a0:	755a      	strb	r2, [r3, #21]
 80076a2:	2301      	movs	r3, #1
 80076a4:	e09e      	b.n	80077e4 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	6a1a      	ldr	r2, [r3, #32]
 80076aa:	697b      	ldr	r3, [r7, #20]
 80076ac:	1ad3      	subs	r3, r2, r3
 80076ae:	6a3a      	ldr	r2, [r7, #32]
 80076b0:	429a      	cmp	r2, r3
 80076b2:	d918      	bls.n	80076e6 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	6a1a      	ldr	r2, [r3, #32]
 80076be:	697b      	ldr	r3, [r7, #20]
 80076c0:	1ad3      	subs	r3, r2, r3
 80076c2:	693a      	ldr	r2, [r7, #16]
 80076c4:	8992      	ldrh	r2, [r2, #12]
 80076c6:	fb02 f303 	mul.w	r3, r2, r3
 80076ca:	69fa      	ldr	r2, [r7, #28]
 80076cc:	18d1      	adds	r1, r2, r3
 80076ce:	693b      	ldr	r3, [r7, #16]
 80076d0:	899b      	ldrh	r3, [r3, #12]
 80076d2:	461a      	mov	r2, r3
 80076d4:	f7fd fc32 	bl	8004f3c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	7d1b      	ldrb	r3, [r3, #20]
 80076dc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80076e0:	b2da      	uxtb	r2, r3
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80076e6:	693b      	ldr	r3, [r7, #16]
 80076e8:	899b      	ldrh	r3, [r3, #12]
 80076ea:	461a      	mov	r2, r3
 80076ec:	6a3b      	ldr	r3, [r7, #32]
 80076ee:	fb02 f303 	mul.w	r3, r2, r3
 80076f2:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 80076f4:	e04b      	b.n	800778e <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	6a1b      	ldr	r3, [r3, #32]
 80076fa:	697a      	ldr	r2, [r7, #20]
 80076fc:	429a      	cmp	r2, r3
 80076fe:	d016      	beq.n	800772e <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	699a      	ldr	r2, [r3, #24]
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8007708:	429a      	cmp	r2, r3
 800770a:	d210      	bcs.n	800772e <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800770c:	693b      	ldr	r3, [r7, #16]
 800770e:	7858      	ldrb	r0, [r3, #1]
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007716:	2301      	movs	r3, #1
 8007718:	697a      	ldr	r2, [r7, #20]
 800771a:	f7fd fb2f 	bl	8004d7c <disk_read>
 800771e:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8007720:	2b00      	cmp	r3, #0
 8007722:	d004      	beq.n	800772e <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	2201      	movs	r2, #1
 8007728:	755a      	strb	r2, [r3, #21]
 800772a:	2301      	movs	r3, #1
 800772c:	e05a      	b.n	80077e4 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	697a      	ldr	r2, [r7, #20]
 8007732:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8007734:	693b      	ldr	r3, [r7, #16]
 8007736:	899b      	ldrh	r3, [r3, #12]
 8007738:	4618      	mov	r0, r3
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	699b      	ldr	r3, [r3, #24]
 800773e:	693a      	ldr	r2, [r7, #16]
 8007740:	8992      	ldrh	r2, [r2, #12]
 8007742:	fbb3 f1f2 	udiv	r1, r3, r2
 8007746:	fb01 f202 	mul.w	r2, r1, r2
 800774a:	1a9b      	subs	r3, r3, r2
 800774c:	1ac3      	subs	r3, r0, r3
 800774e:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8007750:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	429a      	cmp	r2, r3
 8007756:	d901      	bls.n	800775c <f_write+0x298>
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	699b      	ldr	r3, [r3, #24]
 8007766:	693a      	ldr	r2, [r7, #16]
 8007768:	8992      	ldrh	r2, [r2, #12]
 800776a:	fbb3 f0f2 	udiv	r0, r3, r2
 800776e:	fb00 f202 	mul.w	r2, r0, r2
 8007772:	1a9b      	subs	r3, r3, r2
 8007774:	440b      	add	r3, r1
 8007776:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007778:	69f9      	ldr	r1, [r7, #28]
 800777a:	4618      	mov	r0, r3
 800777c:	f7fd fbde 	bl	8004f3c <mem_cpy>
		fp->flag |= FA_DIRTY;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	7d1b      	ldrb	r3, [r3, #20]
 8007784:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007788:	b2da      	uxtb	r2, r3
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800778e:	69fa      	ldr	r2, [r7, #28]
 8007790:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007792:	4413      	add	r3, r2
 8007794:	61fb      	str	r3, [r7, #28]
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	699a      	ldr	r2, [r3, #24]
 800779a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800779c:	441a      	add	r2, r3
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	619a      	str	r2, [r3, #24]
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	68da      	ldr	r2, [r3, #12]
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	699b      	ldr	r3, [r3, #24]
 80077aa:	429a      	cmp	r2, r3
 80077ac:	bf38      	it	cc
 80077ae:	461a      	movcc	r2, r3
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	60da      	str	r2, [r3, #12]
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	681a      	ldr	r2, [r3, #0]
 80077b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077ba:	441a      	add	r2, r3
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	601a      	str	r2, [r3, #0]
 80077c0:	687a      	ldr	r2, [r7, #4]
 80077c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077c4:	1ad3      	subs	r3, r2, r3
 80077c6:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	f47f aeb5 	bne.w	800753a <f_write+0x76>
 80077d0:	e000      	b.n	80077d4 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80077d2:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	7d1b      	ldrb	r3, [r3, #20]
 80077d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80077dc:	b2da      	uxtb	r2, r3
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80077e2:	2300      	movs	r3, #0
}
 80077e4:	4618      	mov	r0, r3
 80077e6:	3730      	adds	r7, #48	@ 0x30
 80077e8:	46bd      	mov	sp, r7
 80077ea:	bd80      	pop	{r7, pc}

080077ec <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b086      	sub	sp, #24
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	f107 0208 	add.w	r2, r7, #8
 80077fa:	4611      	mov	r1, r2
 80077fc:	4618      	mov	r0, r3
 80077fe:	f7ff fc1d 	bl	800703c <validate>
 8007802:	4603      	mov	r3, r0
 8007804:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007806:	7dfb      	ldrb	r3, [r7, #23]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d168      	bne.n	80078de <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	7d1b      	ldrb	r3, [r3, #20]
 8007810:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007814:	2b00      	cmp	r3, #0
 8007816:	d062      	beq.n	80078de <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	7d1b      	ldrb	r3, [r3, #20]
 800781c:	b25b      	sxtb	r3, r3
 800781e:	2b00      	cmp	r3, #0
 8007820:	da15      	bge.n	800784e <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8007822:	68bb      	ldr	r3, [r7, #8]
 8007824:	7858      	ldrb	r0, [r3, #1]
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	6a1a      	ldr	r2, [r3, #32]
 8007830:	2301      	movs	r3, #1
 8007832:	f7fd fac3 	bl	8004dbc <disk_write>
 8007836:	4603      	mov	r3, r0
 8007838:	2b00      	cmp	r3, #0
 800783a:	d001      	beq.n	8007840 <f_sync+0x54>
 800783c:	2301      	movs	r3, #1
 800783e:	e04f      	b.n	80078e0 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	7d1b      	ldrb	r3, [r3, #20]
 8007844:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007848:	b2da      	uxtb	r2, r3
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800784e:	f7fc fc59 	bl	8004104 <get_fattime>
 8007852:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8007854:	68ba      	ldr	r2, [r7, #8]
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800785a:	4619      	mov	r1, r3
 800785c:	4610      	mov	r0, r2
 800785e:	f7fd fd9b 	bl	8005398 <move_window>
 8007862:	4603      	mov	r3, r0
 8007864:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8007866:	7dfb      	ldrb	r3, [r7, #23]
 8007868:	2b00      	cmp	r3, #0
 800786a:	d138      	bne.n	80078de <f_sync+0xf2>
					dir = fp->dir_ptr;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007870:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	330b      	adds	r3, #11
 8007876:	781a      	ldrb	r2, [r3, #0]
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	330b      	adds	r3, #11
 800787c:	f042 0220 	orr.w	r2, r2, #32
 8007880:	b2d2      	uxtb	r2, r2
 8007882:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	6818      	ldr	r0, [r3, #0]
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	689b      	ldr	r3, [r3, #8]
 800788c:	461a      	mov	r2, r3
 800788e:	68f9      	ldr	r1, [r7, #12]
 8007890:	f7fe fb26 	bl	8005ee0 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	f103 021c 	add.w	r2, r3, #28
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	68db      	ldr	r3, [r3, #12]
 800789e:	4619      	mov	r1, r3
 80078a0:	4610      	mov	r0, r2
 80078a2:	f7fd fb1f 	bl	8004ee4 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	3316      	adds	r3, #22
 80078aa:	6939      	ldr	r1, [r7, #16]
 80078ac:	4618      	mov	r0, r3
 80078ae:	f7fd fb19 	bl	8004ee4 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	3312      	adds	r3, #18
 80078b6:	2100      	movs	r1, #0
 80078b8:	4618      	mov	r0, r3
 80078ba:	f7fd faf8 	bl	8004eae <st_word>
					fs->wflag = 1;
 80078be:	68bb      	ldr	r3, [r7, #8]
 80078c0:	2201      	movs	r2, #1
 80078c2:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80078c4:	68bb      	ldr	r3, [r7, #8]
 80078c6:	4618      	mov	r0, r3
 80078c8:	f7fd fd94 	bl	80053f4 <sync_fs>
 80078cc:	4603      	mov	r3, r0
 80078ce:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	7d1b      	ldrb	r3, [r3, #20]
 80078d4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80078d8:	b2da      	uxtb	r2, r3
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80078de:	7dfb      	ldrb	r3, [r7, #23]
}
 80078e0:	4618      	mov	r0, r3
 80078e2:	3718      	adds	r7, #24
 80078e4:	46bd      	mov	sp, r7
 80078e6:	bd80      	pop	{r7, pc}

080078e8 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b084      	sub	sp, #16
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80078f0:	6878      	ldr	r0, [r7, #4]
 80078f2:	f7ff ff7b 	bl	80077ec <f_sync>
 80078f6:	4603      	mov	r3, r0
 80078f8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80078fa:	7bfb      	ldrb	r3, [r7, #15]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d118      	bne.n	8007932 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	f107 0208 	add.w	r2, r7, #8
 8007906:	4611      	mov	r1, r2
 8007908:	4618      	mov	r0, r3
 800790a:	f7ff fb97 	bl	800703c <validate>
 800790e:	4603      	mov	r3, r0
 8007910:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007912:	7bfb      	ldrb	r3, [r7, #15]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d10c      	bne.n	8007932 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	691b      	ldr	r3, [r3, #16]
 800791c:	4618      	mov	r0, r3
 800791e:	f7fd fc97 	bl	8005250 <dec_lock>
 8007922:	4603      	mov	r3, r0
 8007924:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8007926:	7bfb      	ldrb	r3, [r7, #15]
 8007928:	2b00      	cmp	r3, #0
 800792a:	d102      	bne.n	8007932 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2200      	movs	r2, #0
 8007930:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8007932:	7bfb      	ldrb	r3, [r7, #15]
}
 8007934:	4618      	mov	r0, r3
 8007936:	3710      	adds	r7, #16
 8007938:	46bd      	mov	sp, r7
 800793a:	bd80      	pop	{r7, pc}

0800793c <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800793c:	b580      	push	{r7, lr}
 800793e:	b090      	sub	sp, #64	@ 0x40
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
 8007944:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	f107 0208 	add.w	r2, r7, #8
 800794c:	4611      	mov	r1, r2
 800794e:	4618      	mov	r0, r3
 8007950:	f7ff fb74 	bl	800703c <validate>
 8007954:	4603      	mov	r3, r0
 8007956:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800795a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800795e:	2b00      	cmp	r3, #0
 8007960:	d103      	bne.n	800796a <f_lseek+0x2e>
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	7d5b      	ldrb	r3, [r3, #21]
 8007966:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800796a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800796e:	2b00      	cmp	r3, #0
 8007970:	d002      	beq.n	8007978 <f_lseek+0x3c>
 8007972:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8007976:	e201      	b.n	8007d7c <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800797c:	2b00      	cmp	r3, #0
 800797e:	f000 80d9 	beq.w	8007b34 <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8007982:	683b      	ldr	r3, [r7, #0]
 8007984:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007988:	d15a      	bne.n	8007a40 <f_lseek+0x104>
			tbl = fp->cltbl;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800798e:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8007990:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007992:	1d1a      	adds	r2, r3, #4
 8007994:	627a      	str	r2, [r7, #36]	@ 0x24
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	617b      	str	r3, [r7, #20]
 800799a:	2302      	movs	r3, #2
 800799c:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	689b      	ldr	r3, [r3, #8]
 80079a2:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 80079a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d03a      	beq.n	8007a20 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 80079aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079ac:	613b      	str	r3, [r7, #16]
 80079ae:	2300      	movs	r3, #0
 80079b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80079b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079b4:	3302      	adds	r3, #2
 80079b6:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 80079b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079ba:	60fb      	str	r3, [r7, #12]
 80079bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079be:	3301      	adds	r3, #1
 80079c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80079c6:	4618      	mov	r0, r3
 80079c8:	f7fd fda3 	bl	8005512 <get_fat>
 80079cc:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 80079ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079d0:	2b01      	cmp	r3, #1
 80079d2:	d804      	bhi.n	80079de <f_lseek+0xa2>
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	2202      	movs	r2, #2
 80079d8:	755a      	strb	r2, [r3, #21]
 80079da:	2302      	movs	r3, #2
 80079dc:	e1ce      	b.n	8007d7c <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80079de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079e4:	d104      	bne.n	80079f0 <f_lseek+0xb4>
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	2201      	movs	r2, #1
 80079ea:	755a      	strb	r2, [r3, #21]
 80079ec:	2301      	movs	r3, #1
 80079ee:	e1c5      	b.n	8007d7c <f_lseek+0x440>
					} while (cl == pcl + 1);
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	3301      	adds	r3, #1
 80079f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80079f6:	429a      	cmp	r2, r3
 80079f8:	d0de      	beq.n	80079b8 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 80079fa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80079fc:	697b      	ldr	r3, [r7, #20]
 80079fe:	429a      	cmp	r2, r3
 8007a00:	d809      	bhi.n	8007a16 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8007a02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a04:	1d1a      	adds	r2, r3, #4
 8007a06:	627a      	str	r2, [r7, #36]	@ 0x24
 8007a08:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007a0a:	601a      	str	r2, [r3, #0]
 8007a0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a0e:	1d1a      	adds	r2, r3, #4
 8007a10:	627a      	str	r2, [r7, #36]	@ 0x24
 8007a12:	693a      	ldr	r2, [r7, #16]
 8007a14:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8007a16:	68bb      	ldr	r3, [r7, #8]
 8007a18:	69db      	ldr	r3, [r3, #28]
 8007a1a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007a1c:	429a      	cmp	r2, r3
 8007a1e:	d3c4      	bcc.n	80079aa <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a24:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007a26:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8007a28:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007a2a:	697b      	ldr	r3, [r7, #20]
 8007a2c:	429a      	cmp	r2, r3
 8007a2e:	d803      	bhi.n	8007a38 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8007a30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a32:	2200      	movs	r2, #0
 8007a34:	601a      	str	r2, [r3, #0]
 8007a36:	e19f      	b.n	8007d78 <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8007a38:	2311      	movs	r3, #17
 8007a3a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8007a3e:	e19b      	b.n	8007d78 <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	68db      	ldr	r3, [r3, #12]
 8007a44:	683a      	ldr	r2, [r7, #0]
 8007a46:	429a      	cmp	r2, r3
 8007a48:	d902      	bls.n	8007a50 <f_lseek+0x114>
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	68db      	ldr	r3, [r3, #12]
 8007a4e:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	683a      	ldr	r2, [r7, #0]
 8007a54:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8007a56:	683b      	ldr	r3, [r7, #0]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	f000 818d 	beq.w	8007d78 <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	3b01      	subs	r3, #1
 8007a62:	4619      	mov	r1, r3
 8007a64:	6878      	ldr	r0, [r7, #4]
 8007a66:	f7fe f83e 	bl	8005ae6 <clmt_clust>
 8007a6a:	4602      	mov	r2, r0
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8007a70:	68ba      	ldr	r2, [r7, #8]
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	69db      	ldr	r3, [r3, #28]
 8007a76:	4619      	mov	r1, r3
 8007a78:	4610      	mov	r0, r2
 8007a7a:	f7fd fd2b 	bl	80054d4 <clust2sect>
 8007a7e:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8007a80:	69bb      	ldr	r3, [r7, #24]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d104      	bne.n	8007a90 <f_lseek+0x154>
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	2202      	movs	r2, #2
 8007a8a:	755a      	strb	r2, [r3, #21]
 8007a8c:	2302      	movs	r3, #2
 8007a8e:	e175      	b.n	8007d7c <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8007a90:	683b      	ldr	r3, [r7, #0]
 8007a92:	3b01      	subs	r3, #1
 8007a94:	68ba      	ldr	r2, [r7, #8]
 8007a96:	8992      	ldrh	r2, [r2, #12]
 8007a98:	fbb3 f3f2 	udiv	r3, r3, r2
 8007a9c:	68ba      	ldr	r2, [r7, #8]
 8007a9e:	8952      	ldrh	r2, [r2, #10]
 8007aa0:	3a01      	subs	r2, #1
 8007aa2:	4013      	ands	r3, r2
 8007aa4:	69ba      	ldr	r2, [r7, #24]
 8007aa6:	4413      	add	r3, r2
 8007aa8:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	699b      	ldr	r3, [r3, #24]
 8007aae:	68ba      	ldr	r2, [r7, #8]
 8007ab0:	8992      	ldrh	r2, [r2, #12]
 8007ab2:	fbb3 f1f2 	udiv	r1, r3, r2
 8007ab6:	fb01 f202 	mul.w	r2, r1, r2
 8007aba:	1a9b      	subs	r3, r3, r2
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	f000 815b 	beq.w	8007d78 <f_lseek+0x43c>
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	6a1b      	ldr	r3, [r3, #32]
 8007ac6:	69ba      	ldr	r2, [r7, #24]
 8007ac8:	429a      	cmp	r2, r3
 8007aca:	f000 8155 	beq.w	8007d78 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	7d1b      	ldrb	r3, [r3, #20]
 8007ad2:	b25b      	sxtb	r3, r3
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	da18      	bge.n	8007b0a <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007ad8:	68bb      	ldr	r3, [r7, #8]
 8007ada:	7858      	ldrb	r0, [r3, #1]
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	6a1a      	ldr	r2, [r3, #32]
 8007ae6:	2301      	movs	r3, #1
 8007ae8:	f7fd f968 	bl	8004dbc <disk_write>
 8007aec:	4603      	mov	r3, r0
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d004      	beq.n	8007afc <f_lseek+0x1c0>
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	2201      	movs	r2, #1
 8007af6:	755a      	strb	r2, [r3, #21]
 8007af8:	2301      	movs	r3, #1
 8007afa:	e13f      	b.n	8007d7c <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	7d1b      	ldrb	r3, [r3, #20]
 8007b00:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007b04:	b2da      	uxtb	r2, r3
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8007b0a:	68bb      	ldr	r3, [r7, #8]
 8007b0c:	7858      	ldrb	r0, [r3, #1]
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007b14:	2301      	movs	r3, #1
 8007b16:	69ba      	ldr	r2, [r7, #24]
 8007b18:	f7fd f930 	bl	8004d7c <disk_read>
 8007b1c:	4603      	mov	r3, r0
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d004      	beq.n	8007b2c <f_lseek+0x1f0>
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	2201      	movs	r2, #1
 8007b26:	755a      	strb	r2, [r3, #21]
 8007b28:	2301      	movs	r3, #1
 8007b2a:	e127      	b.n	8007d7c <f_lseek+0x440>
#endif
					fp->sect = dsc;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	69ba      	ldr	r2, [r7, #24]
 8007b30:	621a      	str	r2, [r3, #32]
 8007b32:	e121      	b.n	8007d78 <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	68db      	ldr	r3, [r3, #12]
 8007b38:	683a      	ldr	r2, [r7, #0]
 8007b3a:	429a      	cmp	r2, r3
 8007b3c:	d908      	bls.n	8007b50 <f_lseek+0x214>
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	7d1b      	ldrb	r3, [r3, #20]
 8007b42:	f003 0302 	and.w	r3, r3, #2
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d102      	bne.n	8007b50 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	68db      	ldr	r3, [r3, #12]
 8007b4e:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	699b      	ldr	r3, [r3, #24]
 8007b54:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8007b56:	2300      	movs	r3, #0
 8007b58:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007b5e:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8007b60:	683b      	ldr	r3, [r7, #0]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	f000 80b5 	beq.w	8007cd2 <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8007b68:	68bb      	ldr	r3, [r7, #8]
 8007b6a:	895b      	ldrh	r3, [r3, #10]
 8007b6c:	461a      	mov	r2, r3
 8007b6e:	68bb      	ldr	r3, [r7, #8]
 8007b70:	899b      	ldrh	r3, [r3, #12]
 8007b72:	fb02 f303 	mul.w	r3, r2, r3
 8007b76:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8007b78:	6a3b      	ldr	r3, [r7, #32]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d01b      	beq.n	8007bb6 <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8007b7e:	683b      	ldr	r3, [r7, #0]
 8007b80:	1e5a      	subs	r2, r3, #1
 8007b82:	69fb      	ldr	r3, [r7, #28]
 8007b84:	fbb2 f2f3 	udiv	r2, r2, r3
 8007b88:	6a3b      	ldr	r3, [r7, #32]
 8007b8a:	1e59      	subs	r1, r3, #1
 8007b8c:	69fb      	ldr	r3, [r7, #28]
 8007b8e:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8007b92:	429a      	cmp	r2, r3
 8007b94:	d30f      	bcc.n	8007bb6 <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8007b96:	6a3b      	ldr	r3, [r7, #32]
 8007b98:	1e5a      	subs	r2, r3, #1
 8007b9a:	69fb      	ldr	r3, [r7, #28]
 8007b9c:	425b      	negs	r3, r3
 8007b9e:	401a      	ands	r2, r3
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	699b      	ldr	r3, [r3, #24]
 8007ba8:	683a      	ldr	r2, [r7, #0]
 8007baa:	1ad3      	subs	r3, r2, r3
 8007bac:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	69db      	ldr	r3, [r3, #28]
 8007bb2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007bb4:	e022      	b.n	8007bfc <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	689b      	ldr	r3, [r3, #8]
 8007bba:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8007bbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d119      	bne.n	8007bf6 <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	2100      	movs	r1, #0
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	f7fd fef5 	bl	80059b6 <create_chain>
 8007bcc:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8007bce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bd0:	2b01      	cmp	r3, #1
 8007bd2:	d104      	bne.n	8007bde <f_lseek+0x2a2>
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2202      	movs	r2, #2
 8007bd8:	755a      	strb	r2, [r3, #21]
 8007bda:	2302      	movs	r3, #2
 8007bdc:	e0ce      	b.n	8007d7c <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007bde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007be0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007be4:	d104      	bne.n	8007bf0 <f_lseek+0x2b4>
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	2201      	movs	r2, #1
 8007bea:	755a      	strb	r2, [r3, #21]
 8007bec:	2301      	movs	r3, #1
 8007bee:	e0c5      	b.n	8007d7c <f_lseek+0x440>
					fp->obj.sclust = clst;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007bf4:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007bfa:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8007bfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d067      	beq.n	8007cd2 <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 8007c02:	e03a      	b.n	8007c7a <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 8007c04:	683a      	ldr	r2, [r7, #0]
 8007c06:	69fb      	ldr	r3, [r7, #28]
 8007c08:	1ad3      	subs	r3, r2, r3
 8007c0a:	603b      	str	r3, [r7, #0]
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	699a      	ldr	r2, [r3, #24]
 8007c10:	69fb      	ldr	r3, [r7, #28]
 8007c12:	441a      	add	r2, r3
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	7d1b      	ldrb	r3, [r3, #20]
 8007c1c:	f003 0302 	and.w	r3, r3, #2
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d00b      	beq.n	8007c3c <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007c28:	4618      	mov	r0, r3
 8007c2a:	f7fd fec4 	bl	80059b6 <create_chain>
 8007c2e:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8007c30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d108      	bne.n	8007c48 <f_lseek+0x30c>
							ofs = 0; break;
 8007c36:	2300      	movs	r3, #0
 8007c38:	603b      	str	r3, [r7, #0]
 8007c3a:	e022      	b.n	8007c82 <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007c40:	4618      	mov	r0, r3
 8007c42:	f7fd fc66 	bl	8005512 <get_fat>
 8007c46:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007c48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c4e:	d104      	bne.n	8007c5a <f_lseek+0x31e>
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2201      	movs	r2, #1
 8007c54:	755a      	strb	r2, [r3, #21]
 8007c56:	2301      	movs	r3, #1
 8007c58:	e090      	b.n	8007d7c <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8007c5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c5c:	2b01      	cmp	r3, #1
 8007c5e:	d904      	bls.n	8007c6a <f_lseek+0x32e>
 8007c60:	68bb      	ldr	r3, [r7, #8]
 8007c62:	69db      	ldr	r3, [r3, #28]
 8007c64:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007c66:	429a      	cmp	r2, r3
 8007c68:	d304      	bcc.n	8007c74 <f_lseek+0x338>
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	2202      	movs	r2, #2
 8007c6e:	755a      	strb	r2, [r3, #21]
 8007c70:	2302      	movs	r3, #2
 8007c72:	e083      	b.n	8007d7c <f_lseek+0x440>
					fp->clust = clst;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007c78:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8007c7a:	683a      	ldr	r2, [r7, #0]
 8007c7c:	69fb      	ldr	r3, [r7, #28]
 8007c7e:	429a      	cmp	r2, r3
 8007c80:	d8c0      	bhi.n	8007c04 <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	699a      	ldr	r2, [r3, #24]
 8007c86:	683b      	ldr	r3, [r7, #0]
 8007c88:	441a      	add	r2, r3
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8007c8e:	68bb      	ldr	r3, [r7, #8]
 8007c90:	899b      	ldrh	r3, [r3, #12]
 8007c92:	461a      	mov	r2, r3
 8007c94:	683b      	ldr	r3, [r7, #0]
 8007c96:	fbb3 f1f2 	udiv	r1, r3, r2
 8007c9a:	fb01 f202 	mul.w	r2, r1, r2
 8007c9e:	1a9b      	subs	r3, r3, r2
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d016      	beq.n	8007cd2 <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8007ca4:	68bb      	ldr	r3, [r7, #8]
 8007ca6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007ca8:	4618      	mov	r0, r3
 8007caa:	f7fd fc13 	bl	80054d4 <clust2sect>
 8007cae:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8007cb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d104      	bne.n	8007cc0 <f_lseek+0x384>
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	2202      	movs	r2, #2
 8007cba:	755a      	strb	r2, [r3, #21]
 8007cbc:	2302      	movs	r3, #2
 8007cbe:	e05d      	b.n	8007d7c <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 8007cc0:	68bb      	ldr	r3, [r7, #8]
 8007cc2:	899b      	ldrh	r3, [r3, #12]
 8007cc4:	461a      	mov	r2, r3
 8007cc6:	683b      	ldr	r3, [r7, #0]
 8007cc8:	fbb3 f3f2 	udiv	r3, r3, r2
 8007ccc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007cce:	4413      	add	r3, r2
 8007cd0:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	699a      	ldr	r2, [r3, #24]
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	68db      	ldr	r3, [r3, #12]
 8007cda:	429a      	cmp	r2, r3
 8007cdc:	d90a      	bls.n	8007cf4 <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	699a      	ldr	r2, [r3, #24]
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	7d1b      	ldrb	r3, [r3, #20]
 8007cea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007cee:	b2da      	uxtb	r2, r3
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	699b      	ldr	r3, [r3, #24]
 8007cf8:	68ba      	ldr	r2, [r7, #8]
 8007cfa:	8992      	ldrh	r2, [r2, #12]
 8007cfc:	fbb3 f1f2 	udiv	r1, r3, r2
 8007d00:	fb01 f202 	mul.w	r2, r1, r2
 8007d04:	1a9b      	subs	r3, r3, r2
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d036      	beq.n	8007d78 <f_lseek+0x43c>
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	6a1b      	ldr	r3, [r3, #32]
 8007d0e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007d10:	429a      	cmp	r2, r3
 8007d12:	d031      	beq.n	8007d78 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	7d1b      	ldrb	r3, [r3, #20]
 8007d18:	b25b      	sxtb	r3, r3
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	da18      	bge.n	8007d50 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007d1e:	68bb      	ldr	r3, [r7, #8]
 8007d20:	7858      	ldrb	r0, [r3, #1]
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	6a1a      	ldr	r2, [r3, #32]
 8007d2c:	2301      	movs	r3, #1
 8007d2e:	f7fd f845 	bl	8004dbc <disk_write>
 8007d32:	4603      	mov	r3, r0
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d004      	beq.n	8007d42 <f_lseek+0x406>
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	2201      	movs	r2, #1
 8007d3c:	755a      	strb	r2, [r3, #21]
 8007d3e:	2301      	movs	r3, #1
 8007d40:	e01c      	b.n	8007d7c <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	7d1b      	ldrb	r3, [r3, #20]
 8007d46:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007d4a:	b2da      	uxtb	r2, r3
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8007d50:	68bb      	ldr	r3, [r7, #8]
 8007d52:	7858      	ldrb	r0, [r3, #1]
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007d5a:	2301      	movs	r3, #1
 8007d5c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007d5e:	f7fd f80d 	bl	8004d7c <disk_read>
 8007d62:	4603      	mov	r3, r0
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d004      	beq.n	8007d72 <f_lseek+0x436>
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2201      	movs	r2, #1
 8007d6c:	755a      	strb	r2, [r3, #21]
 8007d6e:	2301      	movs	r3, #1
 8007d70:	e004      	b.n	8007d7c <f_lseek+0x440>
#endif
			fp->sect = nsect;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007d76:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8007d78:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	3740      	adds	r7, #64	@ 0x40
 8007d80:	46bd      	mov	sp, r7
 8007d82:	bd80      	pop	{r7, pc}

08007d84 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8007d84:	b580      	push	{r7, lr}
 8007d86:	b092      	sub	sp, #72	@ 0x48
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	60f8      	str	r0, [r7, #12]
 8007d8c:	60b9      	str	r1, [r7, #8]
 8007d8e:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8007d90:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8007d94:	f107 030c 	add.w	r3, r7, #12
 8007d98:	2200      	movs	r2, #0
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	f7fe fec8 	bl	8006b30 <find_volume>
 8007da0:	4603      	mov	r3, r0
 8007da2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	if (res == FR_OK) {
 8007da6:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	f040 8099 	bne.w	8007ee2 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 8007db0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 8007db6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007db8:	699a      	ldr	r2, [r3, #24]
 8007dba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007dbc:	69db      	ldr	r3, [r3, #28]
 8007dbe:	3b02      	subs	r3, #2
 8007dc0:	429a      	cmp	r2, r3
 8007dc2:	d804      	bhi.n	8007dce <f_getfree+0x4a>
			*nclst = fs->free_clst;
 8007dc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007dc6:	699a      	ldr	r2, [r3, #24]
 8007dc8:	68bb      	ldr	r3, [r7, #8]
 8007dca:	601a      	str	r2, [r3, #0]
 8007dcc:	e089      	b.n	8007ee2 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 8007dce:	2300      	movs	r3, #0
 8007dd0:	643b      	str	r3, [r7, #64]	@ 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 8007dd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007dd4:	781b      	ldrb	r3, [r3, #0]
 8007dd6:	2b01      	cmp	r3, #1
 8007dd8:	d128      	bne.n	8007e2c <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 8007dda:	2302      	movs	r3, #2
 8007ddc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007dde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007de0:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 8007de2:	f107 0314 	add.w	r3, r7, #20
 8007de6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007de8:	4618      	mov	r0, r3
 8007dea:	f7fd fb92 	bl	8005512 <get_fat>
 8007dee:	62f8      	str	r0, [r7, #44]	@ 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8007df0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007df2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007df6:	d103      	bne.n	8007e00 <f_getfree+0x7c>
 8007df8:	2301      	movs	r3, #1
 8007dfa:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8007dfe:	e063      	b.n	8007ec8 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8007e00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e02:	2b01      	cmp	r3, #1
 8007e04:	d103      	bne.n	8007e0e <f_getfree+0x8a>
 8007e06:	2302      	movs	r3, #2
 8007e08:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8007e0c:	e05c      	b.n	8007ec8 <f_getfree+0x144>
					if (stat == 0) nfree++;
 8007e0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d102      	bne.n	8007e1a <f_getfree+0x96>
 8007e14:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007e16:	3301      	adds	r3, #1
 8007e18:	643b      	str	r3, [r7, #64]	@ 0x40
				} while (++clst < fs->n_fatent);
 8007e1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007e1c:	3301      	adds	r3, #1
 8007e1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007e20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e22:	69db      	ldr	r3, [r3, #28]
 8007e24:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8007e26:	429a      	cmp	r2, r3
 8007e28:	d3db      	bcc.n	8007de2 <f_getfree+0x5e>
 8007e2a:	e04d      	b.n	8007ec8 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 8007e2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e2e:	69db      	ldr	r3, [r3, #28]
 8007e30:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007e32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e36:	63bb      	str	r3, [r7, #56]	@ 0x38
					i = 0; p = 0;
 8007e38:	2300      	movs	r3, #0
 8007e3a:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	633b      	str	r3, [r7, #48]	@ 0x30
					do {
						if (i == 0) {
 8007e40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d113      	bne.n	8007e6e <f_getfree+0xea>
							res = move_window(fs, sect++);
 8007e46:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007e48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e4a:	1c5a      	adds	r2, r3, #1
 8007e4c:	63ba      	str	r2, [r7, #56]	@ 0x38
 8007e4e:	4619      	mov	r1, r3
 8007e50:	f7fd faa2 	bl	8005398 <move_window>
 8007e54:	4603      	mov	r3, r0
 8007e56:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
							if (res != FR_OK) break;
 8007e5a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d131      	bne.n	8007ec6 <f_getfree+0x142>
							p = fs->win;
 8007e62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e64:	3338      	adds	r3, #56	@ 0x38
 8007e66:	633b      	str	r3, [r7, #48]	@ 0x30
							i = SS(fs);
 8007e68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e6a:	899b      	ldrh	r3, [r3, #12]
 8007e6c:	637b      	str	r3, [r7, #52]	@ 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 8007e6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e70:	781b      	ldrb	r3, [r3, #0]
 8007e72:	2b02      	cmp	r3, #2
 8007e74:	d10f      	bne.n	8007e96 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 8007e76:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007e78:	f7fc ffde 	bl	8004e38 <ld_word>
 8007e7c:	4603      	mov	r3, r0
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d102      	bne.n	8007e88 <f_getfree+0x104>
 8007e82:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007e84:	3301      	adds	r3, #1
 8007e86:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 2; i -= 2;
 8007e88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e8a:	3302      	adds	r3, #2
 8007e8c:	633b      	str	r3, [r7, #48]	@ 0x30
 8007e8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e90:	3b02      	subs	r3, #2
 8007e92:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e94:	e010      	b.n	8007eb8 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 8007e96:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007e98:	f7fc ffe6 	bl	8004e68 <ld_dword>
 8007e9c:	4603      	mov	r3, r0
 8007e9e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d102      	bne.n	8007eac <f_getfree+0x128>
 8007ea6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007ea8:	3301      	adds	r3, #1
 8007eaa:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 4; i -= 4;
 8007eac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007eae:	3304      	adds	r3, #4
 8007eb0:	633b      	str	r3, [r7, #48]	@ 0x30
 8007eb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007eb4:	3b04      	subs	r3, #4
 8007eb6:	637b      	str	r3, [r7, #52]	@ 0x34
						}
					} while (--clst);
 8007eb8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007eba:	3b01      	subs	r3, #1
 8007ebc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007ebe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d1bd      	bne.n	8007e40 <f_getfree+0xbc>
 8007ec4:	e000      	b.n	8007ec8 <f_getfree+0x144>
							if (res != FR_OK) break;
 8007ec6:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 8007ec8:	68bb      	ldr	r3, [r7, #8]
 8007eca:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007ecc:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 8007ece:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ed0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007ed2:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 8007ed4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ed6:	791a      	ldrb	r2, [r3, #4]
 8007ed8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007eda:	f042 0201 	orr.w	r2, r2, #1
 8007ede:	b2d2      	uxtb	r2, r2
 8007ee0:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 8007ee2:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	3748      	adds	r7, #72	@ 0x48
 8007eea:	46bd      	mov	sp, r7
 8007eec:	bd80      	pop	{r7, pc}

08007eee <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 8007eee:	b580      	push	{r7, lr}
 8007ef0:	b084      	sub	sp, #16
 8007ef2:	af00      	add	r7, sp, #0
 8007ef4:	6078      	str	r0, [r7, #4]
 8007ef6:	460b      	mov	r3, r1
 8007ef8:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 8007efa:	78fb      	ldrb	r3, [r7, #3]
 8007efc:	2b0a      	cmp	r3, #10
 8007efe:	d103      	bne.n	8007f08 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 8007f00:	210d      	movs	r1, #13
 8007f02:	6878      	ldr	r0, [r7, #4]
 8007f04:	f7ff fff3 	bl	8007eee <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	685b      	ldr	r3, [r3, #4]
 8007f0c:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	db25      	blt.n	8007f60 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	1c5a      	adds	r2, r3, #1
 8007f18:	60fa      	str	r2, [r7, #12]
 8007f1a:	687a      	ldr	r2, [r7, #4]
 8007f1c:	4413      	add	r3, r2
 8007f1e:	78fa      	ldrb	r2, [r7, #3]
 8007f20:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	2b3c      	cmp	r3, #60	@ 0x3c
 8007f26:	dd12      	ble.n	8007f4e <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	6818      	ldr	r0, [r3, #0]
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	f103 010c 	add.w	r1, r3, #12
 8007f32:	68fa      	ldr	r2, [r7, #12]
 8007f34:	f107 0308 	add.w	r3, r7, #8
 8007f38:	f7ff fac4 	bl	80074c4 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8007f3c:	68ba      	ldr	r2, [r7, #8]
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	429a      	cmp	r2, r3
 8007f42:	d101      	bne.n	8007f48 <putc_bfd+0x5a>
 8007f44:	2300      	movs	r3, #0
 8007f46:	e001      	b.n	8007f4c <putc_bfd+0x5e>
 8007f48:	f04f 33ff 	mov.w	r3, #4294967295
 8007f4c:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	68fa      	ldr	r2, [r7, #12]
 8007f52:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	689b      	ldr	r3, [r3, #8]
 8007f58:	1c5a      	adds	r2, r3, #1
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	609a      	str	r2, [r3, #8]
 8007f5e:	e000      	b.n	8007f62 <putc_bfd+0x74>
	if (i < 0) return;
 8007f60:	bf00      	nop
}
 8007f62:	3710      	adds	r7, #16
 8007f64:	46bd      	mov	sp, r7
 8007f66:	bd80      	pop	{r7, pc}

08007f68 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	b084      	sub	sp, #16
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	685b      	ldr	r3, [r3, #4]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	db16      	blt.n	8007fa6 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	6818      	ldr	r0, [r3, #0]
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	f103 010c 	add.w	r1, r3, #12
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	685b      	ldr	r3, [r3, #4]
 8007f86:	461a      	mov	r2, r3
 8007f88:	f107 030c 	add.w	r3, r7, #12
 8007f8c:	f7ff fa9a 	bl	80074c4 <f_write>
 8007f90:	4603      	mov	r3, r0
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d107      	bne.n	8007fa6 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	685b      	ldr	r3, [r3, #4]
 8007f9a:	68fa      	ldr	r2, [r7, #12]
 8007f9c:	4293      	cmp	r3, r2
 8007f9e:	d102      	bne.n	8007fa6 <putc_flush+0x3e>
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	689b      	ldr	r3, [r3, #8]
 8007fa4:	e001      	b.n	8007faa <putc_flush+0x42>
	return EOF;
 8007fa6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007faa:	4618      	mov	r0, r3
 8007fac:	3710      	adds	r7, #16
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	bd80      	pop	{r7, pc}

08007fb2 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 8007fb2:	b480      	push	{r7}
 8007fb4:	b083      	sub	sp, #12
 8007fb6:	af00      	add	r7, sp, #0
 8007fb8:	6078      	str	r0, [r7, #4]
 8007fba:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	683a      	ldr	r2, [r7, #0]
 8007fc0:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	605a      	str	r2, [r3, #4]
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	685a      	ldr	r2, [r3, #4]
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	609a      	str	r2, [r3, #8]
}
 8007fd0:	bf00      	nop
 8007fd2:	370c      	adds	r7, #12
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fda:	4770      	bx	lr

08007fdc <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
 8007fdc:	b40e      	push	{r1, r2, r3}
 8007fde:	b580      	push	{r7, lr}
 8007fe0:	b0a7      	sub	sp, #156	@ 0x9c
 8007fe2:	af00      	add	r7, sp, #0
 8007fe4:	6078      	str	r0, [r7, #4]
	UINT i, j, w;
	DWORD v;
	TCHAR c, d, str[32], *p;


	putc_init(&pb, fp);
 8007fe6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8007fea:	6879      	ldr	r1, [r7, #4]
 8007fec:	4618      	mov	r0, r3
 8007fee:	f7ff ffe0 	bl	8007fb2 <putc_init>

	va_start(arp, fmt);
 8007ff2:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8007ff6:	67bb      	str	r3, [r7, #120]	@ 0x78

	for (;;) {
		c = *fmt++;
 8007ff8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007ffc:	1c5a      	adds	r2, r3, #1
 8007ffe:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8008002:	781b      	ldrb	r3, [r3, #0]
 8008004:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
		if (c == 0) break;			/* End of string */
 8008008:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 800800c:	2b00      	cmp	r3, #0
 800800e:	f000 81f2 	beq.w	80083f6 <f_printf+0x41a>
		if (c != '%') {				/* Non escape character */
 8008012:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8008016:	2b25      	cmp	r3, #37	@ 0x25
 8008018:	d008      	beq.n	800802c <f_printf+0x50>
			putc_bfd(&pb, c);
 800801a:	f897 2083 	ldrb.w	r2, [r7, #131]	@ 0x83
 800801e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8008022:	4611      	mov	r1, r2
 8008024:	4618      	mov	r0, r3
 8008026:	f7ff ff62 	bl	8007eee <putc_bfd>
			continue;
 800802a:	e1e3      	b.n	80083f4 <f_printf+0x418>
		}
		w = f = 0;
 800802c:	2300      	movs	r3, #0
 800802e:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 8008032:	2300      	movs	r3, #0
 8008034:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
		c = *fmt++;
 8008038:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800803c:	1c5a      	adds	r2, r3, #1
 800803e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8008042:	781b      	ldrb	r3, [r3, #0]
 8008044:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
		if (c == '0') {				/* Flag: '0' padding */
 8008048:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 800804c:	2b30      	cmp	r3, #48	@ 0x30
 800804e:	d10b      	bne.n	8008068 <f_printf+0x8c>
			f = 1; c = *fmt++;
 8008050:	2301      	movs	r3, #1
 8008052:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 8008056:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800805a:	1c5a      	adds	r2, r3, #1
 800805c:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8008060:	781b      	ldrb	r3, [r3, #0]
 8008062:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
 8008066:	e024      	b.n	80080b2 <f_printf+0xd6>
		} else {
			if (c == '-') {			/* Flag: left justified */
 8008068:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 800806c:	2b2d      	cmp	r3, #45	@ 0x2d
 800806e:	d120      	bne.n	80080b2 <f_printf+0xd6>
				f = 2; c = *fmt++;
 8008070:	2302      	movs	r3, #2
 8008072:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 8008076:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800807a:	1c5a      	adds	r2, r3, #1
 800807c:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8008080:	781b      	ldrb	r3, [r3, #0]
 8008082:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
			}
		}
		while (IsDigit(c)) {		/* Precision */
 8008086:	e014      	b.n	80080b2 <f_printf+0xd6>
			w = w * 10 + c - '0';
 8008088:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800808c:	4613      	mov	r3, r2
 800808e:	009b      	lsls	r3, r3, #2
 8008090:	4413      	add	r3, r2
 8008092:	005b      	lsls	r3, r3, #1
 8008094:	461a      	mov	r2, r3
 8008096:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 800809a:	4413      	add	r3, r2
 800809c:	3b30      	subs	r3, #48	@ 0x30
 800809e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
			c = *fmt++;
 80080a2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80080a6:	1c5a      	adds	r2, r3, #1
 80080a8:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80080ac:	781b      	ldrb	r3, [r3, #0]
 80080ae:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
		while (IsDigit(c)) {		/* Precision */
 80080b2:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 80080b6:	2b2f      	cmp	r3, #47	@ 0x2f
 80080b8:	d903      	bls.n	80080c2 <f_printf+0xe6>
 80080ba:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 80080be:	2b39      	cmp	r3, #57	@ 0x39
 80080c0:	d9e2      	bls.n	8008088 <f_printf+0xac>
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 80080c2:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 80080c6:	2b6c      	cmp	r3, #108	@ 0x6c
 80080c8:	d003      	beq.n	80080d2 <f_printf+0xf6>
 80080ca:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 80080ce:	2b4c      	cmp	r3, #76	@ 0x4c
 80080d0:	d10d      	bne.n	80080ee <f_printf+0x112>
			f |= 4; c = *fmt++;
 80080d2:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 80080d6:	f043 0304 	orr.w	r3, r3, #4
 80080da:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 80080de:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80080e2:	1c5a      	adds	r2, r3, #1
 80080e4:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80080e8:	781b      	ldrb	r3, [r3, #0]
 80080ea:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
		}
		if (!c) break;
 80080ee:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	f000 8181 	beq.w	80083fa <f_printf+0x41e>
		d = c;
 80080f8:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 80080fc:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
		if (IsLower(d)) d -= 0x20;
 8008100:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 8008104:	2b60      	cmp	r3, #96	@ 0x60
 8008106:	d908      	bls.n	800811a <f_printf+0x13e>
 8008108:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 800810c:	2b7a      	cmp	r3, #122	@ 0x7a
 800810e:	d804      	bhi.n	800811a <f_printf+0x13e>
 8008110:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 8008114:	3b20      	subs	r3, #32
 8008116:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
		switch (d) {				/* Type is... */
 800811a:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 800811e:	3b42      	subs	r3, #66	@ 0x42
 8008120:	2b16      	cmp	r3, #22
 8008122:	f200 8098 	bhi.w	8008256 <f_printf+0x27a>
 8008126:	a201      	add	r2, pc, #4	@ (adr r2, 800812c <f_printf+0x150>)
 8008128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800812c:	08008237 	.word	0x08008237
 8008130:	0800821f 	.word	0x0800821f
 8008134:	08008247 	.word	0x08008247
 8008138:	08008257 	.word	0x08008257
 800813c:	08008257 	.word	0x08008257
 8008140:	08008257 	.word	0x08008257
 8008144:	08008257 	.word	0x08008257
 8008148:	08008257 	.word	0x08008257
 800814c:	08008257 	.word	0x08008257
 8008150:	08008257 	.word	0x08008257
 8008154:	08008257 	.word	0x08008257
 8008158:	08008257 	.word	0x08008257
 800815c:	08008257 	.word	0x08008257
 8008160:	0800823f 	.word	0x0800823f
 8008164:	08008257 	.word	0x08008257
 8008168:	08008257 	.word	0x08008257
 800816c:	08008257 	.word	0x08008257
 8008170:	08008189 	.word	0x08008189
 8008174:	08008257 	.word	0x08008257
 8008178:	08008247 	.word	0x08008247
 800817c:	08008257 	.word	0x08008257
 8008180:	08008257 	.word	0x08008257
 8008184:	0800824f 	.word	0x0800824f
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
 8008188:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800818a:	1d1a      	adds	r2, r3, #4
 800818c:	67ba      	str	r2, [r7, #120]	@ 0x78
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	67fb      	str	r3, [r7, #124]	@ 0x7c
			for (j = 0; p[j]; j++) ;
 8008192:	2300      	movs	r3, #0
 8008194:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008198:	e004      	b.n	80081a4 <f_printf+0x1c8>
 800819a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800819e:	3301      	adds	r3, #1
 80081a0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80081a4:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80081a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80081aa:	4413      	add	r3, r2
 80081ac:	781b      	ldrb	r3, [r3, #0]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d1f3      	bne.n	800819a <f_printf+0x1be>
			if (!(f & 2)) {
 80081b2:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 80081b6:	f003 0302 	and.w	r3, r3, #2
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d11a      	bne.n	80081f4 <f_printf+0x218>
				while (j++ < w) putc_bfd(&pb, ' ');
 80081be:	e005      	b.n	80081cc <f_printf+0x1f0>
 80081c0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80081c4:	2120      	movs	r1, #32
 80081c6:	4618      	mov	r0, r3
 80081c8:	f7ff fe91 	bl	8007eee <putc_bfd>
 80081cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80081d0:	1c5a      	adds	r2, r3, #1
 80081d2:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80081d6:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80081da:	429a      	cmp	r2, r3
 80081dc:	d8f0      	bhi.n	80081c0 <f_printf+0x1e4>
			}
			while (*p) putc_bfd(&pb, *p++);
 80081de:	e009      	b.n	80081f4 <f_printf+0x218>
 80081e0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80081e2:	1c5a      	adds	r2, r3, #1
 80081e4:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80081e6:	781a      	ldrb	r2, [r3, #0]
 80081e8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80081ec:	4611      	mov	r1, r2
 80081ee:	4618      	mov	r0, r3
 80081f0:	f7ff fe7d 	bl	8007eee <putc_bfd>
 80081f4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80081f6:	781b      	ldrb	r3, [r3, #0]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d1f1      	bne.n	80081e0 <f_printf+0x204>
			while (j++ < w) putc_bfd(&pb, ' ');
 80081fc:	e005      	b.n	800820a <f_printf+0x22e>
 80081fe:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8008202:	2120      	movs	r1, #32
 8008204:	4618      	mov	r0, r3
 8008206:	f7ff fe72 	bl	8007eee <putc_bfd>
 800820a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800820e:	1c5a      	adds	r2, r3, #1
 8008210:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8008214:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8008218:	429a      	cmp	r2, r3
 800821a:	d8f0      	bhi.n	80081fe <f_printf+0x222>
			continue;
 800821c:	e0ea      	b.n	80083f4 <f_printf+0x418>

		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 800821e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008220:	1d1a      	adds	r2, r3, #4
 8008222:	67ba      	str	r2, [r7, #120]	@ 0x78
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	b2da      	uxtb	r2, r3
 8008228:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800822c:	4611      	mov	r1, r2
 800822e:	4618      	mov	r0, r3
 8008230:	f7ff fe5d 	bl	8007eee <putc_bfd>
 8008234:	e0de      	b.n	80083f4 <f_printf+0x418>

		case 'B' :					/* Binary */
			r = 2; break;
 8008236:	2302      	movs	r3, #2
 8008238:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 800823c:	e014      	b.n	8008268 <f_printf+0x28c>

		case 'O' :					/* Octal */
			r = 8; break;
 800823e:	2308      	movs	r3, #8
 8008240:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 8008244:	e010      	b.n	8008268 <f_printf+0x28c>

		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
 8008246:	230a      	movs	r3, #10
 8008248:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 800824c:	e00c      	b.n	8008268 <f_printf+0x28c>

		case 'X' :					/* Hexdecimal */
			r = 16; break;
 800824e:	2310      	movs	r3, #16
 8008250:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 8008254:	e008      	b.n	8008268 <f_printf+0x28c>

		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
 8008256:	f897 2083 	ldrb.w	r2, [r7, #131]	@ 0x83
 800825a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800825e:	4611      	mov	r1, r2
 8008260:	4618      	mov	r0, r3
 8008262:	f7ff fe44 	bl	8007eee <putc_bfd>
 8008266:	e0c5      	b.n	80083f4 <f_printf+0x418>
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 8008268:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800826c:	f003 0304 	and.w	r3, r3, #4
 8008270:	2b00      	cmp	r3, #0
 8008272:	d004      	beq.n	800827e <f_printf+0x2a2>
 8008274:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008276:	1d1a      	adds	r2, r3, #4
 8008278:	67ba      	str	r2, [r7, #120]	@ 0x78
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	e00c      	b.n	8008298 <f_printf+0x2bc>
 800827e:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 8008282:	2b44      	cmp	r3, #68	@ 0x44
 8008284:	d104      	bne.n	8008290 <f_printf+0x2b4>
 8008286:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008288:	1d1a      	adds	r2, r3, #4
 800828a:	67ba      	str	r2, [r7, #120]	@ 0x78
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	e003      	b.n	8008298 <f_printf+0x2bc>
 8008290:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008292:	1d1a      	adds	r2, r3, #4
 8008294:	67ba      	str	r2, [r7, #120]	@ 0x78
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
		if (d == 'D' && (v & 0x80000000)) {
 800829c:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 80082a0:	2b44      	cmp	r3, #68	@ 0x44
 80082a2:	d10e      	bne.n	80082c2 <f_printf+0x2e6>
 80082a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	da0a      	bge.n	80082c2 <f_printf+0x2e6>
			v = 0 - v;
 80082ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80082b0:	425b      	negs	r3, r3
 80082b2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
			f |= 8;
 80082b6:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 80082ba:	f043 0308 	orr.w	r3, r3, #8
 80082be:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
		}
		i = 0;
 80082c2:	2300      	movs	r3, #0
 80082c4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
		do {
			d = (TCHAR)(v % r); v /= r;
 80082c8:	f897 2096 	ldrb.w	r2, [r7, #150]	@ 0x96
 80082cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80082d0:	fbb3 f1f2 	udiv	r1, r3, r2
 80082d4:	fb01 f202 	mul.w	r2, r1, r2
 80082d8:	1a9b      	subs	r3, r3, r2
 80082da:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
 80082de:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 80082e2:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80082e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80082ea:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 80082ee:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 80082f2:	2b09      	cmp	r3, #9
 80082f4:	d90b      	bls.n	800830e <f_printf+0x332>
 80082f6:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 80082fa:	2b78      	cmp	r3, #120	@ 0x78
 80082fc:	d101      	bne.n	8008302 <f_printf+0x326>
 80082fe:	2227      	movs	r2, #39	@ 0x27
 8008300:	e000      	b.n	8008304 <f_printf+0x328>
 8008302:	2207      	movs	r2, #7
 8008304:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 8008308:	4413      	add	r3, r2
 800830a:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
			str[i++] = d + '0';
 800830e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008312:	1c5a      	adds	r2, r3, #1
 8008314:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8008318:	f897 2082 	ldrb.w	r2, [r7, #130]	@ 0x82
 800831c:	3230      	adds	r2, #48	@ 0x30
 800831e:	b2d2      	uxtb	r2, r2
 8008320:	3398      	adds	r3, #152	@ 0x98
 8008322:	443b      	add	r3, r7
 8008324:	f803 2c8c 	strb.w	r2, [r3, #-140]
		} while (v && i < sizeof str / sizeof str[0]);
 8008328:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800832c:	2b00      	cmp	r3, #0
 800832e:	d003      	beq.n	8008338 <f_printf+0x35c>
 8008330:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008334:	2b1f      	cmp	r3, #31
 8008336:	d9c7      	bls.n	80082c8 <f_printf+0x2ec>
		if (f & 8) str[i++] = '-';
 8008338:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800833c:	f003 0308 	and.w	r3, r3, #8
 8008340:	2b00      	cmp	r3, #0
 8008342:	d009      	beq.n	8008358 <f_printf+0x37c>
 8008344:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008348:	1c5a      	adds	r2, r3, #1
 800834a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 800834e:	3398      	adds	r3, #152	@ 0x98
 8008350:	443b      	add	r3, r7
 8008352:	222d      	movs	r2, #45	@ 0x2d
 8008354:	f803 2c8c 	strb.w	r2, [r3, #-140]
		j = i; d = (f & 1) ? '0' : ' ';
 8008358:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800835c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008360:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8008364:	f003 0301 	and.w	r3, r3, #1
 8008368:	2b00      	cmp	r3, #0
 800836a:	d001      	beq.n	8008370 <f_printf+0x394>
 800836c:	2330      	movs	r3, #48	@ 0x30
 800836e:	e000      	b.n	8008372 <f_printf+0x396>
 8008370:	2320      	movs	r3, #32
 8008372:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 8008376:	e007      	b.n	8008388 <f_printf+0x3ac>
 8008378:	f897 2082 	ldrb.w	r2, [r7, #130]	@ 0x82
 800837c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8008380:	4611      	mov	r1, r2
 8008382:	4618      	mov	r0, r3
 8008384:	f7ff fdb3 	bl	8007eee <putc_bfd>
 8008388:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800838c:	f003 0302 	and.w	r3, r3, #2
 8008390:	2b00      	cmp	r3, #0
 8008392:	d108      	bne.n	80083a6 <f_printf+0x3ca>
 8008394:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008398:	1c5a      	adds	r2, r3, #1
 800839a:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800839e:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80083a2:	429a      	cmp	r2, r3
 80083a4:	d8e8      	bhi.n	8008378 <f_printf+0x39c>
		do {
			putc_bfd(&pb, str[--i]);
 80083a6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80083aa:	3b01      	subs	r3, #1
 80083ac:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80083b0:	f107 020c 	add.w	r2, r7, #12
 80083b4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80083b8:	4413      	add	r3, r2
 80083ba:	781a      	ldrb	r2, [r3, #0]
 80083bc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80083c0:	4611      	mov	r1, r2
 80083c2:	4618      	mov	r0, r3
 80083c4:	f7ff fd93 	bl	8007eee <putc_bfd>
		} while (i);
 80083c8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d1ea      	bne.n	80083a6 <f_printf+0x3ca>
		while (j++ < w) putc_bfd(&pb, d);
 80083d0:	e007      	b.n	80083e2 <f_printf+0x406>
 80083d2:	f897 2082 	ldrb.w	r2, [r7, #130]	@ 0x82
 80083d6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80083da:	4611      	mov	r1, r2
 80083dc:	4618      	mov	r0, r3
 80083de:	f7ff fd86 	bl	8007eee <putc_bfd>
 80083e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80083e6:	1c5a      	adds	r2, r3, #1
 80083e8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80083ec:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80083f0:	429a      	cmp	r2, r3
 80083f2:	d8ee      	bhi.n	80083d2 <f_printf+0x3f6>
		c = *fmt++;
 80083f4:	e600      	b.n	8007ff8 <f_printf+0x1c>
		if (c == 0) break;			/* End of string */
 80083f6:	bf00      	nop
 80083f8:	e000      	b.n	80083fc <f_printf+0x420>
		if (!c) break;
 80083fa:	bf00      	nop
	}

	va_end(arp);

	return putc_flush(&pb);
 80083fc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8008400:	4618      	mov	r0, r3
 8008402:	f7ff fdb1 	bl	8007f68 <putc_flush>
 8008406:	4603      	mov	r3, r0
}
 8008408:	4618      	mov	r0, r3
 800840a:	379c      	adds	r7, #156	@ 0x9c
 800840c:	46bd      	mov	sp, r7
 800840e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008412:	b003      	add	sp, #12
 8008414:	4770      	bx	lr
 8008416:	bf00      	nop

08008418 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8008418:	b480      	push	{r7}
 800841a:	b087      	sub	sp, #28
 800841c:	af00      	add	r7, sp, #0
 800841e:	60f8      	str	r0, [r7, #12]
 8008420:	60b9      	str	r1, [r7, #8]
 8008422:	4613      	mov	r3, r2
 8008424:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8008426:	2301      	movs	r3, #1
 8008428:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800842a:	2300      	movs	r3, #0
 800842c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800842e:	4b1f      	ldr	r3, [pc, #124]	@ (80084ac <FATFS_LinkDriverEx+0x94>)
 8008430:	7a5b      	ldrb	r3, [r3, #9]
 8008432:	b2db      	uxtb	r3, r3
 8008434:	2b00      	cmp	r3, #0
 8008436:	d131      	bne.n	800849c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8008438:	4b1c      	ldr	r3, [pc, #112]	@ (80084ac <FATFS_LinkDriverEx+0x94>)
 800843a:	7a5b      	ldrb	r3, [r3, #9]
 800843c:	b2db      	uxtb	r3, r3
 800843e:	461a      	mov	r2, r3
 8008440:	4b1a      	ldr	r3, [pc, #104]	@ (80084ac <FATFS_LinkDriverEx+0x94>)
 8008442:	2100      	movs	r1, #0
 8008444:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8008446:	4b19      	ldr	r3, [pc, #100]	@ (80084ac <FATFS_LinkDriverEx+0x94>)
 8008448:	7a5b      	ldrb	r3, [r3, #9]
 800844a:	b2db      	uxtb	r3, r3
 800844c:	4a17      	ldr	r2, [pc, #92]	@ (80084ac <FATFS_LinkDriverEx+0x94>)
 800844e:	009b      	lsls	r3, r3, #2
 8008450:	4413      	add	r3, r2
 8008452:	68fa      	ldr	r2, [r7, #12]
 8008454:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8008456:	4b15      	ldr	r3, [pc, #84]	@ (80084ac <FATFS_LinkDriverEx+0x94>)
 8008458:	7a5b      	ldrb	r3, [r3, #9]
 800845a:	b2db      	uxtb	r3, r3
 800845c:	461a      	mov	r2, r3
 800845e:	4b13      	ldr	r3, [pc, #76]	@ (80084ac <FATFS_LinkDriverEx+0x94>)
 8008460:	4413      	add	r3, r2
 8008462:	79fa      	ldrb	r2, [r7, #7]
 8008464:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8008466:	4b11      	ldr	r3, [pc, #68]	@ (80084ac <FATFS_LinkDriverEx+0x94>)
 8008468:	7a5b      	ldrb	r3, [r3, #9]
 800846a:	b2db      	uxtb	r3, r3
 800846c:	1c5a      	adds	r2, r3, #1
 800846e:	b2d1      	uxtb	r1, r2
 8008470:	4a0e      	ldr	r2, [pc, #56]	@ (80084ac <FATFS_LinkDriverEx+0x94>)
 8008472:	7251      	strb	r1, [r2, #9]
 8008474:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8008476:	7dbb      	ldrb	r3, [r7, #22]
 8008478:	3330      	adds	r3, #48	@ 0x30
 800847a:	b2da      	uxtb	r2, r3
 800847c:	68bb      	ldr	r3, [r7, #8]
 800847e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8008480:	68bb      	ldr	r3, [r7, #8]
 8008482:	3301      	adds	r3, #1
 8008484:	223a      	movs	r2, #58	@ 0x3a
 8008486:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8008488:	68bb      	ldr	r3, [r7, #8]
 800848a:	3302      	adds	r3, #2
 800848c:	222f      	movs	r2, #47	@ 0x2f
 800848e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8008490:	68bb      	ldr	r3, [r7, #8]
 8008492:	3303      	adds	r3, #3
 8008494:	2200      	movs	r2, #0
 8008496:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8008498:	2300      	movs	r3, #0
 800849a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800849c:	7dfb      	ldrb	r3, [r7, #23]
}
 800849e:	4618      	mov	r0, r3
 80084a0:	371c      	adds	r7, #28
 80084a2:	46bd      	mov	sp, r7
 80084a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a8:	4770      	bx	lr
 80084aa:	bf00      	nop
 80084ac:	20000408 	.word	0x20000408

080084b0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b082      	sub	sp, #8
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
 80084b8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80084ba:	2200      	movs	r2, #0
 80084bc:	6839      	ldr	r1, [r7, #0]
 80084be:	6878      	ldr	r0, [r7, #4]
 80084c0:	f7ff ffaa 	bl	8008418 <FATFS_LinkDriverEx>
 80084c4:	4603      	mov	r3, r0
}
 80084c6:	4618      	mov	r0, r3
 80084c8:	3708      	adds	r7, #8
 80084ca:	46bd      	mov	sp, r7
 80084cc:	bd80      	pop	{r7, pc}
	...

080084d0 <SDCard_Init>:

	return true;	// File already exist
}

void SDCard_Init(void)
{
 80084d0:	b580      	push	{r7, lr}
 80084d2:	af00      	add	r7, sp, #0
#if UART_ENABLED == 1
	do
	{
		//----------------------------------[ Mount The SD Card ]----------------------------------------
		FR_Status = f_mount(&FatFs, "", 1);
 80084d4:	2201      	movs	r2, #1
 80084d6:	492e      	ldr	r1, [pc, #184]	@ (8008590 <SDCard_Init+0xc0>)
 80084d8:	482e      	ldr	r0, [pc, #184]	@ (8008594 <SDCard_Init+0xc4>)
 80084da:	f7fe fde5 	bl	80070a8 <f_mount>
 80084de:	4603      	mov	r3, r0
 80084e0:	461a      	mov	r2, r3
 80084e2:	4b2d      	ldr	r3, [pc, #180]	@ (8008598 <SDCard_Init+0xc8>)
 80084e4:	701a      	strb	r2, [r3, #0]
		if (FR_Status != FR_OK)
 80084e6:	4b2c      	ldr	r3, [pc, #176]	@ (8008598 <SDCard_Init+0xc8>)
 80084e8:	781b      	ldrb	r3, [r3, #0]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d00a      	beq.n	8008504 <SDCard_Init+0x34>
		{
			sprintf(TxBuffer, "Error! While Mounting SD Card, Error Code: (%i)\r\n", FR_Status);
 80084ee:	4b2a      	ldr	r3, [pc, #168]	@ (8008598 <SDCard_Init+0xc8>)
 80084f0:	781b      	ldrb	r3, [r3, #0]
 80084f2:	461a      	mov	r2, r3
 80084f4:	4929      	ldr	r1, [pc, #164]	@ (800859c <SDCard_Init+0xcc>)
 80084f6:	482a      	ldr	r0, [pc, #168]	@ (80085a0 <SDCard_Init+0xd0>)
 80084f8:	f000 f8c8 	bl	800868c <siprintf>
			UART_Print(TxBuffer);
 80084fc:	4828      	ldr	r0, [pc, #160]	@ (80085a0 <SDCard_Init+0xd0>)
 80084fe:	f7f8 ff55 	bl	80013ac <UART_Print>
			break;
 8008502:	e042      	b.n	800858a <SDCard_Init+0xba>
		}
		sdInitialized = true;
 8008504:	4b27      	ldr	r3, [pc, #156]	@ (80085a4 <SDCard_Init+0xd4>)
 8008506:	2201      	movs	r2, #1
 8008508:	701a      	strb	r2, [r3, #0]
		sprintf(TxBuffer, "SD Card Mounted Successfully! \r\n\n");
 800850a:	4927      	ldr	r1, [pc, #156]	@ (80085a8 <SDCard_Init+0xd8>)
 800850c:	4824      	ldr	r0, [pc, #144]	@ (80085a0 <SDCard_Init+0xd0>)
 800850e:	f000 f8bd 	bl	800868c <siprintf>
		UART_Print(TxBuffer);
 8008512:	4823      	ldr	r0, [pc, #140]	@ (80085a0 <SDCard_Init+0xd0>)
 8008514:	f7f8 ff4a 	bl	80013ac <UART_Print>
		//-----------------------------[ Get & Print The SD Card Size & Free Space ]--------------------
		f_getfree("", &FreeClusters, &FS_Ptr);
 8008518:	4a24      	ldr	r2, [pc, #144]	@ (80085ac <SDCard_Init+0xdc>)
 800851a:	4925      	ldr	r1, [pc, #148]	@ (80085b0 <SDCard_Init+0xe0>)
 800851c:	481c      	ldr	r0, [pc, #112]	@ (8008590 <SDCard_Init+0xc0>)
 800851e:	f7ff fc31 	bl	8007d84 <f_getfree>
		TotalSize = (uint32_t)((FS_Ptr->n_fatent - 2) * FS_Ptr->csize * 0.5);
 8008522:	4b22      	ldr	r3, [pc, #136]	@ (80085ac <SDCard_Init+0xdc>)
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	69db      	ldr	r3, [r3, #28]
 8008528:	3b02      	subs	r3, #2
 800852a:	4a20      	ldr	r2, [pc, #128]	@ (80085ac <SDCard_Init+0xdc>)
 800852c:	6812      	ldr	r2, [r2, #0]
 800852e:	8952      	ldrh	r2, [r2, #10]
 8008530:	fb02 f303 	mul.w	r3, r2, r3
 8008534:	4618      	mov	r0, r3
 8008536:	f7f8 f927 	bl	8000788 <__aeabi_ui2d>
 800853a:	f04f 0200 	mov.w	r2, #0
 800853e:	4b1d      	ldr	r3, [pc, #116]	@ (80085b4 <SDCard_Init+0xe4>)
 8008540:	f7f7 feb6 	bl	80002b0 <__aeabi_dmul>
 8008544:	4602      	mov	r2, r0
 8008546:	460b      	mov	r3, r1
 8008548:	4610      	mov	r0, r2
 800854a:	4619      	mov	r1, r3
 800854c:	f7f8 f996 	bl	800087c <__aeabi_d2uiz>
 8008550:	4603      	mov	r3, r0
 8008552:	4a19      	ldr	r2, [pc, #100]	@ (80085b8 <SDCard_Init+0xe8>)
 8008554:	6013      	str	r3, [r2, #0]
		FreeSpace = (uint32_t)(FreeClusters * FS_Ptr->csize * 0.5);
 8008556:	4b15      	ldr	r3, [pc, #84]	@ (80085ac <SDCard_Init+0xdc>)
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	895b      	ldrh	r3, [r3, #10]
 800855c:	461a      	mov	r2, r3
 800855e:	4b14      	ldr	r3, [pc, #80]	@ (80085b0 <SDCard_Init+0xe0>)
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	fb02 f303 	mul.w	r3, r2, r3
 8008566:	4618      	mov	r0, r3
 8008568:	f7f8 f90e 	bl	8000788 <__aeabi_ui2d>
 800856c:	f04f 0200 	mov.w	r2, #0
 8008570:	4b10      	ldr	r3, [pc, #64]	@ (80085b4 <SDCard_Init+0xe4>)
 8008572:	f7f7 fe9d 	bl	80002b0 <__aeabi_dmul>
 8008576:	4602      	mov	r2, r0
 8008578:	460b      	mov	r3, r1
 800857a:	4610      	mov	r0, r2
 800857c:	4619      	mov	r1, r3
 800857e:	f7f8 f97d 	bl	800087c <__aeabi_d2uiz>
 8008582:	4603      	mov	r3, r0
 8008584:	4a0d      	ldr	r2, [pc, #52]	@ (80085bc <SDCard_Init+0xec>)
 8008586:	6013      	str	r3, [r2, #0]
	f_getfree("", &FreeClusters, &FS_Ptr);
	TotalSize = (uint32_t)((FS_Ptr->n_fatent - 2) * FS_Ptr->csize * 0.5);
	FreeSpace = (uint32_t)(FreeClusters * FS_Ptr->csize * 0.5);
	//----------------------------------------------------------------------------------------------
#endif
}
 8008588:	bf00      	nop
 800858a:	bf00      	nop
 800858c:	bd80      	pop	{r7, pc}
 800858e:	bf00      	nop
 8008590:	0800902c 	.word	0x0800902c
 8008594:	20000414 	.word	0x20000414
 8008598:	2000144c 	.word	0x2000144c
 800859c:	08009070 	.word	0x08009070
 80085a0:	20001460 	.word	0x20001460
 80085a4:	20001654 	.word	0x20001654
 80085a8:	080090a4 	.word	0x080090a4
 80085ac:	20001450 	.word	0x20001450
 80085b0:	20001454 	.word	0x20001454
 80085b4:	3fe00000 	.word	0x3fe00000
 80085b8:	20001458 	.word	0x20001458
 80085bc:	2000145c 	.word	0x2000145c

080085c0 <SD_Card_Test>:
	}
}



void SD_Card_Test(void) {
 80085c0:	b580      	push	{r7, lr}
 80085c2:	f5ad 5d81 	sub.w	sp, sp, #4128	@ 0x1020
 80085c6:	b084      	sub	sp, #16
 80085c8:	af00      	add	r7, sp, #0
	// Define local variables
	FIL csv_File;   // File object
	static uint32_t sd_count = 0;

	// Check if the SD card is mounted
	if (sdInitialized  == true)
 80085ca:	4b1f      	ldr	r3, [pc, #124]	@ (8008648 <SD_Card_Test+0x88>)
 80085cc:	781b      	ldrb	r3, [r3, #0]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d02e      	beq.n	8008630 <SD_Card_Test+0x70>
	{ // You need to define this function
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, SET);
 80085d2:	2201      	movs	r2, #1
 80085d4:	2120      	movs	r1, #32
 80085d6:	481d      	ldr	r0, [pc, #116]	@ (800864c <SD_Card_Test+0x8c>)
 80085d8:	f7f9 fa3e 	bl	8001a58 <HAL_GPIO_WritePin>
		// Open the CSV File
		if (f_open(&csv_File, "data.csv", FA_OPEN_ALWAYS | FA_WRITE) == FR_OK)
 80085dc:	f107 0310 	add.w	r3, r7, #16
 80085e0:	3b10      	subs	r3, #16
 80085e2:	2212      	movs	r2, #18
 80085e4:	491a      	ldr	r1, [pc, #104]	@ (8008650 <SD_Card_Test+0x90>)
 80085e6:	4618      	mov	r0, r3
 80085e8:	f7fe fda4 	bl	8007134 <f_open>
 80085ec:	4603      	mov	r3, r0
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d119      	bne.n	8008626 <SD_Card_Test+0x66>
		{
			// Move to the end of the File
			f_lseek(&csv_File, f_size(&csv_File));
 80085f2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80085f6:	f853 2c24 	ldr.w	r2, [r3, #-36]
 80085fa:	f107 0310 	add.w	r3, r7, #16
 80085fe:	3b10      	subs	r3, #16
 8008600:	4611      	mov	r1, r2
 8008602:	4618      	mov	r0, r3
 8008604:	f7ff f99a 	bl	800793c <f_lseek>

			// Write the count to the File
			f_printf(&csv_File, "%lu\n", sd_count);
 8008608:	4b12      	ldr	r3, [pc, #72]	@ (8008654 <SD_Card_Test+0x94>)
 800860a:	681a      	ldr	r2, [r3, #0]
 800860c:	f107 0310 	add.w	r3, r7, #16
 8008610:	3b10      	subs	r3, #16
 8008612:	4911      	ldr	r1, [pc, #68]	@ (8008658 <SD_Card_Test+0x98>)
 8008614:	4618      	mov	r0, r3
 8008616:	f7ff fce1 	bl	8007fdc <f_printf>
//			sprintf(TxBuffer, "The corresponding count %ld\r\n", sd_count);
//			UART_Print(TxBuffer);

			// Close the File
			f_close(&csv_File);
 800861a:	f107 0310 	add.w	r3, r7, #16
 800861e:	3b10      	subs	r3, #16
 8008620:	4618      	mov	r0, r3
 8008622:	f7ff f961 	bl	80078e8 <f_close>
		} else
		{
//			 UART_Print("Error: Unable to open the File.\r\n");
		}
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, RESET);
 8008626:	2200      	movs	r2, #0
 8008628:	2120      	movs	r1, #32
 800862a:	4808      	ldr	r0, [pc, #32]	@ (800864c <SD_Card_Test+0x8c>)
 800862c:	f7f9 fa14 	bl	8001a58 <HAL_GPIO_WritePin>
	else
	{
//		 UART_Print("Error: SD card not mounted.\r\n");
	}

	sd_count++;
 8008630:	4b08      	ldr	r3, [pc, #32]	@ (8008654 <SD_Card_Test+0x94>)
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	3301      	adds	r3, #1
 8008636:	4a07      	ldr	r2, [pc, #28]	@ (8008654 <SD_Card_Test+0x94>)
 8008638:	6013      	str	r3, [r2, #0]


}
 800863a:	bf00      	nop
 800863c:	f507 5781 	add.w	r7, r7, #4128	@ 0x1020
 8008640:	3710      	adds	r7, #16
 8008642:	46bd      	mov	sp, r7
 8008644:	bd80      	pop	{r7, pc}
 8008646:	bf00      	nop
 8008648:	20001654 	.word	0x20001654
 800864c:	40020000 	.word	0x40020000
 8008650:	08009140 	.word	0x08009140
 8008654:	20001658 	.word	0x20001658
 8008658:	0800914c 	.word	0x0800914c

0800865c <h_strlen>:
 */

#include "stdio.h"
#include "user_helper.h"

size_t h_strlen(const char* str) {
 800865c:	b480      	push	{r7}
 800865e:	b085      	sub	sp, #20
 8008660:	af00      	add	r7, sp, #0
 8008662:	6078      	str	r0, [r7, #4]
    size_t len = 0;
 8008664:	2300      	movs	r3, #0
 8008666:	60fb      	str	r3, [r7, #12]
    while (*str != '\0') {
 8008668:	e005      	b.n	8008676 <h_strlen+0x1a>
        len++;
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	3301      	adds	r3, #1
 800866e:	60fb      	str	r3, [r7, #12]
        str++;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	3301      	adds	r3, #1
 8008674:	607b      	str	r3, [r7, #4]
    while (*str != '\0') {
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	781b      	ldrb	r3, [r3, #0]
 800867a:	2b00      	cmp	r3, #0
 800867c:	d1f5      	bne.n	800866a <h_strlen+0xe>
    }
    return len;
 800867e:	68fb      	ldr	r3, [r7, #12]
}
 8008680:	4618      	mov	r0, r3
 8008682:	3714      	adds	r7, #20
 8008684:	46bd      	mov	sp, r7
 8008686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868a:	4770      	bx	lr

0800868c <siprintf>:
 800868c:	b40e      	push	{r1, r2, r3}
 800868e:	b500      	push	{lr}
 8008690:	b09c      	sub	sp, #112	@ 0x70
 8008692:	ab1d      	add	r3, sp, #116	@ 0x74
 8008694:	9002      	str	r0, [sp, #8]
 8008696:	9006      	str	r0, [sp, #24]
 8008698:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800869c:	4809      	ldr	r0, [pc, #36]	@ (80086c4 <siprintf+0x38>)
 800869e:	9107      	str	r1, [sp, #28]
 80086a0:	9104      	str	r1, [sp, #16]
 80086a2:	4909      	ldr	r1, [pc, #36]	@ (80086c8 <siprintf+0x3c>)
 80086a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80086a8:	9105      	str	r1, [sp, #20]
 80086aa:	6800      	ldr	r0, [r0, #0]
 80086ac:	9301      	str	r3, [sp, #4]
 80086ae:	a902      	add	r1, sp, #8
 80086b0:	f000 f994 	bl	80089dc <_svfiprintf_r>
 80086b4:	9b02      	ldr	r3, [sp, #8]
 80086b6:	2200      	movs	r2, #0
 80086b8:	701a      	strb	r2, [r3, #0]
 80086ba:	b01c      	add	sp, #112	@ 0x70
 80086bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80086c0:	b003      	add	sp, #12
 80086c2:	4770      	bx	lr
 80086c4:	20000024 	.word	0x20000024
 80086c8:	ffff0208 	.word	0xffff0208

080086cc <memset>:
 80086cc:	4402      	add	r2, r0
 80086ce:	4603      	mov	r3, r0
 80086d0:	4293      	cmp	r3, r2
 80086d2:	d100      	bne.n	80086d6 <memset+0xa>
 80086d4:	4770      	bx	lr
 80086d6:	f803 1b01 	strb.w	r1, [r3], #1
 80086da:	e7f9      	b.n	80086d0 <memset+0x4>

080086dc <__errno>:
 80086dc:	4b01      	ldr	r3, [pc, #4]	@ (80086e4 <__errno+0x8>)
 80086de:	6818      	ldr	r0, [r3, #0]
 80086e0:	4770      	bx	lr
 80086e2:	bf00      	nop
 80086e4:	20000024 	.word	0x20000024

080086e8 <__libc_init_array>:
 80086e8:	b570      	push	{r4, r5, r6, lr}
 80086ea:	4d0d      	ldr	r5, [pc, #52]	@ (8008720 <__libc_init_array+0x38>)
 80086ec:	4c0d      	ldr	r4, [pc, #52]	@ (8008724 <__libc_init_array+0x3c>)
 80086ee:	1b64      	subs	r4, r4, r5
 80086f0:	10a4      	asrs	r4, r4, #2
 80086f2:	2600      	movs	r6, #0
 80086f4:	42a6      	cmp	r6, r4
 80086f6:	d109      	bne.n	800870c <__libc_init_array+0x24>
 80086f8:	4d0b      	ldr	r5, [pc, #44]	@ (8008728 <__libc_init_array+0x40>)
 80086fa:	4c0c      	ldr	r4, [pc, #48]	@ (800872c <__libc_init_array+0x44>)
 80086fc:	f000 fc66 	bl	8008fcc <_init>
 8008700:	1b64      	subs	r4, r4, r5
 8008702:	10a4      	asrs	r4, r4, #2
 8008704:	2600      	movs	r6, #0
 8008706:	42a6      	cmp	r6, r4
 8008708:	d105      	bne.n	8008716 <__libc_init_array+0x2e>
 800870a:	bd70      	pop	{r4, r5, r6, pc}
 800870c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008710:	4798      	blx	r3
 8008712:	3601      	adds	r6, #1
 8008714:	e7ee      	b.n	80086f4 <__libc_init_array+0xc>
 8008716:	f855 3b04 	ldr.w	r3, [r5], #4
 800871a:	4798      	blx	r3
 800871c:	3601      	adds	r6, #1
 800871e:	e7f2      	b.n	8008706 <__libc_init_array+0x1e>
 8008720:	080095e4 	.word	0x080095e4
 8008724:	080095e4 	.word	0x080095e4
 8008728:	080095e4 	.word	0x080095e4
 800872c:	080095e8 	.word	0x080095e8

08008730 <__retarget_lock_acquire_recursive>:
 8008730:	4770      	bx	lr

08008732 <__retarget_lock_release_recursive>:
 8008732:	4770      	bx	lr

08008734 <_free_r>:
 8008734:	b538      	push	{r3, r4, r5, lr}
 8008736:	4605      	mov	r5, r0
 8008738:	2900      	cmp	r1, #0
 800873a:	d041      	beq.n	80087c0 <_free_r+0x8c>
 800873c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008740:	1f0c      	subs	r4, r1, #4
 8008742:	2b00      	cmp	r3, #0
 8008744:	bfb8      	it	lt
 8008746:	18e4      	addlt	r4, r4, r3
 8008748:	f000 f8e0 	bl	800890c <__malloc_lock>
 800874c:	4a1d      	ldr	r2, [pc, #116]	@ (80087c4 <_free_r+0x90>)
 800874e:	6813      	ldr	r3, [r2, #0]
 8008750:	b933      	cbnz	r3, 8008760 <_free_r+0x2c>
 8008752:	6063      	str	r3, [r4, #4]
 8008754:	6014      	str	r4, [r2, #0]
 8008756:	4628      	mov	r0, r5
 8008758:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800875c:	f000 b8dc 	b.w	8008918 <__malloc_unlock>
 8008760:	42a3      	cmp	r3, r4
 8008762:	d908      	bls.n	8008776 <_free_r+0x42>
 8008764:	6820      	ldr	r0, [r4, #0]
 8008766:	1821      	adds	r1, r4, r0
 8008768:	428b      	cmp	r3, r1
 800876a:	bf01      	itttt	eq
 800876c:	6819      	ldreq	r1, [r3, #0]
 800876e:	685b      	ldreq	r3, [r3, #4]
 8008770:	1809      	addeq	r1, r1, r0
 8008772:	6021      	streq	r1, [r4, #0]
 8008774:	e7ed      	b.n	8008752 <_free_r+0x1e>
 8008776:	461a      	mov	r2, r3
 8008778:	685b      	ldr	r3, [r3, #4]
 800877a:	b10b      	cbz	r3, 8008780 <_free_r+0x4c>
 800877c:	42a3      	cmp	r3, r4
 800877e:	d9fa      	bls.n	8008776 <_free_r+0x42>
 8008780:	6811      	ldr	r1, [r2, #0]
 8008782:	1850      	adds	r0, r2, r1
 8008784:	42a0      	cmp	r0, r4
 8008786:	d10b      	bne.n	80087a0 <_free_r+0x6c>
 8008788:	6820      	ldr	r0, [r4, #0]
 800878a:	4401      	add	r1, r0
 800878c:	1850      	adds	r0, r2, r1
 800878e:	4283      	cmp	r3, r0
 8008790:	6011      	str	r1, [r2, #0]
 8008792:	d1e0      	bne.n	8008756 <_free_r+0x22>
 8008794:	6818      	ldr	r0, [r3, #0]
 8008796:	685b      	ldr	r3, [r3, #4]
 8008798:	6053      	str	r3, [r2, #4]
 800879a:	4408      	add	r0, r1
 800879c:	6010      	str	r0, [r2, #0]
 800879e:	e7da      	b.n	8008756 <_free_r+0x22>
 80087a0:	d902      	bls.n	80087a8 <_free_r+0x74>
 80087a2:	230c      	movs	r3, #12
 80087a4:	602b      	str	r3, [r5, #0]
 80087a6:	e7d6      	b.n	8008756 <_free_r+0x22>
 80087a8:	6820      	ldr	r0, [r4, #0]
 80087aa:	1821      	adds	r1, r4, r0
 80087ac:	428b      	cmp	r3, r1
 80087ae:	bf04      	itt	eq
 80087b0:	6819      	ldreq	r1, [r3, #0]
 80087b2:	685b      	ldreq	r3, [r3, #4]
 80087b4:	6063      	str	r3, [r4, #4]
 80087b6:	bf04      	itt	eq
 80087b8:	1809      	addeq	r1, r1, r0
 80087ba:	6021      	streq	r1, [r4, #0]
 80087bc:	6054      	str	r4, [r2, #4]
 80087be:	e7ca      	b.n	8008756 <_free_r+0x22>
 80087c0:	bd38      	pop	{r3, r4, r5, pc}
 80087c2:	bf00      	nop
 80087c4:	200017a0 	.word	0x200017a0

080087c8 <sbrk_aligned>:
 80087c8:	b570      	push	{r4, r5, r6, lr}
 80087ca:	4e0f      	ldr	r6, [pc, #60]	@ (8008808 <sbrk_aligned+0x40>)
 80087cc:	460c      	mov	r4, r1
 80087ce:	6831      	ldr	r1, [r6, #0]
 80087d0:	4605      	mov	r5, r0
 80087d2:	b911      	cbnz	r1, 80087da <sbrk_aligned+0x12>
 80087d4:	f000 fba6 	bl	8008f24 <_sbrk_r>
 80087d8:	6030      	str	r0, [r6, #0]
 80087da:	4621      	mov	r1, r4
 80087dc:	4628      	mov	r0, r5
 80087de:	f000 fba1 	bl	8008f24 <_sbrk_r>
 80087e2:	1c43      	adds	r3, r0, #1
 80087e4:	d103      	bne.n	80087ee <sbrk_aligned+0x26>
 80087e6:	f04f 34ff 	mov.w	r4, #4294967295
 80087ea:	4620      	mov	r0, r4
 80087ec:	bd70      	pop	{r4, r5, r6, pc}
 80087ee:	1cc4      	adds	r4, r0, #3
 80087f0:	f024 0403 	bic.w	r4, r4, #3
 80087f4:	42a0      	cmp	r0, r4
 80087f6:	d0f8      	beq.n	80087ea <sbrk_aligned+0x22>
 80087f8:	1a21      	subs	r1, r4, r0
 80087fa:	4628      	mov	r0, r5
 80087fc:	f000 fb92 	bl	8008f24 <_sbrk_r>
 8008800:	3001      	adds	r0, #1
 8008802:	d1f2      	bne.n	80087ea <sbrk_aligned+0x22>
 8008804:	e7ef      	b.n	80087e6 <sbrk_aligned+0x1e>
 8008806:	bf00      	nop
 8008808:	2000179c 	.word	0x2000179c

0800880c <_malloc_r>:
 800880c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008810:	1ccd      	adds	r5, r1, #3
 8008812:	f025 0503 	bic.w	r5, r5, #3
 8008816:	3508      	adds	r5, #8
 8008818:	2d0c      	cmp	r5, #12
 800881a:	bf38      	it	cc
 800881c:	250c      	movcc	r5, #12
 800881e:	2d00      	cmp	r5, #0
 8008820:	4606      	mov	r6, r0
 8008822:	db01      	blt.n	8008828 <_malloc_r+0x1c>
 8008824:	42a9      	cmp	r1, r5
 8008826:	d904      	bls.n	8008832 <_malloc_r+0x26>
 8008828:	230c      	movs	r3, #12
 800882a:	6033      	str	r3, [r6, #0]
 800882c:	2000      	movs	r0, #0
 800882e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008832:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008908 <_malloc_r+0xfc>
 8008836:	f000 f869 	bl	800890c <__malloc_lock>
 800883a:	f8d8 3000 	ldr.w	r3, [r8]
 800883e:	461c      	mov	r4, r3
 8008840:	bb44      	cbnz	r4, 8008894 <_malloc_r+0x88>
 8008842:	4629      	mov	r1, r5
 8008844:	4630      	mov	r0, r6
 8008846:	f7ff ffbf 	bl	80087c8 <sbrk_aligned>
 800884a:	1c43      	adds	r3, r0, #1
 800884c:	4604      	mov	r4, r0
 800884e:	d158      	bne.n	8008902 <_malloc_r+0xf6>
 8008850:	f8d8 4000 	ldr.w	r4, [r8]
 8008854:	4627      	mov	r7, r4
 8008856:	2f00      	cmp	r7, #0
 8008858:	d143      	bne.n	80088e2 <_malloc_r+0xd6>
 800885a:	2c00      	cmp	r4, #0
 800885c:	d04b      	beq.n	80088f6 <_malloc_r+0xea>
 800885e:	6823      	ldr	r3, [r4, #0]
 8008860:	4639      	mov	r1, r7
 8008862:	4630      	mov	r0, r6
 8008864:	eb04 0903 	add.w	r9, r4, r3
 8008868:	f000 fb5c 	bl	8008f24 <_sbrk_r>
 800886c:	4581      	cmp	r9, r0
 800886e:	d142      	bne.n	80088f6 <_malloc_r+0xea>
 8008870:	6821      	ldr	r1, [r4, #0]
 8008872:	1a6d      	subs	r5, r5, r1
 8008874:	4629      	mov	r1, r5
 8008876:	4630      	mov	r0, r6
 8008878:	f7ff ffa6 	bl	80087c8 <sbrk_aligned>
 800887c:	3001      	adds	r0, #1
 800887e:	d03a      	beq.n	80088f6 <_malloc_r+0xea>
 8008880:	6823      	ldr	r3, [r4, #0]
 8008882:	442b      	add	r3, r5
 8008884:	6023      	str	r3, [r4, #0]
 8008886:	f8d8 3000 	ldr.w	r3, [r8]
 800888a:	685a      	ldr	r2, [r3, #4]
 800888c:	bb62      	cbnz	r2, 80088e8 <_malloc_r+0xdc>
 800888e:	f8c8 7000 	str.w	r7, [r8]
 8008892:	e00f      	b.n	80088b4 <_malloc_r+0xa8>
 8008894:	6822      	ldr	r2, [r4, #0]
 8008896:	1b52      	subs	r2, r2, r5
 8008898:	d420      	bmi.n	80088dc <_malloc_r+0xd0>
 800889a:	2a0b      	cmp	r2, #11
 800889c:	d917      	bls.n	80088ce <_malloc_r+0xc2>
 800889e:	1961      	adds	r1, r4, r5
 80088a0:	42a3      	cmp	r3, r4
 80088a2:	6025      	str	r5, [r4, #0]
 80088a4:	bf18      	it	ne
 80088a6:	6059      	strne	r1, [r3, #4]
 80088a8:	6863      	ldr	r3, [r4, #4]
 80088aa:	bf08      	it	eq
 80088ac:	f8c8 1000 	streq.w	r1, [r8]
 80088b0:	5162      	str	r2, [r4, r5]
 80088b2:	604b      	str	r3, [r1, #4]
 80088b4:	4630      	mov	r0, r6
 80088b6:	f000 f82f 	bl	8008918 <__malloc_unlock>
 80088ba:	f104 000b 	add.w	r0, r4, #11
 80088be:	1d23      	adds	r3, r4, #4
 80088c0:	f020 0007 	bic.w	r0, r0, #7
 80088c4:	1ac2      	subs	r2, r0, r3
 80088c6:	bf1c      	itt	ne
 80088c8:	1a1b      	subne	r3, r3, r0
 80088ca:	50a3      	strne	r3, [r4, r2]
 80088cc:	e7af      	b.n	800882e <_malloc_r+0x22>
 80088ce:	6862      	ldr	r2, [r4, #4]
 80088d0:	42a3      	cmp	r3, r4
 80088d2:	bf0c      	ite	eq
 80088d4:	f8c8 2000 	streq.w	r2, [r8]
 80088d8:	605a      	strne	r2, [r3, #4]
 80088da:	e7eb      	b.n	80088b4 <_malloc_r+0xa8>
 80088dc:	4623      	mov	r3, r4
 80088de:	6864      	ldr	r4, [r4, #4]
 80088e0:	e7ae      	b.n	8008840 <_malloc_r+0x34>
 80088e2:	463c      	mov	r4, r7
 80088e4:	687f      	ldr	r7, [r7, #4]
 80088e6:	e7b6      	b.n	8008856 <_malloc_r+0x4a>
 80088e8:	461a      	mov	r2, r3
 80088ea:	685b      	ldr	r3, [r3, #4]
 80088ec:	42a3      	cmp	r3, r4
 80088ee:	d1fb      	bne.n	80088e8 <_malloc_r+0xdc>
 80088f0:	2300      	movs	r3, #0
 80088f2:	6053      	str	r3, [r2, #4]
 80088f4:	e7de      	b.n	80088b4 <_malloc_r+0xa8>
 80088f6:	230c      	movs	r3, #12
 80088f8:	6033      	str	r3, [r6, #0]
 80088fa:	4630      	mov	r0, r6
 80088fc:	f000 f80c 	bl	8008918 <__malloc_unlock>
 8008900:	e794      	b.n	800882c <_malloc_r+0x20>
 8008902:	6005      	str	r5, [r0, #0]
 8008904:	e7d6      	b.n	80088b4 <_malloc_r+0xa8>
 8008906:	bf00      	nop
 8008908:	200017a0 	.word	0x200017a0

0800890c <__malloc_lock>:
 800890c:	4801      	ldr	r0, [pc, #4]	@ (8008914 <__malloc_lock+0x8>)
 800890e:	f7ff bf0f 	b.w	8008730 <__retarget_lock_acquire_recursive>
 8008912:	bf00      	nop
 8008914:	20001798 	.word	0x20001798

08008918 <__malloc_unlock>:
 8008918:	4801      	ldr	r0, [pc, #4]	@ (8008920 <__malloc_unlock+0x8>)
 800891a:	f7ff bf0a 	b.w	8008732 <__retarget_lock_release_recursive>
 800891e:	bf00      	nop
 8008920:	20001798 	.word	0x20001798

08008924 <__ssputs_r>:
 8008924:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008928:	688e      	ldr	r6, [r1, #8]
 800892a:	461f      	mov	r7, r3
 800892c:	42be      	cmp	r6, r7
 800892e:	680b      	ldr	r3, [r1, #0]
 8008930:	4682      	mov	sl, r0
 8008932:	460c      	mov	r4, r1
 8008934:	4690      	mov	r8, r2
 8008936:	d82d      	bhi.n	8008994 <__ssputs_r+0x70>
 8008938:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800893c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008940:	d026      	beq.n	8008990 <__ssputs_r+0x6c>
 8008942:	6965      	ldr	r5, [r4, #20]
 8008944:	6909      	ldr	r1, [r1, #16]
 8008946:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800894a:	eba3 0901 	sub.w	r9, r3, r1
 800894e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008952:	1c7b      	adds	r3, r7, #1
 8008954:	444b      	add	r3, r9
 8008956:	106d      	asrs	r5, r5, #1
 8008958:	429d      	cmp	r5, r3
 800895a:	bf38      	it	cc
 800895c:	461d      	movcc	r5, r3
 800895e:	0553      	lsls	r3, r2, #21
 8008960:	d527      	bpl.n	80089b2 <__ssputs_r+0x8e>
 8008962:	4629      	mov	r1, r5
 8008964:	f7ff ff52 	bl	800880c <_malloc_r>
 8008968:	4606      	mov	r6, r0
 800896a:	b360      	cbz	r0, 80089c6 <__ssputs_r+0xa2>
 800896c:	6921      	ldr	r1, [r4, #16]
 800896e:	464a      	mov	r2, r9
 8008970:	f000 fae8 	bl	8008f44 <memcpy>
 8008974:	89a3      	ldrh	r3, [r4, #12]
 8008976:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800897a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800897e:	81a3      	strh	r3, [r4, #12]
 8008980:	6126      	str	r6, [r4, #16]
 8008982:	6165      	str	r5, [r4, #20]
 8008984:	444e      	add	r6, r9
 8008986:	eba5 0509 	sub.w	r5, r5, r9
 800898a:	6026      	str	r6, [r4, #0]
 800898c:	60a5      	str	r5, [r4, #8]
 800898e:	463e      	mov	r6, r7
 8008990:	42be      	cmp	r6, r7
 8008992:	d900      	bls.n	8008996 <__ssputs_r+0x72>
 8008994:	463e      	mov	r6, r7
 8008996:	6820      	ldr	r0, [r4, #0]
 8008998:	4632      	mov	r2, r6
 800899a:	4641      	mov	r1, r8
 800899c:	f000 faa8 	bl	8008ef0 <memmove>
 80089a0:	68a3      	ldr	r3, [r4, #8]
 80089a2:	1b9b      	subs	r3, r3, r6
 80089a4:	60a3      	str	r3, [r4, #8]
 80089a6:	6823      	ldr	r3, [r4, #0]
 80089a8:	4433      	add	r3, r6
 80089aa:	6023      	str	r3, [r4, #0]
 80089ac:	2000      	movs	r0, #0
 80089ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089b2:	462a      	mov	r2, r5
 80089b4:	f000 fad4 	bl	8008f60 <_realloc_r>
 80089b8:	4606      	mov	r6, r0
 80089ba:	2800      	cmp	r0, #0
 80089bc:	d1e0      	bne.n	8008980 <__ssputs_r+0x5c>
 80089be:	6921      	ldr	r1, [r4, #16]
 80089c0:	4650      	mov	r0, sl
 80089c2:	f7ff feb7 	bl	8008734 <_free_r>
 80089c6:	230c      	movs	r3, #12
 80089c8:	f8ca 3000 	str.w	r3, [sl]
 80089cc:	89a3      	ldrh	r3, [r4, #12]
 80089ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80089d2:	81a3      	strh	r3, [r4, #12]
 80089d4:	f04f 30ff 	mov.w	r0, #4294967295
 80089d8:	e7e9      	b.n	80089ae <__ssputs_r+0x8a>
	...

080089dc <_svfiprintf_r>:
 80089dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089e0:	4698      	mov	r8, r3
 80089e2:	898b      	ldrh	r3, [r1, #12]
 80089e4:	061b      	lsls	r3, r3, #24
 80089e6:	b09d      	sub	sp, #116	@ 0x74
 80089e8:	4607      	mov	r7, r0
 80089ea:	460d      	mov	r5, r1
 80089ec:	4614      	mov	r4, r2
 80089ee:	d510      	bpl.n	8008a12 <_svfiprintf_r+0x36>
 80089f0:	690b      	ldr	r3, [r1, #16]
 80089f2:	b973      	cbnz	r3, 8008a12 <_svfiprintf_r+0x36>
 80089f4:	2140      	movs	r1, #64	@ 0x40
 80089f6:	f7ff ff09 	bl	800880c <_malloc_r>
 80089fa:	6028      	str	r0, [r5, #0]
 80089fc:	6128      	str	r0, [r5, #16]
 80089fe:	b930      	cbnz	r0, 8008a0e <_svfiprintf_r+0x32>
 8008a00:	230c      	movs	r3, #12
 8008a02:	603b      	str	r3, [r7, #0]
 8008a04:	f04f 30ff 	mov.w	r0, #4294967295
 8008a08:	b01d      	add	sp, #116	@ 0x74
 8008a0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a0e:	2340      	movs	r3, #64	@ 0x40
 8008a10:	616b      	str	r3, [r5, #20]
 8008a12:	2300      	movs	r3, #0
 8008a14:	9309      	str	r3, [sp, #36]	@ 0x24
 8008a16:	2320      	movs	r3, #32
 8008a18:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008a1c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008a20:	2330      	movs	r3, #48	@ 0x30
 8008a22:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008bc0 <_svfiprintf_r+0x1e4>
 8008a26:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008a2a:	f04f 0901 	mov.w	r9, #1
 8008a2e:	4623      	mov	r3, r4
 8008a30:	469a      	mov	sl, r3
 8008a32:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008a36:	b10a      	cbz	r2, 8008a3c <_svfiprintf_r+0x60>
 8008a38:	2a25      	cmp	r2, #37	@ 0x25
 8008a3a:	d1f9      	bne.n	8008a30 <_svfiprintf_r+0x54>
 8008a3c:	ebba 0b04 	subs.w	fp, sl, r4
 8008a40:	d00b      	beq.n	8008a5a <_svfiprintf_r+0x7e>
 8008a42:	465b      	mov	r3, fp
 8008a44:	4622      	mov	r2, r4
 8008a46:	4629      	mov	r1, r5
 8008a48:	4638      	mov	r0, r7
 8008a4a:	f7ff ff6b 	bl	8008924 <__ssputs_r>
 8008a4e:	3001      	adds	r0, #1
 8008a50:	f000 80a7 	beq.w	8008ba2 <_svfiprintf_r+0x1c6>
 8008a54:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008a56:	445a      	add	r2, fp
 8008a58:	9209      	str	r2, [sp, #36]	@ 0x24
 8008a5a:	f89a 3000 	ldrb.w	r3, [sl]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	f000 809f 	beq.w	8008ba2 <_svfiprintf_r+0x1c6>
 8008a64:	2300      	movs	r3, #0
 8008a66:	f04f 32ff 	mov.w	r2, #4294967295
 8008a6a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008a6e:	f10a 0a01 	add.w	sl, sl, #1
 8008a72:	9304      	str	r3, [sp, #16]
 8008a74:	9307      	str	r3, [sp, #28]
 8008a76:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008a7a:	931a      	str	r3, [sp, #104]	@ 0x68
 8008a7c:	4654      	mov	r4, sl
 8008a7e:	2205      	movs	r2, #5
 8008a80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a84:	484e      	ldr	r0, [pc, #312]	@ (8008bc0 <_svfiprintf_r+0x1e4>)
 8008a86:	f7f7 fbc3 	bl	8000210 <memchr>
 8008a8a:	9a04      	ldr	r2, [sp, #16]
 8008a8c:	b9d8      	cbnz	r0, 8008ac6 <_svfiprintf_r+0xea>
 8008a8e:	06d0      	lsls	r0, r2, #27
 8008a90:	bf44      	itt	mi
 8008a92:	2320      	movmi	r3, #32
 8008a94:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008a98:	0711      	lsls	r1, r2, #28
 8008a9a:	bf44      	itt	mi
 8008a9c:	232b      	movmi	r3, #43	@ 0x2b
 8008a9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008aa2:	f89a 3000 	ldrb.w	r3, [sl]
 8008aa6:	2b2a      	cmp	r3, #42	@ 0x2a
 8008aa8:	d015      	beq.n	8008ad6 <_svfiprintf_r+0xfa>
 8008aaa:	9a07      	ldr	r2, [sp, #28]
 8008aac:	4654      	mov	r4, sl
 8008aae:	2000      	movs	r0, #0
 8008ab0:	f04f 0c0a 	mov.w	ip, #10
 8008ab4:	4621      	mov	r1, r4
 8008ab6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008aba:	3b30      	subs	r3, #48	@ 0x30
 8008abc:	2b09      	cmp	r3, #9
 8008abe:	d94b      	bls.n	8008b58 <_svfiprintf_r+0x17c>
 8008ac0:	b1b0      	cbz	r0, 8008af0 <_svfiprintf_r+0x114>
 8008ac2:	9207      	str	r2, [sp, #28]
 8008ac4:	e014      	b.n	8008af0 <_svfiprintf_r+0x114>
 8008ac6:	eba0 0308 	sub.w	r3, r0, r8
 8008aca:	fa09 f303 	lsl.w	r3, r9, r3
 8008ace:	4313      	orrs	r3, r2
 8008ad0:	9304      	str	r3, [sp, #16]
 8008ad2:	46a2      	mov	sl, r4
 8008ad4:	e7d2      	b.n	8008a7c <_svfiprintf_r+0xa0>
 8008ad6:	9b03      	ldr	r3, [sp, #12]
 8008ad8:	1d19      	adds	r1, r3, #4
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	9103      	str	r1, [sp, #12]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	bfbb      	ittet	lt
 8008ae2:	425b      	neglt	r3, r3
 8008ae4:	f042 0202 	orrlt.w	r2, r2, #2
 8008ae8:	9307      	strge	r3, [sp, #28]
 8008aea:	9307      	strlt	r3, [sp, #28]
 8008aec:	bfb8      	it	lt
 8008aee:	9204      	strlt	r2, [sp, #16]
 8008af0:	7823      	ldrb	r3, [r4, #0]
 8008af2:	2b2e      	cmp	r3, #46	@ 0x2e
 8008af4:	d10a      	bne.n	8008b0c <_svfiprintf_r+0x130>
 8008af6:	7863      	ldrb	r3, [r4, #1]
 8008af8:	2b2a      	cmp	r3, #42	@ 0x2a
 8008afa:	d132      	bne.n	8008b62 <_svfiprintf_r+0x186>
 8008afc:	9b03      	ldr	r3, [sp, #12]
 8008afe:	1d1a      	adds	r2, r3, #4
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	9203      	str	r2, [sp, #12]
 8008b04:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008b08:	3402      	adds	r4, #2
 8008b0a:	9305      	str	r3, [sp, #20]
 8008b0c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008bd0 <_svfiprintf_r+0x1f4>
 8008b10:	7821      	ldrb	r1, [r4, #0]
 8008b12:	2203      	movs	r2, #3
 8008b14:	4650      	mov	r0, sl
 8008b16:	f7f7 fb7b 	bl	8000210 <memchr>
 8008b1a:	b138      	cbz	r0, 8008b2c <_svfiprintf_r+0x150>
 8008b1c:	9b04      	ldr	r3, [sp, #16]
 8008b1e:	eba0 000a 	sub.w	r0, r0, sl
 8008b22:	2240      	movs	r2, #64	@ 0x40
 8008b24:	4082      	lsls	r2, r0
 8008b26:	4313      	orrs	r3, r2
 8008b28:	3401      	adds	r4, #1
 8008b2a:	9304      	str	r3, [sp, #16]
 8008b2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b30:	4824      	ldr	r0, [pc, #144]	@ (8008bc4 <_svfiprintf_r+0x1e8>)
 8008b32:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008b36:	2206      	movs	r2, #6
 8008b38:	f7f7 fb6a 	bl	8000210 <memchr>
 8008b3c:	2800      	cmp	r0, #0
 8008b3e:	d036      	beq.n	8008bae <_svfiprintf_r+0x1d2>
 8008b40:	4b21      	ldr	r3, [pc, #132]	@ (8008bc8 <_svfiprintf_r+0x1ec>)
 8008b42:	bb1b      	cbnz	r3, 8008b8c <_svfiprintf_r+0x1b0>
 8008b44:	9b03      	ldr	r3, [sp, #12]
 8008b46:	3307      	adds	r3, #7
 8008b48:	f023 0307 	bic.w	r3, r3, #7
 8008b4c:	3308      	adds	r3, #8
 8008b4e:	9303      	str	r3, [sp, #12]
 8008b50:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b52:	4433      	add	r3, r6
 8008b54:	9309      	str	r3, [sp, #36]	@ 0x24
 8008b56:	e76a      	b.n	8008a2e <_svfiprintf_r+0x52>
 8008b58:	fb0c 3202 	mla	r2, ip, r2, r3
 8008b5c:	460c      	mov	r4, r1
 8008b5e:	2001      	movs	r0, #1
 8008b60:	e7a8      	b.n	8008ab4 <_svfiprintf_r+0xd8>
 8008b62:	2300      	movs	r3, #0
 8008b64:	3401      	adds	r4, #1
 8008b66:	9305      	str	r3, [sp, #20]
 8008b68:	4619      	mov	r1, r3
 8008b6a:	f04f 0c0a 	mov.w	ip, #10
 8008b6e:	4620      	mov	r0, r4
 8008b70:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008b74:	3a30      	subs	r2, #48	@ 0x30
 8008b76:	2a09      	cmp	r2, #9
 8008b78:	d903      	bls.n	8008b82 <_svfiprintf_r+0x1a6>
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d0c6      	beq.n	8008b0c <_svfiprintf_r+0x130>
 8008b7e:	9105      	str	r1, [sp, #20]
 8008b80:	e7c4      	b.n	8008b0c <_svfiprintf_r+0x130>
 8008b82:	fb0c 2101 	mla	r1, ip, r1, r2
 8008b86:	4604      	mov	r4, r0
 8008b88:	2301      	movs	r3, #1
 8008b8a:	e7f0      	b.n	8008b6e <_svfiprintf_r+0x192>
 8008b8c:	ab03      	add	r3, sp, #12
 8008b8e:	9300      	str	r3, [sp, #0]
 8008b90:	462a      	mov	r2, r5
 8008b92:	4b0e      	ldr	r3, [pc, #56]	@ (8008bcc <_svfiprintf_r+0x1f0>)
 8008b94:	a904      	add	r1, sp, #16
 8008b96:	4638      	mov	r0, r7
 8008b98:	f3af 8000 	nop.w
 8008b9c:	1c42      	adds	r2, r0, #1
 8008b9e:	4606      	mov	r6, r0
 8008ba0:	d1d6      	bne.n	8008b50 <_svfiprintf_r+0x174>
 8008ba2:	89ab      	ldrh	r3, [r5, #12]
 8008ba4:	065b      	lsls	r3, r3, #25
 8008ba6:	f53f af2d 	bmi.w	8008a04 <_svfiprintf_r+0x28>
 8008baa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008bac:	e72c      	b.n	8008a08 <_svfiprintf_r+0x2c>
 8008bae:	ab03      	add	r3, sp, #12
 8008bb0:	9300      	str	r3, [sp, #0]
 8008bb2:	462a      	mov	r2, r5
 8008bb4:	4b05      	ldr	r3, [pc, #20]	@ (8008bcc <_svfiprintf_r+0x1f0>)
 8008bb6:	a904      	add	r1, sp, #16
 8008bb8:	4638      	mov	r0, r7
 8008bba:	f000 f879 	bl	8008cb0 <_printf_i>
 8008bbe:	e7ed      	b.n	8008b9c <_svfiprintf_r+0x1c0>
 8008bc0:	080095a9 	.word	0x080095a9
 8008bc4:	080095b3 	.word	0x080095b3
 8008bc8:	00000000 	.word	0x00000000
 8008bcc:	08008925 	.word	0x08008925
 8008bd0:	080095af 	.word	0x080095af

08008bd4 <_printf_common>:
 8008bd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008bd8:	4616      	mov	r6, r2
 8008bda:	4698      	mov	r8, r3
 8008bdc:	688a      	ldr	r2, [r1, #8]
 8008bde:	690b      	ldr	r3, [r1, #16]
 8008be0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008be4:	4293      	cmp	r3, r2
 8008be6:	bfb8      	it	lt
 8008be8:	4613      	movlt	r3, r2
 8008bea:	6033      	str	r3, [r6, #0]
 8008bec:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008bf0:	4607      	mov	r7, r0
 8008bf2:	460c      	mov	r4, r1
 8008bf4:	b10a      	cbz	r2, 8008bfa <_printf_common+0x26>
 8008bf6:	3301      	adds	r3, #1
 8008bf8:	6033      	str	r3, [r6, #0]
 8008bfa:	6823      	ldr	r3, [r4, #0]
 8008bfc:	0699      	lsls	r1, r3, #26
 8008bfe:	bf42      	ittt	mi
 8008c00:	6833      	ldrmi	r3, [r6, #0]
 8008c02:	3302      	addmi	r3, #2
 8008c04:	6033      	strmi	r3, [r6, #0]
 8008c06:	6825      	ldr	r5, [r4, #0]
 8008c08:	f015 0506 	ands.w	r5, r5, #6
 8008c0c:	d106      	bne.n	8008c1c <_printf_common+0x48>
 8008c0e:	f104 0a19 	add.w	sl, r4, #25
 8008c12:	68e3      	ldr	r3, [r4, #12]
 8008c14:	6832      	ldr	r2, [r6, #0]
 8008c16:	1a9b      	subs	r3, r3, r2
 8008c18:	42ab      	cmp	r3, r5
 8008c1a:	dc26      	bgt.n	8008c6a <_printf_common+0x96>
 8008c1c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008c20:	6822      	ldr	r2, [r4, #0]
 8008c22:	3b00      	subs	r3, #0
 8008c24:	bf18      	it	ne
 8008c26:	2301      	movne	r3, #1
 8008c28:	0692      	lsls	r2, r2, #26
 8008c2a:	d42b      	bmi.n	8008c84 <_printf_common+0xb0>
 8008c2c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008c30:	4641      	mov	r1, r8
 8008c32:	4638      	mov	r0, r7
 8008c34:	47c8      	blx	r9
 8008c36:	3001      	adds	r0, #1
 8008c38:	d01e      	beq.n	8008c78 <_printf_common+0xa4>
 8008c3a:	6823      	ldr	r3, [r4, #0]
 8008c3c:	6922      	ldr	r2, [r4, #16]
 8008c3e:	f003 0306 	and.w	r3, r3, #6
 8008c42:	2b04      	cmp	r3, #4
 8008c44:	bf02      	ittt	eq
 8008c46:	68e5      	ldreq	r5, [r4, #12]
 8008c48:	6833      	ldreq	r3, [r6, #0]
 8008c4a:	1aed      	subeq	r5, r5, r3
 8008c4c:	68a3      	ldr	r3, [r4, #8]
 8008c4e:	bf0c      	ite	eq
 8008c50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008c54:	2500      	movne	r5, #0
 8008c56:	4293      	cmp	r3, r2
 8008c58:	bfc4      	itt	gt
 8008c5a:	1a9b      	subgt	r3, r3, r2
 8008c5c:	18ed      	addgt	r5, r5, r3
 8008c5e:	2600      	movs	r6, #0
 8008c60:	341a      	adds	r4, #26
 8008c62:	42b5      	cmp	r5, r6
 8008c64:	d11a      	bne.n	8008c9c <_printf_common+0xc8>
 8008c66:	2000      	movs	r0, #0
 8008c68:	e008      	b.n	8008c7c <_printf_common+0xa8>
 8008c6a:	2301      	movs	r3, #1
 8008c6c:	4652      	mov	r2, sl
 8008c6e:	4641      	mov	r1, r8
 8008c70:	4638      	mov	r0, r7
 8008c72:	47c8      	blx	r9
 8008c74:	3001      	adds	r0, #1
 8008c76:	d103      	bne.n	8008c80 <_printf_common+0xac>
 8008c78:	f04f 30ff 	mov.w	r0, #4294967295
 8008c7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c80:	3501      	adds	r5, #1
 8008c82:	e7c6      	b.n	8008c12 <_printf_common+0x3e>
 8008c84:	18e1      	adds	r1, r4, r3
 8008c86:	1c5a      	adds	r2, r3, #1
 8008c88:	2030      	movs	r0, #48	@ 0x30
 8008c8a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008c8e:	4422      	add	r2, r4
 8008c90:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008c94:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008c98:	3302      	adds	r3, #2
 8008c9a:	e7c7      	b.n	8008c2c <_printf_common+0x58>
 8008c9c:	2301      	movs	r3, #1
 8008c9e:	4622      	mov	r2, r4
 8008ca0:	4641      	mov	r1, r8
 8008ca2:	4638      	mov	r0, r7
 8008ca4:	47c8      	blx	r9
 8008ca6:	3001      	adds	r0, #1
 8008ca8:	d0e6      	beq.n	8008c78 <_printf_common+0xa4>
 8008caa:	3601      	adds	r6, #1
 8008cac:	e7d9      	b.n	8008c62 <_printf_common+0x8e>
	...

08008cb0 <_printf_i>:
 8008cb0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008cb4:	7e0f      	ldrb	r7, [r1, #24]
 8008cb6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008cb8:	2f78      	cmp	r7, #120	@ 0x78
 8008cba:	4691      	mov	r9, r2
 8008cbc:	4680      	mov	r8, r0
 8008cbe:	460c      	mov	r4, r1
 8008cc0:	469a      	mov	sl, r3
 8008cc2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008cc6:	d807      	bhi.n	8008cd8 <_printf_i+0x28>
 8008cc8:	2f62      	cmp	r7, #98	@ 0x62
 8008cca:	d80a      	bhi.n	8008ce2 <_printf_i+0x32>
 8008ccc:	2f00      	cmp	r7, #0
 8008cce:	f000 80d2 	beq.w	8008e76 <_printf_i+0x1c6>
 8008cd2:	2f58      	cmp	r7, #88	@ 0x58
 8008cd4:	f000 80b9 	beq.w	8008e4a <_printf_i+0x19a>
 8008cd8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008cdc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008ce0:	e03a      	b.n	8008d58 <_printf_i+0xa8>
 8008ce2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008ce6:	2b15      	cmp	r3, #21
 8008ce8:	d8f6      	bhi.n	8008cd8 <_printf_i+0x28>
 8008cea:	a101      	add	r1, pc, #4	@ (adr r1, 8008cf0 <_printf_i+0x40>)
 8008cec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008cf0:	08008d49 	.word	0x08008d49
 8008cf4:	08008d5d 	.word	0x08008d5d
 8008cf8:	08008cd9 	.word	0x08008cd9
 8008cfc:	08008cd9 	.word	0x08008cd9
 8008d00:	08008cd9 	.word	0x08008cd9
 8008d04:	08008cd9 	.word	0x08008cd9
 8008d08:	08008d5d 	.word	0x08008d5d
 8008d0c:	08008cd9 	.word	0x08008cd9
 8008d10:	08008cd9 	.word	0x08008cd9
 8008d14:	08008cd9 	.word	0x08008cd9
 8008d18:	08008cd9 	.word	0x08008cd9
 8008d1c:	08008e5d 	.word	0x08008e5d
 8008d20:	08008d87 	.word	0x08008d87
 8008d24:	08008e17 	.word	0x08008e17
 8008d28:	08008cd9 	.word	0x08008cd9
 8008d2c:	08008cd9 	.word	0x08008cd9
 8008d30:	08008e7f 	.word	0x08008e7f
 8008d34:	08008cd9 	.word	0x08008cd9
 8008d38:	08008d87 	.word	0x08008d87
 8008d3c:	08008cd9 	.word	0x08008cd9
 8008d40:	08008cd9 	.word	0x08008cd9
 8008d44:	08008e1f 	.word	0x08008e1f
 8008d48:	6833      	ldr	r3, [r6, #0]
 8008d4a:	1d1a      	adds	r2, r3, #4
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	6032      	str	r2, [r6, #0]
 8008d50:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008d54:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008d58:	2301      	movs	r3, #1
 8008d5a:	e09d      	b.n	8008e98 <_printf_i+0x1e8>
 8008d5c:	6833      	ldr	r3, [r6, #0]
 8008d5e:	6820      	ldr	r0, [r4, #0]
 8008d60:	1d19      	adds	r1, r3, #4
 8008d62:	6031      	str	r1, [r6, #0]
 8008d64:	0606      	lsls	r6, r0, #24
 8008d66:	d501      	bpl.n	8008d6c <_printf_i+0xbc>
 8008d68:	681d      	ldr	r5, [r3, #0]
 8008d6a:	e003      	b.n	8008d74 <_printf_i+0xc4>
 8008d6c:	0645      	lsls	r5, r0, #25
 8008d6e:	d5fb      	bpl.n	8008d68 <_printf_i+0xb8>
 8008d70:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008d74:	2d00      	cmp	r5, #0
 8008d76:	da03      	bge.n	8008d80 <_printf_i+0xd0>
 8008d78:	232d      	movs	r3, #45	@ 0x2d
 8008d7a:	426d      	negs	r5, r5
 8008d7c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008d80:	4859      	ldr	r0, [pc, #356]	@ (8008ee8 <_printf_i+0x238>)
 8008d82:	230a      	movs	r3, #10
 8008d84:	e011      	b.n	8008daa <_printf_i+0xfa>
 8008d86:	6821      	ldr	r1, [r4, #0]
 8008d88:	6833      	ldr	r3, [r6, #0]
 8008d8a:	0608      	lsls	r0, r1, #24
 8008d8c:	f853 5b04 	ldr.w	r5, [r3], #4
 8008d90:	d402      	bmi.n	8008d98 <_printf_i+0xe8>
 8008d92:	0649      	lsls	r1, r1, #25
 8008d94:	bf48      	it	mi
 8008d96:	b2ad      	uxthmi	r5, r5
 8008d98:	2f6f      	cmp	r7, #111	@ 0x6f
 8008d9a:	4853      	ldr	r0, [pc, #332]	@ (8008ee8 <_printf_i+0x238>)
 8008d9c:	6033      	str	r3, [r6, #0]
 8008d9e:	bf14      	ite	ne
 8008da0:	230a      	movne	r3, #10
 8008da2:	2308      	moveq	r3, #8
 8008da4:	2100      	movs	r1, #0
 8008da6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008daa:	6866      	ldr	r6, [r4, #4]
 8008dac:	60a6      	str	r6, [r4, #8]
 8008dae:	2e00      	cmp	r6, #0
 8008db0:	bfa2      	ittt	ge
 8008db2:	6821      	ldrge	r1, [r4, #0]
 8008db4:	f021 0104 	bicge.w	r1, r1, #4
 8008db8:	6021      	strge	r1, [r4, #0]
 8008dba:	b90d      	cbnz	r5, 8008dc0 <_printf_i+0x110>
 8008dbc:	2e00      	cmp	r6, #0
 8008dbe:	d04b      	beq.n	8008e58 <_printf_i+0x1a8>
 8008dc0:	4616      	mov	r6, r2
 8008dc2:	fbb5 f1f3 	udiv	r1, r5, r3
 8008dc6:	fb03 5711 	mls	r7, r3, r1, r5
 8008dca:	5dc7      	ldrb	r7, [r0, r7]
 8008dcc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008dd0:	462f      	mov	r7, r5
 8008dd2:	42bb      	cmp	r3, r7
 8008dd4:	460d      	mov	r5, r1
 8008dd6:	d9f4      	bls.n	8008dc2 <_printf_i+0x112>
 8008dd8:	2b08      	cmp	r3, #8
 8008dda:	d10b      	bne.n	8008df4 <_printf_i+0x144>
 8008ddc:	6823      	ldr	r3, [r4, #0]
 8008dde:	07df      	lsls	r7, r3, #31
 8008de0:	d508      	bpl.n	8008df4 <_printf_i+0x144>
 8008de2:	6923      	ldr	r3, [r4, #16]
 8008de4:	6861      	ldr	r1, [r4, #4]
 8008de6:	4299      	cmp	r1, r3
 8008de8:	bfde      	ittt	le
 8008dea:	2330      	movle	r3, #48	@ 0x30
 8008dec:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008df0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008df4:	1b92      	subs	r2, r2, r6
 8008df6:	6122      	str	r2, [r4, #16]
 8008df8:	f8cd a000 	str.w	sl, [sp]
 8008dfc:	464b      	mov	r3, r9
 8008dfe:	aa03      	add	r2, sp, #12
 8008e00:	4621      	mov	r1, r4
 8008e02:	4640      	mov	r0, r8
 8008e04:	f7ff fee6 	bl	8008bd4 <_printf_common>
 8008e08:	3001      	adds	r0, #1
 8008e0a:	d14a      	bne.n	8008ea2 <_printf_i+0x1f2>
 8008e0c:	f04f 30ff 	mov.w	r0, #4294967295
 8008e10:	b004      	add	sp, #16
 8008e12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e16:	6823      	ldr	r3, [r4, #0]
 8008e18:	f043 0320 	orr.w	r3, r3, #32
 8008e1c:	6023      	str	r3, [r4, #0]
 8008e1e:	4833      	ldr	r0, [pc, #204]	@ (8008eec <_printf_i+0x23c>)
 8008e20:	2778      	movs	r7, #120	@ 0x78
 8008e22:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008e26:	6823      	ldr	r3, [r4, #0]
 8008e28:	6831      	ldr	r1, [r6, #0]
 8008e2a:	061f      	lsls	r7, r3, #24
 8008e2c:	f851 5b04 	ldr.w	r5, [r1], #4
 8008e30:	d402      	bmi.n	8008e38 <_printf_i+0x188>
 8008e32:	065f      	lsls	r7, r3, #25
 8008e34:	bf48      	it	mi
 8008e36:	b2ad      	uxthmi	r5, r5
 8008e38:	6031      	str	r1, [r6, #0]
 8008e3a:	07d9      	lsls	r1, r3, #31
 8008e3c:	bf44      	itt	mi
 8008e3e:	f043 0320 	orrmi.w	r3, r3, #32
 8008e42:	6023      	strmi	r3, [r4, #0]
 8008e44:	b11d      	cbz	r5, 8008e4e <_printf_i+0x19e>
 8008e46:	2310      	movs	r3, #16
 8008e48:	e7ac      	b.n	8008da4 <_printf_i+0xf4>
 8008e4a:	4827      	ldr	r0, [pc, #156]	@ (8008ee8 <_printf_i+0x238>)
 8008e4c:	e7e9      	b.n	8008e22 <_printf_i+0x172>
 8008e4e:	6823      	ldr	r3, [r4, #0]
 8008e50:	f023 0320 	bic.w	r3, r3, #32
 8008e54:	6023      	str	r3, [r4, #0]
 8008e56:	e7f6      	b.n	8008e46 <_printf_i+0x196>
 8008e58:	4616      	mov	r6, r2
 8008e5a:	e7bd      	b.n	8008dd8 <_printf_i+0x128>
 8008e5c:	6833      	ldr	r3, [r6, #0]
 8008e5e:	6825      	ldr	r5, [r4, #0]
 8008e60:	6961      	ldr	r1, [r4, #20]
 8008e62:	1d18      	adds	r0, r3, #4
 8008e64:	6030      	str	r0, [r6, #0]
 8008e66:	062e      	lsls	r6, r5, #24
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	d501      	bpl.n	8008e70 <_printf_i+0x1c0>
 8008e6c:	6019      	str	r1, [r3, #0]
 8008e6e:	e002      	b.n	8008e76 <_printf_i+0x1c6>
 8008e70:	0668      	lsls	r0, r5, #25
 8008e72:	d5fb      	bpl.n	8008e6c <_printf_i+0x1bc>
 8008e74:	8019      	strh	r1, [r3, #0]
 8008e76:	2300      	movs	r3, #0
 8008e78:	6123      	str	r3, [r4, #16]
 8008e7a:	4616      	mov	r6, r2
 8008e7c:	e7bc      	b.n	8008df8 <_printf_i+0x148>
 8008e7e:	6833      	ldr	r3, [r6, #0]
 8008e80:	1d1a      	adds	r2, r3, #4
 8008e82:	6032      	str	r2, [r6, #0]
 8008e84:	681e      	ldr	r6, [r3, #0]
 8008e86:	6862      	ldr	r2, [r4, #4]
 8008e88:	2100      	movs	r1, #0
 8008e8a:	4630      	mov	r0, r6
 8008e8c:	f7f7 f9c0 	bl	8000210 <memchr>
 8008e90:	b108      	cbz	r0, 8008e96 <_printf_i+0x1e6>
 8008e92:	1b80      	subs	r0, r0, r6
 8008e94:	6060      	str	r0, [r4, #4]
 8008e96:	6863      	ldr	r3, [r4, #4]
 8008e98:	6123      	str	r3, [r4, #16]
 8008e9a:	2300      	movs	r3, #0
 8008e9c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008ea0:	e7aa      	b.n	8008df8 <_printf_i+0x148>
 8008ea2:	6923      	ldr	r3, [r4, #16]
 8008ea4:	4632      	mov	r2, r6
 8008ea6:	4649      	mov	r1, r9
 8008ea8:	4640      	mov	r0, r8
 8008eaa:	47d0      	blx	sl
 8008eac:	3001      	adds	r0, #1
 8008eae:	d0ad      	beq.n	8008e0c <_printf_i+0x15c>
 8008eb0:	6823      	ldr	r3, [r4, #0]
 8008eb2:	079b      	lsls	r3, r3, #30
 8008eb4:	d413      	bmi.n	8008ede <_printf_i+0x22e>
 8008eb6:	68e0      	ldr	r0, [r4, #12]
 8008eb8:	9b03      	ldr	r3, [sp, #12]
 8008eba:	4298      	cmp	r0, r3
 8008ebc:	bfb8      	it	lt
 8008ebe:	4618      	movlt	r0, r3
 8008ec0:	e7a6      	b.n	8008e10 <_printf_i+0x160>
 8008ec2:	2301      	movs	r3, #1
 8008ec4:	4632      	mov	r2, r6
 8008ec6:	4649      	mov	r1, r9
 8008ec8:	4640      	mov	r0, r8
 8008eca:	47d0      	blx	sl
 8008ecc:	3001      	adds	r0, #1
 8008ece:	d09d      	beq.n	8008e0c <_printf_i+0x15c>
 8008ed0:	3501      	adds	r5, #1
 8008ed2:	68e3      	ldr	r3, [r4, #12]
 8008ed4:	9903      	ldr	r1, [sp, #12]
 8008ed6:	1a5b      	subs	r3, r3, r1
 8008ed8:	42ab      	cmp	r3, r5
 8008eda:	dcf2      	bgt.n	8008ec2 <_printf_i+0x212>
 8008edc:	e7eb      	b.n	8008eb6 <_printf_i+0x206>
 8008ede:	2500      	movs	r5, #0
 8008ee0:	f104 0619 	add.w	r6, r4, #25
 8008ee4:	e7f5      	b.n	8008ed2 <_printf_i+0x222>
 8008ee6:	bf00      	nop
 8008ee8:	080095ba 	.word	0x080095ba
 8008eec:	080095cb 	.word	0x080095cb

08008ef0 <memmove>:
 8008ef0:	4288      	cmp	r0, r1
 8008ef2:	b510      	push	{r4, lr}
 8008ef4:	eb01 0402 	add.w	r4, r1, r2
 8008ef8:	d902      	bls.n	8008f00 <memmove+0x10>
 8008efa:	4284      	cmp	r4, r0
 8008efc:	4623      	mov	r3, r4
 8008efe:	d807      	bhi.n	8008f10 <memmove+0x20>
 8008f00:	1e43      	subs	r3, r0, #1
 8008f02:	42a1      	cmp	r1, r4
 8008f04:	d008      	beq.n	8008f18 <memmove+0x28>
 8008f06:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008f0a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008f0e:	e7f8      	b.n	8008f02 <memmove+0x12>
 8008f10:	4402      	add	r2, r0
 8008f12:	4601      	mov	r1, r0
 8008f14:	428a      	cmp	r2, r1
 8008f16:	d100      	bne.n	8008f1a <memmove+0x2a>
 8008f18:	bd10      	pop	{r4, pc}
 8008f1a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008f1e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008f22:	e7f7      	b.n	8008f14 <memmove+0x24>

08008f24 <_sbrk_r>:
 8008f24:	b538      	push	{r3, r4, r5, lr}
 8008f26:	4d06      	ldr	r5, [pc, #24]	@ (8008f40 <_sbrk_r+0x1c>)
 8008f28:	2300      	movs	r3, #0
 8008f2a:	4604      	mov	r4, r0
 8008f2c:	4608      	mov	r0, r1
 8008f2e:	602b      	str	r3, [r5, #0]
 8008f30:	f7f8 f852 	bl	8000fd8 <_sbrk>
 8008f34:	1c43      	adds	r3, r0, #1
 8008f36:	d102      	bne.n	8008f3e <_sbrk_r+0x1a>
 8008f38:	682b      	ldr	r3, [r5, #0]
 8008f3a:	b103      	cbz	r3, 8008f3e <_sbrk_r+0x1a>
 8008f3c:	6023      	str	r3, [r4, #0]
 8008f3e:	bd38      	pop	{r3, r4, r5, pc}
 8008f40:	20001794 	.word	0x20001794

08008f44 <memcpy>:
 8008f44:	440a      	add	r2, r1
 8008f46:	4291      	cmp	r1, r2
 8008f48:	f100 33ff 	add.w	r3, r0, #4294967295
 8008f4c:	d100      	bne.n	8008f50 <memcpy+0xc>
 8008f4e:	4770      	bx	lr
 8008f50:	b510      	push	{r4, lr}
 8008f52:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008f56:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008f5a:	4291      	cmp	r1, r2
 8008f5c:	d1f9      	bne.n	8008f52 <memcpy+0xe>
 8008f5e:	bd10      	pop	{r4, pc}

08008f60 <_realloc_r>:
 8008f60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f64:	4680      	mov	r8, r0
 8008f66:	4615      	mov	r5, r2
 8008f68:	460c      	mov	r4, r1
 8008f6a:	b921      	cbnz	r1, 8008f76 <_realloc_r+0x16>
 8008f6c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008f70:	4611      	mov	r1, r2
 8008f72:	f7ff bc4b 	b.w	800880c <_malloc_r>
 8008f76:	b92a      	cbnz	r2, 8008f84 <_realloc_r+0x24>
 8008f78:	f7ff fbdc 	bl	8008734 <_free_r>
 8008f7c:	2400      	movs	r4, #0
 8008f7e:	4620      	mov	r0, r4
 8008f80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f84:	f000 f81a 	bl	8008fbc <_malloc_usable_size_r>
 8008f88:	4285      	cmp	r5, r0
 8008f8a:	4606      	mov	r6, r0
 8008f8c:	d802      	bhi.n	8008f94 <_realloc_r+0x34>
 8008f8e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008f92:	d8f4      	bhi.n	8008f7e <_realloc_r+0x1e>
 8008f94:	4629      	mov	r1, r5
 8008f96:	4640      	mov	r0, r8
 8008f98:	f7ff fc38 	bl	800880c <_malloc_r>
 8008f9c:	4607      	mov	r7, r0
 8008f9e:	2800      	cmp	r0, #0
 8008fa0:	d0ec      	beq.n	8008f7c <_realloc_r+0x1c>
 8008fa2:	42b5      	cmp	r5, r6
 8008fa4:	462a      	mov	r2, r5
 8008fa6:	4621      	mov	r1, r4
 8008fa8:	bf28      	it	cs
 8008faa:	4632      	movcs	r2, r6
 8008fac:	f7ff ffca 	bl	8008f44 <memcpy>
 8008fb0:	4621      	mov	r1, r4
 8008fb2:	4640      	mov	r0, r8
 8008fb4:	f7ff fbbe 	bl	8008734 <_free_r>
 8008fb8:	463c      	mov	r4, r7
 8008fba:	e7e0      	b.n	8008f7e <_realloc_r+0x1e>

08008fbc <_malloc_usable_size_r>:
 8008fbc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008fc0:	1f18      	subs	r0, r3, #4
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	bfbc      	itt	lt
 8008fc6:	580b      	ldrlt	r3, [r1, r0]
 8008fc8:	18c0      	addlt	r0, r0, r3
 8008fca:	4770      	bx	lr

08008fcc <_init>:
 8008fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fce:	bf00      	nop
 8008fd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008fd2:	bc08      	pop	{r3}
 8008fd4:	469e      	mov	lr, r3
 8008fd6:	4770      	bx	lr

08008fd8 <_fini>:
 8008fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fda:	bf00      	nop
 8008fdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008fde:	bc08      	pop	{r3}
 8008fe0:	469e      	mov	lr, r3
 8008fe2:	4770      	bx	lr
