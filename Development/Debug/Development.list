
Development.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000956c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000584  0800973c  0800973c  0000a73c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009cc0  08009cc0  0000b074  2**0
                  CONTENTS
  4 .ARM          00000008  08009cc0  08009cc0  0000acc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009cc8  08009cc8  0000b074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009cc8  08009cc8  0000acc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009ccc  08009ccc  0000accc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000074  20000000  08009cd0  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002948  20000074  08009d44  0000b074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200029bc  08009d44  0000b9bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014b2c  00000000  00000000  0000b0a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000359a  00000000  00000000  0001fbd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001358  00000000  00000000  00023170  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f11  00000000  00000000  000244c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000053d4  00000000  00000000  000253d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001dcba  00000000  00000000  0002a7ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d51bc  00000000  00000000  00048467  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011d623  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000559c  00000000  00000000  0011d668  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  00122c04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000074 	.word	0x20000074
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08009724 	.word	0x08009724

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000078 	.word	0x20000078
 800020c:	08009724 	.word	0x08009724

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_dmul>:
 80002b0:	b570      	push	{r4, r5, r6, lr}
 80002b2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80002b6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80002ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002be:	bf1d      	ittte	ne
 80002c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002c4:	ea94 0f0c 	teqne	r4, ip
 80002c8:	ea95 0f0c 	teqne	r5, ip
 80002cc:	f000 f8de 	bleq	800048c <__aeabi_dmul+0x1dc>
 80002d0:	442c      	add	r4, r5
 80002d2:	ea81 0603 	eor.w	r6, r1, r3
 80002d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002e2:	bf18      	it	ne
 80002e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002ec:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80002f0:	d038      	beq.n	8000364 <__aeabi_dmul+0xb4>
 80002f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002f6:	f04f 0500 	mov.w	r5, #0
 80002fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002fe:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000302:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000306:	f04f 0600 	mov.w	r6, #0
 800030a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800030e:	f09c 0f00 	teq	ip, #0
 8000312:	bf18      	it	ne
 8000314:	f04e 0e01 	orrne.w	lr, lr, #1
 8000318:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800031c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000320:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000324:	d204      	bcs.n	8000330 <__aeabi_dmul+0x80>
 8000326:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800032a:	416d      	adcs	r5, r5
 800032c:	eb46 0606 	adc.w	r6, r6, r6
 8000330:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000334:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000338:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800033c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000340:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000344:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000348:	bf88      	it	hi
 800034a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800034e:	d81e      	bhi.n	800038e <__aeabi_dmul+0xde>
 8000350:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000368:	ea46 0101 	orr.w	r1, r6, r1
 800036c:	ea40 0002 	orr.w	r0, r0, r2
 8000370:	ea81 0103 	eor.w	r1, r1, r3
 8000374:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000378:	bfc2      	ittt	gt
 800037a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800037e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000382:	bd70      	popgt	{r4, r5, r6, pc}
 8000384:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000388:	f04f 0e00 	mov.w	lr, #0
 800038c:	3c01      	subs	r4, #1
 800038e:	f300 80ab 	bgt.w	80004e8 <__aeabi_dmul+0x238>
 8000392:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000396:	bfde      	ittt	le
 8000398:	2000      	movle	r0, #0
 800039a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800039e:	bd70      	pople	{r4, r5, r6, pc}
 80003a0:	f1c4 0400 	rsb	r4, r4, #0
 80003a4:	3c20      	subs	r4, #32
 80003a6:	da35      	bge.n	8000414 <__aeabi_dmul+0x164>
 80003a8:	340c      	adds	r4, #12
 80003aa:	dc1b      	bgt.n	80003e4 <__aeabi_dmul+0x134>
 80003ac:	f104 0414 	add.w	r4, r4, #20
 80003b0:	f1c4 0520 	rsb	r5, r4, #32
 80003b4:	fa00 f305 	lsl.w	r3, r0, r5
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f205 	lsl.w	r2, r1, r5
 80003c0:	ea40 0002 	orr.w	r0, r0, r2
 80003c4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80003c8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80003cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d0:	fa21 f604 	lsr.w	r6, r1, r4
 80003d4:	eb42 0106 	adc.w	r1, r2, r6
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 040c 	rsb	r4, r4, #12
 80003e8:	f1c4 0520 	rsb	r5, r4, #32
 80003ec:	fa00 f304 	lsl.w	r3, r0, r4
 80003f0:	fa20 f005 	lsr.w	r0, r0, r5
 80003f4:	fa01 f204 	lsl.w	r2, r1, r4
 80003f8:	ea40 0002 	orr.w	r0, r0, r2
 80003fc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000400:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000404:	f141 0100 	adc.w	r1, r1, #0
 8000408:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800040c:	bf08      	it	eq
 800040e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000412:	bd70      	pop	{r4, r5, r6, pc}
 8000414:	f1c4 0520 	rsb	r5, r4, #32
 8000418:	fa00 f205 	lsl.w	r2, r0, r5
 800041c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000420:	fa20 f304 	lsr.w	r3, r0, r4
 8000424:	fa01 f205 	lsl.w	r2, r1, r5
 8000428:	ea43 0302 	orr.w	r3, r3, r2
 800042c:	fa21 f004 	lsr.w	r0, r1, r4
 8000430:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000434:	fa21 f204 	lsr.w	r2, r1, r4
 8000438:	ea20 0002 	bic.w	r0, r0, r2
 800043c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000440:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000444:	bf08      	it	eq
 8000446:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800044a:	bd70      	pop	{r4, r5, r6, pc}
 800044c:	f094 0f00 	teq	r4, #0
 8000450:	d10f      	bne.n	8000472 <__aeabi_dmul+0x1c2>
 8000452:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000456:	0040      	lsls	r0, r0, #1
 8000458:	eb41 0101 	adc.w	r1, r1, r1
 800045c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000460:	bf08      	it	eq
 8000462:	3c01      	subeq	r4, #1
 8000464:	d0f7      	beq.n	8000456 <__aeabi_dmul+0x1a6>
 8000466:	ea41 0106 	orr.w	r1, r1, r6
 800046a:	f095 0f00 	teq	r5, #0
 800046e:	bf18      	it	ne
 8000470:	4770      	bxne	lr
 8000472:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000476:	0052      	lsls	r2, r2, #1
 8000478:	eb43 0303 	adc.w	r3, r3, r3
 800047c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000480:	bf08      	it	eq
 8000482:	3d01      	subeq	r5, #1
 8000484:	d0f7      	beq.n	8000476 <__aeabi_dmul+0x1c6>
 8000486:	ea43 0306 	orr.w	r3, r3, r6
 800048a:	4770      	bx	lr
 800048c:	ea94 0f0c 	teq	r4, ip
 8000490:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000494:	bf18      	it	ne
 8000496:	ea95 0f0c 	teqne	r5, ip
 800049a:	d00c      	beq.n	80004b6 <__aeabi_dmul+0x206>
 800049c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004a0:	bf18      	it	ne
 80004a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004a6:	d1d1      	bne.n	800044c <__aeabi_dmul+0x19c>
 80004a8:	ea81 0103 	eor.w	r1, r1, r3
 80004ac:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004b0:	f04f 0000 	mov.w	r0, #0
 80004b4:	bd70      	pop	{r4, r5, r6, pc}
 80004b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004ba:	bf06      	itte	eq
 80004bc:	4610      	moveq	r0, r2
 80004be:	4619      	moveq	r1, r3
 80004c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004c4:	d019      	beq.n	80004fa <__aeabi_dmul+0x24a>
 80004c6:	ea94 0f0c 	teq	r4, ip
 80004ca:	d102      	bne.n	80004d2 <__aeabi_dmul+0x222>
 80004cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004d0:	d113      	bne.n	80004fa <__aeabi_dmul+0x24a>
 80004d2:	ea95 0f0c 	teq	r5, ip
 80004d6:	d105      	bne.n	80004e4 <__aeabi_dmul+0x234>
 80004d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004dc:	bf1c      	itt	ne
 80004de:	4610      	movne	r0, r2
 80004e0:	4619      	movne	r1, r3
 80004e2:	d10a      	bne.n	80004fa <__aeabi_dmul+0x24a>
 80004e4:	ea81 0103 	eor.w	r1, r1, r3
 80004e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004ec:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd70      	pop	{r4, r5, r6, pc}
 80004fa:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004fe:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000502:	bd70      	pop	{r4, r5, r6, pc}

08000504 <__aeabi_drsub>:
 8000504:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000508:	e002      	b.n	8000510 <__adddf3>
 800050a:	bf00      	nop

0800050c <__aeabi_dsub>:
 800050c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000510 <__adddf3>:
 8000510:	b530      	push	{r4, r5, lr}
 8000512:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000516:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800051a:	ea94 0f05 	teq	r4, r5
 800051e:	bf08      	it	eq
 8000520:	ea90 0f02 	teqeq	r0, r2
 8000524:	bf1f      	itttt	ne
 8000526:	ea54 0c00 	orrsne.w	ip, r4, r0
 800052a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800052e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000532:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000536:	f000 80e2 	beq.w	80006fe <__adddf3+0x1ee>
 800053a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800053e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000542:	bfb8      	it	lt
 8000544:	426d      	neglt	r5, r5
 8000546:	dd0c      	ble.n	8000562 <__adddf3+0x52>
 8000548:	442c      	add	r4, r5
 800054a:	ea80 0202 	eor.w	r2, r0, r2
 800054e:	ea81 0303 	eor.w	r3, r1, r3
 8000552:	ea82 0000 	eor.w	r0, r2, r0
 8000556:	ea83 0101 	eor.w	r1, r3, r1
 800055a:	ea80 0202 	eor.w	r2, r0, r2
 800055e:	ea81 0303 	eor.w	r3, r1, r3
 8000562:	2d36      	cmp	r5, #54	@ 0x36
 8000564:	bf88      	it	hi
 8000566:	bd30      	pophi	{r4, r5, pc}
 8000568:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800056c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000570:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000574:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000578:	d002      	beq.n	8000580 <__adddf3+0x70>
 800057a:	4240      	negs	r0, r0
 800057c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000580:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000584:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000588:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800058c:	d002      	beq.n	8000594 <__adddf3+0x84>
 800058e:	4252      	negs	r2, r2
 8000590:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000594:	ea94 0f05 	teq	r4, r5
 8000598:	f000 80a7 	beq.w	80006ea <__adddf3+0x1da>
 800059c:	f1a4 0401 	sub.w	r4, r4, #1
 80005a0:	f1d5 0e20 	rsbs	lr, r5, #32
 80005a4:	db0d      	blt.n	80005c2 <__adddf3+0xb2>
 80005a6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80005aa:	fa22 f205 	lsr.w	r2, r2, r5
 80005ae:	1880      	adds	r0, r0, r2
 80005b0:	f141 0100 	adc.w	r1, r1, #0
 80005b4:	fa03 f20e 	lsl.w	r2, r3, lr
 80005b8:	1880      	adds	r0, r0, r2
 80005ba:	fa43 f305 	asr.w	r3, r3, r5
 80005be:	4159      	adcs	r1, r3
 80005c0:	e00e      	b.n	80005e0 <__adddf3+0xd0>
 80005c2:	f1a5 0520 	sub.w	r5, r5, #32
 80005c6:	f10e 0e20 	add.w	lr, lr, #32
 80005ca:	2a01      	cmp	r2, #1
 80005cc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005d0:	bf28      	it	cs
 80005d2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005d6:	fa43 f305 	asr.w	r3, r3, r5
 80005da:	18c0      	adds	r0, r0, r3
 80005dc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005e4:	d507      	bpl.n	80005f6 <__adddf3+0xe6>
 80005e6:	f04f 0e00 	mov.w	lr, #0
 80005ea:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ee:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005f2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005f6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80005fa:	d31b      	bcc.n	8000634 <__adddf3+0x124>
 80005fc:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000600:	d30c      	bcc.n	800061c <__adddf3+0x10c>
 8000602:	0849      	lsrs	r1, r1, #1
 8000604:	ea5f 0030 	movs.w	r0, r0, rrx
 8000608:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800060c:	f104 0401 	add.w	r4, r4, #1
 8000610:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000614:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000618:	f080 809a 	bcs.w	8000750 <__adddf3+0x240>
 800061c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000620:	bf08      	it	eq
 8000622:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000626:	f150 0000 	adcs.w	r0, r0, #0
 800062a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800062e:	ea41 0105 	orr.w	r1, r1, r5
 8000632:	bd30      	pop	{r4, r5, pc}
 8000634:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000638:	4140      	adcs	r0, r0
 800063a:	eb41 0101 	adc.w	r1, r1, r1
 800063e:	3c01      	subs	r4, #1
 8000640:	bf28      	it	cs
 8000642:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000646:	d2e9      	bcs.n	800061c <__adddf3+0x10c>
 8000648:	f091 0f00 	teq	r1, #0
 800064c:	bf04      	itt	eq
 800064e:	4601      	moveq	r1, r0
 8000650:	2000      	moveq	r0, #0
 8000652:	fab1 f381 	clz	r3, r1
 8000656:	bf08      	it	eq
 8000658:	3320      	addeq	r3, #32
 800065a:	f1a3 030b 	sub.w	r3, r3, #11
 800065e:	f1b3 0220 	subs.w	r2, r3, #32
 8000662:	da0c      	bge.n	800067e <__adddf3+0x16e>
 8000664:	320c      	adds	r2, #12
 8000666:	dd08      	ble.n	800067a <__adddf3+0x16a>
 8000668:	f102 0c14 	add.w	ip, r2, #20
 800066c:	f1c2 020c 	rsb	r2, r2, #12
 8000670:	fa01 f00c 	lsl.w	r0, r1, ip
 8000674:	fa21 f102 	lsr.w	r1, r1, r2
 8000678:	e00c      	b.n	8000694 <__adddf3+0x184>
 800067a:	f102 0214 	add.w	r2, r2, #20
 800067e:	bfd8      	it	le
 8000680:	f1c2 0c20 	rsble	ip, r2, #32
 8000684:	fa01 f102 	lsl.w	r1, r1, r2
 8000688:	fa20 fc0c 	lsr.w	ip, r0, ip
 800068c:	bfdc      	itt	le
 800068e:	ea41 010c 	orrle.w	r1, r1, ip
 8000692:	4090      	lslle	r0, r2
 8000694:	1ae4      	subs	r4, r4, r3
 8000696:	bfa2      	ittt	ge
 8000698:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800069c:	4329      	orrge	r1, r5
 800069e:	bd30      	popge	{r4, r5, pc}
 80006a0:	ea6f 0404 	mvn.w	r4, r4
 80006a4:	3c1f      	subs	r4, #31
 80006a6:	da1c      	bge.n	80006e2 <__adddf3+0x1d2>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc0e      	bgt.n	80006ca <__adddf3+0x1ba>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0220 	rsb	r2, r4, #32
 80006b4:	fa20 f004 	lsr.w	r0, r0, r4
 80006b8:	fa01 f302 	lsl.w	r3, r1, r2
 80006bc:	ea40 0003 	orr.w	r0, r0, r3
 80006c0:	fa21 f304 	lsr.w	r3, r1, r4
 80006c4:	ea45 0103 	orr.w	r1, r5, r3
 80006c8:	bd30      	pop	{r4, r5, pc}
 80006ca:	f1c4 040c 	rsb	r4, r4, #12
 80006ce:	f1c4 0220 	rsb	r2, r4, #32
 80006d2:	fa20 f002 	lsr.w	r0, r0, r2
 80006d6:	fa01 f304 	lsl.w	r3, r1, r4
 80006da:	ea40 0003 	orr.w	r0, r0, r3
 80006de:	4629      	mov	r1, r5
 80006e0:	bd30      	pop	{r4, r5, pc}
 80006e2:	fa21 f004 	lsr.w	r0, r1, r4
 80006e6:	4629      	mov	r1, r5
 80006e8:	bd30      	pop	{r4, r5, pc}
 80006ea:	f094 0f00 	teq	r4, #0
 80006ee:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80006f2:	bf06      	itte	eq
 80006f4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80006f8:	3401      	addeq	r4, #1
 80006fa:	3d01      	subne	r5, #1
 80006fc:	e74e      	b.n	800059c <__adddf3+0x8c>
 80006fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000702:	bf18      	it	ne
 8000704:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000708:	d029      	beq.n	800075e <__adddf3+0x24e>
 800070a:	ea94 0f05 	teq	r4, r5
 800070e:	bf08      	it	eq
 8000710:	ea90 0f02 	teqeq	r0, r2
 8000714:	d005      	beq.n	8000722 <__adddf3+0x212>
 8000716:	ea54 0c00 	orrs.w	ip, r4, r0
 800071a:	bf04      	itt	eq
 800071c:	4619      	moveq	r1, r3
 800071e:	4610      	moveq	r0, r2
 8000720:	bd30      	pop	{r4, r5, pc}
 8000722:	ea91 0f03 	teq	r1, r3
 8000726:	bf1e      	ittt	ne
 8000728:	2100      	movne	r1, #0
 800072a:	2000      	movne	r0, #0
 800072c:	bd30      	popne	{r4, r5, pc}
 800072e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000732:	d105      	bne.n	8000740 <__adddf3+0x230>
 8000734:	0040      	lsls	r0, r0, #1
 8000736:	4149      	adcs	r1, r1
 8000738:	bf28      	it	cs
 800073a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800073e:	bd30      	pop	{r4, r5, pc}
 8000740:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000744:	bf3c      	itt	cc
 8000746:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800074a:	bd30      	popcc	{r4, r5, pc}
 800074c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000750:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000754:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd30      	pop	{r4, r5, pc}
 800075e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000762:	bf1a      	itte	ne
 8000764:	4619      	movne	r1, r3
 8000766:	4610      	movne	r0, r2
 8000768:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800076c:	bf1c      	itt	ne
 800076e:	460b      	movne	r3, r1
 8000770:	4602      	movne	r2, r0
 8000772:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000776:	bf06      	itte	eq
 8000778:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800077c:	ea91 0f03 	teqeq	r1, r3
 8000780:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000784:	bd30      	pop	{r4, r5, pc}
 8000786:	bf00      	nop

08000788 <__aeabi_ui2d>:
 8000788:	f090 0f00 	teq	r0, #0
 800078c:	bf04      	itt	eq
 800078e:	2100      	moveq	r1, #0
 8000790:	4770      	bxeq	lr
 8000792:	b530      	push	{r4, r5, lr}
 8000794:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000798:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800079c:	f04f 0500 	mov.w	r5, #0
 80007a0:	f04f 0100 	mov.w	r1, #0
 80007a4:	e750      	b.n	8000648 <__adddf3+0x138>
 80007a6:	bf00      	nop

080007a8 <__aeabi_i2d>:
 80007a8:	f090 0f00 	teq	r0, #0
 80007ac:	bf04      	itt	eq
 80007ae:	2100      	moveq	r1, #0
 80007b0:	4770      	bxeq	lr
 80007b2:	b530      	push	{r4, r5, lr}
 80007b4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007b8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007bc:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80007c0:	bf48      	it	mi
 80007c2:	4240      	negmi	r0, r0
 80007c4:	f04f 0100 	mov.w	r1, #0
 80007c8:	e73e      	b.n	8000648 <__adddf3+0x138>
 80007ca:	bf00      	nop

080007cc <__aeabi_f2d>:
 80007cc:	0042      	lsls	r2, r0, #1
 80007ce:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007d2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007d6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007da:	bf1f      	itttt	ne
 80007dc:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80007e0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80007e4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80007e8:	4770      	bxne	lr
 80007ea:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80007ee:	bf08      	it	eq
 80007f0:	4770      	bxeq	lr
 80007f2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80007f6:	bf04      	itt	eq
 80007f8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80007fc:	4770      	bxeq	lr
 80007fe:	b530      	push	{r4, r5, lr}
 8000800:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000804:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000808:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800080c:	e71c      	b.n	8000648 <__adddf3+0x138>
 800080e:	bf00      	nop

08000810 <__aeabi_ul2d>:
 8000810:	ea50 0201 	orrs.w	r2, r0, r1
 8000814:	bf08      	it	eq
 8000816:	4770      	bxeq	lr
 8000818:	b530      	push	{r4, r5, lr}
 800081a:	f04f 0500 	mov.w	r5, #0
 800081e:	e00a      	b.n	8000836 <__aeabi_l2d+0x16>

08000820 <__aeabi_l2d>:
 8000820:	ea50 0201 	orrs.w	r2, r0, r1
 8000824:	bf08      	it	eq
 8000826:	4770      	bxeq	lr
 8000828:	b530      	push	{r4, r5, lr}
 800082a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800082e:	d502      	bpl.n	8000836 <__aeabi_l2d+0x16>
 8000830:	4240      	negs	r0, r0
 8000832:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000836:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800083a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800083e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000842:	f43f aed8 	beq.w	80005f6 <__adddf3+0xe6>
 8000846:	f04f 0203 	mov.w	r2, #3
 800084a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800084e:	bf18      	it	ne
 8000850:	3203      	addne	r2, #3
 8000852:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000856:	bf18      	it	ne
 8000858:	3203      	addne	r2, #3
 800085a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800085e:	f1c2 0320 	rsb	r3, r2, #32
 8000862:	fa00 fc03 	lsl.w	ip, r0, r3
 8000866:	fa20 f002 	lsr.w	r0, r0, r2
 800086a:	fa01 fe03 	lsl.w	lr, r1, r3
 800086e:	ea40 000e 	orr.w	r0, r0, lr
 8000872:	fa21 f102 	lsr.w	r1, r1, r2
 8000876:	4414      	add	r4, r2
 8000878:	e6bd      	b.n	80005f6 <__adddf3+0xe6>
 800087a:	bf00      	nop

0800087c <__aeabi_d2uiz>:
 800087c:	004a      	lsls	r2, r1, #1
 800087e:	d211      	bcs.n	80008a4 <__aeabi_d2uiz+0x28>
 8000880:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000884:	d211      	bcs.n	80008aa <__aeabi_d2uiz+0x2e>
 8000886:	d50d      	bpl.n	80008a4 <__aeabi_d2uiz+0x28>
 8000888:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800088c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000890:	d40e      	bmi.n	80008b0 <__aeabi_d2uiz+0x34>
 8000892:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000896:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800089a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800089e:	fa23 f002 	lsr.w	r0, r3, r2
 80008a2:	4770      	bx	lr
 80008a4:	f04f 0000 	mov.w	r0, #0
 80008a8:	4770      	bx	lr
 80008aa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80008ae:	d102      	bne.n	80008b6 <__aeabi_d2uiz+0x3a>
 80008b0:	f04f 30ff 	mov.w	r0, #4294967295
 80008b4:	4770      	bx	lr
 80008b6:	f04f 0000 	mov.w	r0, #0
 80008ba:	4770      	bx	lr

080008bc <__aeabi_uldivmod>:
 80008bc:	b953      	cbnz	r3, 80008d4 <__aeabi_uldivmod+0x18>
 80008be:	b94a      	cbnz	r2, 80008d4 <__aeabi_uldivmod+0x18>
 80008c0:	2900      	cmp	r1, #0
 80008c2:	bf08      	it	eq
 80008c4:	2800      	cmpeq	r0, #0
 80008c6:	bf1c      	itt	ne
 80008c8:	f04f 31ff 	movne.w	r1, #4294967295
 80008cc:	f04f 30ff 	movne.w	r0, #4294967295
 80008d0:	f000 b96a 	b.w	8000ba8 <__aeabi_idiv0>
 80008d4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008d8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008dc:	f000 f806 	bl	80008ec <__udivmoddi4>
 80008e0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008e8:	b004      	add	sp, #16
 80008ea:	4770      	bx	lr

080008ec <__udivmoddi4>:
 80008ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008f0:	9d08      	ldr	r5, [sp, #32]
 80008f2:	460c      	mov	r4, r1
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d14e      	bne.n	8000996 <__udivmoddi4+0xaa>
 80008f8:	4694      	mov	ip, r2
 80008fa:	458c      	cmp	ip, r1
 80008fc:	4686      	mov	lr, r0
 80008fe:	fab2 f282 	clz	r2, r2
 8000902:	d962      	bls.n	80009ca <__udivmoddi4+0xde>
 8000904:	b14a      	cbz	r2, 800091a <__udivmoddi4+0x2e>
 8000906:	f1c2 0320 	rsb	r3, r2, #32
 800090a:	4091      	lsls	r1, r2
 800090c:	fa20 f303 	lsr.w	r3, r0, r3
 8000910:	fa0c fc02 	lsl.w	ip, ip, r2
 8000914:	4319      	orrs	r1, r3
 8000916:	fa00 fe02 	lsl.w	lr, r0, r2
 800091a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800091e:	fa1f f68c 	uxth.w	r6, ip
 8000922:	fbb1 f4f7 	udiv	r4, r1, r7
 8000926:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800092a:	fb07 1114 	mls	r1, r7, r4, r1
 800092e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000932:	fb04 f106 	mul.w	r1, r4, r6
 8000936:	4299      	cmp	r1, r3
 8000938:	d90a      	bls.n	8000950 <__udivmoddi4+0x64>
 800093a:	eb1c 0303 	adds.w	r3, ip, r3
 800093e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000942:	f080 8112 	bcs.w	8000b6a <__udivmoddi4+0x27e>
 8000946:	4299      	cmp	r1, r3
 8000948:	f240 810f 	bls.w	8000b6a <__udivmoddi4+0x27e>
 800094c:	3c02      	subs	r4, #2
 800094e:	4463      	add	r3, ip
 8000950:	1a59      	subs	r1, r3, r1
 8000952:	fa1f f38e 	uxth.w	r3, lr
 8000956:	fbb1 f0f7 	udiv	r0, r1, r7
 800095a:	fb07 1110 	mls	r1, r7, r0, r1
 800095e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000962:	fb00 f606 	mul.w	r6, r0, r6
 8000966:	429e      	cmp	r6, r3
 8000968:	d90a      	bls.n	8000980 <__udivmoddi4+0x94>
 800096a:	eb1c 0303 	adds.w	r3, ip, r3
 800096e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000972:	f080 80fc 	bcs.w	8000b6e <__udivmoddi4+0x282>
 8000976:	429e      	cmp	r6, r3
 8000978:	f240 80f9 	bls.w	8000b6e <__udivmoddi4+0x282>
 800097c:	4463      	add	r3, ip
 800097e:	3802      	subs	r0, #2
 8000980:	1b9b      	subs	r3, r3, r6
 8000982:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000986:	2100      	movs	r1, #0
 8000988:	b11d      	cbz	r5, 8000992 <__udivmoddi4+0xa6>
 800098a:	40d3      	lsrs	r3, r2
 800098c:	2200      	movs	r2, #0
 800098e:	e9c5 3200 	strd	r3, r2, [r5]
 8000992:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000996:	428b      	cmp	r3, r1
 8000998:	d905      	bls.n	80009a6 <__udivmoddi4+0xba>
 800099a:	b10d      	cbz	r5, 80009a0 <__udivmoddi4+0xb4>
 800099c:	e9c5 0100 	strd	r0, r1, [r5]
 80009a0:	2100      	movs	r1, #0
 80009a2:	4608      	mov	r0, r1
 80009a4:	e7f5      	b.n	8000992 <__udivmoddi4+0xa6>
 80009a6:	fab3 f183 	clz	r1, r3
 80009aa:	2900      	cmp	r1, #0
 80009ac:	d146      	bne.n	8000a3c <__udivmoddi4+0x150>
 80009ae:	42a3      	cmp	r3, r4
 80009b0:	d302      	bcc.n	80009b8 <__udivmoddi4+0xcc>
 80009b2:	4290      	cmp	r0, r2
 80009b4:	f0c0 80f0 	bcc.w	8000b98 <__udivmoddi4+0x2ac>
 80009b8:	1a86      	subs	r6, r0, r2
 80009ba:	eb64 0303 	sbc.w	r3, r4, r3
 80009be:	2001      	movs	r0, #1
 80009c0:	2d00      	cmp	r5, #0
 80009c2:	d0e6      	beq.n	8000992 <__udivmoddi4+0xa6>
 80009c4:	e9c5 6300 	strd	r6, r3, [r5]
 80009c8:	e7e3      	b.n	8000992 <__udivmoddi4+0xa6>
 80009ca:	2a00      	cmp	r2, #0
 80009cc:	f040 8090 	bne.w	8000af0 <__udivmoddi4+0x204>
 80009d0:	eba1 040c 	sub.w	r4, r1, ip
 80009d4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80009d8:	fa1f f78c 	uxth.w	r7, ip
 80009dc:	2101      	movs	r1, #1
 80009de:	fbb4 f6f8 	udiv	r6, r4, r8
 80009e2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80009e6:	fb08 4416 	mls	r4, r8, r6, r4
 80009ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80009ee:	fb07 f006 	mul.w	r0, r7, r6
 80009f2:	4298      	cmp	r0, r3
 80009f4:	d908      	bls.n	8000a08 <__udivmoddi4+0x11c>
 80009f6:	eb1c 0303 	adds.w	r3, ip, r3
 80009fa:	f106 34ff 	add.w	r4, r6, #4294967295
 80009fe:	d202      	bcs.n	8000a06 <__udivmoddi4+0x11a>
 8000a00:	4298      	cmp	r0, r3
 8000a02:	f200 80cd 	bhi.w	8000ba0 <__udivmoddi4+0x2b4>
 8000a06:	4626      	mov	r6, r4
 8000a08:	1a1c      	subs	r4, r3, r0
 8000a0a:	fa1f f38e 	uxth.w	r3, lr
 8000a0e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000a12:	fb08 4410 	mls	r4, r8, r0, r4
 8000a16:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000a1a:	fb00 f707 	mul.w	r7, r0, r7
 8000a1e:	429f      	cmp	r7, r3
 8000a20:	d908      	bls.n	8000a34 <__udivmoddi4+0x148>
 8000a22:	eb1c 0303 	adds.w	r3, ip, r3
 8000a26:	f100 34ff 	add.w	r4, r0, #4294967295
 8000a2a:	d202      	bcs.n	8000a32 <__udivmoddi4+0x146>
 8000a2c:	429f      	cmp	r7, r3
 8000a2e:	f200 80b0 	bhi.w	8000b92 <__udivmoddi4+0x2a6>
 8000a32:	4620      	mov	r0, r4
 8000a34:	1bdb      	subs	r3, r3, r7
 8000a36:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a3a:	e7a5      	b.n	8000988 <__udivmoddi4+0x9c>
 8000a3c:	f1c1 0620 	rsb	r6, r1, #32
 8000a40:	408b      	lsls	r3, r1
 8000a42:	fa22 f706 	lsr.w	r7, r2, r6
 8000a46:	431f      	orrs	r7, r3
 8000a48:	fa20 fc06 	lsr.w	ip, r0, r6
 8000a4c:	fa04 f301 	lsl.w	r3, r4, r1
 8000a50:	ea43 030c 	orr.w	r3, r3, ip
 8000a54:	40f4      	lsrs	r4, r6
 8000a56:	fa00 f801 	lsl.w	r8, r0, r1
 8000a5a:	0c38      	lsrs	r0, r7, #16
 8000a5c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000a60:	fbb4 fef0 	udiv	lr, r4, r0
 8000a64:	fa1f fc87 	uxth.w	ip, r7
 8000a68:	fb00 441e 	mls	r4, r0, lr, r4
 8000a6c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000a70:	fb0e f90c 	mul.w	r9, lr, ip
 8000a74:	45a1      	cmp	r9, r4
 8000a76:	fa02 f201 	lsl.w	r2, r2, r1
 8000a7a:	d90a      	bls.n	8000a92 <__udivmoddi4+0x1a6>
 8000a7c:	193c      	adds	r4, r7, r4
 8000a7e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000a82:	f080 8084 	bcs.w	8000b8e <__udivmoddi4+0x2a2>
 8000a86:	45a1      	cmp	r9, r4
 8000a88:	f240 8081 	bls.w	8000b8e <__udivmoddi4+0x2a2>
 8000a8c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000a90:	443c      	add	r4, r7
 8000a92:	eba4 0409 	sub.w	r4, r4, r9
 8000a96:	fa1f f983 	uxth.w	r9, r3
 8000a9a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000a9e:	fb00 4413 	mls	r4, r0, r3, r4
 8000aa2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000aa6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000aaa:	45a4      	cmp	ip, r4
 8000aac:	d907      	bls.n	8000abe <__udivmoddi4+0x1d2>
 8000aae:	193c      	adds	r4, r7, r4
 8000ab0:	f103 30ff 	add.w	r0, r3, #4294967295
 8000ab4:	d267      	bcs.n	8000b86 <__udivmoddi4+0x29a>
 8000ab6:	45a4      	cmp	ip, r4
 8000ab8:	d965      	bls.n	8000b86 <__udivmoddi4+0x29a>
 8000aba:	3b02      	subs	r3, #2
 8000abc:	443c      	add	r4, r7
 8000abe:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000ac2:	fba0 9302 	umull	r9, r3, r0, r2
 8000ac6:	eba4 040c 	sub.w	r4, r4, ip
 8000aca:	429c      	cmp	r4, r3
 8000acc:	46ce      	mov	lr, r9
 8000ace:	469c      	mov	ip, r3
 8000ad0:	d351      	bcc.n	8000b76 <__udivmoddi4+0x28a>
 8000ad2:	d04e      	beq.n	8000b72 <__udivmoddi4+0x286>
 8000ad4:	b155      	cbz	r5, 8000aec <__udivmoddi4+0x200>
 8000ad6:	ebb8 030e 	subs.w	r3, r8, lr
 8000ada:	eb64 040c 	sbc.w	r4, r4, ip
 8000ade:	fa04 f606 	lsl.w	r6, r4, r6
 8000ae2:	40cb      	lsrs	r3, r1
 8000ae4:	431e      	orrs	r6, r3
 8000ae6:	40cc      	lsrs	r4, r1
 8000ae8:	e9c5 6400 	strd	r6, r4, [r5]
 8000aec:	2100      	movs	r1, #0
 8000aee:	e750      	b.n	8000992 <__udivmoddi4+0xa6>
 8000af0:	f1c2 0320 	rsb	r3, r2, #32
 8000af4:	fa20 f103 	lsr.w	r1, r0, r3
 8000af8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000afc:	fa24 f303 	lsr.w	r3, r4, r3
 8000b00:	4094      	lsls	r4, r2
 8000b02:	430c      	orrs	r4, r1
 8000b04:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b08:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b0c:	fa1f f78c 	uxth.w	r7, ip
 8000b10:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b14:	fb08 3110 	mls	r1, r8, r0, r3
 8000b18:	0c23      	lsrs	r3, r4, #16
 8000b1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b1e:	fb00 f107 	mul.w	r1, r0, r7
 8000b22:	4299      	cmp	r1, r3
 8000b24:	d908      	bls.n	8000b38 <__udivmoddi4+0x24c>
 8000b26:	eb1c 0303 	adds.w	r3, ip, r3
 8000b2a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000b2e:	d22c      	bcs.n	8000b8a <__udivmoddi4+0x29e>
 8000b30:	4299      	cmp	r1, r3
 8000b32:	d92a      	bls.n	8000b8a <__udivmoddi4+0x29e>
 8000b34:	3802      	subs	r0, #2
 8000b36:	4463      	add	r3, ip
 8000b38:	1a5b      	subs	r3, r3, r1
 8000b3a:	b2a4      	uxth	r4, r4
 8000b3c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000b40:	fb08 3311 	mls	r3, r8, r1, r3
 8000b44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b48:	fb01 f307 	mul.w	r3, r1, r7
 8000b4c:	42a3      	cmp	r3, r4
 8000b4e:	d908      	bls.n	8000b62 <__udivmoddi4+0x276>
 8000b50:	eb1c 0404 	adds.w	r4, ip, r4
 8000b54:	f101 36ff 	add.w	r6, r1, #4294967295
 8000b58:	d213      	bcs.n	8000b82 <__udivmoddi4+0x296>
 8000b5a:	42a3      	cmp	r3, r4
 8000b5c:	d911      	bls.n	8000b82 <__udivmoddi4+0x296>
 8000b5e:	3902      	subs	r1, #2
 8000b60:	4464      	add	r4, ip
 8000b62:	1ae4      	subs	r4, r4, r3
 8000b64:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000b68:	e739      	b.n	80009de <__udivmoddi4+0xf2>
 8000b6a:	4604      	mov	r4, r0
 8000b6c:	e6f0      	b.n	8000950 <__udivmoddi4+0x64>
 8000b6e:	4608      	mov	r0, r1
 8000b70:	e706      	b.n	8000980 <__udivmoddi4+0x94>
 8000b72:	45c8      	cmp	r8, r9
 8000b74:	d2ae      	bcs.n	8000ad4 <__udivmoddi4+0x1e8>
 8000b76:	ebb9 0e02 	subs.w	lr, r9, r2
 8000b7a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000b7e:	3801      	subs	r0, #1
 8000b80:	e7a8      	b.n	8000ad4 <__udivmoddi4+0x1e8>
 8000b82:	4631      	mov	r1, r6
 8000b84:	e7ed      	b.n	8000b62 <__udivmoddi4+0x276>
 8000b86:	4603      	mov	r3, r0
 8000b88:	e799      	b.n	8000abe <__udivmoddi4+0x1d2>
 8000b8a:	4630      	mov	r0, r6
 8000b8c:	e7d4      	b.n	8000b38 <__udivmoddi4+0x24c>
 8000b8e:	46d6      	mov	lr, sl
 8000b90:	e77f      	b.n	8000a92 <__udivmoddi4+0x1a6>
 8000b92:	4463      	add	r3, ip
 8000b94:	3802      	subs	r0, #2
 8000b96:	e74d      	b.n	8000a34 <__udivmoddi4+0x148>
 8000b98:	4606      	mov	r6, r0
 8000b9a:	4623      	mov	r3, r4
 8000b9c:	4608      	mov	r0, r1
 8000b9e:	e70f      	b.n	80009c0 <__udivmoddi4+0xd4>
 8000ba0:	3e02      	subs	r6, #2
 8000ba2:	4463      	add	r3, ip
 8000ba4:	e730      	b.n	8000a08 <__udivmoddi4+0x11c>
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_idiv0>:
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop

08000bac <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b08a      	sub	sp, #40	@ 0x28
 8000bb0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb2:	f107 0314 	add.w	r3, r7, #20
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	601a      	str	r2, [r3, #0]
 8000bba:	605a      	str	r2, [r3, #4]
 8000bbc:	609a      	str	r2, [r3, #8]
 8000bbe:	60da      	str	r2, [r3, #12]
 8000bc0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	613b      	str	r3, [r7, #16]
 8000bc6:	4b38      	ldr	r3, [pc, #224]	@ (8000ca8 <MX_GPIO_Init+0xfc>)
 8000bc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bca:	4a37      	ldr	r2, [pc, #220]	@ (8000ca8 <MX_GPIO_Init+0xfc>)
 8000bcc:	f043 0304 	orr.w	r3, r3, #4
 8000bd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bd2:	4b35      	ldr	r3, [pc, #212]	@ (8000ca8 <MX_GPIO_Init+0xfc>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bd6:	f003 0304 	and.w	r3, r3, #4
 8000bda:	613b      	str	r3, [r7, #16]
 8000bdc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bde:	2300      	movs	r3, #0
 8000be0:	60fb      	str	r3, [r7, #12]
 8000be2:	4b31      	ldr	r3, [pc, #196]	@ (8000ca8 <MX_GPIO_Init+0xfc>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000be6:	4a30      	ldr	r2, [pc, #192]	@ (8000ca8 <MX_GPIO_Init+0xfc>)
 8000be8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000bec:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bee:	4b2e      	ldr	r3, [pc, #184]	@ (8000ca8 <MX_GPIO_Init+0xfc>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bf2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000bf6:	60fb      	str	r3, [r7, #12]
 8000bf8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	60bb      	str	r3, [r7, #8]
 8000bfe:	4b2a      	ldr	r3, [pc, #168]	@ (8000ca8 <MX_GPIO_Init+0xfc>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c02:	4a29      	ldr	r2, [pc, #164]	@ (8000ca8 <MX_GPIO_Init+0xfc>)
 8000c04:	f043 0301 	orr.w	r3, r3, #1
 8000c08:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c0a:	4b27      	ldr	r3, [pc, #156]	@ (8000ca8 <MX_GPIO_Init+0xfc>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c0e:	f003 0301 	and.w	r3, r3, #1
 8000c12:	60bb      	str	r3, [r7, #8]
 8000c14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c16:	2300      	movs	r3, #0
 8000c18:	607b      	str	r3, [r7, #4]
 8000c1a:	4b23      	ldr	r3, [pc, #140]	@ (8000ca8 <MX_GPIO_Init+0xfc>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c1e:	4a22      	ldr	r2, [pc, #136]	@ (8000ca8 <MX_GPIO_Init+0xfc>)
 8000c20:	f043 0302 	orr.w	r3, r3, #2
 8000c24:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c26:	4b20      	ldr	r3, [pc, #128]	@ (8000ca8 <MX_GPIO_Init+0xfc>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c2a:	f003 0302 	and.w	r3, r3, #2
 8000c2e:	607b      	str	r3, [r7, #4]
 8000c30:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|Timer_delay_Pin, GPIO_PIN_RESET);
 8000c32:	2200      	movs	r2, #0
 8000c34:	2160      	movs	r1, #96	@ 0x60
 8000c36:	481d      	ldr	r0, [pc, #116]	@ (8000cac <MX_GPIO_Init+0x100>)
 8000c38:	f001 faa4 	bl	8002184 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000c42:	481b      	ldr	r0, [pc, #108]	@ (8000cb0 <MX_GPIO_Init+0x104>)
 8000c44:	f001 fa9e 	bl	8002184 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c48:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c4e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000c52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c54:	2300      	movs	r3, #0
 8000c56:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c58:	f107 0314 	add.w	r3, r7, #20
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	4814      	ldr	r0, [pc, #80]	@ (8000cb0 <MX_GPIO_Init+0x104>)
 8000c60:	f001 f8fc 	bl	8001e5c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|Timer_delay_Pin;
 8000c64:	2360      	movs	r3, #96	@ 0x60
 8000c66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c68:	2301      	movs	r3, #1
 8000c6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c70:	2300      	movs	r3, #0
 8000c72:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c74:	f107 0314 	add.w	r3, r7, #20
 8000c78:	4619      	mov	r1, r3
 8000c7a:	480c      	ldr	r0, [pc, #48]	@ (8000cac <MX_GPIO_Init+0x100>)
 8000c7c:	f001 f8ee 	bl	8001e5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI3_CS_Pin;
 8000c80:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c86:	2301      	movs	r3, #1
 8000c88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI3_CS_GPIO_Port, &GPIO_InitStruct);
 8000c92:	f107 0314 	add.w	r3, r7, #20
 8000c96:	4619      	mov	r1, r3
 8000c98:	4805      	ldr	r0, [pc, #20]	@ (8000cb0 <MX_GPIO_Init+0x104>)
 8000c9a:	f001 f8df 	bl	8001e5c <HAL_GPIO_Init>

}
 8000c9e:	bf00      	nop
 8000ca0:	3728      	adds	r7, #40	@ 0x28
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	40023800 	.word	0x40023800
 8000cac:	40020000 	.word	0x40020000
 8000cb0:	40020800 	.word	0x40020800

08000cb4 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000cb8:	f000 fc40 	bl	800153c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000cbc:	f000 f812 	bl	8000ce4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000cc0:	f7ff ff74 	bl	8000bac <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8000cc4:	f000 fb9e 	bl	8001404 <MX_USART2_UART_Init>
	MX_TIM4_Init();
 8000cc8:	f000 fabc 	bl	8001244 <MX_TIM4_Init>
	MX_TIM3_Init();
 8000ccc:	f000 fa6a 	bl	80011a4 <MX_TIM3_Init>
	MX_SPI3_Init();
 8000cd0:	f000 f87c 	bl	8000dcc <MX_SPI3_Init>
	MX_FATFS_Init();
 8000cd4:	f003 fd64 	bl	80047a0 <MX_FATFS_Init>
	/* USER CODE BEGIN 2 */
	SDCard_Init();
 8000cd8:	f007 fef8 	bl	8008acc <SDCard_Init>
	CharaExtendedCSVFile_Create();
 8000cdc:	f007 ff66 	bl	8008bac <CharaExtendedCSVFile_Create>
	// SDCard_Size();
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 8000ce0:	bf00      	nop
 8000ce2:	e7fd      	b.n	8000ce0 <main+0x2c>

08000ce4 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b094      	sub	sp, #80	@ 0x50
 8000ce8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cea:	f107 031c 	add.w	r3, r7, #28
 8000cee:	2234      	movs	r2, #52	@ 0x34
 8000cf0:	2100      	movs	r1, #0
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f008 f896 	bl	8008e24 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cf8:	f107 0308 	add.w	r3, r7, #8
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	601a      	str	r2, [r3, #0]
 8000d00:	605a      	str	r2, [r3, #4]
 8000d02:	609a      	str	r2, [r3, #8]
 8000d04:	60da      	str	r2, [r3, #12]
 8000d06:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000d08:	2300      	movs	r3, #0
 8000d0a:	607b      	str	r3, [r7, #4]
 8000d0c:	4b2a      	ldr	r3, [pc, #168]	@ (8000db8 <SystemClock_Config+0xd4>)
 8000d0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d10:	4a29      	ldr	r2, [pc, #164]	@ (8000db8 <SystemClock_Config+0xd4>)
 8000d12:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d16:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d18:	4b27      	ldr	r3, [pc, #156]	@ (8000db8 <SystemClock_Config+0xd4>)
 8000d1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d1c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d20:	607b      	str	r3, [r7, #4]
 8000d22:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000d24:	2300      	movs	r3, #0
 8000d26:	603b      	str	r3, [r7, #0]
 8000d28:	4b24      	ldr	r3, [pc, #144]	@ (8000dbc <SystemClock_Config+0xd8>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000d30:	4a22      	ldr	r2, [pc, #136]	@ (8000dbc <SystemClock_Config+0xd8>)
 8000d32:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d36:	6013      	str	r3, [r2, #0]
 8000d38:	4b20      	ldr	r3, [pc, #128]	@ (8000dbc <SystemClock_Config+0xd8>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000d40:	603b      	str	r3, [r7, #0]
 8000d42:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d44:	2301      	movs	r3, #1
 8000d46:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d48:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000d4c:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d4e:	2302      	movs	r3, #2
 8000d50:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d52:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000d56:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = 4;
 8000d58:	2304      	movs	r3, #4
 8000d5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 90;
 8000d5c:	235a      	movs	r3, #90	@ 0x5a
 8000d5e:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d60:	2302      	movs	r3, #2
 8000d62:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 8000d64:	2302      	movs	r3, #2
 8000d66:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 8000d68:	2302      	movs	r3, #2
 8000d6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d6c:	f107 031c 	add.w	r3, r7, #28
 8000d70:	4618      	mov	r0, r3
 8000d72:	f001 fd6b 	bl	800284c <HAL_RCC_OscConfig>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <SystemClock_Config+0x9c>
	{
		Error_Handler();
 8000d7c:	f000 f820 	bl	8000dc0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d80:	230f      	movs	r3, #15
 8000d82:	60bb      	str	r3, [r7, #8]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d84:	2302      	movs	r3, #2
 8000d86:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d8c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d90:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000d92:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d96:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d98:	f107 0308 	add.w	r3, r7, #8
 8000d9c:	2102      	movs	r1, #2
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f001 fa0a 	bl	80021b8 <HAL_RCC_ClockConfig>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d001      	beq.n	8000dae <SystemClock_Config+0xca>
	{
		Error_Handler();
 8000daa:	f000 f809 	bl	8000dc0 <Error_Handler>
	}
}
 8000dae:	bf00      	nop
 8000db0:	3750      	adds	r7, #80	@ 0x50
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	40023800 	.word	0x40023800
 8000dbc:	40007000 	.word	0x40007000

08000dc0 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dc4:	b672      	cpsid	i
}
 8000dc6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000dc8:	bf00      	nop
 8000dca:	e7fd      	b.n	8000dc8 <Error_Handler+0x8>

08000dcc <MX_SPI3_Init>:
DMA_HandleTypeDef hdma_spi3_rx;
DMA_HandleTypeDef hdma_spi3_tx;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8000dd0:	4b17      	ldr	r3, [pc, #92]	@ (8000e30 <MX_SPI3_Init+0x64>)
 8000dd2:	4a18      	ldr	r2, [pc, #96]	@ (8000e34 <MX_SPI3_Init+0x68>)
 8000dd4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000dd6:	4b16      	ldr	r3, [pc, #88]	@ (8000e30 <MX_SPI3_Init+0x64>)
 8000dd8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000ddc:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000dde:	4b14      	ldr	r3, [pc, #80]	@ (8000e30 <MX_SPI3_Init+0x64>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000de4:	4b12      	ldr	r3, [pc, #72]	@ (8000e30 <MX_SPI3_Init+0x64>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000dea:	4b11      	ldr	r3, [pc, #68]	@ (8000e30 <MX_SPI3_Init+0x64>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000df0:	4b0f      	ldr	r3, [pc, #60]	@ (8000e30 <MX_SPI3_Init+0x64>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000df6:	4b0e      	ldr	r3, [pc, #56]	@ (8000e30 <MX_SPI3_Init+0x64>)
 8000df8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000dfc:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000dfe:	4b0c      	ldr	r3, [pc, #48]	@ (8000e30 <MX_SPI3_Init+0x64>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e04:	4b0a      	ldr	r3, [pc, #40]	@ (8000e30 <MX_SPI3_Init+0x64>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e0a:	4b09      	ldr	r3, [pc, #36]	@ (8000e30 <MX_SPI3_Init+0x64>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e10:	4b07      	ldr	r3, [pc, #28]	@ (8000e30 <MX_SPI3_Init+0x64>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 8000e16:	4b06      	ldr	r3, [pc, #24]	@ (8000e30 <MX_SPI3_Init+0x64>)
 8000e18:	220a      	movs	r2, #10
 8000e1a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000e1c:	4804      	ldr	r0, [pc, #16]	@ (8000e30 <MX_SPI3_Init+0x64>)
 8000e1e:	f001 ffb3 	bl	8002d88 <HAL_SPI_Init>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d001      	beq.n	8000e2c <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8000e28:	f7ff ffca 	bl	8000dc0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000e2c:	bf00      	nop
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	20000090 	.word	0x20000090
 8000e34:	40003c00 	.word	0x40003c00

08000e38 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b08a      	sub	sp, #40	@ 0x28
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e40:	f107 0314 	add.w	r3, r7, #20
 8000e44:	2200      	movs	r2, #0
 8000e46:	601a      	str	r2, [r3, #0]
 8000e48:	605a      	str	r2, [r3, #4]
 8000e4a:	609a      	str	r2, [r3, #8]
 8000e4c:	60da      	str	r2, [r3, #12]
 8000e4e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4a5c      	ldr	r2, [pc, #368]	@ (8000fc8 <HAL_SPI_MspInit+0x190>)
 8000e56:	4293      	cmp	r3, r2
 8000e58:	f040 80b1 	bne.w	8000fbe <HAL_SPI_MspInit+0x186>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	613b      	str	r3, [r7, #16]
 8000e60:	4b5a      	ldr	r3, [pc, #360]	@ (8000fcc <HAL_SPI_MspInit+0x194>)
 8000e62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e64:	4a59      	ldr	r2, [pc, #356]	@ (8000fcc <HAL_SPI_MspInit+0x194>)
 8000e66:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000e6a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e6c:	4b57      	ldr	r3, [pc, #348]	@ (8000fcc <HAL_SPI_MspInit+0x194>)
 8000e6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e70:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000e74:	613b      	str	r3, [r7, #16]
 8000e76:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e78:	2300      	movs	r3, #0
 8000e7a:	60fb      	str	r3, [r7, #12]
 8000e7c:	4b53      	ldr	r3, [pc, #332]	@ (8000fcc <HAL_SPI_MspInit+0x194>)
 8000e7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e80:	4a52      	ldr	r2, [pc, #328]	@ (8000fcc <HAL_SPI_MspInit+0x194>)
 8000e82:	f043 0304 	orr.w	r3, r3, #4
 8000e86:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e88:	4b50      	ldr	r3, [pc, #320]	@ (8000fcc <HAL_SPI_MspInit+0x194>)
 8000e8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e8c:	f003 0304 	and.w	r3, r3, #4
 8000e90:	60fb      	str	r3, [r7, #12]
 8000e92:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC1     ------> SPI3_MOSI
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000e94:	2302      	movs	r3, #2
 8000e96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e98:	2302      	movs	r3, #2
 8000e9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ea0:	2303      	movs	r3, #3
 8000ea2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI3;
 8000ea4:	2305      	movs	r3, #5
 8000ea6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ea8:	f107 0314 	add.w	r3, r7, #20
 8000eac:	4619      	mov	r1, r3
 8000eae:	4848      	ldr	r0, [pc, #288]	@ (8000fd0 <HAL_SPI_MspInit+0x198>)
 8000eb0:	f000 ffd4 	bl	8001e5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000eb4:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000eb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eba:	2302      	movs	r3, #2
 8000ebc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ec2:	2303      	movs	r3, #3
 8000ec4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ec6:	2306      	movs	r3, #6
 8000ec8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000eca:	f107 0314 	add.w	r3, r7, #20
 8000ece:	4619      	mov	r1, r3
 8000ed0:	483f      	ldr	r0, [pc, #252]	@ (8000fd0 <HAL_SPI_MspInit+0x198>)
 8000ed2:	f000 ffc3 	bl	8001e5c <HAL_GPIO_Init>

    /* SPI3 DMA Init */
    /* SPI3_RX Init */
    hdma_spi3_rx.Instance = DMA1_Stream0;
 8000ed6:	4b3f      	ldr	r3, [pc, #252]	@ (8000fd4 <HAL_SPI_MspInit+0x19c>)
 8000ed8:	4a3f      	ldr	r2, [pc, #252]	@ (8000fd8 <HAL_SPI_MspInit+0x1a0>)
 8000eda:	601a      	str	r2, [r3, #0]
    hdma_spi3_rx.Init.Channel = DMA_CHANNEL_0;
 8000edc:	4b3d      	ldr	r3, [pc, #244]	@ (8000fd4 <HAL_SPI_MspInit+0x19c>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	605a      	str	r2, [r3, #4]
    hdma_spi3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ee2:	4b3c      	ldr	r3, [pc, #240]	@ (8000fd4 <HAL_SPI_MspInit+0x19c>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	609a      	str	r2, [r3, #8]
    hdma_spi3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ee8:	4b3a      	ldr	r3, [pc, #232]	@ (8000fd4 <HAL_SPI_MspInit+0x19c>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	60da      	str	r2, [r3, #12]
    hdma_spi3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000eee:	4b39      	ldr	r3, [pc, #228]	@ (8000fd4 <HAL_SPI_MspInit+0x19c>)
 8000ef0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000ef4:	611a      	str	r2, [r3, #16]
    hdma_spi3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ef6:	4b37      	ldr	r3, [pc, #220]	@ (8000fd4 <HAL_SPI_MspInit+0x19c>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	615a      	str	r2, [r3, #20]
    hdma_spi3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000efc:	4b35      	ldr	r3, [pc, #212]	@ (8000fd4 <HAL_SPI_MspInit+0x19c>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	619a      	str	r2, [r3, #24]
    hdma_spi3_rx.Init.Mode = DMA_NORMAL;
 8000f02:	4b34      	ldr	r3, [pc, #208]	@ (8000fd4 <HAL_SPI_MspInit+0x19c>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	61da      	str	r2, [r3, #28]
    hdma_spi3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000f08:	4b32      	ldr	r3, [pc, #200]	@ (8000fd4 <HAL_SPI_MspInit+0x19c>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	621a      	str	r2, [r3, #32]
    hdma_spi3_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000f0e:	4b31      	ldr	r3, [pc, #196]	@ (8000fd4 <HAL_SPI_MspInit+0x19c>)
 8000f10:	2204      	movs	r2, #4
 8000f12:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_spi3_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000f14:	4b2f      	ldr	r3, [pc, #188]	@ (8000fd4 <HAL_SPI_MspInit+0x19c>)
 8000f16:	2203      	movs	r2, #3
 8000f18:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_spi3_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 8000f1a:	4b2e      	ldr	r3, [pc, #184]	@ (8000fd4 <HAL_SPI_MspInit+0x19c>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_spi3_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000f20:	4b2c      	ldr	r3, [pc, #176]	@ (8000fd4 <HAL_SPI_MspInit+0x19c>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_spi3_rx) != HAL_OK)
 8000f26:	482b      	ldr	r0, [pc, #172]	@ (8000fd4 <HAL_SPI_MspInit+0x19c>)
 8000f28:	f000 fc8c 	bl	8001844 <HAL_DMA_Init>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d001      	beq.n	8000f36 <HAL_SPI_MspInit+0xfe>
    {
      Error_Handler();
 8000f32:	f7ff ff45 	bl	8000dc0 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi3_rx);
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	4a26      	ldr	r2, [pc, #152]	@ (8000fd4 <HAL_SPI_MspInit+0x19c>)
 8000f3a:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000f3c:	4a25      	ldr	r2, [pc, #148]	@ (8000fd4 <HAL_SPI_MspInit+0x19c>)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream5;
 8000f42:	4b26      	ldr	r3, [pc, #152]	@ (8000fdc <HAL_SPI_MspInit+0x1a4>)
 8000f44:	4a26      	ldr	r2, [pc, #152]	@ (8000fe0 <HAL_SPI_MspInit+0x1a8>)
 8000f46:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 8000f48:	4b24      	ldr	r3, [pc, #144]	@ (8000fdc <HAL_SPI_MspInit+0x1a4>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000f4e:	4b23      	ldr	r3, [pc, #140]	@ (8000fdc <HAL_SPI_MspInit+0x1a4>)
 8000f50:	2240      	movs	r2, #64	@ 0x40
 8000f52:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f54:	4b21      	ldr	r3, [pc, #132]	@ (8000fdc <HAL_SPI_MspInit+0x1a4>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000f5a:	4b20      	ldr	r3, [pc, #128]	@ (8000fdc <HAL_SPI_MspInit+0x1a4>)
 8000f5c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000f60:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f62:	4b1e      	ldr	r3, [pc, #120]	@ (8000fdc <HAL_SPI_MspInit+0x1a4>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f68:	4b1c      	ldr	r3, [pc, #112]	@ (8000fdc <HAL_SPI_MspInit+0x1a4>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 8000f6e:	4b1b      	ldr	r3, [pc, #108]	@ (8000fdc <HAL_SPI_MspInit+0x1a4>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000f74:	4b19      	ldr	r3, [pc, #100]	@ (8000fdc <HAL_SPI_MspInit+0x1a4>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000f7a:	4b18      	ldr	r3, [pc, #96]	@ (8000fdc <HAL_SPI_MspInit+0x1a4>)
 8000f7c:	2204      	movs	r2, #4
 8000f7e:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_spi3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000f80:	4b16      	ldr	r3, [pc, #88]	@ (8000fdc <HAL_SPI_MspInit+0x1a4>)
 8000f82:	2203      	movs	r2, #3
 8000f84:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_spi3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8000f86:	4b15      	ldr	r3, [pc, #84]	@ (8000fdc <HAL_SPI_MspInit+0x1a4>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_spi3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000f8c:	4b13      	ldr	r3, [pc, #76]	@ (8000fdc <HAL_SPI_MspInit+0x1a4>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8000f92:	4812      	ldr	r0, [pc, #72]	@ (8000fdc <HAL_SPI_MspInit+0x1a4>)
 8000f94:	f000 fc56 	bl	8001844 <HAL_DMA_Init>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d001      	beq.n	8000fa2 <HAL_SPI_MspInit+0x16a>
    {
      Error_Handler();
 8000f9e:	f7ff ff0f 	bl	8000dc0 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi3_tx);
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	4a0d      	ldr	r2, [pc, #52]	@ (8000fdc <HAL_SPI_MspInit+0x1a4>)
 8000fa6:	649a      	str	r2, [r3, #72]	@ 0x48
 8000fa8:	4a0c      	ldr	r2, [pc, #48]	@ (8000fdc <HAL_SPI_MspInit+0x1a4>)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8000fae:	2200      	movs	r2, #0
 8000fb0:	2100      	movs	r1, #0
 8000fb2:	2033      	movs	r0, #51	@ 0x33
 8000fb4:	f000 fc0f 	bl	80017d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8000fb8:	2033      	movs	r0, #51	@ 0x33
 8000fba:	f000 fc28 	bl	800180e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8000fbe:	bf00      	nop
 8000fc0:	3728      	adds	r7, #40	@ 0x28
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	40003c00 	.word	0x40003c00
 8000fcc:	40023800 	.word	0x40023800
 8000fd0:	40020800 	.word	0x40020800
 8000fd4:	200000e8 	.word	0x200000e8
 8000fd8:	40026010 	.word	0x40026010
 8000fdc:	20000148 	.word	0x20000148
 8000fe0:	40026088 	.word	0x40026088

08000fe4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fea:	2300      	movs	r3, #0
 8000fec:	607b      	str	r3, [r7, #4]
 8000fee:	4b10      	ldr	r3, [pc, #64]	@ (8001030 <HAL_MspInit+0x4c>)
 8000ff0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ff2:	4a0f      	ldr	r2, [pc, #60]	@ (8001030 <HAL_MspInit+0x4c>)
 8000ff4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ff8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ffa:	4b0d      	ldr	r3, [pc, #52]	@ (8001030 <HAL_MspInit+0x4c>)
 8000ffc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ffe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001002:	607b      	str	r3, [r7, #4]
 8001004:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001006:	2300      	movs	r3, #0
 8001008:	603b      	str	r3, [r7, #0]
 800100a:	4b09      	ldr	r3, [pc, #36]	@ (8001030 <HAL_MspInit+0x4c>)
 800100c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800100e:	4a08      	ldr	r2, [pc, #32]	@ (8001030 <HAL_MspInit+0x4c>)
 8001010:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001014:	6413      	str	r3, [r2, #64]	@ 0x40
 8001016:	4b06      	ldr	r3, [pc, #24]	@ (8001030 <HAL_MspInit+0x4c>)
 8001018:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800101a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800101e:	603b      	str	r3, [r7, #0]
 8001020:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001022:	2007      	movs	r0, #7
 8001024:	f000 fbcc 	bl	80017c0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001028:	bf00      	nop
 800102a:	3708      	adds	r7, #8
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	40023800 	.word	0x40023800

08001034 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001038:	bf00      	nop
 800103a:	e7fd      	b.n	8001038 <NMI_Handler+0x4>

0800103c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001040:	bf00      	nop
 8001042:	e7fd      	b.n	8001040 <HardFault_Handler+0x4>

08001044 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001048:	bf00      	nop
 800104a:	e7fd      	b.n	8001048 <MemManage_Handler+0x4>

0800104c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001050:	bf00      	nop
 8001052:	e7fd      	b.n	8001050 <BusFault_Handler+0x4>

08001054 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001058:	bf00      	nop
 800105a:	e7fd      	b.n	8001058 <UsageFault_Handler+0x4>

0800105c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001060:	bf00      	nop
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr

0800106a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800106a:	b480      	push	{r7}
 800106c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800106e:	bf00      	nop
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr

08001078 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800107c:	bf00      	nop
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr
	...

08001088 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if(Timer1 > 0)
 800108c:	4b0b      	ldr	r3, [pc, #44]	@ (80010bc <SysTick_Handler+0x34>)
 800108e:	881b      	ldrh	r3, [r3, #0]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d005      	beq.n	80010a0 <SysTick_Handler+0x18>
	{
		Timer1--;
 8001094:	4b09      	ldr	r3, [pc, #36]	@ (80010bc <SysTick_Handler+0x34>)
 8001096:	881b      	ldrh	r3, [r3, #0]
 8001098:	3b01      	subs	r3, #1
 800109a:	b29a      	uxth	r2, r3
 800109c:	4b07      	ldr	r3, [pc, #28]	@ (80010bc <SysTick_Handler+0x34>)
 800109e:	801a      	strh	r2, [r3, #0]
	}
	if(Timer2 > 0)
 80010a0:	4b07      	ldr	r3, [pc, #28]	@ (80010c0 <SysTick_Handler+0x38>)
 80010a2:	881b      	ldrh	r3, [r3, #0]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d005      	beq.n	80010b4 <SysTick_Handler+0x2c>
	{
		Timer2--;
 80010a8:	4b05      	ldr	r3, [pc, #20]	@ (80010c0 <SysTick_Handler+0x38>)
 80010aa:	881b      	ldrh	r3, [r3, #0]
 80010ac:	3b01      	subs	r3, #1
 80010ae:	b29a      	uxth	r2, r3
 80010b0:	4b03      	ldr	r3, [pc, #12]	@ (80010c0 <SysTick_Handler+0x38>)
 80010b2:	801a      	strh	r2, [r3, #0]
	}
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010b4:	f000 fa94 	bl	80015e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010b8:	bf00      	nop
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	20000298 	.word	0x20000298
 80010c0:	2000029a 	.word	0x2000029a

080010c4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_rx);
 80010c8:	4802      	ldr	r0, [pc, #8]	@ (80010d4 <DMA1_Stream0_IRQHandler+0x10>)
 80010ca:	f000 fc8b 	bl	80019e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80010ce:	bf00      	nop
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	200000e8 	.word	0x200000e8

080010d8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 80010dc:	4802      	ldr	r0, [pc, #8]	@ (80010e8 <DMA1_Stream5_IRQHandler+0x10>)
 80010de:	f000 fc81 	bl	80019e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80010e2:	bf00      	nop
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	20000148 	.word	0x20000148

080010ec <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80010f0:	4802      	ldr	r0, [pc, #8]	@ (80010fc <TIM3_IRQHandler+0x10>)
 80010f2:	f002 fcdb 	bl	8003aac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80010f6:	bf00      	nop
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	200001ac 	.word	0x200001ac

08001100 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8001104:	4802      	ldr	r0, [pc, #8]	@ (8001110 <SPI3_IRQHandler+0x10>)
 8001106:	f002 f9bb 	bl	8003480 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 800110a:	bf00      	nop
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	20000090 	.word	0x20000090

08001114 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b086      	sub	sp, #24
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800111c:	4a14      	ldr	r2, [pc, #80]	@ (8001170 <_sbrk+0x5c>)
 800111e:	4b15      	ldr	r3, [pc, #84]	@ (8001174 <_sbrk+0x60>)
 8001120:	1ad3      	subs	r3, r2, r3
 8001122:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001128:	4b13      	ldr	r3, [pc, #76]	@ (8001178 <_sbrk+0x64>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d102      	bne.n	8001136 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001130:	4b11      	ldr	r3, [pc, #68]	@ (8001178 <_sbrk+0x64>)
 8001132:	4a12      	ldr	r2, [pc, #72]	@ (800117c <_sbrk+0x68>)
 8001134:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001136:	4b10      	ldr	r3, [pc, #64]	@ (8001178 <_sbrk+0x64>)
 8001138:	681a      	ldr	r2, [r3, #0]
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	4413      	add	r3, r2
 800113e:	693a      	ldr	r2, [r7, #16]
 8001140:	429a      	cmp	r2, r3
 8001142:	d207      	bcs.n	8001154 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001144:	f007 fe76 	bl	8008e34 <__errno>
 8001148:	4603      	mov	r3, r0
 800114a:	220c      	movs	r2, #12
 800114c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800114e:	f04f 33ff 	mov.w	r3, #4294967295
 8001152:	e009      	b.n	8001168 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001154:	4b08      	ldr	r3, [pc, #32]	@ (8001178 <_sbrk+0x64>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800115a:	4b07      	ldr	r3, [pc, #28]	@ (8001178 <_sbrk+0x64>)
 800115c:	681a      	ldr	r2, [r3, #0]
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	4413      	add	r3, r2
 8001162:	4a05      	ldr	r2, [pc, #20]	@ (8001178 <_sbrk+0x64>)
 8001164:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001166:	68fb      	ldr	r3, [r7, #12]
}
 8001168:	4618      	mov	r0, r3
 800116a:	3718      	adds	r7, #24
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	20020000 	.word	0x20020000
 8001174:	00000400 	.word	0x00000400
 8001178:	200001a8 	.word	0x200001a8
 800117c:	200029c0 	.word	0x200029c0

08001180 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001184:	4b06      	ldr	r3, [pc, #24]	@ (80011a0 <SystemInit+0x20>)
 8001186:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800118a:	4a05      	ldr	r2, [pc, #20]	@ (80011a0 <SystemInit+0x20>)
 800118c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001190:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001194:	bf00      	nop
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr
 800119e:	bf00      	nop
 80011a0:	e000ed00 	.word	0xe000ed00

080011a4 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b086      	sub	sp, #24
 80011a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011aa:	f107 0308 	add.w	r3, r7, #8
 80011ae:	2200      	movs	r2, #0
 80011b0:	601a      	str	r2, [r3, #0]
 80011b2:	605a      	str	r2, [r3, #4]
 80011b4:	609a      	str	r2, [r3, #8]
 80011b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011b8:	463b      	mov	r3, r7
 80011ba:	2200      	movs	r2, #0
 80011bc:	601a      	str	r2, [r3, #0]
 80011be:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80011c0:	4b1e      	ldr	r3, [pc, #120]	@ (800123c <MX_TIM3_Init+0x98>)
 80011c2:	4a1f      	ldr	r2, [pc, #124]	@ (8001240 <MX_TIM3_Init+0x9c>)
 80011c4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 80011c6:	4b1d      	ldr	r3, [pc, #116]	@ (800123c <MX_TIM3_Init+0x98>)
 80011c8:	2201      	movs	r2, #1
 80011ca:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011cc:	4b1b      	ldr	r3, [pc, #108]	@ (800123c <MX_TIM3_Init+0x98>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 44999;
 80011d2:	4b1a      	ldr	r3, [pc, #104]	@ (800123c <MX_TIM3_Init+0x98>)
 80011d4:	f64a 72c7 	movw	r2, #44999	@ 0xafc7
 80011d8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011da:	4b18      	ldr	r3, [pc, #96]	@ (800123c <MX_TIM3_Init+0x98>)
 80011dc:	2200      	movs	r2, #0
 80011de:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011e0:	4b16      	ldr	r3, [pc, #88]	@ (800123c <MX_TIM3_Init+0x98>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80011e6:	4815      	ldr	r0, [pc, #84]	@ (800123c <MX_TIM3_Init+0x98>)
 80011e8:	f002 fb38 	bl	800385c <HAL_TIM_Base_Init>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d001      	beq.n	80011f6 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80011f2:	f7ff fde5 	bl	8000dc0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011f6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011fa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80011fc:	f107 0308 	add.w	r3, r7, #8
 8001200:	4619      	mov	r1, r3
 8001202:	480e      	ldr	r0, [pc, #56]	@ (800123c <MX_TIM3_Init+0x98>)
 8001204:	f002 fd42 	bl	8003c8c <HAL_TIM_ConfigClockSource>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d001      	beq.n	8001212 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800120e:	f7ff fdd7 	bl	8000dc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001212:	2300      	movs	r3, #0
 8001214:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001216:	2300      	movs	r3, #0
 8001218:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800121a:	463b      	mov	r3, r7
 800121c:	4619      	mov	r1, r3
 800121e:	4807      	ldr	r0, [pc, #28]	@ (800123c <MX_TIM3_Init+0x98>)
 8001220:	f002 ff6a 	bl	80040f8 <HAL_TIMEx_MasterConfigSynchronization>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800122a:	f7ff fdc9 	bl	8000dc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 800122e:	4803      	ldr	r0, [pc, #12]	@ (800123c <MX_TIM3_Init+0x98>)
 8001230:	f002 fbcc 	bl	80039cc <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM3_Init 2 */

}
 8001234:	bf00      	nop
 8001236:	3718      	adds	r7, #24
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	200001ac 	.word	0x200001ac
 8001240:	40000400 	.word	0x40000400

08001244 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b086      	sub	sp, #24
 8001248:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800124a:	f107 0308 	add.w	r3, r7, #8
 800124e:	2200      	movs	r2, #0
 8001250:	601a      	str	r2, [r3, #0]
 8001252:	605a      	str	r2, [r3, #4]
 8001254:	609a      	str	r2, [r3, #8]
 8001256:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001258:	463b      	mov	r3, r7
 800125a:	2200      	movs	r2, #0
 800125c:	601a      	str	r2, [r3, #0]
 800125e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */
  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001260:	4b1e      	ldr	r3, [pc, #120]	@ (80012dc <MX_TIM4_Init+0x98>)
 8001262:	4a1f      	ldr	r2, [pc, #124]	@ (80012e0 <MX_TIM4_Init+0x9c>)
 8001264:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 89;
 8001266:	4b1d      	ldr	r3, [pc, #116]	@ (80012dc <MX_TIM4_Init+0x98>)
 8001268:	2259      	movs	r2, #89	@ 0x59
 800126a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800126c:	4b1b      	ldr	r3, [pc, #108]	@ (80012dc <MX_TIM4_Init+0x98>)
 800126e:	2200      	movs	r2, #0
 8001270:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001272:	4b1a      	ldr	r3, [pc, #104]	@ (80012dc <MX_TIM4_Init+0x98>)
 8001274:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001278:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800127a:	4b18      	ldr	r3, [pc, #96]	@ (80012dc <MX_TIM4_Init+0x98>)
 800127c:	2200      	movs	r2, #0
 800127e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001280:	4b16      	ldr	r3, [pc, #88]	@ (80012dc <MX_TIM4_Init+0x98>)
 8001282:	2200      	movs	r2, #0
 8001284:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001286:	4815      	ldr	r0, [pc, #84]	@ (80012dc <MX_TIM4_Init+0x98>)
 8001288:	f002 fae8 	bl	800385c <HAL_TIM_Base_Init>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8001292:	f7ff fd95 	bl	8000dc0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001296:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800129a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800129c:	f107 0308 	add.w	r3, r7, #8
 80012a0:	4619      	mov	r1, r3
 80012a2:	480e      	ldr	r0, [pc, #56]	@ (80012dc <MX_TIM4_Init+0x98>)
 80012a4:	f002 fcf2 	bl	8003c8c <HAL_TIM_ConfigClockSource>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d001      	beq.n	80012b2 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 80012ae:	f7ff fd87 	bl	8000dc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012b2:	2300      	movs	r3, #0
 80012b4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012b6:	2300      	movs	r3, #0
 80012b8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80012ba:	463b      	mov	r3, r7
 80012bc:	4619      	mov	r1, r3
 80012be:	4807      	ldr	r0, [pc, #28]	@ (80012dc <MX_TIM4_Init+0x98>)
 80012c0:	f002 ff1a 	bl	80040f8 <HAL_TIMEx_MasterConfigSynchronization>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 80012ca:	f7ff fd79 	bl	8000dc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */
  HAL_TIM_Base_Start(&htim4);
 80012ce:	4803      	ldr	r0, [pc, #12]	@ (80012dc <MX_TIM4_Init+0x98>)
 80012d0:	f002 fb14 	bl	80038fc <HAL_TIM_Base_Start>
  /* USER CODE END TIM4_Init 2 */

}
 80012d4:	bf00      	nop
 80012d6:	3718      	adds	r7, #24
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	200001f4 	.word	0x200001f4
 80012e0:	40000800 	.word	0x40000800

080012e4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b084      	sub	sp, #16
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a18      	ldr	r2, [pc, #96]	@ (8001354 <HAL_TIM_Base_MspInit+0x70>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d116      	bne.n	8001324 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80012f6:	2300      	movs	r3, #0
 80012f8:	60fb      	str	r3, [r7, #12]
 80012fa:	4b17      	ldr	r3, [pc, #92]	@ (8001358 <HAL_TIM_Base_MspInit+0x74>)
 80012fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012fe:	4a16      	ldr	r2, [pc, #88]	@ (8001358 <HAL_TIM_Base_MspInit+0x74>)
 8001300:	f043 0302 	orr.w	r3, r3, #2
 8001304:	6413      	str	r3, [r2, #64]	@ 0x40
 8001306:	4b14      	ldr	r3, [pc, #80]	@ (8001358 <HAL_TIM_Base_MspInit+0x74>)
 8001308:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800130a:	f003 0302 	and.w	r3, r3, #2
 800130e:	60fb      	str	r3, [r7, #12]
 8001310:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001312:	2200      	movs	r2, #0
 8001314:	2100      	movs	r1, #0
 8001316:	201d      	movs	r0, #29
 8001318:	f000 fa5d 	bl	80017d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800131c:	201d      	movs	r0, #29
 800131e:	f000 fa76 	bl	800180e <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001322:	e012      	b.n	800134a <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM4)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a0c      	ldr	r2, [pc, #48]	@ (800135c <HAL_TIM_Base_MspInit+0x78>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d10d      	bne.n	800134a <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800132e:	2300      	movs	r3, #0
 8001330:	60bb      	str	r3, [r7, #8]
 8001332:	4b09      	ldr	r3, [pc, #36]	@ (8001358 <HAL_TIM_Base_MspInit+0x74>)
 8001334:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001336:	4a08      	ldr	r2, [pc, #32]	@ (8001358 <HAL_TIM_Base_MspInit+0x74>)
 8001338:	f043 0304 	orr.w	r3, r3, #4
 800133c:	6413      	str	r3, [r2, #64]	@ 0x40
 800133e:	4b06      	ldr	r3, [pc, #24]	@ (8001358 <HAL_TIM_Base_MspInit+0x74>)
 8001340:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001342:	f003 0304 	and.w	r3, r3, #4
 8001346:	60bb      	str	r3, [r7, #8]
 8001348:	68bb      	ldr	r3, [r7, #8]
}
 800134a:	bf00      	nop
 800134c:	3710      	adds	r7, #16
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	40000400 	.word	0x40000400
 8001358:	40023800 	.word	0x40023800
 800135c:	40000800 	.word	0x40000800

08001360 <HAL_TIM_PeriodElapsedCallback>:
/*-----------------------------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------------------------*
 *								TIM3 + Interrupt callback function - 1ms callback
 *-----------------------------------------------------------------------------------------------------*/
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]

	if(htim->Instance == TIM3)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a20      	ldr	r2, [pc, #128]	@ (80013f0 <HAL_TIM_PeriodElapsedCallback+0x90>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d139      	bne.n	80013e6 <HAL_TIM_PeriodElapsedCallback+0x86>
	{
		static uint8_t cnt10MS = 0;
		static uint8_t cnt20MS = 0;
		static uint8_t cnt100MS = 0;
		static uint16_t cnt1000MS = 0;
		cnt10MS++; cnt20MS++; cnt100MS++; cnt1000MS++;
 8001372:	4b20      	ldr	r3, [pc, #128]	@ (80013f4 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8001374:	781b      	ldrb	r3, [r3, #0]
 8001376:	3301      	adds	r3, #1
 8001378:	b2da      	uxtb	r2, r3
 800137a:	4b1e      	ldr	r3, [pc, #120]	@ (80013f4 <HAL_TIM_PeriodElapsedCallback+0x94>)
 800137c:	701a      	strb	r2, [r3, #0]
 800137e:	4b1e      	ldr	r3, [pc, #120]	@ (80013f8 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8001380:	781b      	ldrb	r3, [r3, #0]
 8001382:	3301      	adds	r3, #1
 8001384:	b2da      	uxtb	r2, r3
 8001386:	4b1c      	ldr	r3, [pc, #112]	@ (80013f8 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8001388:	701a      	strb	r2, [r3, #0]
 800138a:	4b1c      	ldr	r3, [pc, #112]	@ (80013fc <HAL_TIM_PeriodElapsedCallback+0x9c>)
 800138c:	781b      	ldrb	r3, [r3, #0]
 800138e:	3301      	adds	r3, #1
 8001390:	b2da      	uxtb	r2, r3
 8001392:	4b1a      	ldr	r3, [pc, #104]	@ (80013fc <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8001394:	701a      	strb	r2, [r3, #0]
 8001396:	4b1a      	ldr	r3, [pc, #104]	@ (8001400 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001398:	881b      	ldrh	r3, [r3, #0]
 800139a:	3301      	adds	r3, #1
 800139c:	b29a      	uxth	r2, r3
 800139e:	4b18      	ldr	r3, [pc, #96]	@ (8001400 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80013a0:	801a      	strh	r2, [r3, #0]
		if(cnt10MS >= CALLBACK_10MS)
 80013a2:	4b14      	ldr	r3, [pc, #80]	@ (80013f4 <HAL_TIM_PeriodElapsedCallback+0x94>)
 80013a4:	781b      	ldrb	r3, [r3, #0]
 80013a6:	2b09      	cmp	r3, #9
 80013a8:	d903      	bls.n	80013b2 <HAL_TIM_PeriodElapsedCallback+0x52>
		{	// 10Ms Callback
			cnt10MS = 0;
 80013aa:	4b12      	ldr	r3, [pc, #72]	@ (80013f4 <HAL_TIM_PeriodElapsedCallback+0x94>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	701a      	strb	r2, [r3, #0]
			cnt1000MS = 0;

		}

	}
}
 80013b0:	e019      	b.n	80013e6 <HAL_TIM_PeriodElapsedCallback+0x86>
		else if(cnt20MS >= CALLBACK_20MS)
 80013b2:	4b11      	ldr	r3, [pc, #68]	@ (80013f8 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	2b13      	cmp	r3, #19
 80013b8:	d905      	bls.n	80013c6 <HAL_TIM_PeriodElapsedCallback+0x66>
			SD_Card_Test();
 80013ba:	f007 fca3 	bl	8008d04 <SD_Card_Test>
			cnt20MS = 0;
 80013be:	4b0e      	ldr	r3, [pc, #56]	@ (80013f8 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	701a      	strb	r2, [r3, #0]
}
 80013c4:	e00f      	b.n	80013e6 <HAL_TIM_PeriodElapsedCallback+0x86>
		else if(cnt100MS >= CALLBACK_100MS)
 80013c6:	4b0d      	ldr	r3, [pc, #52]	@ (80013fc <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80013c8:	781b      	ldrb	r3, [r3, #0]
 80013ca:	2b63      	cmp	r3, #99	@ 0x63
 80013cc:	d903      	bls.n	80013d6 <HAL_TIM_PeriodElapsedCallback+0x76>
			cnt100MS = 0;
 80013ce:	4b0b      	ldr	r3, [pc, #44]	@ (80013fc <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	701a      	strb	r2, [r3, #0]
}
 80013d4:	e007      	b.n	80013e6 <HAL_TIM_PeriodElapsedCallback+0x86>
		else if(cnt1000MS >= CALLBACK_1000MS)
 80013d6:	4b0a      	ldr	r3, [pc, #40]	@ (8001400 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80013d8:	881b      	ldrh	r3, [r3, #0]
 80013da:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80013de:	d302      	bcc.n	80013e6 <HAL_TIM_PeriodElapsedCallback+0x86>
			cnt1000MS = 0;
 80013e0:	4b07      	ldr	r3, [pc, #28]	@ (8001400 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	801a      	strh	r2, [r3, #0]
}
 80013e6:	bf00      	nop
 80013e8:	3708      	adds	r7, #8
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	40000400 	.word	0x40000400
 80013f4:	2000023c 	.word	0x2000023c
 80013f8:	2000023d 	.word	0x2000023d
 80013fc:	2000023e 	.word	0x2000023e
 8001400:	20000240 	.word	0x20000240

08001404 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001408:	4b11      	ldr	r3, [pc, #68]	@ (8001450 <MX_USART2_UART_Init+0x4c>)
 800140a:	4a12      	ldr	r2, [pc, #72]	@ (8001454 <MX_USART2_UART_Init+0x50>)
 800140c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800140e:	4b10      	ldr	r3, [pc, #64]	@ (8001450 <MX_USART2_UART_Init+0x4c>)
 8001410:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001414:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001416:	4b0e      	ldr	r3, [pc, #56]	@ (8001450 <MX_USART2_UART_Init+0x4c>)
 8001418:	2200      	movs	r2, #0
 800141a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800141c:	4b0c      	ldr	r3, [pc, #48]	@ (8001450 <MX_USART2_UART_Init+0x4c>)
 800141e:	2200      	movs	r2, #0
 8001420:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001422:	4b0b      	ldr	r3, [pc, #44]	@ (8001450 <MX_USART2_UART_Init+0x4c>)
 8001424:	2200      	movs	r2, #0
 8001426:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001428:	4b09      	ldr	r3, [pc, #36]	@ (8001450 <MX_USART2_UART_Init+0x4c>)
 800142a:	220c      	movs	r2, #12
 800142c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800142e:	4b08      	ldr	r3, [pc, #32]	@ (8001450 <MX_USART2_UART_Init+0x4c>)
 8001430:	2200      	movs	r2, #0
 8001432:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001434:	4b06      	ldr	r3, [pc, #24]	@ (8001450 <MX_USART2_UART_Init+0x4c>)
 8001436:	2200      	movs	r2, #0
 8001438:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800143a:	4805      	ldr	r0, [pc, #20]	@ (8001450 <MX_USART2_UART_Init+0x4c>)
 800143c:	f002 feec 	bl	8004218 <HAL_UART_Init>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001446:	f7ff fcbb 	bl	8000dc0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800144a:	bf00      	nop
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	20000244 	.word	0x20000244
 8001454:	40004400 	.word	0x40004400

08001458 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b08a      	sub	sp, #40	@ 0x28
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001460:	f107 0314 	add.w	r3, r7, #20
 8001464:	2200      	movs	r2, #0
 8001466:	601a      	str	r2, [r3, #0]
 8001468:	605a      	str	r2, [r3, #4]
 800146a:	609a      	str	r2, [r3, #8]
 800146c:	60da      	str	r2, [r3, #12]
 800146e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a19      	ldr	r2, [pc, #100]	@ (80014dc <HAL_UART_MspInit+0x84>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d12b      	bne.n	80014d2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800147a:	2300      	movs	r3, #0
 800147c:	613b      	str	r3, [r7, #16]
 800147e:	4b18      	ldr	r3, [pc, #96]	@ (80014e0 <HAL_UART_MspInit+0x88>)
 8001480:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001482:	4a17      	ldr	r2, [pc, #92]	@ (80014e0 <HAL_UART_MspInit+0x88>)
 8001484:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001488:	6413      	str	r3, [r2, #64]	@ 0x40
 800148a:	4b15      	ldr	r3, [pc, #84]	@ (80014e0 <HAL_UART_MspInit+0x88>)
 800148c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800148e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001492:	613b      	str	r3, [r7, #16]
 8001494:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001496:	2300      	movs	r3, #0
 8001498:	60fb      	str	r3, [r7, #12]
 800149a:	4b11      	ldr	r3, [pc, #68]	@ (80014e0 <HAL_UART_MspInit+0x88>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800149e:	4a10      	ldr	r2, [pc, #64]	@ (80014e0 <HAL_UART_MspInit+0x88>)
 80014a0:	f043 0301 	orr.w	r3, r3, #1
 80014a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80014a6:	4b0e      	ldr	r3, [pc, #56]	@ (80014e0 <HAL_UART_MspInit+0x88>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014aa:	f003 0301 	and.w	r3, r3, #1
 80014ae:	60fb      	str	r3, [r7, #12]
 80014b0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80014b2:	230c      	movs	r3, #12
 80014b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b6:	2302      	movs	r3, #2
 80014b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ba:	2300      	movs	r3, #0
 80014bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014be:	2303      	movs	r3, #3
 80014c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80014c2:	2307      	movs	r3, #7
 80014c4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014c6:	f107 0314 	add.w	r3, r7, #20
 80014ca:	4619      	mov	r1, r3
 80014cc:	4805      	ldr	r0, [pc, #20]	@ (80014e4 <HAL_UART_MspInit+0x8c>)
 80014ce:	f000 fcc5 	bl	8001e5c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80014d2:	bf00      	nop
 80014d4:	3728      	adds	r7, #40	@ 0x28
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	40004400 	.word	0x40004400
 80014e0:	40023800 	.word	0x40023800
 80014e4:	40020000 	.word	0x40020000

080014e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80014e8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001520 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80014ec:	f7ff fe48 	bl	8001180 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80014f0:	480c      	ldr	r0, [pc, #48]	@ (8001524 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80014f2:	490d      	ldr	r1, [pc, #52]	@ (8001528 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80014f4:	4a0d      	ldr	r2, [pc, #52]	@ (800152c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80014f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014f8:	e002      	b.n	8001500 <LoopCopyDataInit>

080014fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014fe:	3304      	adds	r3, #4

08001500 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001500:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001502:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001504:	d3f9      	bcc.n	80014fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001506:	4a0a      	ldr	r2, [pc, #40]	@ (8001530 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001508:	4c0a      	ldr	r4, [pc, #40]	@ (8001534 <LoopFillZerobss+0x22>)
  movs r3, #0
 800150a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800150c:	e001      	b.n	8001512 <LoopFillZerobss>

0800150e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800150e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001510:	3204      	adds	r2, #4

08001512 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001512:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001514:	d3fb      	bcc.n	800150e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001516:	f007 fc93 	bl	8008e40 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800151a:	f7ff fbcb 	bl	8000cb4 <main>
  bx  lr    
 800151e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001520:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001524:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001528:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 800152c:	08009cd0 	.word	0x08009cd0
  ldr r2, =_sbss
 8001530:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001534:	200029bc 	.word	0x200029bc

08001538 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001538:	e7fe      	b.n	8001538 <ADC_IRQHandler>
	...

0800153c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001540:	4b0e      	ldr	r3, [pc, #56]	@ (800157c <HAL_Init+0x40>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a0d      	ldr	r2, [pc, #52]	@ (800157c <HAL_Init+0x40>)
 8001546:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800154a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800154c:	4b0b      	ldr	r3, [pc, #44]	@ (800157c <HAL_Init+0x40>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a0a      	ldr	r2, [pc, #40]	@ (800157c <HAL_Init+0x40>)
 8001552:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001556:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001558:	4b08      	ldr	r3, [pc, #32]	@ (800157c <HAL_Init+0x40>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a07      	ldr	r2, [pc, #28]	@ (800157c <HAL_Init+0x40>)
 800155e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001562:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001564:	2003      	movs	r0, #3
 8001566:	f000 f92b 	bl	80017c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800156a:	2000      	movs	r0, #0
 800156c:	f000 f808 	bl	8001580 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001570:	f7ff fd38 	bl	8000fe4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001574:	2300      	movs	r3, #0
}
 8001576:	4618      	mov	r0, r3
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	40023c00 	.word	0x40023c00

08001580 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001588:	4b12      	ldr	r3, [pc, #72]	@ (80015d4 <HAL_InitTick+0x54>)
 800158a:	681a      	ldr	r2, [r3, #0]
 800158c:	4b12      	ldr	r3, [pc, #72]	@ (80015d8 <HAL_InitTick+0x58>)
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	4619      	mov	r1, r3
 8001592:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001596:	fbb3 f3f1 	udiv	r3, r3, r1
 800159a:	fbb2 f3f3 	udiv	r3, r2, r3
 800159e:	4618      	mov	r0, r3
 80015a0:	f000 f943 	bl	800182a <HAL_SYSTICK_Config>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015aa:	2301      	movs	r3, #1
 80015ac:	e00e      	b.n	80015cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	2b0f      	cmp	r3, #15
 80015b2:	d80a      	bhi.n	80015ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015b4:	2200      	movs	r2, #0
 80015b6:	6879      	ldr	r1, [r7, #4]
 80015b8:	f04f 30ff 	mov.w	r0, #4294967295
 80015bc:	f000 f90b 	bl	80017d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015c0:	4a06      	ldr	r2, [pc, #24]	@ (80015dc <HAL_InitTick+0x5c>)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015c6:	2300      	movs	r3, #0
 80015c8:	e000      	b.n	80015cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015ca:	2301      	movs	r3, #1
}
 80015cc:	4618      	mov	r0, r3
 80015ce:	3708      	adds	r7, #8
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	20000000 	.word	0x20000000
 80015d8:	20000008 	.word	0x20000008
 80015dc:	20000004 	.word	0x20000004

080015e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015e4:	4b06      	ldr	r3, [pc, #24]	@ (8001600 <HAL_IncTick+0x20>)
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	461a      	mov	r2, r3
 80015ea:	4b06      	ldr	r3, [pc, #24]	@ (8001604 <HAL_IncTick+0x24>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4413      	add	r3, r2
 80015f0:	4a04      	ldr	r2, [pc, #16]	@ (8001604 <HAL_IncTick+0x24>)
 80015f2:	6013      	str	r3, [r2, #0]
}
 80015f4:	bf00      	nop
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr
 80015fe:	bf00      	nop
 8001600:	20000008 	.word	0x20000008
 8001604:	2000028c 	.word	0x2000028c

08001608 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  return uwTick;
 800160c:	4b03      	ldr	r3, [pc, #12]	@ (800161c <HAL_GetTick+0x14>)
 800160e:	681b      	ldr	r3, [r3, #0]
}
 8001610:	4618      	mov	r0, r3
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr
 800161a:	bf00      	nop
 800161c:	2000028c 	.word	0x2000028c

08001620 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001620:	b480      	push	{r7}
 8001622:	b085      	sub	sp, #20
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	f003 0307 	and.w	r3, r3, #7
 800162e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001630:	4b0c      	ldr	r3, [pc, #48]	@ (8001664 <__NVIC_SetPriorityGrouping+0x44>)
 8001632:	68db      	ldr	r3, [r3, #12]
 8001634:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001636:	68ba      	ldr	r2, [r7, #8]
 8001638:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800163c:	4013      	ands	r3, r2
 800163e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001644:	68bb      	ldr	r3, [r7, #8]
 8001646:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001648:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800164c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001650:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001652:	4a04      	ldr	r2, [pc, #16]	@ (8001664 <__NVIC_SetPriorityGrouping+0x44>)
 8001654:	68bb      	ldr	r3, [r7, #8]
 8001656:	60d3      	str	r3, [r2, #12]
}
 8001658:	bf00      	nop
 800165a:	3714      	adds	r7, #20
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr
 8001664:	e000ed00 	.word	0xe000ed00

08001668 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800166c:	4b04      	ldr	r3, [pc, #16]	@ (8001680 <__NVIC_GetPriorityGrouping+0x18>)
 800166e:	68db      	ldr	r3, [r3, #12]
 8001670:	0a1b      	lsrs	r3, r3, #8
 8001672:	f003 0307 	and.w	r3, r3, #7
}
 8001676:	4618      	mov	r0, r3
 8001678:	46bd      	mov	sp, r7
 800167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167e:	4770      	bx	lr
 8001680:	e000ed00 	.word	0xe000ed00

08001684 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001684:	b480      	push	{r7}
 8001686:	b083      	sub	sp, #12
 8001688:	af00      	add	r7, sp, #0
 800168a:	4603      	mov	r3, r0
 800168c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800168e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001692:	2b00      	cmp	r3, #0
 8001694:	db0b      	blt.n	80016ae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001696:	79fb      	ldrb	r3, [r7, #7]
 8001698:	f003 021f 	and.w	r2, r3, #31
 800169c:	4907      	ldr	r1, [pc, #28]	@ (80016bc <__NVIC_EnableIRQ+0x38>)
 800169e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a2:	095b      	lsrs	r3, r3, #5
 80016a4:	2001      	movs	r0, #1
 80016a6:	fa00 f202 	lsl.w	r2, r0, r2
 80016aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80016ae:	bf00      	nop
 80016b0:	370c      	adds	r7, #12
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr
 80016ba:	bf00      	nop
 80016bc:	e000e100 	.word	0xe000e100

080016c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b083      	sub	sp, #12
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	4603      	mov	r3, r0
 80016c8:	6039      	str	r1, [r7, #0]
 80016ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	db0a      	blt.n	80016ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	b2da      	uxtb	r2, r3
 80016d8:	490c      	ldr	r1, [pc, #48]	@ (800170c <__NVIC_SetPriority+0x4c>)
 80016da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016de:	0112      	lsls	r2, r2, #4
 80016e0:	b2d2      	uxtb	r2, r2
 80016e2:	440b      	add	r3, r1
 80016e4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016e8:	e00a      	b.n	8001700 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	b2da      	uxtb	r2, r3
 80016ee:	4908      	ldr	r1, [pc, #32]	@ (8001710 <__NVIC_SetPriority+0x50>)
 80016f0:	79fb      	ldrb	r3, [r7, #7]
 80016f2:	f003 030f 	and.w	r3, r3, #15
 80016f6:	3b04      	subs	r3, #4
 80016f8:	0112      	lsls	r2, r2, #4
 80016fa:	b2d2      	uxtb	r2, r2
 80016fc:	440b      	add	r3, r1
 80016fe:	761a      	strb	r2, [r3, #24]
}
 8001700:	bf00      	nop
 8001702:	370c      	adds	r7, #12
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr
 800170c:	e000e100 	.word	0xe000e100
 8001710:	e000ed00 	.word	0xe000ed00

08001714 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001714:	b480      	push	{r7}
 8001716:	b089      	sub	sp, #36	@ 0x24
 8001718:	af00      	add	r7, sp, #0
 800171a:	60f8      	str	r0, [r7, #12]
 800171c:	60b9      	str	r1, [r7, #8]
 800171e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	f003 0307 	and.w	r3, r3, #7
 8001726:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001728:	69fb      	ldr	r3, [r7, #28]
 800172a:	f1c3 0307 	rsb	r3, r3, #7
 800172e:	2b04      	cmp	r3, #4
 8001730:	bf28      	it	cs
 8001732:	2304      	movcs	r3, #4
 8001734:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001736:	69fb      	ldr	r3, [r7, #28]
 8001738:	3304      	adds	r3, #4
 800173a:	2b06      	cmp	r3, #6
 800173c:	d902      	bls.n	8001744 <NVIC_EncodePriority+0x30>
 800173e:	69fb      	ldr	r3, [r7, #28]
 8001740:	3b03      	subs	r3, #3
 8001742:	e000      	b.n	8001746 <NVIC_EncodePriority+0x32>
 8001744:	2300      	movs	r3, #0
 8001746:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001748:	f04f 32ff 	mov.w	r2, #4294967295
 800174c:	69bb      	ldr	r3, [r7, #24]
 800174e:	fa02 f303 	lsl.w	r3, r2, r3
 8001752:	43da      	mvns	r2, r3
 8001754:	68bb      	ldr	r3, [r7, #8]
 8001756:	401a      	ands	r2, r3
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800175c:	f04f 31ff 	mov.w	r1, #4294967295
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	fa01 f303 	lsl.w	r3, r1, r3
 8001766:	43d9      	mvns	r1, r3
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800176c:	4313      	orrs	r3, r2
         );
}
 800176e:	4618      	mov	r0, r3
 8001770:	3724      	adds	r7, #36	@ 0x24
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr
	...

0800177c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b082      	sub	sp, #8
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	3b01      	subs	r3, #1
 8001788:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800178c:	d301      	bcc.n	8001792 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800178e:	2301      	movs	r3, #1
 8001790:	e00f      	b.n	80017b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001792:	4a0a      	ldr	r2, [pc, #40]	@ (80017bc <SysTick_Config+0x40>)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	3b01      	subs	r3, #1
 8001798:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800179a:	210f      	movs	r1, #15
 800179c:	f04f 30ff 	mov.w	r0, #4294967295
 80017a0:	f7ff ff8e 	bl	80016c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017a4:	4b05      	ldr	r3, [pc, #20]	@ (80017bc <SysTick_Config+0x40>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017aa:	4b04      	ldr	r3, [pc, #16]	@ (80017bc <SysTick_Config+0x40>)
 80017ac:	2207      	movs	r2, #7
 80017ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017b0:	2300      	movs	r3, #0
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	3708      	adds	r7, #8
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	e000e010 	.word	0xe000e010

080017c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017c8:	6878      	ldr	r0, [r7, #4]
 80017ca:	f7ff ff29 	bl	8001620 <__NVIC_SetPriorityGrouping>
}
 80017ce:	bf00      	nop
 80017d0:	3708      	adds	r7, #8
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}

080017d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017d6:	b580      	push	{r7, lr}
 80017d8:	b086      	sub	sp, #24
 80017da:	af00      	add	r7, sp, #0
 80017dc:	4603      	mov	r3, r0
 80017de:	60b9      	str	r1, [r7, #8]
 80017e0:	607a      	str	r2, [r7, #4]
 80017e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017e4:	2300      	movs	r3, #0
 80017e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017e8:	f7ff ff3e 	bl	8001668 <__NVIC_GetPriorityGrouping>
 80017ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017ee:	687a      	ldr	r2, [r7, #4]
 80017f0:	68b9      	ldr	r1, [r7, #8]
 80017f2:	6978      	ldr	r0, [r7, #20]
 80017f4:	f7ff ff8e 	bl	8001714 <NVIC_EncodePriority>
 80017f8:	4602      	mov	r2, r0
 80017fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017fe:	4611      	mov	r1, r2
 8001800:	4618      	mov	r0, r3
 8001802:	f7ff ff5d 	bl	80016c0 <__NVIC_SetPriority>
}
 8001806:	bf00      	nop
 8001808:	3718      	adds	r7, #24
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}

0800180e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800180e:	b580      	push	{r7, lr}
 8001810:	b082      	sub	sp, #8
 8001812:	af00      	add	r7, sp, #0
 8001814:	4603      	mov	r3, r0
 8001816:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001818:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800181c:	4618      	mov	r0, r3
 800181e:	f7ff ff31 	bl	8001684 <__NVIC_EnableIRQ>
}
 8001822:	bf00      	nop
 8001824:	3708      	adds	r7, #8
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}

0800182a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800182a:	b580      	push	{r7, lr}
 800182c:	b082      	sub	sp, #8
 800182e:	af00      	add	r7, sp, #0
 8001830:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001832:	6878      	ldr	r0, [r7, #4]
 8001834:	f7ff ffa2 	bl	800177c <SysTick_Config>
 8001838:	4603      	mov	r3, r0
}
 800183a:	4618      	mov	r0, r3
 800183c:	3708      	adds	r7, #8
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
	...

08001844 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b086      	sub	sp, #24
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800184c:	2300      	movs	r3, #0
 800184e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001850:	f7ff feda 	bl	8001608 <HAL_GetTick>
 8001854:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d101      	bne.n	8001860 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800185c:	2301      	movs	r3, #1
 800185e:	e099      	b.n	8001994 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2202      	movs	r2, #2
 8001864:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2200      	movs	r2, #0
 800186c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f022 0201 	bic.w	r2, r2, #1
 800187e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001880:	e00f      	b.n	80018a2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001882:	f7ff fec1 	bl	8001608 <HAL_GetTick>
 8001886:	4602      	mov	r2, r0
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	1ad3      	subs	r3, r2, r3
 800188c:	2b05      	cmp	r3, #5
 800188e:	d908      	bls.n	80018a2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2220      	movs	r2, #32
 8001894:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2203      	movs	r2, #3
 800189a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800189e:	2303      	movs	r3, #3
 80018a0:	e078      	b.n	8001994 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f003 0301 	and.w	r3, r3, #1
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d1e8      	bne.n	8001882 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80018b8:	697a      	ldr	r2, [r7, #20]
 80018ba:	4b38      	ldr	r3, [pc, #224]	@ (800199c <HAL_DMA_Init+0x158>)
 80018bc:	4013      	ands	r3, r2
 80018be:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	685a      	ldr	r2, [r3, #4]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80018ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	691b      	ldr	r3, [r3, #16]
 80018d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018da:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	699b      	ldr	r3, [r3, #24]
 80018e0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018e6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6a1b      	ldr	r3, [r3, #32]
 80018ec:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80018ee:	697a      	ldr	r2, [r7, #20]
 80018f0:	4313      	orrs	r3, r2
 80018f2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018f8:	2b04      	cmp	r3, #4
 80018fa:	d107      	bne.n	800190c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001904:	4313      	orrs	r3, r2
 8001906:	697a      	ldr	r2, [r7, #20]
 8001908:	4313      	orrs	r3, r2
 800190a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	697a      	ldr	r2, [r7, #20]
 8001912:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	695b      	ldr	r3, [r3, #20]
 800191a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	f023 0307 	bic.w	r3, r3, #7
 8001922:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001928:	697a      	ldr	r2, [r7, #20]
 800192a:	4313      	orrs	r3, r2
 800192c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001932:	2b04      	cmp	r3, #4
 8001934:	d117      	bne.n	8001966 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800193a:	697a      	ldr	r2, [r7, #20]
 800193c:	4313      	orrs	r3, r2
 800193e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001944:	2b00      	cmp	r3, #0
 8001946:	d00e      	beq.n	8001966 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001948:	6878      	ldr	r0, [r7, #4]
 800194a:	f000 fa0b 	bl	8001d64 <DMA_CheckFifoParam>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d008      	beq.n	8001966 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2240      	movs	r2, #64	@ 0x40
 8001958:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2201      	movs	r2, #1
 800195e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001962:	2301      	movs	r3, #1
 8001964:	e016      	b.n	8001994 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	697a      	ldr	r2, [r7, #20]
 800196c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800196e:	6878      	ldr	r0, [r7, #4]
 8001970:	f000 f9c2 	bl	8001cf8 <DMA_CalcBaseAndBitshift>
 8001974:	4603      	mov	r3, r0
 8001976:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800197c:	223f      	movs	r2, #63	@ 0x3f
 800197e:	409a      	lsls	r2, r3
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2200      	movs	r2, #0
 8001988:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2201      	movs	r2, #1
 800198e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001992:	2300      	movs	r3, #0
}
 8001994:	4618      	mov	r0, r3
 8001996:	3718      	adds	r7, #24
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}
 800199c:	f010803f 	.word	0xf010803f

080019a0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b083      	sub	sp, #12
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80019ae:	b2db      	uxtb	r3, r3
 80019b0:	2b02      	cmp	r3, #2
 80019b2:	d004      	beq.n	80019be <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2280      	movs	r2, #128	@ 0x80
 80019b8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80019ba:	2301      	movs	r3, #1
 80019bc:	e00c      	b.n	80019d8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2205      	movs	r2, #5
 80019c2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	681a      	ldr	r2, [r3, #0]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f022 0201 	bic.w	r2, r2, #1
 80019d4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80019d6:	2300      	movs	r3, #0
}
 80019d8:	4618      	mov	r0, r3
 80019da:	370c      	adds	r7, #12
 80019dc:	46bd      	mov	sp, r7
 80019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e2:	4770      	bx	lr

080019e4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b086      	sub	sp, #24
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80019ec:	2300      	movs	r3, #0
 80019ee:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80019f0:	4b8e      	ldr	r3, [pc, #568]	@ (8001c2c <HAL_DMA_IRQHandler+0x248>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a8e      	ldr	r2, [pc, #568]	@ (8001c30 <HAL_DMA_IRQHandler+0x24c>)
 80019f6:	fba2 2303 	umull	r2, r3, r2, r3
 80019fa:	0a9b      	lsrs	r3, r3, #10
 80019fc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a02:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001a04:	693b      	ldr	r3, [r7, #16]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a0e:	2208      	movs	r2, #8
 8001a10:	409a      	lsls	r2, r3
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	4013      	ands	r3, r2
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d01a      	beq.n	8001a50 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f003 0304 	and.w	r3, r3, #4
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d013      	beq.n	8001a50 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	681a      	ldr	r2, [r3, #0]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f022 0204 	bic.w	r2, r2, #4
 8001a36:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a3c:	2208      	movs	r2, #8
 8001a3e:	409a      	lsls	r2, r3
 8001a40:	693b      	ldr	r3, [r7, #16]
 8001a42:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a48:	f043 0201 	orr.w	r2, r3, #1
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a54:	2201      	movs	r2, #1
 8001a56:	409a      	lsls	r2, r3
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d012      	beq.n	8001a86 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	695b      	ldr	r3, [r3, #20]
 8001a66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d00b      	beq.n	8001a86 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a72:	2201      	movs	r2, #1
 8001a74:	409a      	lsls	r2, r3
 8001a76:	693b      	ldr	r3, [r7, #16]
 8001a78:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a7e:	f043 0202 	orr.w	r2, r3, #2
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a8a:	2204      	movs	r2, #4
 8001a8c:	409a      	lsls	r2, r3
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	4013      	ands	r3, r2
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d012      	beq.n	8001abc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f003 0302 	and.w	r3, r3, #2
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d00b      	beq.n	8001abc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001aa8:	2204      	movs	r2, #4
 8001aaa:	409a      	lsls	r2, r3
 8001aac:	693b      	ldr	r3, [r7, #16]
 8001aae:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ab4:	f043 0204 	orr.w	r2, r3, #4
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ac0:	2210      	movs	r2, #16
 8001ac2:	409a      	lsls	r2, r3
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d043      	beq.n	8001b54 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f003 0308 	and.w	r3, r3, #8
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d03c      	beq.n	8001b54 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ade:	2210      	movs	r2, #16
 8001ae0:	409a      	lsls	r2, r3
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d018      	beq.n	8001b26 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d108      	bne.n	8001b14 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d024      	beq.n	8001b54 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b0e:	6878      	ldr	r0, [r7, #4]
 8001b10:	4798      	blx	r3
 8001b12:	e01f      	b.n	8001b54 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d01b      	beq.n	8001b54 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b20:	6878      	ldr	r0, [r7, #4]
 8001b22:	4798      	blx	r3
 8001b24:	e016      	b.n	8001b54 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d107      	bne.n	8001b44 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	681a      	ldr	r2, [r3, #0]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f022 0208 	bic.w	r2, r2, #8
 8001b42:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d003      	beq.n	8001b54 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b50:	6878      	ldr	r0, [r7, #4]
 8001b52:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b58:	2220      	movs	r2, #32
 8001b5a:	409a      	lsls	r2, r3
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	4013      	ands	r3, r2
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	f000 808f 	beq.w	8001c84 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f003 0310 	and.w	r3, r3, #16
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	f000 8087 	beq.w	8001c84 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b7a:	2220      	movs	r2, #32
 8001b7c:	409a      	lsls	r2, r3
 8001b7e:	693b      	ldr	r3, [r7, #16]
 8001b80:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001b88:	b2db      	uxtb	r3, r3
 8001b8a:	2b05      	cmp	r3, #5
 8001b8c:	d136      	bne.n	8001bfc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	681a      	ldr	r2, [r3, #0]
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f022 0216 	bic.w	r2, r2, #22
 8001b9c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	695a      	ldr	r2, [r3, #20]
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001bac:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d103      	bne.n	8001bbe <HAL_DMA_IRQHandler+0x1da>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d007      	beq.n	8001bce <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f022 0208 	bic.w	r2, r2, #8
 8001bcc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bd2:	223f      	movs	r2, #63	@ 0x3f
 8001bd4:	409a      	lsls	r2, r3
 8001bd6:	693b      	ldr	r3, [r7, #16]
 8001bd8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2201      	movs	r2, #1
 8001bde:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2200      	movs	r2, #0
 8001be6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d07e      	beq.n	8001cf0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001bf6:	6878      	ldr	r0, [r7, #4]
 8001bf8:	4798      	blx	r3
        }
        return;
 8001bfa:	e079      	b.n	8001cf0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d01d      	beq.n	8001c46 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d10d      	bne.n	8001c34 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d031      	beq.n	8001c84 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c24:	6878      	ldr	r0, [r7, #4]
 8001c26:	4798      	blx	r3
 8001c28:	e02c      	b.n	8001c84 <HAL_DMA_IRQHandler+0x2a0>
 8001c2a:	bf00      	nop
 8001c2c:	20000000 	.word	0x20000000
 8001c30:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d023      	beq.n	8001c84 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c40:	6878      	ldr	r0, [r7, #4]
 8001c42:	4798      	blx	r3
 8001c44:	e01e      	b.n	8001c84 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d10f      	bne.n	8001c74 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	681a      	ldr	r2, [r3, #0]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f022 0210 	bic.w	r2, r2, #16
 8001c62:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2201      	movs	r2, #1
 8001c68:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2200      	movs	r2, #0
 8001c70:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d003      	beq.n	8001c84 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c80:	6878      	ldr	r0, [r7, #4]
 8001c82:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d032      	beq.n	8001cf2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c90:	f003 0301 	and.w	r3, r3, #1
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d022      	beq.n	8001cde <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2205      	movs	r2, #5
 8001c9c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f022 0201 	bic.w	r2, r2, #1
 8001cae:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	3301      	adds	r3, #1
 8001cb4:	60bb      	str	r3, [r7, #8]
 8001cb6:	697a      	ldr	r2, [r7, #20]
 8001cb8:	429a      	cmp	r2, r3
 8001cba:	d307      	bcc.n	8001ccc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f003 0301 	and.w	r3, r3, #1
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d1f2      	bne.n	8001cb0 <HAL_DMA_IRQHandler+0x2cc>
 8001cca:	e000      	b.n	8001cce <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001ccc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2200      	movs	r2, #0
 8001cda:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d005      	beq.n	8001cf2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cea:	6878      	ldr	r0, [r7, #4]
 8001cec:	4798      	blx	r3
 8001cee:	e000      	b.n	8001cf2 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001cf0:	bf00      	nop
    }
  }
}
 8001cf2:	3718      	adds	r7, #24
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}

08001cf8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b085      	sub	sp, #20
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	b2db      	uxtb	r3, r3
 8001d06:	3b10      	subs	r3, #16
 8001d08:	4a14      	ldr	r2, [pc, #80]	@ (8001d5c <DMA_CalcBaseAndBitshift+0x64>)
 8001d0a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d0e:	091b      	lsrs	r3, r3, #4
 8001d10:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001d12:	4a13      	ldr	r2, [pc, #76]	@ (8001d60 <DMA_CalcBaseAndBitshift+0x68>)
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	4413      	add	r3, r2
 8001d18:	781b      	ldrb	r3, [r3, #0]
 8001d1a:	461a      	mov	r2, r3
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	2b03      	cmp	r3, #3
 8001d24:	d909      	bls.n	8001d3a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001d2e:	f023 0303 	bic.w	r3, r3, #3
 8001d32:	1d1a      	adds	r2, r3, #4
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	659a      	str	r2, [r3, #88]	@ 0x58
 8001d38:	e007      	b.n	8001d4a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001d42:	f023 0303 	bic.w	r3, r3, #3
 8001d46:	687a      	ldr	r2, [r7, #4]
 8001d48:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	3714      	adds	r7, #20
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr
 8001d5a:	bf00      	nop
 8001d5c:	aaaaaaab 	.word	0xaaaaaaab
 8001d60:	08009848 	.word	0x08009848

08001d64 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b085      	sub	sp, #20
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d74:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	699b      	ldr	r3, [r3, #24]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d11f      	bne.n	8001dbe <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001d7e:	68bb      	ldr	r3, [r7, #8]
 8001d80:	2b03      	cmp	r3, #3
 8001d82:	d856      	bhi.n	8001e32 <DMA_CheckFifoParam+0xce>
 8001d84:	a201      	add	r2, pc, #4	@ (adr r2, 8001d8c <DMA_CheckFifoParam+0x28>)
 8001d86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d8a:	bf00      	nop
 8001d8c:	08001d9d 	.word	0x08001d9d
 8001d90:	08001daf 	.word	0x08001daf
 8001d94:	08001d9d 	.word	0x08001d9d
 8001d98:	08001e33 	.word	0x08001e33
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001da0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d046      	beq.n	8001e36 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001da8:	2301      	movs	r3, #1
 8001daa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001dac:	e043      	b.n	8001e36 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001db2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001db6:	d140      	bne.n	8001e3a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001db8:	2301      	movs	r3, #1
 8001dba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001dbc:	e03d      	b.n	8001e3a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	699b      	ldr	r3, [r3, #24]
 8001dc2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001dc6:	d121      	bne.n	8001e0c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	2b03      	cmp	r3, #3
 8001dcc:	d837      	bhi.n	8001e3e <DMA_CheckFifoParam+0xda>
 8001dce:	a201      	add	r2, pc, #4	@ (adr r2, 8001dd4 <DMA_CheckFifoParam+0x70>)
 8001dd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dd4:	08001de5 	.word	0x08001de5
 8001dd8:	08001deb 	.word	0x08001deb
 8001ddc:	08001de5 	.word	0x08001de5
 8001de0:	08001dfd 	.word	0x08001dfd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001de4:	2301      	movs	r3, #1
 8001de6:	73fb      	strb	r3, [r7, #15]
      break;
 8001de8:	e030      	b.n	8001e4c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dee:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d025      	beq.n	8001e42 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001df6:	2301      	movs	r3, #1
 8001df8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001dfa:	e022      	b.n	8001e42 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e00:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001e04:	d11f      	bne.n	8001e46 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
 8001e08:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001e0a:	e01c      	b.n	8001e46 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	2b02      	cmp	r3, #2
 8001e10:	d903      	bls.n	8001e1a <DMA_CheckFifoParam+0xb6>
 8001e12:	68bb      	ldr	r3, [r7, #8]
 8001e14:	2b03      	cmp	r3, #3
 8001e16:	d003      	beq.n	8001e20 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001e18:	e018      	b.n	8001e4c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	73fb      	strb	r3, [r7, #15]
      break;
 8001e1e:	e015      	b.n	8001e4c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e24:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d00e      	beq.n	8001e4a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	73fb      	strb	r3, [r7, #15]
      break;
 8001e30:	e00b      	b.n	8001e4a <DMA_CheckFifoParam+0xe6>
      break;
 8001e32:	bf00      	nop
 8001e34:	e00a      	b.n	8001e4c <DMA_CheckFifoParam+0xe8>
      break;
 8001e36:	bf00      	nop
 8001e38:	e008      	b.n	8001e4c <DMA_CheckFifoParam+0xe8>
      break;
 8001e3a:	bf00      	nop
 8001e3c:	e006      	b.n	8001e4c <DMA_CheckFifoParam+0xe8>
      break;
 8001e3e:	bf00      	nop
 8001e40:	e004      	b.n	8001e4c <DMA_CheckFifoParam+0xe8>
      break;
 8001e42:	bf00      	nop
 8001e44:	e002      	b.n	8001e4c <DMA_CheckFifoParam+0xe8>
      break;   
 8001e46:	bf00      	nop
 8001e48:	e000      	b.n	8001e4c <DMA_CheckFifoParam+0xe8>
      break;
 8001e4a:	bf00      	nop
    }
  } 
  
  return status; 
 8001e4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	3714      	adds	r7, #20
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr
 8001e5a:	bf00      	nop

08001e5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b089      	sub	sp, #36	@ 0x24
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
 8001e64:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e66:	2300      	movs	r3, #0
 8001e68:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e72:	2300      	movs	r3, #0
 8001e74:	61fb      	str	r3, [r7, #28]
 8001e76:	e165      	b.n	8002144 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e78:	2201      	movs	r2, #1
 8001e7a:	69fb      	ldr	r3, [r7, #28]
 8001e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e80:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	697a      	ldr	r2, [r7, #20]
 8001e88:	4013      	ands	r3, r2
 8001e8a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e8c:	693a      	ldr	r2, [r7, #16]
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	429a      	cmp	r2, r3
 8001e92:	f040 8154 	bne.w	800213e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	f003 0303 	and.w	r3, r3, #3
 8001e9e:	2b01      	cmp	r3, #1
 8001ea0:	d005      	beq.n	8001eae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001eaa:	2b02      	cmp	r3, #2
 8001eac:	d130      	bne.n	8001f10 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001eb4:	69fb      	ldr	r3, [r7, #28]
 8001eb6:	005b      	lsls	r3, r3, #1
 8001eb8:	2203      	movs	r2, #3
 8001eba:	fa02 f303 	lsl.w	r3, r2, r3
 8001ebe:	43db      	mvns	r3, r3
 8001ec0:	69ba      	ldr	r2, [r7, #24]
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	68da      	ldr	r2, [r3, #12]
 8001eca:	69fb      	ldr	r3, [r7, #28]
 8001ecc:	005b      	lsls	r3, r3, #1
 8001ece:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed2:	69ba      	ldr	r2, [r7, #24]
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	69ba      	ldr	r2, [r7, #24]
 8001edc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	69fb      	ldr	r3, [r7, #28]
 8001ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8001eec:	43db      	mvns	r3, r3
 8001eee:	69ba      	ldr	r2, [r7, #24]
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	091b      	lsrs	r3, r3, #4
 8001efa:	f003 0201 	and.w	r2, r3, #1
 8001efe:	69fb      	ldr	r3, [r7, #28]
 8001f00:	fa02 f303 	lsl.w	r3, r2, r3
 8001f04:	69ba      	ldr	r2, [r7, #24]
 8001f06:	4313      	orrs	r3, r2
 8001f08:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	69ba      	ldr	r2, [r7, #24]
 8001f0e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	f003 0303 	and.w	r3, r3, #3
 8001f18:	2b03      	cmp	r3, #3
 8001f1a:	d017      	beq.n	8001f4c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	68db      	ldr	r3, [r3, #12]
 8001f20:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f22:	69fb      	ldr	r3, [r7, #28]
 8001f24:	005b      	lsls	r3, r3, #1
 8001f26:	2203      	movs	r2, #3
 8001f28:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2c:	43db      	mvns	r3, r3
 8001f2e:	69ba      	ldr	r2, [r7, #24]
 8001f30:	4013      	ands	r3, r2
 8001f32:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	689a      	ldr	r2, [r3, #8]
 8001f38:	69fb      	ldr	r3, [r7, #28]
 8001f3a:	005b      	lsls	r3, r3, #1
 8001f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f40:	69ba      	ldr	r2, [r7, #24]
 8001f42:	4313      	orrs	r3, r2
 8001f44:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	69ba      	ldr	r2, [r7, #24]
 8001f4a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	f003 0303 	and.w	r3, r3, #3
 8001f54:	2b02      	cmp	r3, #2
 8001f56:	d123      	bne.n	8001fa0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f58:	69fb      	ldr	r3, [r7, #28]
 8001f5a:	08da      	lsrs	r2, r3, #3
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	3208      	adds	r2, #8
 8001f60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f64:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f66:	69fb      	ldr	r3, [r7, #28]
 8001f68:	f003 0307 	and.w	r3, r3, #7
 8001f6c:	009b      	lsls	r3, r3, #2
 8001f6e:	220f      	movs	r2, #15
 8001f70:	fa02 f303 	lsl.w	r3, r2, r3
 8001f74:	43db      	mvns	r3, r3
 8001f76:	69ba      	ldr	r2, [r7, #24]
 8001f78:	4013      	ands	r3, r2
 8001f7a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	691a      	ldr	r2, [r3, #16]
 8001f80:	69fb      	ldr	r3, [r7, #28]
 8001f82:	f003 0307 	and.w	r3, r3, #7
 8001f86:	009b      	lsls	r3, r3, #2
 8001f88:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8c:	69ba      	ldr	r2, [r7, #24]
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f92:	69fb      	ldr	r3, [r7, #28]
 8001f94:	08da      	lsrs	r2, r3, #3
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	3208      	adds	r2, #8
 8001f9a:	69b9      	ldr	r1, [r7, #24]
 8001f9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001fa6:	69fb      	ldr	r3, [r7, #28]
 8001fa8:	005b      	lsls	r3, r3, #1
 8001faa:	2203      	movs	r2, #3
 8001fac:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb0:	43db      	mvns	r3, r3
 8001fb2:	69ba      	ldr	r2, [r7, #24]
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	f003 0203 	and.w	r2, r3, #3
 8001fc0:	69fb      	ldr	r3, [r7, #28]
 8001fc2:	005b      	lsls	r3, r3, #1
 8001fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc8:	69ba      	ldr	r2, [r7, #24]
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	69ba      	ldr	r2, [r7, #24]
 8001fd2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	f000 80ae 	beq.w	800213e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	60fb      	str	r3, [r7, #12]
 8001fe6:	4b5d      	ldr	r3, [pc, #372]	@ (800215c <HAL_GPIO_Init+0x300>)
 8001fe8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fea:	4a5c      	ldr	r2, [pc, #368]	@ (800215c <HAL_GPIO_Init+0x300>)
 8001fec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ff0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ff2:	4b5a      	ldr	r3, [pc, #360]	@ (800215c <HAL_GPIO_Init+0x300>)
 8001ff4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ff6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ffa:	60fb      	str	r3, [r7, #12]
 8001ffc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ffe:	4a58      	ldr	r2, [pc, #352]	@ (8002160 <HAL_GPIO_Init+0x304>)
 8002000:	69fb      	ldr	r3, [r7, #28]
 8002002:	089b      	lsrs	r3, r3, #2
 8002004:	3302      	adds	r3, #2
 8002006:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800200a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800200c:	69fb      	ldr	r3, [r7, #28]
 800200e:	f003 0303 	and.w	r3, r3, #3
 8002012:	009b      	lsls	r3, r3, #2
 8002014:	220f      	movs	r2, #15
 8002016:	fa02 f303 	lsl.w	r3, r2, r3
 800201a:	43db      	mvns	r3, r3
 800201c:	69ba      	ldr	r2, [r7, #24]
 800201e:	4013      	ands	r3, r2
 8002020:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	4a4f      	ldr	r2, [pc, #316]	@ (8002164 <HAL_GPIO_Init+0x308>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d025      	beq.n	8002076 <HAL_GPIO_Init+0x21a>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	4a4e      	ldr	r2, [pc, #312]	@ (8002168 <HAL_GPIO_Init+0x30c>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d01f      	beq.n	8002072 <HAL_GPIO_Init+0x216>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	4a4d      	ldr	r2, [pc, #308]	@ (800216c <HAL_GPIO_Init+0x310>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d019      	beq.n	800206e <HAL_GPIO_Init+0x212>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	4a4c      	ldr	r2, [pc, #304]	@ (8002170 <HAL_GPIO_Init+0x314>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d013      	beq.n	800206a <HAL_GPIO_Init+0x20e>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4a4b      	ldr	r2, [pc, #300]	@ (8002174 <HAL_GPIO_Init+0x318>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d00d      	beq.n	8002066 <HAL_GPIO_Init+0x20a>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	4a4a      	ldr	r2, [pc, #296]	@ (8002178 <HAL_GPIO_Init+0x31c>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d007      	beq.n	8002062 <HAL_GPIO_Init+0x206>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	4a49      	ldr	r2, [pc, #292]	@ (800217c <HAL_GPIO_Init+0x320>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d101      	bne.n	800205e <HAL_GPIO_Init+0x202>
 800205a:	2306      	movs	r3, #6
 800205c:	e00c      	b.n	8002078 <HAL_GPIO_Init+0x21c>
 800205e:	2307      	movs	r3, #7
 8002060:	e00a      	b.n	8002078 <HAL_GPIO_Init+0x21c>
 8002062:	2305      	movs	r3, #5
 8002064:	e008      	b.n	8002078 <HAL_GPIO_Init+0x21c>
 8002066:	2304      	movs	r3, #4
 8002068:	e006      	b.n	8002078 <HAL_GPIO_Init+0x21c>
 800206a:	2303      	movs	r3, #3
 800206c:	e004      	b.n	8002078 <HAL_GPIO_Init+0x21c>
 800206e:	2302      	movs	r3, #2
 8002070:	e002      	b.n	8002078 <HAL_GPIO_Init+0x21c>
 8002072:	2301      	movs	r3, #1
 8002074:	e000      	b.n	8002078 <HAL_GPIO_Init+0x21c>
 8002076:	2300      	movs	r3, #0
 8002078:	69fa      	ldr	r2, [r7, #28]
 800207a:	f002 0203 	and.w	r2, r2, #3
 800207e:	0092      	lsls	r2, r2, #2
 8002080:	4093      	lsls	r3, r2
 8002082:	69ba      	ldr	r2, [r7, #24]
 8002084:	4313      	orrs	r3, r2
 8002086:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002088:	4935      	ldr	r1, [pc, #212]	@ (8002160 <HAL_GPIO_Init+0x304>)
 800208a:	69fb      	ldr	r3, [r7, #28]
 800208c:	089b      	lsrs	r3, r3, #2
 800208e:	3302      	adds	r3, #2
 8002090:	69ba      	ldr	r2, [r7, #24]
 8002092:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002096:	4b3a      	ldr	r3, [pc, #232]	@ (8002180 <HAL_GPIO_Init+0x324>)
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	43db      	mvns	r3, r3
 80020a0:	69ba      	ldr	r2, [r7, #24]
 80020a2:	4013      	ands	r3, r2
 80020a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d003      	beq.n	80020ba <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80020b2:	69ba      	ldr	r2, [r7, #24]
 80020b4:	693b      	ldr	r3, [r7, #16]
 80020b6:	4313      	orrs	r3, r2
 80020b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80020ba:	4a31      	ldr	r2, [pc, #196]	@ (8002180 <HAL_GPIO_Init+0x324>)
 80020bc:	69bb      	ldr	r3, [r7, #24]
 80020be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020c0:	4b2f      	ldr	r3, [pc, #188]	@ (8002180 <HAL_GPIO_Init+0x324>)
 80020c2:	68db      	ldr	r3, [r3, #12]
 80020c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	43db      	mvns	r3, r3
 80020ca:	69ba      	ldr	r2, [r7, #24]
 80020cc:	4013      	ands	r3, r2
 80020ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d003      	beq.n	80020e4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80020dc:	69ba      	ldr	r2, [r7, #24]
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	4313      	orrs	r3, r2
 80020e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80020e4:	4a26      	ldr	r2, [pc, #152]	@ (8002180 <HAL_GPIO_Init+0x324>)
 80020e6:	69bb      	ldr	r3, [r7, #24]
 80020e8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80020ea:	4b25      	ldr	r3, [pc, #148]	@ (8002180 <HAL_GPIO_Init+0x324>)
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020f0:	693b      	ldr	r3, [r7, #16]
 80020f2:	43db      	mvns	r3, r3
 80020f4:	69ba      	ldr	r2, [r7, #24]
 80020f6:	4013      	ands	r3, r2
 80020f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002102:	2b00      	cmp	r3, #0
 8002104:	d003      	beq.n	800210e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002106:	69ba      	ldr	r2, [r7, #24]
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	4313      	orrs	r3, r2
 800210c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800210e:	4a1c      	ldr	r2, [pc, #112]	@ (8002180 <HAL_GPIO_Init+0x324>)
 8002110:	69bb      	ldr	r3, [r7, #24]
 8002112:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002114:	4b1a      	ldr	r3, [pc, #104]	@ (8002180 <HAL_GPIO_Init+0x324>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	43db      	mvns	r3, r3
 800211e:	69ba      	ldr	r2, [r7, #24]
 8002120:	4013      	ands	r3, r2
 8002122:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800212c:	2b00      	cmp	r3, #0
 800212e:	d003      	beq.n	8002138 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002130:	69ba      	ldr	r2, [r7, #24]
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	4313      	orrs	r3, r2
 8002136:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002138:	4a11      	ldr	r2, [pc, #68]	@ (8002180 <HAL_GPIO_Init+0x324>)
 800213a:	69bb      	ldr	r3, [r7, #24]
 800213c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800213e:	69fb      	ldr	r3, [r7, #28]
 8002140:	3301      	adds	r3, #1
 8002142:	61fb      	str	r3, [r7, #28]
 8002144:	69fb      	ldr	r3, [r7, #28]
 8002146:	2b0f      	cmp	r3, #15
 8002148:	f67f ae96 	bls.w	8001e78 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800214c:	bf00      	nop
 800214e:	bf00      	nop
 8002150:	3724      	adds	r7, #36	@ 0x24
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr
 800215a:	bf00      	nop
 800215c:	40023800 	.word	0x40023800
 8002160:	40013800 	.word	0x40013800
 8002164:	40020000 	.word	0x40020000
 8002168:	40020400 	.word	0x40020400
 800216c:	40020800 	.word	0x40020800
 8002170:	40020c00 	.word	0x40020c00
 8002174:	40021000 	.word	0x40021000
 8002178:	40021400 	.word	0x40021400
 800217c:	40021800 	.word	0x40021800
 8002180:	40013c00 	.word	0x40013c00

08002184 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002184:	b480      	push	{r7}
 8002186:	b083      	sub	sp, #12
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
 800218c:	460b      	mov	r3, r1
 800218e:	807b      	strh	r3, [r7, #2]
 8002190:	4613      	mov	r3, r2
 8002192:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002194:	787b      	ldrb	r3, [r7, #1]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d003      	beq.n	80021a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800219a:	887a      	ldrh	r2, [r7, #2]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80021a0:	e003      	b.n	80021aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80021a2:	887b      	ldrh	r3, [r7, #2]
 80021a4:	041a      	lsls	r2, r3, #16
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	619a      	str	r2, [r3, #24]
}
 80021aa:	bf00      	nop
 80021ac:	370c      	adds	r7, #12
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr
	...

080021b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b084      	sub	sp, #16
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
 80021c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d101      	bne.n	80021cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021c8:	2301      	movs	r3, #1
 80021ca:	e0cc      	b.n	8002366 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80021cc:	4b68      	ldr	r3, [pc, #416]	@ (8002370 <HAL_RCC_ClockConfig+0x1b8>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f003 030f 	and.w	r3, r3, #15
 80021d4:	683a      	ldr	r2, [r7, #0]
 80021d6:	429a      	cmp	r2, r3
 80021d8:	d90c      	bls.n	80021f4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021da:	4b65      	ldr	r3, [pc, #404]	@ (8002370 <HAL_RCC_ClockConfig+0x1b8>)
 80021dc:	683a      	ldr	r2, [r7, #0]
 80021de:	b2d2      	uxtb	r2, r2
 80021e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021e2:	4b63      	ldr	r3, [pc, #396]	@ (8002370 <HAL_RCC_ClockConfig+0x1b8>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f003 030f 	and.w	r3, r3, #15
 80021ea:	683a      	ldr	r2, [r7, #0]
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d001      	beq.n	80021f4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80021f0:	2301      	movs	r3, #1
 80021f2:	e0b8      	b.n	8002366 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f003 0302 	and.w	r3, r3, #2
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d020      	beq.n	8002242 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f003 0304 	and.w	r3, r3, #4
 8002208:	2b00      	cmp	r3, #0
 800220a:	d005      	beq.n	8002218 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800220c:	4b59      	ldr	r3, [pc, #356]	@ (8002374 <HAL_RCC_ClockConfig+0x1bc>)
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	4a58      	ldr	r2, [pc, #352]	@ (8002374 <HAL_RCC_ClockConfig+0x1bc>)
 8002212:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002216:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f003 0308 	and.w	r3, r3, #8
 8002220:	2b00      	cmp	r3, #0
 8002222:	d005      	beq.n	8002230 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002224:	4b53      	ldr	r3, [pc, #332]	@ (8002374 <HAL_RCC_ClockConfig+0x1bc>)
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	4a52      	ldr	r2, [pc, #328]	@ (8002374 <HAL_RCC_ClockConfig+0x1bc>)
 800222a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800222e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002230:	4b50      	ldr	r3, [pc, #320]	@ (8002374 <HAL_RCC_ClockConfig+0x1bc>)
 8002232:	689b      	ldr	r3, [r3, #8]
 8002234:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	689b      	ldr	r3, [r3, #8]
 800223c:	494d      	ldr	r1, [pc, #308]	@ (8002374 <HAL_RCC_ClockConfig+0x1bc>)
 800223e:	4313      	orrs	r3, r2
 8002240:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 0301 	and.w	r3, r3, #1
 800224a:	2b00      	cmp	r3, #0
 800224c:	d044      	beq.n	80022d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	2b01      	cmp	r3, #1
 8002254:	d107      	bne.n	8002266 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002256:	4b47      	ldr	r3, [pc, #284]	@ (8002374 <HAL_RCC_ClockConfig+0x1bc>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800225e:	2b00      	cmp	r3, #0
 8002260:	d119      	bne.n	8002296 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	e07f      	b.n	8002366 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	2b02      	cmp	r3, #2
 800226c:	d003      	beq.n	8002276 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002272:	2b03      	cmp	r3, #3
 8002274:	d107      	bne.n	8002286 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002276:	4b3f      	ldr	r3, [pc, #252]	@ (8002374 <HAL_RCC_ClockConfig+0x1bc>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800227e:	2b00      	cmp	r3, #0
 8002280:	d109      	bne.n	8002296 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	e06f      	b.n	8002366 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002286:	4b3b      	ldr	r3, [pc, #236]	@ (8002374 <HAL_RCC_ClockConfig+0x1bc>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f003 0302 	and.w	r3, r3, #2
 800228e:	2b00      	cmp	r3, #0
 8002290:	d101      	bne.n	8002296 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e067      	b.n	8002366 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002296:	4b37      	ldr	r3, [pc, #220]	@ (8002374 <HAL_RCC_ClockConfig+0x1bc>)
 8002298:	689b      	ldr	r3, [r3, #8]
 800229a:	f023 0203 	bic.w	r2, r3, #3
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	4934      	ldr	r1, [pc, #208]	@ (8002374 <HAL_RCC_ClockConfig+0x1bc>)
 80022a4:	4313      	orrs	r3, r2
 80022a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022a8:	f7ff f9ae 	bl	8001608 <HAL_GetTick>
 80022ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022ae:	e00a      	b.n	80022c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022b0:	f7ff f9aa 	bl	8001608 <HAL_GetTick>
 80022b4:	4602      	mov	r2, r0
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	1ad3      	subs	r3, r2, r3
 80022ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022be:	4293      	cmp	r3, r2
 80022c0:	d901      	bls.n	80022c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80022c2:	2303      	movs	r3, #3
 80022c4:	e04f      	b.n	8002366 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022c6:	4b2b      	ldr	r3, [pc, #172]	@ (8002374 <HAL_RCC_ClockConfig+0x1bc>)
 80022c8:	689b      	ldr	r3, [r3, #8]
 80022ca:	f003 020c 	and.w	r2, r3, #12
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	009b      	lsls	r3, r3, #2
 80022d4:	429a      	cmp	r2, r3
 80022d6:	d1eb      	bne.n	80022b0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80022d8:	4b25      	ldr	r3, [pc, #148]	@ (8002370 <HAL_RCC_ClockConfig+0x1b8>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f003 030f 	and.w	r3, r3, #15
 80022e0:	683a      	ldr	r2, [r7, #0]
 80022e2:	429a      	cmp	r2, r3
 80022e4:	d20c      	bcs.n	8002300 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022e6:	4b22      	ldr	r3, [pc, #136]	@ (8002370 <HAL_RCC_ClockConfig+0x1b8>)
 80022e8:	683a      	ldr	r2, [r7, #0]
 80022ea:	b2d2      	uxtb	r2, r2
 80022ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022ee:	4b20      	ldr	r3, [pc, #128]	@ (8002370 <HAL_RCC_ClockConfig+0x1b8>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f003 030f 	and.w	r3, r3, #15
 80022f6:	683a      	ldr	r2, [r7, #0]
 80022f8:	429a      	cmp	r2, r3
 80022fa:	d001      	beq.n	8002300 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80022fc:	2301      	movs	r3, #1
 80022fe:	e032      	b.n	8002366 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f003 0304 	and.w	r3, r3, #4
 8002308:	2b00      	cmp	r3, #0
 800230a:	d008      	beq.n	800231e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800230c:	4b19      	ldr	r3, [pc, #100]	@ (8002374 <HAL_RCC_ClockConfig+0x1bc>)
 800230e:	689b      	ldr	r3, [r3, #8]
 8002310:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	68db      	ldr	r3, [r3, #12]
 8002318:	4916      	ldr	r1, [pc, #88]	@ (8002374 <HAL_RCC_ClockConfig+0x1bc>)
 800231a:	4313      	orrs	r3, r2
 800231c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 0308 	and.w	r3, r3, #8
 8002326:	2b00      	cmp	r3, #0
 8002328:	d009      	beq.n	800233e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800232a:	4b12      	ldr	r3, [pc, #72]	@ (8002374 <HAL_RCC_ClockConfig+0x1bc>)
 800232c:	689b      	ldr	r3, [r3, #8]
 800232e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	691b      	ldr	r3, [r3, #16]
 8002336:	00db      	lsls	r3, r3, #3
 8002338:	490e      	ldr	r1, [pc, #56]	@ (8002374 <HAL_RCC_ClockConfig+0x1bc>)
 800233a:	4313      	orrs	r3, r2
 800233c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800233e:	f000 f855 	bl	80023ec <HAL_RCC_GetSysClockFreq>
 8002342:	4602      	mov	r2, r0
 8002344:	4b0b      	ldr	r3, [pc, #44]	@ (8002374 <HAL_RCC_ClockConfig+0x1bc>)
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	091b      	lsrs	r3, r3, #4
 800234a:	f003 030f 	and.w	r3, r3, #15
 800234e:	490a      	ldr	r1, [pc, #40]	@ (8002378 <HAL_RCC_ClockConfig+0x1c0>)
 8002350:	5ccb      	ldrb	r3, [r1, r3]
 8002352:	fa22 f303 	lsr.w	r3, r2, r3
 8002356:	4a09      	ldr	r2, [pc, #36]	@ (800237c <HAL_RCC_ClockConfig+0x1c4>)
 8002358:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800235a:	4b09      	ldr	r3, [pc, #36]	@ (8002380 <HAL_RCC_ClockConfig+0x1c8>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4618      	mov	r0, r3
 8002360:	f7ff f90e 	bl	8001580 <HAL_InitTick>

  return HAL_OK;
 8002364:	2300      	movs	r3, #0
}
 8002366:	4618      	mov	r0, r3
 8002368:	3710      	adds	r7, #16
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	40023c00 	.word	0x40023c00
 8002374:	40023800 	.word	0x40023800
 8002378:	08009830 	.word	0x08009830
 800237c:	20000000 	.word	0x20000000
 8002380:	20000004 	.word	0x20000004

08002384 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002384:	b480      	push	{r7}
 8002386:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002388:	4b03      	ldr	r3, [pc, #12]	@ (8002398 <HAL_RCC_GetHCLKFreq+0x14>)
 800238a:	681b      	ldr	r3, [r3, #0]
}
 800238c:	4618      	mov	r0, r3
 800238e:	46bd      	mov	sp, r7
 8002390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002394:	4770      	bx	lr
 8002396:	bf00      	nop
 8002398:	20000000 	.word	0x20000000

0800239c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80023a0:	f7ff fff0 	bl	8002384 <HAL_RCC_GetHCLKFreq>
 80023a4:	4602      	mov	r2, r0
 80023a6:	4b05      	ldr	r3, [pc, #20]	@ (80023bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	0a9b      	lsrs	r3, r3, #10
 80023ac:	f003 0307 	and.w	r3, r3, #7
 80023b0:	4903      	ldr	r1, [pc, #12]	@ (80023c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80023b2:	5ccb      	ldrb	r3, [r1, r3]
 80023b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	bd80      	pop	{r7, pc}
 80023bc:	40023800 	.word	0x40023800
 80023c0:	08009840 	.word	0x08009840

080023c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80023c8:	f7ff ffdc 	bl	8002384 <HAL_RCC_GetHCLKFreq>
 80023cc:	4602      	mov	r2, r0
 80023ce:	4b05      	ldr	r3, [pc, #20]	@ (80023e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	0b5b      	lsrs	r3, r3, #13
 80023d4:	f003 0307 	and.w	r3, r3, #7
 80023d8:	4903      	ldr	r1, [pc, #12]	@ (80023e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80023da:	5ccb      	ldrb	r3, [r1, r3]
 80023dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	bd80      	pop	{r7, pc}
 80023e4:	40023800 	.word	0x40023800
 80023e8:	08009840 	.word	0x08009840

080023ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80023f0:	b0ae      	sub	sp, #184	@ 0xb8
 80023f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80023f4:	2300      	movs	r3, #0
 80023f6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80023fa:	2300      	movs	r3, #0
 80023fc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8002400:	2300      	movs	r3, #0
 8002402:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8002406:	2300      	movs	r3, #0
 8002408:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 800240c:	2300      	movs	r3, #0
 800240e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002412:	4bcb      	ldr	r3, [pc, #812]	@ (8002740 <HAL_RCC_GetSysClockFreq+0x354>)
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	f003 030c 	and.w	r3, r3, #12
 800241a:	2b0c      	cmp	r3, #12
 800241c:	f200 8206 	bhi.w	800282c <HAL_RCC_GetSysClockFreq+0x440>
 8002420:	a201      	add	r2, pc, #4	@ (adr r2, 8002428 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002422:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002426:	bf00      	nop
 8002428:	0800245d 	.word	0x0800245d
 800242c:	0800282d 	.word	0x0800282d
 8002430:	0800282d 	.word	0x0800282d
 8002434:	0800282d 	.word	0x0800282d
 8002438:	08002465 	.word	0x08002465
 800243c:	0800282d 	.word	0x0800282d
 8002440:	0800282d 	.word	0x0800282d
 8002444:	0800282d 	.word	0x0800282d
 8002448:	0800246d 	.word	0x0800246d
 800244c:	0800282d 	.word	0x0800282d
 8002450:	0800282d 	.word	0x0800282d
 8002454:	0800282d 	.word	0x0800282d
 8002458:	0800265d 	.word	0x0800265d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800245c:	4bb9      	ldr	r3, [pc, #740]	@ (8002744 <HAL_RCC_GetSysClockFreq+0x358>)
 800245e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 8002462:	e1e7      	b.n	8002834 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002464:	4bb8      	ldr	r3, [pc, #736]	@ (8002748 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002466:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800246a:	e1e3      	b.n	8002834 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800246c:	4bb4      	ldr	r3, [pc, #720]	@ (8002740 <HAL_RCC_GetSysClockFreq+0x354>)
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002474:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002478:	4bb1      	ldr	r3, [pc, #708]	@ (8002740 <HAL_RCC_GetSysClockFreq+0x354>)
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002480:	2b00      	cmp	r3, #0
 8002482:	d071      	beq.n	8002568 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002484:	4bae      	ldr	r3, [pc, #696]	@ (8002740 <HAL_RCC_GetSysClockFreq+0x354>)
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	099b      	lsrs	r3, r3, #6
 800248a:	2200      	movs	r2, #0
 800248c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002490:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002494:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002498:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800249c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80024a0:	2300      	movs	r3, #0
 80024a2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80024a6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80024aa:	4622      	mov	r2, r4
 80024ac:	462b      	mov	r3, r5
 80024ae:	f04f 0000 	mov.w	r0, #0
 80024b2:	f04f 0100 	mov.w	r1, #0
 80024b6:	0159      	lsls	r1, r3, #5
 80024b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80024bc:	0150      	lsls	r0, r2, #5
 80024be:	4602      	mov	r2, r0
 80024c0:	460b      	mov	r3, r1
 80024c2:	4621      	mov	r1, r4
 80024c4:	1a51      	subs	r1, r2, r1
 80024c6:	6439      	str	r1, [r7, #64]	@ 0x40
 80024c8:	4629      	mov	r1, r5
 80024ca:	eb63 0301 	sbc.w	r3, r3, r1
 80024ce:	647b      	str	r3, [r7, #68]	@ 0x44
 80024d0:	f04f 0200 	mov.w	r2, #0
 80024d4:	f04f 0300 	mov.w	r3, #0
 80024d8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80024dc:	4649      	mov	r1, r9
 80024de:	018b      	lsls	r3, r1, #6
 80024e0:	4641      	mov	r1, r8
 80024e2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80024e6:	4641      	mov	r1, r8
 80024e8:	018a      	lsls	r2, r1, #6
 80024ea:	4641      	mov	r1, r8
 80024ec:	1a51      	subs	r1, r2, r1
 80024ee:	63b9      	str	r1, [r7, #56]	@ 0x38
 80024f0:	4649      	mov	r1, r9
 80024f2:	eb63 0301 	sbc.w	r3, r3, r1
 80024f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80024f8:	f04f 0200 	mov.w	r2, #0
 80024fc:	f04f 0300 	mov.w	r3, #0
 8002500:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8002504:	4649      	mov	r1, r9
 8002506:	00cb      	lsls	r3, r1, #3
 8002508:	4641      	mov	r1, r8
 800250a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800250e:	4641      	mov	r1, r8
 8002510:	00ca      	lsls	r2, r1, #3
 8002512:	4610      	mov	r0, r2
 8002514:	4619      	mov	r1, r3
 8002516:	4603      	mov	r3, r0
 8002518:	4622      	mov	r2, r4
 800251a:	189b      	adds	r3, r3, r2
 800251c:	633b      	str	r3, [r7, #48]	@ 0x30
 800251e:	462b      	mov	r3, r5
 8002520:	460a      	mov	r2, r1
 8002522:	eb42 0303 	adc.w	r3, r2, r3
 8002526:	637b      	str	r3, [r7, #52]	@ 0x34
 8002528:	f04f 0200 	mov.w	r2, #0
 800252c:	f04f 0300 	mov.w	r3, #0
 8002530:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002534:	4629      	mov	r1, r5
 8002536:	024b      	lsls	r3, r1, #9
 8002538:	4621      	mov	r1, r4
 800253a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800253e:	4621      	mov	r1, r4
 8002540:	024a      	lsls	r2, r1, #9
 8002542:	4610      	mov	r0, r2
 8002544:	4619      	mov	r1, r3
 8002546:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800254a:	2200      	movs	r2, #0
 800254c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002550:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002554:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002558:	f7fe f9b0 	bl	80008bc <__aeabi_uldivmod>
 800255c:	4602      	mov	r2, r0
 800255e:	460b      	mov	r3, r1
 8002560:	4613      	mov	r3, r2
 8002562:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002566:	e067      	b.n	8002638 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002568:	4b75      	ldr	r3, [pc, #468]	@ (8002740 <HAL_RCC_GetSysClockFreq+0x354>)
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	099b      	lsrs	r3, r3, #6
 800256e:	2200      	movs	r2, #0
 8002570:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002574:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8002578:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800257c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002580:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002582:	2300      	movs	r3, #0
 8002584:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002586:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800258a:	4622      	mov	r2, r4
 800258c:	462b      	mov	r3, r5
 800258e:	f04f 0000 	mov.w	r0, #0
 8002592:	f04f 0100 	mov.w	r1, #0
 8002596:	0159      	lsls	r1, r3, #5
 8002598:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800259c:	0150      	lsls	r0, r2, #5
 800259e:	4602      	mov	r2, r0
 80025a0:	460b      	mov	r3, r1
 80025a2:	4621      	mov	r1, r4
 80025a4:	1a51      	subs	r1, r2, r1
 80025a6:	62b9      	str	r1, [r7, #40]	@ 0x28
 80025a8:	4629      	mov	r1, r5
 80025aa:	eb63 0301 	sbc.w	r3, r3, r1
 80025ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80025b0:	f04f 0200 	mov.w	r2, #0
 80025b4:	f04f 0300 	mov.w	r3, #0
 80025b8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80025bc:	4649      	mov	r1, r9
 80025be:	018b      	lsls	r3, r1, #6
 80025c0:	4641      	mov	r1, r8
 80025c2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80025c6:	4641      	mov	r1, r8
 80025c8:	018a      	lsls	r2, r1, #6
 80025ca:	4641      	mov	r1, r8
 80025cc:	ebb2 0a01 	subs.w	sl, r2, r1
 80025d0:	4649      	mov	r1, r9
 80025d2:	eb63 0b01 	sbc.w	fp, r3, r1
 80025d6:	f04f 0200 	mov.w	r2, #0
 80025da:	f04f 0300 	mov.w	r3, #0
 80025de:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80025e2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80025e6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80025ea:	4692      	mov	sl, r2
 80025ec:	469b      	mov	fp, r3
 80025ee:	4623      	mov	r3, r4
 80025f0:	eb1a 0303 	adds.w	r3, sl, r3
 80025f4:	623b      	str	r3, [r7, #32]
 80025f6:	462b      	mov	r3, r5
 80025f8:	eb4b 0303 	adc.w	r3, fp, r3
 80025fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80025fe:	f04f 0200 	mov.w	r2, #0
 8002602:	f04f 0300 	mov.w	r3, #0
 8002606:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800260a:	4629      	mov	r1, r5
 800260c:	028b      	lsls	r3, r1, #10
 800260e:	4621      	mov	r1, r4
 8002610:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002614:	4621      	mov	r1, r4
 8002616:	028a      	lsls	r2, r1, #10
 8002618:	4610      	mov	r0, r2
 800261a:	4619      	mov	r1, r3
 800261c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002620:	2200      	movs	r2, #0
 8002622:	673b      	str	r3, [r7, #112]	@ 0x70
 8002624:	677a      	str	r2, [r7, #116]	@ 0x74
 8002626:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800262a:	f7fe f947 	bl	80008bc <__aeabi_uldivmod>
 800262e:	4602      	mov	r2, r0
 8002630:	460b      	mov	r3, r1
 8002632:	4613      	mov	r3, r2
 8002634:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002638:	4b41      	ldr	r3, [pc, #260]	@ (8002740 <HAL_RCC_GetSysClockFreq+0x354>)
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	0c1b      	lsrs	r3, r3, #16
 800263e:	f003 0303 	and.w	r3, r3, #3
 8002642:	3301      	adds	r3, #1
 8002644:	005b      	lsls	r3, r3, #1
 8002646:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 800264a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800264e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002652:	fbb2 f3f3 	udiv	r3, r2, r3
 8002656:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800265a:	e0eb      	b.n	8002834 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800265c:	4b38      	ldr	r3, [pc, #224]	@ (8002740 <HAL_RCC_GetSysClockFreq+0x354>)
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002664:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002668:	4b35      	ldr	r3, [pc, #212]	@ (8002740 <HAL_RCC_GetSysClockFreq+0x354>)
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002670:	2b00      	cmp	r3, #0
 8002672:	d06b      	beq.n	800274c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002674:	4b32      	ldr	r3, [pc, #200]	@ (8002740 <HAL_RCC_GetSysClockFreq+0x354>)
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	099b      	lsrs	r3, r3, #6
 800267a:	2200      	movs	r2, #0
 800267c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800267e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002680:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002682:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002686:	663b      	str	r3, [r7, #96]	@ 0x60
 8002688:	2300      	movs	r3, #0
 800268a:	667b      	str	r3, [r7, #100]	@ 0x64
 800268c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002690:	4622      	mov	r2, r4
 8002692:	462b      	mov	r3, r5
 8002694:	f04f 0000 	mov.w	r0, #0
 8002698:	f04f 0100 	mov.w	r1, #0
 800269c:	0159      	lsls	r1, r3, #5
 800269e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80026a2:	0150      	lsls	r0, r2, #5
 80026a4:	4602      	mov	r2, r0
 80026a6:	460b      	mov	r3, r1
 80026a8:	4621      	mov	r1, r4
 80026aa:	1a51      	subs	r1, r2, r1
 80026ac:	61b9      	str	r1, [r7, #24]
 80026ae:	4629      	mov	r1, r5
 80026b0:	eb63 0301 	sbc.w	r3, r3, r1
 80026b4:	61fb      	str	r3, [r7, #28]
 80026b6:	f04f 0200 	mov.w	r2, #0
 80026ba:	f04f 0300 	mov.w	r3, #0
 80026be:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80026c2:	4659      	mov	r1, fp
 80026c4:	018b      	lsls	r3, r1, #6
 80026c6:	4651      	mov	r1, sl
 80026c8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80026cc:	4651      	mov	r1, sl
 80026ce:	018a      	lsls	r2, r1, #6
 80026d0:	4651      	mov	r1, sl
 80026d2:	ebb2 0801 	subs.w	r8, r2, r1
 80026d6:	4659      	mov	r1, fp
 80026d8:	eb63 0901 	sbc.w	r9, r3, r1
 80026dc:	f04f 0200 	mov.w	r2, #0
 80026e0:	f04f 0300 	mov.w	r3, #0
 80026e4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80026e8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80026ec:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80026f0:	4690      	mov	r8, r2
 80026f2:	4699      	mov	r9, r3
 80026f4:	4623      	mov	r3, r4
 80026f6:	eb18 0303 	adds.w	r3, r8, r3
 80026fa:	613b      	str	r3, [r7, #16]
 80026fc:	462b      	mov	r3, r5
 80026fe:	eb49 0303 	adc.w	r3, r9, r3
 8002702:	617b      	str	r3, [r7, #20]
 8002704:	f04f 0200 	mov.w	r2, #0
 8002708:	f04f 0300 	mov.w	r3, #0
 800270c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002710:	4629      	mov	r1, r5
 8002712:	024b      	lsls	r3, r1, #9
 8002714:	4621      	mov	r1, r4
 8002716:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800271a:	4621      	mov	r1, r4
 800271c:	024a      	lsls	r2, r1, #9
 800271e:	4610      	mov	r0, r2
 8002720:	4619      	mov	r1, r3
 8002722:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002726:	2200      	movs	r2, #0
 8002728:	65bb      	str	r3, [r7, #88]	@ 0x58
 800272a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800272c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002730:	f7fe f8c4 	bl	80008bc <__aeabi_uldivmod>
 8002734:	4602      	mov	r2, r0
 8002736:	460b      	mov	r3, r1
 8002738:	4613      	mov	r3, r2
 800273a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800273e:	e065      	b.n	800280c <HAL_RCC_GetSysClockFreq+0x420>
 8002740:	40023800 	.word	0x40023800
 8002744:	00f42400 	.word	0x00f42400
 8002748:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800274c:	4b3d      	ldr	r3, [pc, #244]	@ (8002844 <HAL_RCC_GetSysClockFreq+0x458>)
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	099b      	lsrs	r3, r3, #6
 8002752:	2200      	movs	r2, #0
 8002754:	4618      	mov	r0, r3
 8002756:	4611      	mov	r1, r2
 8002758:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800275c:	653b      	str	r3, [r7, #80]	@ 0x50
 800275e:	2300      	movs	r3, #0
 8002760:	657b      	str	r3, [r7, #84]	@ 0x54
 8002762:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8002766:	4642      	mov	r2, r8
 8002768:	464b      	mov	r3, r9
 800276a:	f04f 0000 	mov.w	r0, #0
 800276e:	f04f 0100 	mov.w	r1, #0
 8002772:	0159      	lsls	r1, r3, #5
 8002774:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002778:	0150      	lsls	r0, r2, #5
 800277a:	4602      	mov	r2, r0
 800277c:	460b      	mov	r3, r1
 800277e:	4641      	mov	r1, r8
 8002780:	1a51      	subs	r1, r2, r1
 8002782:	60b9      	str	r1, [r7, #8]
 8002784:	4649      	mov	r1, r9
 8002786:	eb63 0301 	sbc.w	r3, r3, r1
 800278a:	60fb      	str	r3, [r7, #12]
 800278c:	f04f 0200 	mov.w	r2, #0
 8002790:	f04f 0300 	mov.w	r3, #0
 8002794:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002798:	4659      	mov	r1, fp
 800279a:	018b      	lsls	r3, r1, #6
 800279c:	4651      	mov	r1, sl
 800279e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80027a2:	4651      	mov	r1, sl
 80027a4:	018a      	lsls	r2, r1, #6
 80027a6:	4651      	mov	r1, sl
 80027a8:	1a54      	subs	r4, r2, r1
 80027aa:	4659      	mov	r1, fp
 80027ac:	eb63 0501 	sbc.w	r5, r3, r1
 80027b0:	f04f 0200 	mov.w	r2, #0
 80027b4:	f04f 0300 	mov.w	r3, #0
 80027b8:	00eb      	lsls	r3, r5, #3
 80027ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80027be:	00e2      	lsls	r2, r4, #3
 80027c0:	4614      	mov	r4, r2
 80027c2:	461d      	mov	r5, r3
 80027c4:	4643      	mov	r3, r8
 80027c6:	18e3      	adds	r3, r4, r3
 80027c8:	603b      	str	r3, [r7, #0]
 80027ca:	464b      	mov	r3, r9
 80027cc:	eb45 0303 	adc.w	r3, r5, r3
 80027d0:	607b      	str	r3, [r7, #4]
 80027d2:	f04f 0200 	mov.w	r2, #0
 80027d6:	f04f 0300 	mov.w	r3, #0
 80027da:	e9d7 4500 	ldrd	r4, r5, [r7]
 80027de:	4629      	mov	r1, r5
 80027e0:	028b      	lsls	r3, r1, #10
 80027e2:	4621      	mov	r1, r4
 80027e4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80027e8:	4621      	mov	r1, r4
 80027ea:	028a      	lsls	r2, r1, #10
 80027ec:	4610      	mov	r0, r2
 80027ee:	4619      	mov	r1, r3
 80027f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80027f4:	2200      	movs	r2, #0
 80027f6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80027f8:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80027fa:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80027fe:	f7fe f85d 	bl	80008bc <__aeabi_uldivmod>
 8002802:	4602      	mov	r2, r0
 8002804:	460b      	mov	r3, r1
 8002806:	4613      	mov	r3, r2
 8002808:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800280c:	4b0d      	ldr	r3, [pc, #52]	@ (8002844 <HAL_RCC_GetSysClockFreq+0x458>)
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	0f1b      	lsrs	r3, r3, #28
 8002812:	f003 0307 	and.w	r3, r3, #7
 8002816:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 800281a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800281e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002822:	fbb2 f3f3 	udiv	r3, r2, r3
 8002826:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800282a:	e003      	b.n	8002834 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800282c:	4b06      	ldr	r3, [pc, #24]	@ (8002848 <HAL_RCC_GetSysClockFreq+0x45c>)
 800282e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002832:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002834:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8002838:	4618      	mov	r0, r3
 800283a:	37b8      	adds	r7, #184	@ 0xb8
 800283c:	46bd      	mov	sp, r7
 800283e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002842:	bf00      	nop
 8002844:	40023800 	.word	0x40023800
 8002848:	00f42400 	.word	0x00f42400

0800284c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b086      	sub	sp, #24
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d101      	bne.n	800285e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	e28d      	b.n	8002d7a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f003 0301 	and.w	r3, r3, #1
 8002866:	2b00      	cmp	r3, #0
 8002868:	f000 8083 	beq.w	8002972 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800286c:	4b94      	ldr	r3, [pc, #592]	@ (8002ac0 <HAL_RCC_OscConfig+0x274>)
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	f003 030c 	and.w	r3, r3, #12
 8002874:	2b04      	cmp	r3, #4
 8002876:	d019      	beq.n	80028ac <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002878:	4b91      	ldr	r3, [pc, #580]	@ (8002ac0 <HAL_RCC_OscConfig+0x274>)
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002880:	2b08      	cmp	r3, #8
 8002882:	d106      	bne.n	8002892 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002884:	4b8e      	ldr	r3, [pc, #568]	@ (8002ac0 <HAL_RCC_OscConfig+0x274>)
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800288c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002890:	d00c      	beq.n	80028ac <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002892:	4b8b      	ldr	r3, [pc, #556]	@ (8002ac0 <HAL_RCC_OscConfig+0x274>)
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800289a:	2b0c      	cmp	r3, #12
 800289c:	d112      	bne.n	80028c4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800289e:	4b88      	ldr	r3, [pc, #544]	@ (8002ac0 <HAL_RCC_OscConfig+0x274>)
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80028a6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80028aa:	d10b      	bne.n	80028c4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028ac:	4b84      	ldr	r3, [pc, #528]	@ (8002ac0 <HAL_RCC_OscConfig+0x274>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d05b      	beq.n	8002970 <HAL_RCC_OscConfig+0x124>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d157      	bne.n	8002970 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80028c0:	2301      	movs	r3, #1
 80028c2:	e25a      	b.n	8002d7a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80028cc:	d106      	bne.n	80028dc <HAL_RCC_OscConfig+0x90>
 80028ce:	4b7c      	ldr	r3, [pc, #496]	@ (8002ac0 <HAL_RCC_OscConfig+0x274>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a7b      	ldr	r2, [pc, #492]	@ (8002ac0 <HAL_RCC_OscConfig+0x274>)
 80028d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028d8:	6013      	str	r3, [r2, #0]
 80028da:	e01d      	b.n	8002918 <HAL_RCC_OscConfig+0xcc>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80028e4:	d10c      	bne.n	8002900 <HAL_RCC_OscConfig+0xb4>
 80028e6:	4b76      	ldr	r3, [pc, #472]	@ (8002ac0 <HAL_RCC_OscConfig+0x274>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a75      	ldr	r2, [pc, #468]	@ (8002ac0 <HAL_RCC_OscConfig+0x274>)
 80028ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80028f0:	6013      	str	r3, [r2, #0]
 80028f2:	4b73      	ldr	r3, [pc, #460]	@ (8002ac0 <HAL_RCC_OscConfig+0x274>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a72      	ldr	r2, [pc, #456]	@ (8002ac0 <HAL_RCC_OscConfig+0x274>)
 80028f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028fc:	6013      	str	r3, [r2, #0]
 80028fe:	e00b      	b.n	8002918 <HAL_RCC_OscConfig+0xcc>
 8002900:	4b6f      	ldr	r3, [pc, #444]	@ (8002ac0 <HAL_RCC_OscConfig+0x274>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a6e      	ldr	r2, [pc, #440]	@ (8002ac0 <HAL_RCC_OscConfig+0x274>)
 8002906:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800290a:	6013      	str	r3, [r2, #0]
 800290c:	4b6c      	ldr	r3, [pc, #432]	@ (8002ac0 <HAL_RCC_OscConfig+0x274>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a6b      	ldr	r2, [pc, #428]	@ (8002ac0 <HAL_RCC_OscConfig+0x274>)
 8002912:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002916:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d013      	beq.n	8002948 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002920:	f7fe fe72 	bl	8001608 <HAL_GetTick>
 8002924:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002926:	e008      	b.n	800293a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002928:	f7fe fe6e 	bl	8001608 <HAL_GetTick>
 800292c:	4602      	mov	r2, r0
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	1ad3      	subs	r3, r2, r3
 8002932:	2b64      	cmp	r3, #100	@ 0x64
 8002934:	d901      	bls.n	800293a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002936:	2303      	movs	r3, #3
 8002938:	e21f      	b.n	8002d7a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800293a:	4b61      	ldr	r3, [pc, #388]	@ (8002ac0 <HAL_RCC_OscConfig+0x274>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002942:	2b00      	cmp	r3, #0
 8002944:	d0f0      	beq.n	8002928 <HAL_RCC_OscConfig+0xdc>
 8002946:	e014      	b.n	8002972 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002948:	f7fe fe5e 	bl	8001608 <HAL_GetTick>
 800294c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800294e:	e008      	b.n	8002962 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002950:	f7fe fe5a 	bl	8001608 <HAL_GetTick>
 8002954:	4602      	mov	r2, r0
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	1ad3      	subs	r3, r2, r3
 800295a:	2b64      	cmp	r3, #100	@ 0x64
 800295c:	d901      	bls.n	8002962 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800295e:	2303      	movs	r3, #3
 8002960:	e20b      	b.n	8002d7a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002962:	4b57      	ldr	r3, [pc, #348]	@ (8002ac0 <HAL_RCC_OscConfig+0x274>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800296a:	2b00      	cmp	r3, #0
 800296c:	d1f0      	bne.n	8002950 <HAL_RCC_OscConfig+0x104>
 800296e:	e000      	b.n	8002972 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002970:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 0302 	and.w	r3, r3, #2
 800297a:	2b00      	cmp	r3, #0
 800297c:	d06f      	beq.n	8002a5e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800297e:	4b50      	ldr	r3, [pc, #320]	@ (8002ac0 <HAL_RCC_OscConfig+0x274>)
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	f003 030c 	and.w	r3, r3, #12
 8002986:	2b00      	cmp	r3, #0
 8002988:	d017      	beq.n	80029ba <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800298a:	4b4d      	ldr	r3, [pc, #308]	@ (8002ac0 <HAL_RCC_OscConfig+0x274>)
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002992:	2b08      	cmp	r3, #8
 8002994:	d105      	bne.n	80029a2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002996:	4b4a      	ldr	r3, [pc, #296]	@ (8002ac0 <HAL_RCC_OscConfig+0x274>)
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d00b      	beq.n	80029ba <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029a2:	4b47      	ldr	r3, [pc, #284]	@ (8002ac0 <HAL_RCC_OscConfig+0x274>)
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80029aa:	2b0c      	cmp	r3, #12
 80029ac:	d11c      	bne.n	80029e8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029ae:	4b44      	ldr	r3, [pc, #272]	@ (8002ac0 <HAL_RCC_OscConfig+0x274>)
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d116      	bne.n	80029e8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029ba:	4b41      	ldr	r3, [pc, #260]	@ (8002ac0 <HAL_RCC_OscConfig+0x274>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f003 0302 	and.w	r3, r3, #2
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d005      	beq.n	80029d2 <HAL_RCC_OscConfig+0x186>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	68db      	ldr	r3, [r3, #12]
 80029ca:	2b01      	cmp	r3, #1
 80029cc:	d001      	beq.n	80029d2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	e1d3      	b.n	8002d7a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029d2:	4b3b      	ldr	r3, [pc, #236]	@ (8002ac0 <HAL_RCC_OscConfig+0x274>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	691b      	ldr	r3, [r3, #16]
 80029de:	00db      	lsls	r3, r3, #3
 80029e0:	4937      	ldr	r1, [pc, #220]	@ (8002ac0 <HAL_RCC_OscConfig+0x274>)
 80029e2:	4313      	orrs	r3, r2
 80029e4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029e6:	e03a      	b.n	8002a5e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	68db      	ldr	r3, [r3, #12]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d020      	beq.n	8002a32 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029f0:	4b34      	ldr	r3, [pc, #208]	@ (8002ac4 <HAL_RCC_OscConfig+0x278>)
 80029f2:	2201      	movs	r2, #1
 80029f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029f6:	f7fe fe07 	bl	8001608 <HAL_GetTick>
 80029fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029fc:	e008      	b.n	8002a10 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029fe:	f7fe fe03 	bl	8001608 <HAL_GetTick>
 8002a02:	4602      	mov	r2, r0
 8002a04:	693b      	ldr	r3, [r7, #16]
 8002a06:	1ad3      	subs	r3, r2, r3
 8002a08:	2b02      	cmp	r3, #2
 8002a0a:	d901      	bls.n	8002a10 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002a0c:	2303      	movs	r3, #3
 8002a0e:	e1b4      	b.n	8002d7a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a10:	4b2b      	ldr	r3, [pc, #172]	@ (8002ac0 <HAL_RCC_OscConfig+0x274>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f003 0302 	and.w	r3, r3, #2
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d0f0      	beq.n	80029fe <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a1c:	4b28      	ldr	r3, [pc, #160]	@ (8002ac0 <HAL_RCC_OscConfig+0x274>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	691b      	ldr	r3, [r3, #16]
 8002a28:	00db      	lsls	r3, r3, #3
 8002a2a:	4925      	ldr	r1, [pc, #148]	@ (8002ac0 <HAL_RCC_OscConfig+0x274>)
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	600b      	str	r3, [r1, #0]
 8002a30:	e015      	b.n	8002a5e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a32:	4b24      	ldr	r3, [pc, #144]	@ (8002ac4 <HAL_RCC_OscConfig+0x278>)
 8002a34:	2200      	movs	r2, #0
 8002a36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a38:	f7fe fde6 	bl	8001608 <HAL_GetTick>
 8002a3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a3e:	e008      	b.n	8002a52 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a40:	f7fe fde2 	bl	8001608 <HAL_GetTick>
 8002a44:	4602      	mov	r2, r0
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	1ad3      	subs	r3, r2, r3
 8002a4a:	2b02      	cmp	r3, #2
 8002a4c:	d901      	bls.n	8002a52 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002a4e:	2303      	movs	r3, #3
 8002a50:	e193      	b.n	8002d7a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a52:	4b1b      	ldr	r3, [pc, #108]	@ (8002ac0 <HAL_RCC_OscConfig+0x274>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 0302 	and.w	r3, r3, #2
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d1f0      	bne.n	8002a40 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 0308 	and.w	r3, r3, #8
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d036      	beq.n	8002ad8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	695b      	ldr	r3, [r3, #20]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d016      	beq.n	8002aa0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a72:	4b15      	ldr	r3, [pc, #84]	@ (8002ac8 <HAL_RCC_OscConfig+0x27c>)
 8002a74:	2201      	movs	r2, #1
 8002a76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a78:	f7fe fdc6 	bl	8001608 <HAL_GetTick>
 8002a7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a7e:	e008      	b.n	8002a92 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a80:	f7fe fdc2 	bl	8001608 <HAL_GetTick>
 8002a84:	4602      	mov	r2, r0
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	1ad3      	subs	r3, r2, r3
 8002a8a:	2b02      	cmp	r3, #2
 8002a8c:	d901      	bls.n	8002a92 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002a8e:	2303      	movs	r3, #3
 8002a90:	e173      	b.n	8002d7a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a92:	4b0b      	ldr	r3, [pc, #44]	@ (8002ac0 <HAL_RCC_OscConfig+0x274>)
 8002a94:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a96:	f003 0302 	and.w	r3, r3, #2
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d0f0      	beq.n	8002a80 <HAL_RCC_OscConfig+0x234>
 8002a9e:	e01b      	b.n	8002ad8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002aa0:	4b09      	ldr	r3, [pc, #36]	@ (8002ac8 <HAL_RCC_OscConfig+0x27c>)
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002aa6:	f7fe fdaf 	bl	8001608 <HAL_GetTick>
 8002aaa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002aac:	e00e      	b.n	8002acc <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002aae:	f7fe fdab 	bl	8001608 <HAL_GetTick>
 8002ab2:	4602      	mov	r2, r0
 8002ab4:	693b      	ldr	r3, [r7, #16]
 8002ab6:	1ad3      	subs	r3, r2, r3
 8002ab8:	2b02      	cmp	r3, #2
 8002aba:	d907      	bls.n	8002acc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002abc:	2303      	movs	r3, #3
 8002abe:	e15c      	b.n	8002d7a <HAL_RCC_OscConfig+0x52e>
 8002ac0:	40023800 	.word	0x40023800
 8002ac4:	42470000 	.word	0x42470000
 8002ac8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002acc:	4b8a      	ldr	r3, [pc, #552]	@ (8002cf8 <HAL_RCC_OscConfig+0x4ac>)
 8002ace:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ad0:	f003 0302 	and.w	r3, r3, #2
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d1ea      	bne.n	8002aae <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f003 0304 	and.w	r3, r3, #4
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	f000 8097 	beq.w	8002c14 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002aea:	4b83      	ldr	r3, [pc, #524]	@ (8002cf8 <HAL_RCC_OscConfig+0x4ac>)
 8002aec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d10f      	bne.n	8002b16 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002af6:	2300      	movs	r3, #0
 8002af8:	60bb      	str	r3, [r7, #8]
 8002afa:	4b7f      	ldr	r3, [pc, #508]	@ (8002cf8 <HAL_RCC_OscConfig+0x4ac>)
 8002afc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002afe:	4a7e      	ldr	r2, [pc, #504]	@ (8002cf8 <HAL_RCC_OscConfig+0x4ac>)
 8002b00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b04:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b06:	4b7c      	ldr	r3, [pc, #496]	@ (8002cf8 <HAL_RCC_OscConfig+0x4ac>)
 8002b08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b0e:	60bb      	str	r3, [r7, #8]
 8002b10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b12:	2301      	movs	r3, #1
 8002b14:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b16:	4b79      	ldr	r3, [pc, #484]	@ (8002cfc <HAL_RCC_OscConfig+0x4b0>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d118      	bne.n	8002b54 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b22:	4b76      	ldr	r3, [pc, #472]	@ (8002cfc <HAL_RCC_OscConfig+0x4b0>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a75      	ldr	r2, [pc, #468]	@ (8002cfc <HAL_RCC_OscConfig+0x4b0>)
 8002b28:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b2e:	f7fe fd6b 	bl	8001608 <HAL_GetTick>
 8002b32:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b34:	e008      	b.n	8002b48 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b36:	f7fe fd67 	bl	8001608 <HAL_GetTick>
 8002b3a:	4602      	mov	r2, r0
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	1ad3      	subs	r3, r2, r3
 8002b40:	2b02      	cmp	r3, #2
 8002b42:	d901      	bls.n	8002b48 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002b44:	2303      	movs	r3, #3
 8002b46:	e118      	b.n	8002d7a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b48:	4b6c      	ldr	r3, [pc, #432]	@ (8002cfc <HAL_RCC_OscConfig+0x4b0>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d0f0      	beq.n	8002b36 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d106      	bne.n	8002b6a <HAL_RCC_OscConfig+0x31e>
 8002b5c:	4b66      	ldr	r3, [pc, #408]	@ (8002cf8 <HAL_RCC_OscConfig+0x4ac>)
 8002b5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b60:	4a65      	ldr	r2, [pc, #404]	@ (8002cf8 <HAL_RCC_OscConfig+0x4ac>)
 8002b62:	f043 0301 	orr.w	r3, r3, #1
 8002b66:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b68:	e01c      	b.n	8002ba4 <HAL_RCC_OscConfig+0x358>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	2b05      	cmp	r3, #5
 8002b70:	d10c      	bne.n	8002b8c <HAL_RCC_OscConfig+0x340>
 8002b72:	4b61      	ldr	r3, [pc, #388]	@ (8002cf8 <HAL_RCC_OscConfig+0x4ac>)
 8002b74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b76:	4a60      	ldr	r2, [pc, #384]	@ (8002cf8 <HAL_RCC_OscConfig+0x4ac>)
 8002b78:	f043 0304 	orr.w	r3, r3, #4
 8002b7c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b7e:	4b5e      	ldr	r3, [pc, #376]	@ (8002cf8 <HAL_RCC_OscConfig+0x4ac>)
 8002b80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b82:	4a5d      	ldr	r2, [pc, #372]	@ (8002cf8 <HAL_RCC_OscConfig+0x4ac>)
 8002b84:	f043 0301 	orr.w	r3, r3, #1
 8002b88:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b8a:	e00b      	b.n	8002ba4 <HAL_RCC_OscConfig+0x358>
 8002b8c:	4b5a      	ldr	r3, [pc, #360]	@ (8002cf8 <HAL_RCC_OscConfig+0x4ac>)
 8002b8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b90:	4a59      	ldr	r2, [pc, #356]	@ (8002cf8 <HAL_RCC_OscConfig+0x4ac>)
 8002b92:	f023 0301 	bic.w	r3, r3, #1
 8002b96:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b98:	4b57      	ldr	r3, [pc, #348]	@ (8002cf8 <HAL_RCC_OscConfig+0x4ac>)
 8002b9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b9c:	4a56      	ldr	r2, [pc, #344]	@ (8002cf8 <HAL_RCC_OscConfig+0x4ac>)
 8002b9e:	f023 0304 	bic.w	r3, r3, #4
 8002ba2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d015      	beq.n	8002bd8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bac:	f7fe fd2c 	bl	8001608 <HAL_GetTick>
 8002bb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bb2:	e00a      	b.n	8002bca <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bb4:	f7fe fd28 	bl	8001608 <HAL_GetTick>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	1ad3      	subs	r3, r2, r3
 8002bbe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d901      	bls.n	8002bca <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002bc6:	2303      	movs	r3, #3
 8002bc8:	e0d7      	b.n	8002d7a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bca:	4b4b      	ldr	r3, [pc, #300]	@ (8002cf8 <HAL_RCC_OscConfig+0x4ac>)
 8002bcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bce:	f003 0302 	and.w	r3, r3, #2
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d0ee      	beq.n	8002bb4 <HAL_RCC_OscConfig+0x368>
 8002bd6:	e014      	b.n	8002c02 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bd8:	f7fe fd16 	bl	8001608 <HAL_GetTick>
 8002bdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bde:	e00a      	b.n	8002bf6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002be0:	f7fe fd12 	bl	8001608 <HAL_GetTick>
 8002be4:	4602      	mov	r2, r0
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	1ad3      	subs	r3, r2, r3
 8002bea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d901      	bls.n	8002bf6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002bf2:	2303      	movs	r3, #3
 8002bf4:	e0c1      	b.n	8002d7a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bf6:	4b40      	ldr	r3, [pc, #256]	@ (8002cf8 <HAL_RCC_OscConfig+0x4ac>)
 8002bf8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bfa:	f003 0302 	and.w	r3, r3, #2
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d1ee      	bne.n	8002be0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c02:	7dfb      	ldrb	r3, [r7, #23]
 8002c04:	2b01      	cmp	r3, #1
 8002c06:	d105      	bne.n	8002c14 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c08:	4b3b      	ldr	r3, [pc, #236]	@ (8002cf8 <HAL_RCC_OscConfig+0x4ac>)
 8002c0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c0c:	4a3a      	ldr	r2, [pc, #232]	@ (8002cf8 <HAL_RCC_OscConfig+0x4ac>)
 8002c0e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c12:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	699b      	ldr	r3, [r3, #24]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	f000 80ad 	beq.w	8002d78 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002c1e:	4b36      	ldr	r3, [pc, #216]	@ (8002cf8 <HAL_RCC_OscConfig+0x4ac>)
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	f003 030c 	and.w	r3, r3, #12
 8002c26:	2b08      	cmp	r3, #8
 8002c28:	d060      	beq.n	8002cec <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	699b      	ldr	r3, [r3, #24]
 8002c2e:	2b02      	cmp	r3, #2
 8002c30:	d145      	bne.n	8002cbe <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c32:	4b33      	ldr	r3, [pc, #204]	@ (8002d00 <HAL_RCC_OscConfig+0x4b4>)
 8002c34:	2200      	movs	r2, #0
 8002c36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c38:	f7fe fce6 	bl	8001608 <HAL_GetTick>
 8002c3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c3e:	e008      	b.n	8002c52 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c40:	f7fe fce2 	bl	8001608 <HAL_GetTick>
 8002c44:	4602      	mov	r2, r0
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	1ad3      	subs	r3, r2, r3
 8002c4a:	2b02      	cmp	r3, #2
 8002c4c:	d901      	bls.n	8002c52 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002c4e:	2303      	movs	r3, #3
 8002c50:	e093      	b.n	8002d7a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c52:	4b29      	ldr	r3, [pc, #164]	@ (8002cf8 <HAL_RCC_OscConfig+0x4ac>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d1f0      	bne.n	8002c40 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	69da      	ldr	r2, [r3, #28]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6a1b      	ldr	r3, [r3, #32]
 8002c66:	431a      	orrs	r2, r3
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c6c:	019b      	lsls	r3, r3, #6
 8002c6e:	431a      	orrs	r2, r3
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c74:	085b      	lsrs	r3, r3, #1
 8002c76:	3b01      	subs	r3, #1
 8002c78:	041b      	lsls	r3, r3, #16
 8002c7a:	431a      	orrs	r2, r3
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c80:	061b      	lsls	r3, r3, #24
 8002c82:	431a      	orrs	r2, r3
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c88:	071b      	lsls	r3, r3, #28
 8002c8a:	491b      	ldr	r1, [pc, #108]	@ (8002cf8 <HAL_RCC_OscConfig+0x4ac>)
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c90:	4b1b      	ldr	r3, [pc, #108]	@ (8002d00 <HAL_RCC_OscConfig+0x4b4>)
 8002c92:	2201      	movs	r2, #1
 8002c94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c96:	f7fe fcb7 	bl	8001608 <HAL_GetTick>
 8002c9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c9c:	e008      	b.n	8002cb0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c9e:	f7fe fcb3 	bl	8001608 <HAL_GetTick>
 8002ca2:	4602      	mov	r2, r0
 8002ca4:	693b      	ldr	r3, [r7, #16]
 8002ca6:	1ad3      	subs	r3, r2, r3
 8002ca8:	2b02      	cmp	r3, #2
 8002caa:	d901      	bls.n	8002cb0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002cac:	2303      	movs	r3, #3
 8002cae:	e064      	b.n	8002d7a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cb0:	4b11      	ldr	r3, [pc, #68]	@ (8002cf8 <HAL_RCC_OscConfig+0x4ac>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d0f0      	beq.n	8002c9e <HAL_RCC_OscConfig+0x452>
 8002cbc:	e05c      	b.n	8002d78 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cbe:	4b10      	ldr	r3, [pc, #64]	@ (8002d00 <HAL_RCC_OscConfig+0x4b4>)
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cc4:	f7fe fca0 	bl	8001608 <HAL_GetTick>
 8002cc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cca:	e008      	b.n	8002cde <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ccc:	f7fe fc9c 	bl	8001608 <HAL_GetTick>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	1ad3      	subs	r3, r2, r3
 8002cd6:	2b02      	cmp	r3, #2
 8002cd8:	d901      	bls.n	8002cde <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002cda:	2303      	movs	r3, #3
 8002cdc:	e04d      	b.n	8002d7a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cde:	4b06      	ldr	r3, [pc, #24]	@ (8002cf8 <HAL_RCC_OscConfig+0x4ac>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d1f0      	bne.n	8002ccc <HAL_RCC_OscConfig+0x480>
 8002cea:	e045      	b.n	8002d78 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	699b      	ldr	r3, [r3, #24]
 8002cf0:	2b01      	cmp	r3, #1
 8002cf2:	d107      	bne.n	8002d04 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	e040      	b.n	8002d7a <HAL_RCC_OscConfig+0x52e>
 8002cf8:	40023800 	.word	0x40023800
 8002cfc:	40007000 	.word	0x40007000
 8002d00:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002d04:	4b1f      	ldr	r3, [pc, #124]	@ (8002d84 <HAL_RCC_OscConfig+0x538>)
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	699b      	ldr	r3, [r3, #24]
 8002d0e:	2b01      	cmp	r3, #1
 8002d10:	d030      	beq.n	8002d74 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	d129      	bne.n	8002d74 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d2a:	429a      	cmp	r2, r3
 8002d2c:	d122      	bne.n	8002d74 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d2e:	68fa      	ldr	r2, [r7, #12]
 8002d30:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002d34:	4013      	ands	r3, r2
 8002d36:	687a      	ldr	r2, [r7, #4]
 8002d38:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002d3a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d119      	bne.n	8002d74 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d4a:	085b      	lsrs	r3, r3, #1
 8002d4c:	3b01      	subs	r3, #1
 8002d4e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d50:	429a      	cmp	r2, r3
 8002d52:	d10f      	bne.n	8002d74 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d5e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d60:	429a      	cmp	r2, r3
 8002d62:	d107      	bne.n	8002d74 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d6e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d70:	429a      	cmp	r2, r3
 8002d72:	d001      	beq.n	8002d78 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	e000      	b.n	8002d7a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002d78:	2300      	movs	r3, #0
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	3718      	adds	r7, #24
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}
 8002d82:	bf00      	nop
 8002d84:	40023800 	.word	0x40023800

08002d88 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b082      	sub	sp, #8
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d101      	bne.n	8002d9a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
 8002d98:	e07b      	b.n	8002e92 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d108      	bne.n	8002db4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002daa:	d009      	beq.n	8002dc0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2200      	movs	r2, #0
 8002db0:	61da      	str	r2, [r3, #28]
 8002db2:	e005      	b.n	8002dc0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2200      	movs	r2, #0
 8002db8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d106      	bne.n	8002de0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002dda:	6878      	ldr	r0, [r7, #4]
 8002ddc:	f7fe f82c 	bl	8000e38 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2202      	movs	r2, #2
 8002de4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	681a      	ldr	r2, [r3, #0]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002df6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	689b      	ldr	r3, [r3, #8]
 8002e04:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002e08:	431a      	orrs	r2, r3
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	68db      	ldr	r3, [r3, #12]
 8002e0e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002e12:	431a      	orrs	r2, r3
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	691b      	ldr	r3, [r3, #16]
 8002e18:	f003 0302 	and.w	r3, r3, #2
 8002e1c:	431a      	orrs	r2, r3
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	695b      	ldr	r3, [r3, #20]
 8002e22:	f003 0301 	and.w	r3, r3, #1
 8002e26:	431a      	orrs	r2, r3
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	699b      	ldr	r3, [r3, #24]
 8002e2c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e30:	431a      	orrs	r2, r3
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	69db      	ldr	r3, [r3, #28]
 8002e36:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002e3a:	431a      	orrs	r2, r3
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6a1b      	ldr	r3, [r3, #32]
 8002e40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e44:	ea42 0103 	orr.w	r1, r2, r3
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e4c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	430a      	orrs	r2, r1
 8002e56:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	699b      	ldr	r3, [r3, #24]
 8002e5c:	0c1b      	lsrs	r3, r3, #16
 8002e5e:	f003 0104 	and.w	r1, r3, #4
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e66:	f003 0210 	and.w	r2, r3, #16
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	430a      	orrs	r2, r1
 8002e70:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	69da      	ldr	r2, [r3, #28]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002e80:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2200      	movs	r2, #0
 8002e86:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002e90:	2300      	movs	r3, #0
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	3708      	adds	r7, #8
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}

08002e9a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e9a:	b580      	push	{r7, lr}
 8002e9c:	b088      	sub	sp, #32
 8002e9e:	af00      	add	r7, sp, #0
 8002ea0:	60f8      	str	r0, [r7, #12]
 8002ea2:	60b9      	str	r1, [r7, #8]
 8002ea4:	603b      	str	r3, [r7, #0]
 8002ea6:	4613      	mov	r3, r2
 8002ea8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	d101      	bne.n	8002ebc <HAL_SPI_Transmit+0x22>
 8002eb8:	2302      	movs	r3, #2
 8002eba:	e12d      	b.n	8003118 <HAL_SPI_Transmit+0x27e>
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002ec4:	f7fe fba0 	bl	8001608 <HAL_GetTick>
 8002ec8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002eca:	88fb      	ldrh	r3, [r7, #6]
 8002ecc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	2b01      	cmp	r3, #1
 8002ed8:	d002      	beq.n	8002ee0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002eda:	2302      	movs	r3, #2
 8002edc:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002ede:	e116      	b.n	800310e <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d002      	beq.n	8002eec <HAL_SPI_Transmit+0x52>
 8002ee6:	88fb      	ldrh	r3, [r7, #6]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d102      	bne.n	8002ef2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002ef0:	e10d      	b.n	800310e <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	2203      	movs	r2, #3
 8002ef6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	2200      	movs	r2, #0
 8002efe:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	68ba      	ldr	r2, [r7, #8]
 8002f04:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	88fa      	ldrh	r2, [r7, #6]
 8002f0a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	88fa      	ldrh	r2, [r7, #6]
 8002f10:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2200      	movs	r2, #0
 8002f16:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	2200      	movs	r2, #0
 8002f22:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	2200      	movs	r2, #0
 8002f28:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	689b      	ldr	r3, [r3, #8]
 8002f34:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002f38:	d10f      	bne.n	8002f5a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002f48:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002f58:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f64:	2b40      	cmp	r3, #64	@ 0x40
 8002f66:	d007      	beq.n	8002f78 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002f76:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	68db      	ldr	r3, [r3, #12]
 8002f7c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002f80:	d14f      	bne.n	8003022 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d002      	beq.n	8002f90 <HAL_SPI_Transmit+0xf6>
 8002f8a:	8afb      	ldrh	r3, [r7, #22]
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	d142      	bne.n	8003016 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f94:	881a      	ldrh	r2, [r3, #0]
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fa0:	1c9a      	adds	r2, r3, #2
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002faa:	b29b      	uxth	r3, r3
 8002fac:	3b01      	subs	r3, #1
 8002fae:	b29a      	uxth	r2, r3
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002fb4:	e02f      	b.n	8003016 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	f003 0302 	and.w	r3, r3, #2
 8002fc0:	2b02      	cmp	r3, #2
 8002fc2:	d112      	bne.n	8002fea <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fc8:	881a      	ldrh	r2, [r3, #0]
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fd4:	1c9a      	adds	r2, r3, #2
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002fde:	b29b      	uxth	r3, r3
 8002fe0:	3b01      	subs	r3, #1
 8002fe2:	b29a      	uxth	r2, r3
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002fe8:	e015      	b.n	8003016 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002fea:	f7fe fb0d 	bl	8001608 <HAL_GetTick>
 8002fee:	4602      	mov	r2, r0
 8002ff0:	69bb      	ldr	r3, [r7, #24]
 8002ff2:	1ad3      	subs	r3, r2, r3
 8002ff4:	683a      	ldr	r2, [r7, #0]
 8002ff6:	429a      	cmp	r2, r3
 8002ff8:	d803      	bhi.n	8003002 <HAL_SPI_Transmit+0x168>
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003000:	d102      	bne.n	8003008 <HAL_SPI_Transmit+0x16e>
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d106      	bne.n	8003016 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8003008:	2303      	movs	r3, #3
 800300a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	2201      	movs	r2, #1
 8003010:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8003014:	e07b      	b.n	800310e <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800301a:	b29b      	uxth	r3, r3
 800301c:	2b00      	cmp	r3, #0
 800301e:	d1ca      	bne.n	8002fb6 <HAL_SPI_Transmit+0x11c>
 8003020:	e050      	b.n	80030c4 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d002      	beq.n	8003030 <HAL_SPI_Transmit+0x196>
 800302a:	8afb      	ldrh	r3, [r7, #22]
 800302c:	2b01      	cmp	r3, #1
 800302e:	d144      	bne.n	80030ba <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	330c      	adds	r3, #12
 800303a:	7812      	ldrb	r2, [r2, #0]
 800303c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003042:	1c5a      	adds	r2, r3, #1
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800304c:	b29b      	uxth	r3, r3
 800304e:	3b01      	subs	r3, #1
 8003050:	b29a      	uxth	r2, r3
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003056:	e030      	b.n	80030ba <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	f003 0302 	and.w	r3, r3, #2
 8003062:	2b02      	cmp	r3, #2
 8003064:	d113      	bne.n	800308e <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	330c      	adds	r3, #12
 8003070:	7812      	ldrb	r2, [r2, #0]
 8003072:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003078:	1c5a      	adds	r2, r3, #1
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003082:	b29b      	uxth	r3, r3
 8003084:	3b01      	subs	r3, #1
 8003086:	b29a      	uxth	r2, r3
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800308c:	e015      	b.n	80030ba <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800308e:	f7fe fabb 	bl	8001608 <HAL_GetTick>
 8003092:	4602      	mov	r2, r0
 8003094:	69bb      	ldr	r3, [r7, #24]
 8003096:	1ad3      	subs	r3, r2, r3
 8003098:	683a      	ldr	r2, [r7, #0]
 800309a:	429a      	cmp	r2, r3
 800309c:	d803      	bhi.n	80030a6 <HAL_SPI_Transmit+0x20c>
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030a4:	d102      	bne.n	80030ac <HAL_SPI_Transmit+0x212>
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d106      	bne.n	80030ba <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 80030ac:	2303      	movs	r3, #3
 80030ae:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	2201      	movs	r2, #1
 80030b4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 80030b8:	e029      	b.n	800310e <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80030be:	b29b      	uxth	r3, r3
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d1c9      	bne.n	8003058 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80030c4:	69ba      	ldr	r2, [r7, #24]
 80030c6:	6839      	ldr	r1, [r7, #0]
 80030c8:	68f8      	ldr	r0, [r7, #12]
 80030ca:	f000 fb73 	bl	80037b4 <SPI_EndRxTxTransaction>
 80030ce:	4603      	mov	r3, r0
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d002      	beq.n	80030da <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2220      	movs	r2, #32
 80030d8:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d10a      	bne.n	80030f8 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80030e2:	2300      	movs	r3, #0
 80030e4:	613b      	str	r3, [r7, #16]
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	68db      	ldr	r3, [r3, #12]
 80030ec:	613b      	str	r3, [r7, #16]
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	613b      	str	r3, [r7, #16]
 80030f6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d002      	beq.n	8003106 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	77fb      	strb	r3, [r7, #31]
 8003104:	e003      	b.n	800310e <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	2201      	movs	r2, #1
 800310a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	2200      	movs	r2, #0
 8003112:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8003116:	7ffb      	ldrb	r3, [r7, #31]
}
 8003118:	4618      	mov	r0, r3
 800311a:	3720      	adds	r7, #32
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}

08003120 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b08c      	sub	sp, #48	@ 0x30
 8003124:	af00      	add	r7, sp, #0
 8003126:	60f8      	str	r0, [r7, #12]
 8003128:	60b9      	str	r1, [r7, #8]
 800312a:	607a      	str	r2, [r7, #4]
 800312c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800312e:	2301      	movs	r3, #1
 8003130:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003132:	2300      	movs	r3, #0
 8003134:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800313e:	2b01      	cmp	r3, #1
 8003140:	d101      	bne.n	8003146 <HAL_SPI_TransmitReceive+0x26>
 8003142:	2302      	movs	r3, #2
 8003144:	e198      	b.n	8003478 <HAL_SPI_TransmitReceive+0x358>
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	2201      	movs	r2, #1
 800314a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800314e:	f7fe fa5b 	bl	8001608 <HAL_GetTick>
 8003152:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800315a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003164:	887b      	ldrh	r3, [r7, #2]
 8003166:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003168:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800316c:	2b01      	cmp	r3, #1
 800316e:	d00f      	beq.n	8003190 <HAL_SPI_TransmitReceive+0x70>
 8003170:	69fb      	ldr	r3, [r7, #28]
 8003172:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003176:	d107      	bne.n	8003188 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d103      	bne.n	8003188 <HAL_SPI_TransmitReceive+0x68>
 8003180:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003184:	2b04      	cmp	r3, #4
 8003186:	d003      	beq.n	8003190 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003188:	2302      	movs	r3, #2
 800318a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 800318e:	e16d      	b.n	800346c <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d005      	beq.n	80031a2 <HAL_SPI_TransmitReceive+0x82>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d002      	beq.n	80031a2 <HAL_SPI_TransmitReceive+0x82>
 800319c:	887b      	ldrh	r3, [r7, #2]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d103      	bne.n	80031aa <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 80031a8:	e160      	b.n	800346c <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80031b0:	b2db      	uxtb	r3, r3
 80031b2:	2b04      	cmp	r3, #4
 80031b4:	d003      	beq.n	80031be <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2205      	movs	r2, #5
 80031ba:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	2200      	movs	r2, #0
 80031c2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	687a      	ldr	r2, [r7, #4]
 80031c8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	887a      	ldrh	r2, [r7, #2]
 80031ce:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	887a      	ldrh	r2, [r7, #2]
 80031d4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	68ba      	ldr	r2, [r7, #8]
 80031da:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	887a      	ldrh	r2, [r7, #2]
 80031e0:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	887a      	ldrh	r2, [r7, #2]
 80031e6:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2200      	movs	r2, #0
 80031ec:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	2200      	movs	r2, #0
 80031f2:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031fe:	2b40      	cmp	r3, #64	@ 0x40
 8003200:	d007      	beq.n	8003212 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	681a      	ldr	r2, [r3, #0]
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003210:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	68db      	ldr	r3, [r3, #12]
 8003216:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800321a:	d17c      	bne.n	8003316 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d002      	beq.n	800322a <HAL_SPI_TransmitReceive+0x10a>
 8003224:	8b7b      	ldrh	r3, [r7, #26]
 8003226:	2b01      	cmp	r3, #1
 8003228:	d16a      	bne.n	8003300 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800322e:	881a      	ldrh	r2, [r3, #0]
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800323a:	1c9a      	adds	r2, r3, #2
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003244:	b29b      	uxth	r3, r3
 8003246:	3b01      	subs	r3, #1
 8003248:	b29a      	uxth	r2, r3
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800324e:	e057      	b.n	8003300 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	f003 0302 	and.w	r3, r3, #2
 800325a:	2b02      	cmp	r3, #2
 800325c:	d11b      	bne.n	8003296 <HAL_SPI_TransmitReceive+0x176>
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003262:	b29b      	uxth	r3, r3
 8003264:	2b00      	cmp	r3, #0
 8003266:	d016      	beq.n	8003296 <HAL_SPI_TransmitReceive+0x176>
 8003268:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800326a:	2b01      	cmp	r3, #1
 800326c:	d113      	bne.n	8003296 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003272:	881a      	ldrh	r2, [r3, #0]
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800327e:	1c9a      	adds	r2, r3, #2
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003288:	b29b      	uxth	r3, r3
 800328a:	3b01      	subs	r3, #1
 800328c:	b29a      	uxth	r2, r3
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003292:	2300      	movs	r3, #0
 8003294:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	f003 0301 	and.w	r3, r3, #1
 80032a0:	2b01      	cmp	r3, #1
 80032a2:	d119      	bne.n	80032d8 <HAL_SPI_TransmitReceive+0x1b8>
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80032a8:	b29b      	uxth	r3, r3
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d014      	beq.n	80032d8 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	68da      	ldr	r2, [r3, #12]
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032b8:	b292      	uxth	r2, r2
 80032ba:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032c0:	1c9a      	adds	r2, r3, #2
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80032ca:	b29b      	uxth	r3, r3
 80032cc:	3b01      	subs	r3, #1
 80032ce:	b29a      	uxth	r2, r3
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80032d4:	2301      	movs	r3, #1
 80032d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80032d8:	f7fe f996 	bl	8001608 <HAL_GetTick>
 80032dc:	4602      	mov	r2, r0
 80032de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032e0:	1ad3      	subs	r3, r2, r3
 80032e2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80032e4:	429a      	cmp	r2, r3
 80032e6:	d80b      	bhi.n	8003300 <HAL_SPI_TransmitReceive+0x1e0>
 80032e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032ee:	d007      	beq.n	8003300 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 80032f0:	2303      	movs	r3, #3
 80032f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	2201      	movs	r2, #1
 80032fa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 80032fe:	e0b5      	b.n	800346c <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003304:	b29b      	uxth	r3, r3
 8003306:	2b00      	cmp	r3, #0
 8003308:	d1a2      	bne.n	8003250 <HAL_SPI_TransmitReceive+0x130>
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800330e:	b29b      	uxth	r3, r3
 8003310:	2b00      	cmp	r3, #0
 8003312:	d19d      	bne.n	8003250 <HAL_SPI_TransmitReceive+0x130>
 8003314:	e080      	b.n	8003418 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d002      	beq.n	8003324 <HAL_SPI_TransmitReceive+0x204>
 800331e:	8b7b      	ldrh	r3, [r7, #26]
 8003320:	2b01      	cmp	r3, #1
 8003322:	d16f      	bne.n	8003404 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	330c      	adds	r3, #12
 800332e:	7812      	ldrb	r2, [r2, #0]
 8003330:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003336:	1c5a      	adds	r2, r3, #1
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003340:	b29b      	uxth	r3, r3
 8003342:	3b01      	subs	r3, #1
 8003344:	b29a      	uxth	r2, r3
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800334a:	e05b      	b.n	8003404 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	689b      	ldr	r3, [r3, #8]
 8003352:	f003 0302 	and.w	r3, r3, #2
 8003356:	2b02      	cmp	r3, #2
 8003358:	d11c      	bne.n	8003394 <HAL_SPI_TransmitReceive+0x274>
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800335e:	b29b      	uxth	r3, r3
 8003360:	2b00      	cmp	r3, #0
 8003362:	d017      	beq.n	8003394 <HAL_SPI_TransmitReceive+0x274>
 8003364:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003366:	2b01      	cmp	r3, #1
 8003368:	d114      	bne.n	8003394 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	330c      	adds	r3, #12
 8003374:	7812      	ldrb	r2, [r2, #0]
 8003376:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800337c:	1c5a      	adds	r2, r3, #1
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003386:	b29b      	uxth	r3, r3
 8003388:	3b01      	subs	r3, #1
 800338a:	b29a      	uxth	r2, r3
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003390:	2300      	movs	r3, #0
 8003392:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	f003 0301 	and.w	r3, r3, #1
 800339e:	2b01      	cmp	r3, #1
 80033a0:	d119      	bne.n	80033d6 <HAL_SPI_TransmitReceive+0x2b6>
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80033a6:	b29b      	uxth	r3, r3
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d014      	beq.n	80033d6 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	68da      	ldr	r2, [r3, #12]
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033b6:	b2d2      	uxtb	r2, r2
 80033b8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033be:	1c5a      	adds	r2, r3, #1
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80033c8:	b29b      	uxth	r3, r3
 80033ca:	3b01      	subs	r3, #1
 80033cc:	b29a      	uxth	r2, r3
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80033d2:	2301      	movs	r3, #1
 80033d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80033d6:	f7fe f917 	bl	8001608 <HAL_GetTick>
 80033da:	4602      	mov	r2, r0
 80033dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033de:	1ad3      	subs	r3, r2, r3
 80033e0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80033e2:	429a      	cmp	r2, r3
 80033e4:	d803      	bhi.n	80033ee <HAL_SPI_TransmitReceive+0x2ce>
 80033e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033ec:	d102      	bne.n	80033f4 <HAL_SPI_TransmitReceive+0x2d4>
 80033ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d107      	bne.n	8003404 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 80033f4:	2303      	movs	r3, #3
 80033f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	2201      	movs	r2, #1
 80033fe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8003402:	e033      	b.n	800346c <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003408:	b29b      	uxth	r3, r3
 800340a:	2b00      	cmp	r3, #0
 800340c:	d19e      	bne.n	800334c <HAL_SPI_TransmitReceive+0x22c>
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003412:	b29b      	uxth	r3, r3
 8003414:	2b00      	cmp	r3, #0
 8003416:	d199      	bne.n	800334c <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003418:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800341a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800341c:	68f8      	ldr	r0, [r7, #12]
 800341e:	f000 f9c9 	bl	80037b4 <SPI_EndRxTxTransaction>
 8003422:	4603      	mov	r3, r0
 8003424:	2b00      	cmp	r3, #0
 8003426:	d006      	beq.n	8003436 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8003428:	2301      	movs	r3, #1
 800342a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	2220      	movs	r2, #32
 8003432:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8003434:	e01a      	b.n	800346c <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	689b      	ldr	r3, [r3, #8]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d10a      	bne.n	8003454 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800343e:	2300      	movs	r3, #0
 8003440:	617b      	str	r3, [r7, #20]
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	68db      	ldr	r3, [r3, #12]
 8003448:	617b      	str	r3, [r7, #20]
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	617b      	str	r3, [r7, #20]
 8003452:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003458:	2b00      	cmp	r3, #0
 800345a:	d003      	beq.n	8003464 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 800345c:	2301      	movs	r3, #1
 800345e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003462:	e003      	b.n	800346c <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	2201      	movs	r2, #1
 8003468:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2200      	movs	r2, #0
 8003470:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8003474:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8003478:	4618      	mov	r0, r3
 800347a:	3730      	adds	r7, #48	@ 0x30
 800347c:	46bd      	mov	sp, r7
 800347e:	bd80      	pop	{r7, pc}

08003480 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b088      	sub	sp, #32
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003498:	69bb      	ldr	r3, [r7, #24]
 800349a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d10e      	bne.n	80034c0 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80034a2:	69bb      	ldr	r3, [r7, #24]
 80034a4:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d009      	beq.n	80034c0 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80034ac:	69fb      	ldr	r3, [r7, #28]
 80034ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d004      	beq.n	80034c0 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	4798      	blx	r3
    return;
 80034be:	e0ce      	b.n	800365e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80034c0:	69bb      	ldr	r3, [r7, #24]
 80034c2:	f003 0302 	and.w	r3, r3, #2
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d009      	beq.n	80034de <HAL_SPI_IRQHandler+0x5e>
 80034ca:	69fb      	ldr	r3, [r7, #28]
 80034cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d004      	beq.n	80034de <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034d8:	6878      	ldr	r0, [r7, #4]
 80034da:	4798      	blx	r3
    return;
 80034dc:	e0bf      	b.n	800365e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80034de:	69bb      	ldr	r3, [r7, #24]
 80034e0:	f003 0320 	and.w	r3, r3, #32
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d10a      	bne.n	80034fe <HAL_SPI_IRQHandler+0x7e>
 80034e8:	69bb      	ldr	r3, [r7, #24]
 80034ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d105      	bne.n	80034fe <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80034f2:	69bb      	ldr	r3, [r7, #24]
 80034f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	f000 80b0 	beq.w	800365e <HAL_SPI_IRQHandler+0x1de>
 80034fe:	69fb      	ldr	r3, [r7, #28]
 8003500:	f003 0320 	and.w	r3, r3, #32
 8003504:	2b00      	cmp	r3, #0
 8003506:	f000 80aa 	beq.w	800365e <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800350a:	69bb      	ldr	r3, [r7, #24]
 800350c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003510:	2b00      	cmp	r3, #0
 8003512:	d023      	beq.n	800355c <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800351a:	b2db      	uxtb	r3, r3
 800351c:	2b03      	cmp	r3, #3
 800351e:	d011      	beq.n	8003544 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003524:	f043 0204 	orr.w	r2, r3, #4
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800352c:	2300      	movs	r3, #0
 800352e:	617b      	str	r3, [r7, #20]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	68db      	ldr	r3, [r3, #12]
 8003536:	617b      	str	r3, [r7, #20]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	689b      	ldr	r3, [r3, #8]
 800353e:	617b      	str	r3, [r7, #20]
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	e00b      	b.n	800355c <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003544:	2300      	movs	r3, #0
 8003546:	613b      	str	r3, [r7, #16]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	68db      	ldr	r3, [r3, #12]
 800354e:	613b      	str	r3, [r7, #16]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	613b      	str	r3, [r7, #16]
 8003558:	693b      	ldr	r3, [r7, #16]
        return;
 800355a:	e080      	b.n	800365e <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800355c:	69bb      	ldr	r3, [r7, #24]
 800355e:	f003 0320 	and.w	r3, r3, #32
 8003562:	2b00      	cmp	r3, #0
 8003564:	d014      	beq.n	8003590 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800356a:	f043 0201 	orr.w	r2, r3, #1
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003572:	2300      	movs	r3, #0
 8003574:	60fb      	str	r3, [r7, #12]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	60fb      	str	r3, [r7, #12]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	681a      	ldr	r2, [r3, #0]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800358c:	601a      	str	r2, [r3, #0]
 800358e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8003590:	69bb      	ldr	r3, [r7, #24]
 8003592:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003596:	2b00      	cmp	r3, #0
 8003598:	d00c      	beq.n	80035b4 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800359e:	f043 0208 	orr.w	r2, r3, #8
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80035a6:	2300      	movs	r3, #0
 80035a8:	60bb      	str	r3, [r7, #8]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	60bb      	str	r3, [r7, #8]
 80035b2:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d04f      	beq.n	800365c <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	685a      	ldr	r2, [r3, #4]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80035ca:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2201      	movs	r2, #1
 80035d0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80035d4:	69fb      	ldr	r3, [r7, #28]
 80035d6:	f003 0302 	and.w	r3, r3, #2
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d104      	bne.n	80035e8 <HAL_SPI_IRQHandler+0x168>
 80035de:	69fb      	ldr	r3, [r7, #28]
 80035e0:	f003 0301 	and.w	r3, r3, #1
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d034      	beq.n	8003652 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	685a      	ldr	r2, [r3, #4]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f022 0203 	bic.w	r2, r2, #3
 80035f6:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d011      	beq.n	8003624 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003604:	4a17      	ldr	r2, [pc, #92]	@ (8003664 <HAL_SPI_IRQHandler+0x1e4>)
 8003606:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800360c:	4618      	mov	r0, r3
 800360e:	f7fe f9c7 	bl	80019a0 <HAL_DMA_Abort_IT>
 8003612:	4603      	mov	r3, r0
 8003614:	2b00      	cmp	r3, #0
 8003616:	d005      	beq.n	8003624 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800361c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003628:	2b00      	cmp	r3, #0
 800362a:	d016      	beq.n	800365a <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003630:	4a0c      	ldr	r2, [pc, #48]	@ (8003664 <HAL_SPI_IRQHandler+0x1e4>)
 8003632:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003638:	4618      	mov	r0, r3
 800363a:	f7fe f9b1 	bl	80019a0 <HAL_DMA_Abort_IT>
 800363e:	4603      	mov	r3, r0
 8003640:	2b00      	cmp	r3, #0
 8003642:	d00a      	beq.n	800365a <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003648:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 8003650:	e003      	b.n	800365a <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	f000 f808 	bl	8003668 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8003658:	e000      	b.n	800365c <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 800365a:	bf00      	nop
    return;
 800365c:	bf00      	nop
  }
}
 800365e:	3720      	adds	r7, #32
 8003660:	46bd      	mov	sp, r7
 8003662:	bd80      	pop	{r7, pc}
 8003664:	0800367d 	.word	0x0800367d

08003668 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003668:	b480      	push	{r7}
 800366a:	b083      	sub	sp, #12
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003670:	bf00      	nop
 8003672:	370c      	adds	r7, #12
 8003674:	46bd      	mov	sp, r7
 8003676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367a:	4770      	bx	lr

0800367c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b084      	sub	sp, #16
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003688:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	2200      	movs	r2, #0
 800368e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	2200      	movs	r2, #0
 8003694:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003696:	68f8      	ldr	r0, [r7, #12]
 8003698:	f7ff ffe6 	bl	8003668 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800369c:	bf00      	nop
 800369e:	3710      	adds	r7, #16
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bd80      	pop	{r7, pc}

080036a4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b088      	sub	sp, #32
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	60f8      	str	r0, [r7, #12]
 80036ac:	60b9      	str	r1, [r7, #8]
 80036ae:	603b      	str	r3, [r7, #0]
 80036b0:	4613      	mov	r3, r2
 80036b2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80036b4:	f7fd ffa8 	bl	8001608 <HAL_GetTick>
 80036b8:	4602      	mov	r2, r0
 80036ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036bc:	1a9b      	subs	r3, r3, r2
 80036be:	683a      	ldr	r2, [r7, #0]
 80036c0:	4413      	add	r3, r2
 80036c2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80036c4:	f7fd ffa0 	bl	8001608 <HAL_GetTick>
 80036c8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80036ca:	4b39      	ldr	r3, [pc, #228]	@ (80037b0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	015b      	lsls	r3, r3, #5
 80036d0:	0d1b      	lsrs	r3, r3, #20
 80036d2:	69fa      	ldr	r2, [r7, #28]
 80036d4:	fb02 f303 	mul.w	r3, r2, r3
 80036d8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80036da:	e054      	b.n	8003786 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036e2:	d050      	beq.n	8003786 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80036e4:	f7fd ff90 	bl	8001608 <HAL_GetTick>
 80036e8:	4602      	mov	r2, r0
 80036ea:	69bb      	ldr	r3, [r7, #24]
 80036ec:	1ad3      	subs	r3, r2, r3
 80036ee:	69fa      	ldr	r2, [r7, #28]
 80036f0:	429a      	cmp	r2, r3
 80036f2:	d902      	bls.n	80036fa <SPI_WaitFlagStateUntilTimeout+0x56>
 80036f4:	69fb      	ldr	r3, [r7, #28]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d13d      	bne.n	8003776 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	685a      	ldr	r2, [r3, #4]
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003708:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003712:	d111      	bne.n	8003738 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	689b      	ldr	r3, [r3, #8]
 8003718:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800371c:	d004      	beq.n	8003728 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	689b      	ldr	r3, [r3, #8]
 8003722:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003726:	d107      	bne.n	8003738 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	681a      	ldr	r2, [r3, #0]
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003736:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800373c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003740:	d10f      	bne.n	8003762 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	681a      	ldr	r2, [r3, #0]
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003750:	601a      	str	r2, [r3, #0]
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	681a      	ldr	r2, [r3, #0]
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003760:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	2201      	movs	r2, #1
 8003766:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	2200      	movs	r2, #0
 800376e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8003772:	2303      	movs	r3, #3
 8003774:	e017      	b.n	80037a6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003776:	697b      	ldr	r3, [r7, #20]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d101      	bne.n	8003780 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800377c:	2300      	movs	r3, #0
 800377e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003780:	697b      	ldr	r3, [r7, #20]
 8003782:	3b01      	subs	r3, #1
 8003784:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	689a      	ldr	r2, [r3, #8]
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	4013      	ands	r3, r2
 8003790:	68ba      	ldr	r2, [r7, #8]
 8003792:	429a      	cmp	r2, r3
 8003794:	bf0c      	ite	eq
 8003796:	2301      	moveq	r3, #1
 8003798:	2300      	movne	r3, #0
 800379a:	b2db      	uxtb	r3, r3
 800379c:	461a      	mov	r2, r3
 800379e:	79fb      	ldrb	r3, [r7, #7]
 80037a0:	429a      	cmp	r2, r3
 80037a2:	d19b      	bne.n	80036dc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80037a4:	2300      	movs	r3, #0
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	3720      	adds	r7, #32
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}
 80037ae:	bf00      	nop
 80037b0:	20000000 	.word	0x20000000

080037b4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b088      	sub	sp, #32
 80037b8:	af02      	add	r7, sp, #8
 80037ba:	60f8      	str	r0, [r7, #12]
 80037bc:	60b9      	str	r1, [r7, #8]
 80037be:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	9300      	str	r3, [sp, #0]
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	2201      	movs	r2, #1
 80037c8:	2102      	movs	r1, #2
 80037ca:	68f8      	ldr	r0, [r7, #12]
 80037cc:	f7ff ff6a 	bl	80036a4 <SPI_WaitFlagStateUntilTimeout>
 80037d0:	4603      	mov	r3, r0
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d007      	beq.n	80037e6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037da:	f043 0220 	orr.w	r2, r3, #32
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80037e2:	2303      	movs	r3, #3
 80037e4:	e032      	b.n	800384c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80037e6:	4b1b      	ldr	r3, [pc, #108]	@ (8003854 <SPI_EndRxTxTransaction+0xa0>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a1b      	ldr	r2, [pc, #108]	@ (8003858 <SPI_EndRxTxTransaction+0xa4>)
 80037ec:	fba2 2303 	umull	r2, r3, r2, r3
 80037f0:	0d5b      	lsrs	r3, r3, #21
 80037f2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80037f6:	fb02 f303 	mul.w	r3, r2, r3
 80037fa:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003804:	d112      	bne.n	800382c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	9300      	str	r3, [sp, #0]
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	2200      	movs	r2, #0
 800380e:	2180      	movs	r1, #128	@ 0x80
 8003810:	68f8      	ldr	r0, [r7, #12]
 8003812:	f7ff ff47 	bl	80036a4 <SPI_WaitFlagStateUntilTimeout>
 8003816:	4603      	mov	r3, r0
 8003818:	2b00      	cmp	r3, #0
 800381a:	d016      	beq.n	800384a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003820:	f043 0220 	orr.w	r2, r3, #32
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003828:	2303      	movs	r3, #3
 800382a:	e00f      	b.n	800384c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d00a      	beq.n	8003848 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	3b01      	subs	r3, #1
 8003836:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003842:	2b80      	cmp	r3, #128	@ 0x80
 8003844:	d0f2      	beq.n	800382c <SPI_EndRxTxTransaction+0x78>
 8003846:	e000      	b.n	800384a <SPI_EndRxTxTransaction+0x96>
        break;
 8003848:	bf00      	nop
  }

  return HAL_OK;
 800384a:	2300      	movs	r3, #0
}
 800384c:	4618      	mov	r0, r3
 800384e:	3718      	adds	r7, #24
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}
 8003854:	20000000 	.word	0x20000000
 8003858:	165e9f81 	.word	0x165e9f81

0800385c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b082      	sub	sp, #8
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d101      	bne.n	800386e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	e041      	b.n	80038f2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003874:	b2db      	uxtb	r3, r3
 8003876:	2b00      	cmp	r3, #0
 8003878:	d106      	bne.n	8003888 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2200      	movs	r2, #0
 800387e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003882:	6878      	ldr	r0, [r7, #4]
 8003884:	f7fd fd2e 	bl	80012e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2202      	movs	r2, #2
 800388c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681a      	ldr	r2, [r3, #0]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	3304      	adds	r3, #4
 8003898:	4619      	mov	r1, r3
 800389a:	4610      	mov	r0, r2
 800389c:	f000 fae6 	bl	8003e6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2201      	movs	r2, #1
 80038a4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2201      	movs	r2, #1
 80038ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2201      	movs	r2, #1
 80038b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2201      	movs	r2, #1
 80038bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2201      	movs	r2, #1
 80038c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2201      	movs	r2, #1
 80038cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2201      	movs	r2, #1
 80038d4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2201      	movs	r2, #1
 80038dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2201      	movs	r2, #1
 80038e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2201      	movs	r2, #1
 80038ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80038f0:	2300      	movs	r3, #0
}
 80038f2:	4618      	mov	r0, r3
 80038f4:	3708      	adds	r7, #8
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}
	...

080038fc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b085      	sub	sp, #20
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800390a:	b2db      	uxtb	r3, r3
 800390c:	2b01      	cmp	r3, #1
 800390e:	d001      	beq.n	8003914 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003910:	2301      	movs	r3, #1
 8003912:	e046      	b.n	80039a2 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2202      	movs	r2, #2
 8003918:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a23      	ldr	r2, [pc, #140]	@ (80039b0 <HAL_TIM_Base_Start+0xb4>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d022      	beq.n	800396c <HAL_TIM_Base_Start+0x70>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800392e:	d01d      	beq.n	800396c <HAL_TIM_Base_Start+0x70>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a1f      	ldr	r2, [pc, #124]	@ (80039b4 <HAL_TIM_Base_Start+0xb8>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d018      	beq.n	800396c <HAL_TIM_Base_Start+0x70>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4a1e      	ldr	r2, [pc, #120]	@ (80039b8 <HAL_TIM_Base_Start+0xbc>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d013      	beq.n	800396c <HAL_TIM_Base_Start+0x70>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a1c      	ldr	r2, [pc, #112]	@ (80039bc <HAL_TIM_Base_Start+0xc0>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d00e      	beq.n	800396c <HAL_TIM_Base_Start+0x70>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a1b      	ldr	r2, [pc, #108]	@ (80039c0 <HAL_TIM_Base_Start+0xc4>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d009      	beq.n	800396c <HAL_TIM_Base_Start+0x70>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a19      	ldr	r2, [pc, #100]	@ (80039c4 <HAL_TIM_Base_Start+0xc8>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d004      	beq.n	800396c <HAL_TIM_Base_Start+0x70>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a18      	ldr	r2, [pc, #96]	@ (80039c8 <HAL_TIM_Base_Start+0xcc>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d111      	bne.n	8003990 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	689b      	ldr	r3, [r3, #8]
 8003972:	f003 0307 	and.w	r3, r3, #7
 8003976:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2b06      	cmp	r3, #6
 800397c:	d010      	beq.n	80039a0 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	681a      	ldr	r2, [r3, #0]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f042 0201 	orr.w	r2, r2, #1
 800398c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800398e:	e007      	b.n	80039a0 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	681a      	ldr	r2, [r3, #0]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f042 0201 	orr.w	r2, r2, #1
 800399e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80039a0:	2300      	movs	r3, #0
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	3714      	adds	r7, #20
 80039a6:	46bd      	mov	sp, r7
 80039a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ac:	4770      	bx	lr
 80039ae:	bf00      	nop
 80039b0:	40010000 	.word	0x40010000
 80039b4:	40000400 	.word	0x40000400
 80039b8:	40000800 	.word	0x40000800
 80039bc:	40000c00 	.word	0x40000c00
 80039c0:	40010400 	.word	0x40010400
 80039c4:	40014000 	.word	0x40014000
 80039c8:	40001800 	.word	0x40001800

080039cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b085      	sub	sp, #20
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80039da:	b2db      	uxtb	r3, r3
 80039dc:	2b01      	cmp	r3, #1
 80039de:	d001      	beq.n	80039e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80039e0:	2301      	movs	r3, #1
 80039e2:	e04e      	b.n	8003a82 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2202      	movs	r2, #2
 80039e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	68da      	ldr	r2, [r3, #12]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f042 0201 	orr.w	r2, r2, #1
 80039fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a23      	ldr	r2, [pc, #140]	@ (8003a90 <HAL_TIM_Base_Start_IT+0xc4>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d022      	beq.n	8003a4c <HAL_TIM_Base_Start_IT+0x80>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a0e:	d01d      	beq.n	8003a4c <HAL_TIM_Base_Start_IT+0x80>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a1f      	ldr	r2, [pc, #124]	@ (8003a94 <HAL_TIM_Base_Start_IT+0xc8>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d018      	beq.n	8003a4c <HAL_TIM_Base_Start_IT+0x80>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a1e      	ldr	r2, [pc, #120]	@ (8003a98 <HAL_TIM_Base_Start_IT+0xcc>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d013      	beq.n	8003a4c <HAL_TIM_Base_Start_IT+0x80>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a1c      	ldr	r2, [pc, #112]	@ (8003a9c <HAL_TIM_Base_Start_IT+0xd0>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d00e      	beq.n	8003a4c <HAL_TIM_Base_Start_IT+0x80>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a1b      	ldr	r2, [pc, #108]	@ (8003aa0 <HAL_TIM_Base_Start_IT+0xd4>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d009      	beq.n	8003a4c <HAL_TIM_Base_Start_IT+0x80>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a19      	ldr	r2, [pc, #100]	@ (8003aa4 <HAL_TIM_Base_Start_IT+0xd8>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d004      	beq.n	8003a4c <HAL_TIM_Base_Start_IT+0x80>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a18      	ldr	r2, [pc, #96]	@ (8003aa8 <HAL_TIM_Base_Start_IT+0xdc>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d111      	bne.n	8003a70 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	689b      	ldr	r3, [r3, #8]
 8003a52:	f003 0307 	and.w	r3, r3, #7
 8003a56:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	2b06      	cmp	r3, #6
 8003a5c:	d010      	beq.n	8003a80 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	681a      	ldr	r2, [r3, #0]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f042 0201 	orr.w	r2, r2, #1
 8003a6c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a6e:	e007      	b.n	8003a80 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	681a      	ldr	r2, [r3, #0]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f042 0201 	orr.w	r2, r2, #1
 8003a7e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a80:	2300      	movs	r3, #0
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	3714      	adds	r7, #20
 8003a86:	46bd      	mov	sp, r7
 8003a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8c:	4770      	bx	lr
 8003a8e:	bf00      	nop
 8003a90:	40010000 	.word	0x40010000
 8003a94:	40000400 	.word	0x40000400
 8003a98:	40000800 	.word	0x40000800
 8003a9c:	40000c00 	.word	0x40000c00
 8003aa0:	40010400 	.word	0x40010400
 8003aa4:	40014000 	.word	0x40014000
 8003aa8:	40001800 	.word	0x40001800

08003aac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b084      	sub	sp, #16
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	68db      	ldr	r3, [r3, #12]
 8003aba:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	691b      	ldr	r3, [r3, #16]
 8003ac2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	f003 0302 	and.w	r3, r3, #2
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d020      	beq.n	8003b10 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	f003 0302 	and.w	r3, r3, #2
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d01b      	beq.n	8003b10 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f06f 0202 	mvn.w	r2, #2
 8003ae0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2201      	movs	r2, #1
 8003ae6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	699b      	ldr	r3, [r3, #24]
 8003aee:	f003 0303 	and.w	r3, r3, #3
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d003      	beq.n	8003afe <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003af6:	6878      	ldr	r0, [r7, #4]
 8003af8:	f000 f999 	bl	8003e2e <HAL_TIM_IC_CaptureCallback>
 8003afc:	e005      	b.n	8003b0a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	f000 f98b 	bl	8003e1a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b04:	6878      	ldr	r0, [r7, #4]
 8003b06:	f000 f99c 	bl	8003e42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	f003 0304 	and.w	r3, r3, #4
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d020      	beq.n	8003b5c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	f003 0304 	and.w	r3, r3, #4
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d01b      	beq.n	8003b5c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f06f 0204 	mvn.w	r2, #4
 8003b2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2202      	movs	r2, #2
 8003b32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	699b      	ldr	r3, [r3, #24]
 8003b3a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d003      	beq.n	8003b4a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	f000 f973 	bl	8003e2e <HAL_TIM_IC_CaptureCallback>
 8003b48:	e005      	b.n	8003b56 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b4a:	6878      	ldr	r0, [r7, #4]
 8003b4c:	f000 f965 	bl	8003e1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b50:	6878      	ldr	r0, [r7, #4]
 8003b52:	f000 f976 	bl	8003e42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	f003 0308 	and.w	r3, r3, #8
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d020      	beq.n	8003ba8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	f003 0308 	and.w	r3, r3, #8
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d01b      	beq.n	8003ba8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f06f 0208 	mvn.w	r2, #8
 8003b78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2204      	movs	r2, #4
 8003b7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	69db      	ldr	r3, [r3, #28]
 8003b86:	f003 0303 	and.w	r3, r3, #3
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d003      	beq.n	8003b96 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b8e:	6878      	ldr	r0, [r7, #4]
 8003b90:	f000 f94d 	bl	8003e2e <HAL_TIM_IC_CaptureCallback>
 8003b94:	e005      	b.n	8003ba2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b96:	6878      	ldr	r0, [r7, #4]
 8003b98:	f000 f93f 	bl	8003e1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b9c:	6878      	ldr	r0, [r7, #4]
 8003b9e:	f000 f950 	bl	8003e42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	f003 0310 	and.w	r3, r3, #16
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d020      	beq.n	8003bf4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	f003 0310 	and.w	r3, r3, #16
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d01b      	beq.n	8003bf4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f06f 0210 	mvn.w	r2, #16
 8003bc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2208      	movs	r2, #8
 8003bca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	69db      	ldr	r3, [r3, #28]
 8003bd2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d003      	beq.n	8003be2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bda:	6878      	ldr	r0, [r7, #4]
 8003bdc:	f000 f927 	bl	8003e2e <HAL_TIM_IC_CaptureCallback>
 8003be0:	e005      	b.n	8003bee <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003be2:	6878      	ldr	r0, [r7, #4]
 8003be4:	f000 f919 	bl	8003e1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003be8:	6878      	ldr	r0, [r7, #4]
 8003bea:	f000 f92a 	bl	8003e42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	f003 0301 	and.w	r3, r3, #1
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d00c      	beq.n	8003c18 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	f003 0301 	and.w	r3, r3, #1
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d007      	beq.n	8003c18 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f06f 0201 	mvn.w	r2, #1
 8003c10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	f7fd fba4 	bl	8001360 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d00c      	beq.n	8003c3c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d007      	beq.n	8003c3c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003c34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003c36:	6878      	ldr	r0, [r7, #4]
 8003c38:	f000 fae4 	bl	8004204 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d00c      	beq.n	8003c60 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d007      	beq.n	8003c60 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003c58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003c5a:	6878      	ldr	r0, [r7, #4]
 8003c5c:	f000 f8fb 	bl	8003e56 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	f003 0320 	and.w	r3, r3, #32
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d00c      	beq.n	8003c84 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	f003 0320 	and.w	r3, r3, #32
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d007      	beq.n	8003c84 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f06f 0220 	mvn.w	r2, #32
 8003c7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003c7e:	6878      	ldr	r0, [r7, #4]
 8003c80:	f000 fab6 	bl	80041f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003c84:	bf00      	nop
 8003c86:	3710      	adds	r7, #16
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bd80      	pop	{r7, pc}

08003c8c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b084      	sub	sp, #16
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
 8003c94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c96:	2300      	movs	r3, #0
 8003c98:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ca0:	2b01      	cmp	r3, #1
 8003ca2:	d101      	bne.n	8003ca8 <HAL_TIM_ConfigClockSource+0x1c>
 8003ca4:	2302      	movs	r3, #2
 8003ca6:	e0b4      	b.n	8003e12 <HAL_TIM_ConfigClockSource+0x186>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2201      	movs	r2, #1
 8003cac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2202      	movs	r2, #2
 8003cb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	689b      	ldr	r3, [r3, #8]
 8003cbe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003cc6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003cce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	68ba      	ldr	r2, [r7, #8]
 8003cd6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ce0:	d03e      	beq.n	8003d60 <HAL_TIM_ConfigClockSource+0xd4>
 8003ce2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ce6:	f200 8087 	bhi.w	8003df8 <HAL_TIM_ConfigClockSource+0x16c>
 8003cea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003cee:	f000 8086 	beq.w	8003dfe <HAL_TIM_ConfigClockSource+0x172>
 8003cf2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003cf6:	d87f      	bhi.n	8003df8 <HAL_TIM_ConfigClockSource+0x16c>
 8003cf8:	2b70      	cmp	r3, #112	@ 0x70
 8003cfa:	d01a      	beq.n	8003d32 <HAL_TIM_ConfigClockSource+0xa6>
 8003cfc:	2b70      	cmp	r3, #112	@ 0x70
 8003cfe:	d87b      	bhi.n	8003df8 <HAL_TIM_ConfigClockSource+0x16c>
 8003d00:	2b60      	cmp	r3, #96	@ 0x60
 8003d02:	d050      	beq.n	8003da6 <HAL_TIM_ConfigClockSource+0x11a>
 8003d04:	2b60      	cmp	r3, #96	@ 0x60
 8003d06:	d877      	bhi.n	8003df8 <HAL_TIM_ConfigClockSource+0x16c>
 8003d08:	2b50      	cmp	r3, #80	@ 0x50
 8003d0a:	d03c      	beq.n	8003d86 <HAL_TIM_ConfigClockSource+0xfa>
 8003d0c:	2b50      	cmp	r3, #80	@ 0x50
 8003d0e:	d873      	bhi.n	8003df8 <HAL_TIM_ConfigClockSource+0x16c>
 8003d10:	2b40      	cmp	r3, #64	@ 0x40
 8003d12:	d058      	beq.n	8003dc6 <HAL_TIM_ConfigClockSource+0x13a>
 8003d14:	2b40      	cmp	r3, #64	@ 0x40
 8003d16:	d86f      	bhi.n	8003df8 <HAL_TIM_ConfigClockSource+0x16c>
 8003d18:	2b30      	cmp	r3, #48	@ 0x30
 8003d1a:	d064      	beq.n	8003de6 <HAL_TIM_ConfigClockSource+0x15a>
 8003d1c:	2b30      	cmp	r3, #48	@ 0x30
 8003d1e:	d86b      	bhi.n	8003df8 <HAL_TIM_ConfigClockSource+0x16c>
 8003d20:	2b20      	cmp	r3, #32
 8003d22:	d060      	beq.n	8003de6 <HAL_TIM_ConfigClockSource+0x15a>
 8003d24:	2b20      	cmp	r3, #32
 8003d26:	d867      	bhi.n	8003df8 <HAL_TIM_ConfigClockSource+0x16c>
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d05c      	beq.n	8003de6 <HAL_TIM_ConfigClockSource+0x15a>
 8003d2c:	2b10      	cmp	r3, #16
 8003d2e:	d05a      	beq.n	8003de6 <HAL_TIM_ConfigClockSource+0x15a>
 8003d30:	e062      	b.n	8003df8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003d42:	f000 f9b9 	bl	80040b8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	689b      	ldr	r3, [r3, #8]
 8003d4c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003d54:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	68ba      	ldr	r2, [r7, #8]
 8003d5c:	609a      	str	r2, [r3, #8]
      break;
 8003d5e:	e04f      	b.n	8003e00 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003d70:	f000 f9a2 	bl	80040b8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	689a      	ldr	r2, [r3, #8]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003d82:	609a      	str	r2, [r3, #8]
      break;
 8003d84:	e03c      	b.n	8003e00 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d92:	461a      	mov	r2, r3
 8003d94:	f000 f916 	bl	8003fc4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	2150      	movs	r1, #80	@ 0x50
 8003d9e:	4618      	mov	r0, r3
 8003da0:	f000 f96f 	bl	8004082 <TIM_ITRx_SetConfig>
      break;
 8003da4:	e02c      	b.n	8003e00 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003db2:	461a      	mov	r2, r3
 8003db4:	f000 f935 	bl	8004022 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	2160      	movs	r1, #96	@ 0x60
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	f000 f95f 	bl	8004082 <TIM_ITRx_SetConfig>
      break;
 8003dc4:	e01c      	b.n	8003e00 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003dd2:	461a      	mov	r2, r3
 8003dd4:	f000 f8f6 	bl	8003fc4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	2140      	movs	r1, #64	@ 0x40
 8003dde:	4618      	mov	r0, r3
 8003de0:	f000 f94f 	bl	8004082 <TIM_ITRx_SetConfig>
      break;
 8003de4:	e00c      	b.n	8003e00 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681a      	ldr	r2, [r3, #0]
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4619      	mov	r1, r3
 8003df0:	4610      	mov	r0, r2
 8003df2:	f000 f946 	bl	8004082 <TIM_ITRx_SetConfig>
      break;
 8003df6:	e003      	b.n	8003e00 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003df8:	2301      	movs	r3, #1
 8003dfa:	73fb      	strb	r3, [r7, #15]
      break;
 8003dfc:	e000      	b.n	8003e00 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003dfe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2201      	movs	r2, #1
 8003e04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003e10:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e12:	4618      	mov	r0, r3
 8003e14:	3710      	adds	r7, #16
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd80      	pop	{r7, pc}

08003e1a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e1a:	b480      	push	{r7}
 8003e1c:	b083      	sub	sp, #12
 8003e1e:	af00      	add	r7, sp, #0
 8003e20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003e22:	bf00      	nop
 8003e24:	370c      	adds	r7, #12
 8003e26:	46bd      	mov	sp, r7
 8003e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2c:	4770      	bx	lr

08003e2e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003e2e:	b480      	push	{r7}
 8003e30:	b083      	sub	sp, #12
 8003e32:	af00      	add	r7, sp, #0
 8003e34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003e36:	bf00      	nop
 8003e38:	370c      	adds	r7, #12
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e40:	4770      	bx	lr

08003e42 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003e42:	b480      	push	{r7}
 8003e44:	b083      	sub	sp, #12
 8003e46:	af00      	add	r7, sp, #0
 8003e48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003e4a:	bf00      	nop
 8003e4c:	370c      	adds	r7, #12
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e54:	4770      	bx	lr

08003e56 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003e56:	b480      	push	{r7}
 8003e58:	b083      	sub	sp, #12
 8003e5a:	af00      	add	r7, sp, #0
 8003e5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003e5e:	bf00      	nop
 8003e60:	370c      	adds	r7, #12
 8003e62:	46bd      	mov	sp, r7
 8003e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e68:	4770      	bx	lr
	...

08003e6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b085      	sub	sp, #20
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
 8003e74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	4a46      	ldr	r2, [pc, #280]	@ (8003f98 <TIM_Base_SetConfig+0x12c>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d013      	beq.n	8003eac <TIM_Base_SetConfig+0x40>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e8a:	d00f      	beq.n	8003eac <TIM_Base_SetConfig+0x40>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	4a43      	ldr	r2, [pc, #268]	@ (8003f9c <TIM_Base_SetConfig+0x130>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d00b      	beq.n	8003eac <TIM_Base_SetConfig+0x40>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	4a42      	ldr	r2, [pc, #264]	@ (8003fa0 <TIM_Base_SetConfig+0x134>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d007      	beq.n	8003eac <TIM_Base_SetConfig+0x40>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	4a41      	ldr	r2, [pc, #260]	@ (8003fa4 <TIM_Base_SetConfig+0x138>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d003      	beq.n	8003eac <TIM_Base_SetConfig+0x40>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	4a40      	ldr	r2, [pc, #256]	@ (8003fa8 <TIM_Base_SetConfig+0x13c>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d108      	bne.n	8003ebe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003eb2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	68fa      	ldr	r2, [r7, #12]
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	4a35      	ldr	r2, [pc, #212]	@ (8003f98 <TIM_Base_SetConfig+0x12c>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d02b      	beq.n	8003f1e <TIM_Base_SetConfig+0xb2>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ecc:	d027      	beq.n	8003f1e <TIM_Base_SetConfig+0xb2>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	4a32      	ldr	r2, [pc, #200]	@ (8003f9c <TIM_Base_SetConfig+0x130>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d023      	beq.n	8003f1e <TIM_Base_SetConfig+0xb2>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	4a31      	ldr	r2, [pc, #196]	@ (8003fa0 <TIM_Base_SetConfig+0x134>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d01f      	beq.n	8003f1e <TIM_Base_SetConfig+0xb2>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	4a30      	ldr	r2, [pc, #192]	@ (8003fa4 <TIM_Base_SetConfig+0x138>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d01b      	beq.n	8003f1e <TIM_Base_SetConfig+0xb2>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	4a2f      	ldr	r2, [pc, #188]	@ (8003fa8 <TIM_Base_SetConfig+0x13c>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d017      	beq.n	8003f1e <TIM_Base_SetConfig+0xb2>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	4a2e      	ldr	r2, [pc, #184]	@ (8003fac <TIM_Base_SetConfig+0x140>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d013      	beq.n	8003f1e <TIM_Base_SetConfig+0xb2>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	4a2d      	ldr	r2, [pc, #180]	@ (8003fb0 <TIM_Base_SetConfig+0x144>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d00f      	beq.n	8003f1e <TIM_Base_SetConfig+0xb2>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	4a2c      	ldr	r2, [pc, #176]	@ (8003fb4 <TIM_Base_SetConfig+0x148>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d00b      	beq.n	8003f1e <TIM_Base_SetConfig+0xb2>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	4a2b      	ldr	r2, [pc, #172]	@ (8003fb8 <TIM_Base_SetConfig+0x14c>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d007      	beq.n	8003f1e <TIM_Base_SetConfig+0xb2>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	4a2a      	ldr	r2, [pc, #168]	@ (8003fbc <TIM_Base_SetConfig+0x150>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d003      	beq.n	8003f1e <TIM_Base_SetConfig+0xb2>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	4a29      	ldr	r2, [pc, #164]	@ (8003fc0 <TIM_Base_SetConfig+0x154>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d108      	bne.n	8003f30 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	68db      	ldr	r3, [r3, #12]
 8003f2a:	68fa      	ldr	r2, [r7, #12]
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	695b      	ldr	r3, [r3, #20]
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	68fa      	ldr	r2, [r7, #12]
 8003f42:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	689a      	ldr	r2, [r3, #8]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	681a      	ldr	r2, [r3, #0]
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	4a10      	ldr	r2, [pc, #64]	@ (8003f98 <TIM_Base_SetConfig+0x12c>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d003      	beq.n	8003f64 <TIM_Base_SetConfig+0xf8>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	4a12      	ldr	r2, [pc, #72]	@ (8003fa8 <TIM_Base_SetConfig+0x13c>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d103      	bne.n	8003f6c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	691a      	ldr	r2, [r3, #16]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2201      	movs	r2, #1
 8003f70:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	691b      	ldr	r3, [r3, #16]
 8003f76:	f003 0301 	and.w	r3, r3, #1
 8003f7a:	2b01      	cmp	r3, #1
 8003f7c:	d105      	bne.n	8003f8a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	691b      	ldr	r3, [r3, #16]
 8003f82:	f023 0201 	bic.w	r2, r3, #1
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	611a      	str	r2, [r3, #16]
  }
}
 8003f8a:	bf00      	nop
 8003f8c:	3714      	adds	r7, #20
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f94:	4770      	bx	lr
 8003f96:	bf00      	nop
 8003f98:	40010000 	.word	0x40010000
 8003f9c:	40000400 	.word	0x40000400
 8003fa0:	40000800 	.word	0x40000800
 8003fa4:	40000c00 	.word	0x40000c00
 8003fa8:	40010400 	.word	0x40010400
 8003fac:	40014000 	.word	0x40014000
 8003fb0:	40014400 	.word	0x40014400
 8003fb4:	40014800 	.word	0x40014800
 8003fb8:	40001800 	.word	0x40001800
 8003fbc:	40001c00 	.word	0x40001c00
 8003fc0:	40002000 	.word	0x40002000

08003fc4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b087      	sub	sp, #28
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	60f8      	str	r0, [r7, #12]
 8003fcc:	60b9      	str	r1, [r7, #8]
 8003fce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	6a1b      	ldr	r3, [r3, #32]
 8003fd4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	6a1b      	ldr	r3, [r3, #32]
 8003fda:	f023 0201 	bic.w	r2, r3, #1
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	699b      	ldr	r3, [r3, #24]
 8003fe6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003fe8:	693b      	ldr	r3, [r7, #16]
 8003fea:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003fee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	011b      	lsls	r3, r3, #4
 8003ff4:	693a      	ldr	r2, [r7, #16]
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	f023 030a 	bic.w	r3, r3, #10
 8004000:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004002:	697a      	ldr	r2, [r7, #20]
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	4313      	orrs	r3, r2
 8004008:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	693a      	ldr	r2, [r7, #16]
 800400e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	697a      	ldr	r2, [r7, #20]
 8004014:	621a      	str	r2, [r3, #32]
}
 8004016:	bf00      	nop
 8004018:	371c      	adds	r7, #28
 800401a:	46bd      	mov	sp, r7
 800401c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004020:	4770      	bx	lr

08004022 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004022:	b480      	push	{r7}
 8004024:	b087      	sub	sp, #28
 8004026:	af00      	add	r7, sp, #0
 8004028:	60f8      	str	r0, [r7, #12]
 800402a:	60b9      	str	r1, [r7, #8]
 800402c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	6a1b      	ldr	r3, [r3, #32]
 8004032:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	6a1b      	ldr	r3, [r3, #32]
 8004038:	f023 0210 	bic.w	r2, r3, #16
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	699b      	ldr	r3, [r3, #24]
 8004044:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004046:	693b      	ldr	r3, [r7, #16]
 8004048:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800404c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	031b      	lsls	r3, r3, #12
 8004052:	693a      	ldr	r2, [r7, #16]
 8004054:	4313      	orrs	r3, r2
 8004056:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800405e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	011b      	lsls	r3, r3, #4
 8004064:	697a      	ldr	r2, [r7, #20]
 8004066:	4313      	orrs	r3, r2
 8004068:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	693a      	ldr	r2, [r7, #16]
 800406e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	697a      	ldr	r2, [r7, #20]
 8004074:	621a      	str	r2, [r3, #32]
}
 8004076:	bf00      	nop
 8004078:	371c      	adds	r7, #28
 800407a:	46bd      	mov	sp, r7
 800407c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004080:	4770      	bx	lr

08004082 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004082:	b480      	push	{r7}
 8004084:	b085      	sub	sp, #20
 8004086:	af00      	add	r7, sp, #0
 8004088:	6078      	str	r0, [r7, #4]
 800408a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004098:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800409a:	683a      	ldr	r2, [r7, #0]
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	4313      	orrs	r3, r2
 80040a0:	f043 0307 	orr.w	r3, r3, #7
 80040a4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	68fa      	ldr	r2, [r7, #12]
 80040aa:	609a      	str	r2, [r3, #8]
}
 80040ac:	bf00      	nop
 80040ae:	3714      	adds	r7, #20
 80040b0:	46bd      	mov	sp, r7
 80040b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b6:	4770      	bx	lr

080040b8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80040b8:	b480      	push	{r7}
 80040ba:	b087      	sub	sp, #28
 80040bc:	af00      	add	r7, sp, #0
 80040be:	60f8      	str	r0, [r7, #12]
 80040c0:	60b9      	str	r1, [r7, #8]
 80040c2:	607a      	str	r2, [r7, #4]
 80040c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	689b      	ldr	r3, [r3, #8]
 80040ca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80040cc:	697b      	ldr	r3, [r7, #20]
 80040ce:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80040d2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	021a      	lsls	r2, r3, #8
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	431a      	orrs	r2, r3
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	4313      	orrs	r3, r2
 80040e0:	697a      	ldr	r2, [r7, #20]
 80040e2:	4313      	orrs	r3, r2
 80040e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	697a      	ldr	r2, [r7, #20]
 80040ea:	609a      	str	r2, [r3, #8]
}
 80040ec:	bf00      	nop
 80040ee:	371c      	adds	r7, #28
 80040f0:	46bd      	mov	sp, r7
 80040f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f6:	4770      	bx	lr

080040f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80040f8:	b480      	push	{r7}
 80040fa:	b085      	sub	sp, #20
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
 8004100:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004108:	2b01      	cmp	r3, #1
 800410a:	d101      	bne.n	8004110 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800410c:	2302      	movs	r3, #2
 800410e:	e05a      	b.n	80041c6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2201      	movs	r2, #1
 8004114:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2202      	movs	r2, #2
 800411c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	689b      	ldr	r3, [r3, #8]
 800412e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004136:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	68fa      	ldr	r2, [r7, #12]
 800413e:	4313      	orrs	r3, r2
 8004140:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	68fa      	ldr	r2, [r7, #12]
 8004148:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4a21      	ldr	r2, [pc, #132]	@ (80041d4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d022      	beq.n	800419a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800415c:	d01d      	beq.n	800419a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a1d      	ldr	r2, [pc, #116]	@ (80041d8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d018      	beq.n	800419a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a1b      	ldr	r2, [pc, #108]	@ (80041dc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d013      	beq.n	800419a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4a1a      	ldr	r2, [pc, #104]	@ (80041e0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d00e      	beq.n	800419a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a18      	ldr	r2, [pc, #96]	@ (80041e4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d009      	beq.n	800419a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4a17      	ldr	r2, [pc, #92]	@ (80041e8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d004      	beq.n	800419a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a15      	ldr	r2, [pc, #84]	@ (80041ec <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d10c      	bne.n	80041b4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800419a:	68bb      	ldr	r3, [r7, #8]
 800419c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80041a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	68ba      	ldr	r2, [r7, #8]
 80041a8:	4313      	orrs	r3, r2
 80041aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	68ba      	ldr	r2, [r7, #8]
 80041b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2201      	movs	r2, #1
 80041b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2200      	movs	r2, #0
 80041c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80041c4:	2300      	movs	r3, #0
}
 80041c6:	4618      	mov	r0, r3
 80041c8:	3714      	adds	r7, #20
 80041ca:	46bd      	mov	sp, r7
 80041cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d0:	4770      	bx	lr
 80041d2:	bf00      	nop
 80041d4:	40010000 	.word	0x40010000
 80041d8:	40000400 	.word	0x40000400
 80041dc:	40000800 	.word	0x40000800
 80041e0:	40000c00 	.word	0x40000c00
 80041e4:	40010400 	.word	0x40010400
 80041e8:	40014000 	.word	0x40014000
 80041ec:	40001800 	.word	0x40001800

080041f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80041f0:	b480      	push	{r7}
 80041f2:	b083      	sub	sp, #12
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80041f8:	bf00      	nop
 80041fa:	370c      	adds	r7, #12
 80041fc:	46bd      	mov	sp, r7
 80041fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004202:	4770      	bx	lr

08004204 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004204:	b480      	push	{r7}
 8004206:	b083      	sub	sp, #12
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800420c:	bf00      	nop
 800420e:	370c      	adds	r7, #12
 8004210:	46bd      	mov	sp, r7
 8004212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004216:	4770      	bx	lr

08004218 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b082      	sub	sp, #8
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d101      	bne.n	800422a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004226:	2301      	movs	r3, #1
 8004228:	e042      	b.n	80042b0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004230:	b2db      	uxtb	r3, r3
 8004232:	2b00      	cmp	r3, #0
 8004234:	d106      	bne.n	8004244 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2200      	movs	r2, #0
 800423a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800423e:	6878      	ldr	r0, [r7, #4]
 8004240:	f7fd f90a 	bl	8001458 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2224      	movs	r2, #36	@ 0x24
 8004248:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	68da      	ldr	r2, [r3, #12]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800425a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800425c:	6878      	ldr	r0, [r7, #4]
 800425e:	f000 f82b 	bl	80042b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	691a      	ldr	r2, [r3, #16]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004270:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	695a      	ldr	r2, [r3, #20]
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004280:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	68da      	ldr	r2, [r3, #12]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004290:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2200      	movs	r2, #0
 8004296:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2220      	movs	r2, #32
 800429c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2220      	movs	r2, #32
 80042a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2200      	movs	r2, #0
 80042ac:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80042ae:	2300      	movs	r3, #0
}
 80042b0:	4618      	mov	r0, r3
 80042b2:	3708      	adds	r7, #8
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bd80      	pop	{r7, pc}

080042b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80042b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80042bc:	b0c0      	sub	sp, #256	@ 0x100
 80042be:	af00      	add	r7, sp, #0
 80042c0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80042c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	691b      	ldr	r3, [r3, #16]
 80042cc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80042d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042d4:	68d9      	ldr	r1, [r3, #12]
 80042d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042da:	681a      	ldr	r2, [r3, #0]
 80042dc:	ea40 0301 	orr.w	r3, r0, r1
 80042e0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80042e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042e6:	689a      	ldr	r2, [r3, #8]
 80042e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042ec:	691b      	ldr	r3, [r3, #16]
 80042ee:	431a      	orrs	r2, r3
 80042f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042f4:	695b      	ldr	r3, [r3, #20]
 80042f6:	431a      	orrs	r2, r3
 80042f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042fc:	69db      	ldr	r3, [r3, #28]
 80042fe:	4313      	orrs	r3, r2
 8004300:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004304:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	68db      	ldr	r3, [r3, #12]
 800430c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004310:	f021 010c 	bic.w	r1, r1, #12
 8004314:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004318:	681a      	ldr	r2, [r3, #0]
 800431a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800431e:	430b      	orrs	r3, r1
 8004320:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004322:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	695b      	ldr	r3, [r3, #20]
 800432a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800432e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004332:	6999      	ldr	r1, [r3, #24]
 8004334:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004338:	681a      	ldr	r2, [r3, #0]
 800433a:	ea40 0301 	orr.w	r3, r0, r1
 800433e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004340:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004344:	681a      	ldr	r2, [r3, #0]
 8004346:	4b8f      	ldr	r3, [pc, #572]	@ (8004584 <UART_SetConfig+0x2cc>)
 8004348:	429a      	cmp	r2, r3
 800434a:	d005      	beq.n	8004358 <UART_SetConfig+0xa0>
 800434c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004350:	681a      	ldr	r2, [r3, #0]
 8004352:	4b8d      	ldr	r3, [pc, #564]	@ (8004588 <UART_SetConfig+0x2d0>)
 8004354:	429a      	cmp	r2, r3
 8004356:	d104      	bne.n	8004362 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004358:	f7fe f834 	bl	80023c4 <HAL_RCC_GetPCLK2Freq>
 800435c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004360:	e003      	b.n	800436a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004362:	f7fe f81b 	bl	800239c <HAL_RCC_GetPCLK1Freq>
 8004366:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800436a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800436e:	69db      	ldr	r3, [r3, #28]
 8004370:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004374:	f040 810c 	bne.w	8004590 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004378:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800437c:	2200      	movs	r2, #0
 800437e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004382:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004386:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800438a:	4622      	mov	r2, r4
 800438c:	462b      	mov	r3, r5
 800438e:	1891      	adds	r1, r2, r2
 8004390:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004392:	415b      	adcs	r3, r3
 8004394:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004396:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800439a:	4621      	mov	r1, r4
 800439c:	eb12 0801 	adds.w	r8, r2, r1
 80043a0:	4629      	mov	r1, r5
 80043a2:	eb43 0901 	adc.w	r9, r3, r1
 80043a6:	f04f 0200 	mov.w	r2, #0
 80043aa:	f04f 0300 	mov.w	r3, #0
 80043ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80043b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80043b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80043ba:	4690      	mov	r8, r2
 80043bc:	4699      	mov	r9, r3
 80043be:	4623      	mov	r3, r4
 80043c0:	eb18 0303 	adds.w	r3, r8, r3
 80043c4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80043c8:	462b      	mov	r3, r5
 80043ca:	eb49 0303 	adc.w	r3, r9, r3
 80043ce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80043d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	2200      	movs	r2, #0
 80043da:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80043de:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80043e2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80043e6:	460b      	mov	r3, r1
 80043e8:	18db      	adds	r3, r3, r3
 80043ea:	653b      	str	r3, [r7, #80]	@ 0x50
 80043ec:	4613      	mov	r3, r2
 80043ee:	eb42 0303 	adc.w	r3, r2, r3
 80043f2:	657b      	str	r3, [r7, #84]	@ 0x54
 80043f4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80043f8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80043fc:	f7fc fa5e 	bl	80008bc <__aeabi_uldivmod>
 8004400:	4602      	mov	r2, r0
 8004402:	460b      	mov	r3, r1
 8004404:	4b61      	ldr	r3, [pc, #388]	@ (800458c <UART_SetConfig+0x2d4>)
 8004406:	fba3 2302 	umull	r2, r3, r3, r2
 800440a:	095b      	lsrs	r3, r3, #5
 800440c:	011c      	lsls	r4, r3, #4
 800440e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004412:	2200      	movs	r2, #0
 8004414:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004418:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800441c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004420:	4642      	mov	r2, r8
 8004422:	464b      	mov	r3, r9
 8004424:	1891      	adds	r1, r2, r2
 8004426:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004428:	415b      	adcs	r3, r3
 800442a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800442c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004430:	4641      	mov	r1, r8
 8004432:	eb12 0a01 	adds.w	sl, r2, r1
 8004436:	4649      	mov	r1, r9
 8004438:	eb43 0b01 	adc.w	fp, r3, r1
 800443c:	f04f 0200 	mov.w	r2, #0
 8004440:	f04f 0300 	mov.w	r3, #0
 8004444:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004448:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800444c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004450:	4692      	mov	sl, r2
 8004452:	469b      	mov	fp, r3
 8004454:	4643      	mov	r3, r8
 8004456:	eb1a 0303 	adds.w	r3, sl, r3
 800445a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800445e:	464b      	mov	r3, r9
 8004460:	eb4b 0303 	adc.w	r3, fp, r3
 8004464:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004468:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	2200      	movs	r2, #0
 8004470:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004474:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004478:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800447c:	460b      	mov	r3, r1
 800447e:	18db      	adds	r3, r3, r3
 8004480:	643b      	str	r3, [r7, #64]	@ 0x40
 8004482:	4613      	mov	r3, r2
 8004484:	eb42 0303 	adc.w	r3, r2, r3
 8004488:	647b      	str	r3, [r7, #68]	@ 0x44
 800448a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800448e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004492:	f7fc fa13 	bl	80008bc <__aeabi_uldivmod>
 8004496:	4602      	mov	r2, r0
 8004498:	460b      	mov	r3, r1
 800449a:	4611      	mov	r1, r2
 800449c:	4b3b      	ldr	r3, [pc, #236]	@ (800458c <UART_SetConfig+0x2d4>)
 800449e:	fba3 2301 	umull	r2, r3, r3, r1
 80044a2:	095b      	lsrs	r3, r3, #5
 80044a4:	2264      	movs	r2, #100	@ 0x64
 80044a6:	fb02 f303 	mul.w	r3, r2, r3
 80044aa:	1acb      	subs	r3, r1, r3
 80044ac:	00db      	lsls	r3, r3, #3
 80044ae:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80044b2:	4b36      	ldr	r3, [pc, #216]	@ (800458c <UART_SetConfig+0x2d4>)
 80044b4:	fba3 2302 	umull	r2, r3, r3, r2
 80044b8:	095b      	lsrs	r3, r3, #5
 80044ba:	005b      	lsls	r3, r3, #1
 80044bc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80044c0:	441c      	add	r4, r3
 80044c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80044c6:	2200      	movs	r2, #0
 80044c8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80044cc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80044d0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80044d4:	4642      	mov	r2, r8
 80044d6:	464b      	mov	r3, r9
 80044d8:	1891      	adds	r1, r2, r2
 80044da:	63b9      	str	r1, [r7, #56]	@ 0x38
 80044dc:	415b      	adcs	r3, r3
 80044de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80044e0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80044e4:	4641      	mov	r1, r8
 80044e6:	1851      	adds	r1, r2, r1
 80044e8:	6339      	str	r1, [r7, #48]	@ 0x30
 80044ea:	4649      	mov	r1, r9
 80044ec:	414b      	adcs	r3, r1
 80044ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80044f0:	f04f 0200 	mov.w	r2, #0
 80044f4:	f04f 0300 	mov.w	r3, #0
 80044f8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80044fc:	4659      	mov	r1, fp
 80044fe:	00cb      	lsls	r3, r1, #3
 8004500:	4651      	mov	r1, sl
 8004502:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004506:	4651      	mov	r1, sl
 8004508:	00ca      	lsls	r2, r1, #3
 800450a:	4610      	mov	r0, r2
 800450c:	4619      	mov	r1, r3
 800450e:	4603      	mov	r3, r0
 8004510:	4642      	mov	r2, r8
 8004512:	189b      	adds	r3, r3, r2
 8004514:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004518:	464b      	mov	r3, r9
 800451a:	460a      	mov	r2, r1
 800451c:	eb42 0303 	adc.w	r3, r2, r3
 8004520:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004524:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	2200      	movs	r2, #0
 800452c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004530:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004534:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004538:	460b      	mov	r3, r1
 800453a:	18db      	adds	r3, r3, r3
 800453c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800453e:	4613      	mov	r3, r2
 8004540:	eb42 0303 	adc.w	r3, r2, r3
 8004544:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004546:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800454a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800454e:	f7fc f9b5 	bl	80008bc <__aeabi_uldivmod>
 8004552:	4602      	mov	r2, r0
 8004554:	460b      	mov	r3, r1
 8004556:	4b0d      	ldr	r3, [pc, #52]	@ (800458c <UART_SetConfig+0x2d4>)
 8004558:	fba3 1302 	umull	r1, r3, r3, r2
 800455c:	095b      	lsrs	r3, r3, #5
 800455e:	2164      	movs	r1, #100	@ 0x64
 8004560:	fb01 f303 	mul.w	r3, r1, r3
 8004564:	1ad3      	subs	r3, r2, r3
 8004566:	00db      	lsls	r3, r3, #3
 8004568:	3332      	adds	r3, #50	@ 0x32
 800456a:	4a08      	ldr	r2, [pc, #32]	@ (800458c <UART_SetConfig+0x2d4>)
 800456c:	fba2 2303 	umull	r2, r3, r2, r3
 8004570:	095b      	lsrs	r3, r3, #5
 8004572:	f003 0207 	and.w	r2, r3, #7
 8004576:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4422      	add	r2, r4
 800457e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004580:	e106      	b.n	8004790 <UART_SetConfig+0x4d8>
 8004582:	bf00      	nop
 8004584:	40011000 	.word	0x40011000
 8004588:	40011400 	.word	0x40011400
 800458c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004590:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004594:	2200      	movs	r2, #0
 8004596:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800459a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800459e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80045a2:	4642      	mov	r2, r8
 80045a4:	464b      	mov	r3, r9
 80045a6:	1891      	adds	r1, r2, r2
 80045a8:	6239      	str	r1, [r7, #32]
 80045aa:	415b      	adcs	r3, r3
 80045ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80045ae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80045b2:	4641      	mov	r1, r8
 80045b4:	1854      	adds	r4, r2, r1
 80045b6:	4649      	mov	r1, r9
 80045b8:	eb43 0501 	adc.w	r5, r3, r1
 80045bc:	f04f 0200 	mov.w	r2, #0
 80045c0:	f04f 0300 	mov.w	r3, #0
 80045c4:	00eb      	lsls	r3, r5, #3
 80045c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80045ca:	00e2      	lsls	r2, r4, #3
 80045cc:	4614      	mov	r4, r2
 80045ce:	461d      	mov	r5, r3
 80045d0:	4643      	mov	r3, r8
 80045d2:	18e3      	adds	r3, r4, r3
 80045d4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80045d8:	464b      	mov	r3, r9
 80045da:	eb45 0303 	adc.w	r3, r5, r3
 80045de:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80045e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	2200      	movs	r2, #0
 80045ea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80045ee:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80045f2:	f04f 0200 	mov.w	r2, #0
 80045f6:	f04f 0300 	mov.w	r3, #0
 80045fa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80045fe:	4629      	mov	r1, r5
 8004600:	008b      	lsls	r3, r1, #2
 8004602:	4621      	mov	r1, r4
 8004604:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004608:	4621      	mov	r1, r4
 800460a:	008a      	lsls	r2, r1, #2
 800460c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004610:	f7fc f954 	bl	80008bc <__aeabi_uldivmod>
 8004614:	4602      	mov	r2, r0
 8004616:	460b      	mov	r3, r1
 8004618:	4b60      	ldr	r3, [pc, #384]	@ (800479c <UART_SetConfig+0x4e4>)
 800461a:	fba3 2302 	umull	r2, r3, r3, r2
 800461e:	095b      	lsrs	r3, r3, #5
 8004620:	011c      	lsls	r4, r3, #4
 8004622:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004626:	2200      	movs	r2, #0
 8004628:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800462c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004630:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004634:	4642      	mov	r2, r8
 8004636:	464b      	mov	r3, r9
 8004638:	1891      	adds	r1, r2, r2
 800463a:	61b9      	str	r1, [r7, #24]
 800463c:	415b      	adcs	r3, r3
 800463e:	61fb      	str	r3, [r7, #28]
 8004640:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004644:	4641      	mov	r1, r8
 8004646:	1851      	adds	r1, r2, r1
 8004648:	6139      	str	r1, [r7, #16]
 800464a:	4649      	mov	r1, r9
 800464c:	414b      	adcs	r3, r1
 800464e:	617b      	str	r3, [r7, #20]
 8004650:	f04f 0200 	mov.w	r2, #0
 8004654:	f04f 0300 	mov.w	r3, #0
 8004658:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800465c:	4659      	mov	r1, fp
 800465e:	00cb      	lsls	r3, r1, #3
 8004660:	4651      	mov	r1, sl
 8004662:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004666:	4651      	mov	r1, sl
 8004668:	00ca      	lsls	r2, r1, #3
 800466a:	4610      	mov	r0, r2
 800466c:	4619      	mov	r1, r3
 800466e:	4603      	mov	r3, r0
 8004670:	4642      	mov	r2, r8
 8004672:	189b      	adds	r3, r3, r2
 8004674:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004678:	464b      	mov	r3, r9
 800467a:	460a      	mov	r2, r1
 800467c:	eb42 0303 	adc.w	r3, r2, r3
 8004680:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004684:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	2200      	movs	r2, #0
 800468c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800468e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004690:	f04f 0200 	mov.w	r2, #0
 8004694:	f04f 0300 	mov.w	r3, #0
 8004698:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800469c:	4649      	mov	r1, r9
 800469e:	008b      	lsls	r3, r1, #2
 80046a0:	4641      	mov	r1, r8
 80046a2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80046a6:	4641      	mov	r1, r8
 80046a8:	008a      	lsls	r2, r1, #2
 80046aa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80046ae:	f7fc f905 	bl	80008bc <__aeabi_uldivmod>
 80046b2:	4602      	mov	r2, r0
 80046b4:	460b      	mov	r3, r1
 80046b6:	4611      	mov	r1, r2
 80046b8:	4b38      	ldr	r3, [pc, #224]	@ (800479c <UART_SetConfig+0x4e4>)
 80046ba:	fba3 2301 	umull	r2, r3, r3, r1
 80046be:	095b      	lsrs	r3, r3, #5
 80046c0:	2264      	movs	r2, #100	@ 0x64
 80046c2:	fb02 f303 	mul.w	r3, r2, r3
 80046c6:	1acb      	subs	r3, r1, r3
 80046c8:	011b      	lsls	r3, r3, #4
 80046ca:	3332      	adds	r3, #50	@ 0x32
 80046cc:	4a33      	ldr	r2, [pc, #204]	@ (800479c <UART_SetConfig+0x4e4>)
 80046ce:	fba2 2303 	umull	r2, r3, r2, r3
 80046d2:	095b      	lsrs	r3, r3, #5
 80046d4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80046d8:	441c      	add	r4, r3
 80046da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80046de:	2200      	movs	r2, #0
 80046e0:	673b      	str	r3, [r7, #112]	@ 0x70
 80046e2:	677a      	str	r2, [r7, #116]	@ 0x74
 80046e4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80046e8:	4642      	mov	r2, r8
 80046ea:	464b      	mov	r3, r9
 80046ec:	1891      	adds	r1, r2, r2
 80046ee:	60b9      	str	r1, [r7, #8]
 80046f0:	415b      	adcs	r3, r3
 80046f2:	60fb      	str	r3, [r7, #12]
 80046f4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80046f8:	4641      	mov	r1, r8
 80046fa:	1851      	adds	r1, r2, r1
 80046fc:	6039      	str	r1, [r7, #0]
 80046fe:	4649      	mov	r1, r9
 8004700:	414b      	adcs	r3, r1
 8004702:	607b      	str	r3, [r7, #4]
 8004704:	f04f 0200 	mov.w	r2, #0
 8004708:	f04f 0300 	mov.w	r3, #0
 800470c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004710:	4659      	mov	r1, fp
 8004712:	00cb      	lsls	r3, r1, #3
 8004714:	4651      	mov	r1, sl
 8004716:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800471a:	4651      	mov	r1, sl
 800471c:	00ca      	lsls	r2, r1, #3
 800471e:	4610      	mov	r0, r2
 8004720:	4619      	mov	r1, r3
 8004722:	4603      	mov	r3, r0
 8004724:	4642      	mov	r2, r8
 8004726:	189b      	adds	r3, r3, r2
 8004728:	66bb      	str	r3, [r7, #104]	@ 0x68
 800472a:	464b      	mov	r3, r9
 800472c:	460a      	mov	r2, r1
 800472e:	eb42 0303 	adc.w	r3, r2, r3
 8004732:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004734:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	2200      	movs	r2, #0
 800473c:	663b      	str	r3, [r7, #96]	@ 0x60
 800473e:	667a      	str	r2, [r7, #100]	@ 0x64
 8004740:	f04f 0200 	mov.w	r2, #0
 8004744:	f04f 0300 	mov.w	r3, #0
 8004748:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800474c:	4649      	mov	r1, r9
 800474e:	008b      	lsls	r3, r1, #2
 8004750:	4641      	mov	r1, r8
 8004752:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004756:	4641      	mov	r1, r8
 8004758:	008a      	lsls	r2, r1, #2
 800475a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800475e:	f7fc f8ad 	bl	80008bc <__aeabi_uldivmod>
 8004762:	4602      	mov	r2, r0
 8004764:	460b      	mov	r3, r1
 8004766:	4b0d      	ldr	r3, [pc, #52]	@ (800479c <UART_SetConfig+0x4e4>)
 8004768:	fba3 1302 	umull	r1, r3, r3, r2
 800476c:	095b      	lsrs	r3, r3, #5
 800476e:	2164      	movs	r1, #100	@ 0x64
 8004770:	fb01 f303 	mul.w	r3, r1, r3
 8004774:	1ad3      	subs	r3, r2, r3
 8004776:	011b      	lsls	r3, r3, #4
 8004778:	3332      	adds	r3, #50	@ 0x32
 800477a:	4a08      	ldr	r2, [pc, #32]	@ (800479c <UART_SetConfig+0x4e4>)
 800477c:	fba2 2303 	umull	r2, r3, r2, r3
 8004780:	095b      	lsrs	r3, r3, #5
 8004782:	f003 020f 	and.w	r2, r3, #15
 8004786:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4422      	add	r2, r4
 800478e:	609a      	str	r2, [r3, #8]
}
 8004790:	bf00      	nop
 8004792:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004796:	46bd      	mov	sp, r7
 8004798:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800479c:	51eb851f 	.word	0x51eb851f

080047a0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80047a4:	4904      	ldr	r1, [pc, #16]	@ (80047b8 <MX_FATFS_Init+0x18>)
 80047a6:	4805      	ldr	r0, [pc, #20]	@ (80047bc <MX_FATFS_Init+0x1c>)
 80047a8:	f004 f8fa 	bl	80089a0 <FATFS_LinkDriver>
 80047ac:	4603      	mov	r3, r0
 80047ae:	461a      	mov	r2, r3
 80047b0:	4b03      	ldr	r3, [pc, #12]	@ (80047c0 <MX_FATFS_Init+0x20>)
 80047b2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80047b4:	bf00      	nop
 80047b6:	bd80      	pop	{r7, pc}
 80047b8:	20000294 	.word	0x20000294
 80047bc:	2000000c 	.word	0x2000000c
 80047c0:	20000290 	.word	0x20000290

080047c4 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80047c4:	b480      	push	{r7}
 80047c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80047c8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80047ca:	4618      	mov	r0, r3
 80047cc:	46bd      	mov	sp, r7
 80047ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d2:	4770      	bx	lr

080047d4 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b082      	sub	sp, #8
 80047d8:	af00      	add	r7, sp, #0
 80047da:	4603      	mov	r3, r0
 80047dc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = SD_disk_initialize(pdrv);;
 80047de:	79fb      	ldrb	r3, [r7, #7]
 80047e0:	4618      	mov	r0, r3
 80047e2:	f000 fa0f 	bl	8004c04 <SD_disk_initialize>
 80047e6:	4603      	mov	r3, r0
 80047e8:	461a      	mov	r2, r3
 80047ea:	4b04      	ldr	r3, [pc, #16]	@ (80047fc <USER_initialize+0x28>)
 80047ec:	701a      	strb	r2, [r3, #0]
    return Stat;
 80047ee:	4b03      	ldr	r3, [pc, #12]	@ (80047fc <USER_initialize+0x28>)
 80047f0:	781b      	ldrb	r3, [r3, #0]
 80047f2:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	3708      	adds	r7, #8
 80047f8:	46bd      	mov	sp, r7
 80047fa:	bd80      	pop	{r7, pc}
 80047fc:	20000009 	.word	0x20000009

08004800 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b082      	sub	sp, #8
 8004804:	af00      	add	r7, sp, #0
 8004806:	4603      	mov	r3, r0
 8004808:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = SD_disk_status(pdrv);
 800480a:	79fb      	ldrb	r3, [r7, #7]
 800480c:	4618      	mov	r0, r3
 800480e:	f000 fadf 	bl	8004dd0 <SD_disk_status>
 8004812:	4603      	mov	r3, r0
 8004814:	461a      	mov	r2, r3
 8004816:	4b04      	ldr	r3, [pc, #16]	@ (8004828 <USER_status+0x28>)
 8004818:	701a      	strb	r2, [r3, #0]
    return Stat;
 800481a:	4b03      	ldr	r3, [pc, #12]	@ (8004828 <USER_status+0x28>)
 800481c:	781b      	ldrb	r3, [r3, #0]
 800481e:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8004820:	4618      	mov	r0, r3
 8004822:	3708      	adds	r7, #8
 8004824:	46bd      	mov	sp, r7
 8004826:	bd80      	pop	{r7, pc}
 8004828:	20000009 	.word	0x20000009

0800482c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b084      	sub	sp, #16
 8004830:	af00      	add	r7, sp, #0
 8004832:	60b9      	str	r1, [r7, #8]
 8004834:	607a      	str	r2, [r7, #4]
 8004836:	603b      	str	r3, [r7, #0]
 8004838:	4603      	mov	r3, r0
 800483a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 800483c:	7bf8      	ldrb	r0, [r7, #15]
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	687a      	ldr	r2, [r7, #4]
 8004842:	68b9      	ldr	r1, [r7, #8]
 8004844:	f000 fada 	bl	8004dfc <SD_disk_read>
 8004848:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800484a:	4618      	mov	r0, r3
 800484c:	3710      	adds	r7, #16
 800484e:	46bd      	mov	sp, r7
 8004850:	bd80      	pop	{r7, pc}

08004852 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8004852:	b580      	push	{r7, lr}
 8004854:	b084      	sub	sp, #16
 8004856:	af00      	add	r7, sp, #0
 8004858:	60b9      	str	r1, [r7, #8]
 800485a:	607a      	str	r2, [r7, #4]
 800485c:	603b      	str	r3, [r7, #0]
 800485e:	4603      	mov	r3, r0
 8004860:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 8004862:	7bf8      	ldrb	r0, [r7, #15]
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	687a      	ldr	r2, [r7, #4]
 8004868:	68b9      	ldr	r1, [r7, #8]
 800486a:	f000 fb31 	bl	8004ed0 <SD_disk_write>
 800486e:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8004870:	4618      	mov	r0, r3
 8004872:	3710      	adds	r7, #16
 8004874:	46bd      	mov	sp, r7
 8004876:	bd80      	pop	{r7, pc}

08004878 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b084      	sub	sp, #16
 800487c:	af00      	add	r7, sp, #0
 800487e:	4603      	mov	r3, r0
 8004880:	603a      	str	r2, [r7, #0]
 8004882:	71fb      	strb	r3, [r7, #7]
 8004884:	460b      	mov	r3, r1
 8004886:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = SD_disk_ioctl(pdrv, cmd, buff);
 8004888:	79b9      	ldrb	r1, [r7, #6]
 800488a:	79fb      	ldrb	r3, [r7, #7]
 800488c:	683a      	ldr	r2, [r7, #0]
 800488e:	4618      	mov	r0, r3
 8004890:	f000 fba2 	bl	8004fd8 <SD_disk_ioctl>
 8004894:	4603      	mov	r3, r0
 8004896:	73fb      	strb	r3, [r7, #15]
    return res;
 8004898:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 800489a:	4618      	mov	r0, r3
 800489c:	3710      	adds	r7, #16
 800489e:	46bd      	mov	sp, r7
 80048a0:	bd80      	pop	{r7, pc}
	...

080048a4 <SELECT>:

//-----[ SPI Functions ]-----

/* slave select */
static void SELECT(void)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 80048a8:	2200      	movs	r2, #0
 80048aa:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80048ae:	4802      	ldr	r0, [pc, #8]	@ (80048b8 <SELECT+0x14>)
 80048b0:	f7fd fc68 	bl	8002184 <HAL_GPIO_WritePin>
}
 80048b4:	bf00      	nop
 80048b6:	bd80      	pop	{r7, pc}
 80048b8:	40020800 	.word	0x40020800

080048bc <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 80048c0:	2201      	movs	r2, #1
 80048c2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80048c6:	4802      	ldr	r0, [pc, #8]	@ (80048d0 <DESELECT+0x14>)
 80048c8:	f7fd fc5c 	bl	8002184 <HAL_GPIO_WritePin>
}
 80048cc:	bf00      	nop
 80048ce:	bd80      	pop	{r7, pc}
 80048d0:	40020800 	.word	0x40020800

080048d4 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b082      	sub	sp, #8
 80048d8:	af00      	add	r7, sp, #0
 80048da:	4603      	mov	r3, r0
 80048dc:	71fb      	strb	r3, [r7, #7]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80048de:	bf00      	nop
 80048e0:	4b08      	ldr	r3, [pc, #32]	@ (8004904 <SPI_TxByte+0x30>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	689b      	ldr	r3, [r3, #8]
 80048e6:	f003 0302 	and.w	r3, r3, #2
 80048ea:	2b02      	cmp	r3, #2
 80048ec:	d1f8      	bne.n	80048e0 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 80048ee:	1df9      	adds	r1, r7, #7
 80048f0:	2364      	movs	r3, #100	@ 0x64
 80048f2:	2201      	movs	r2, #1
 80048f4:	4803      	ldr	r0, [pc, #12]	@ (8004904 <SPI_TxByte+0x30>)
 80048f6:	f7fe fad0 	bl	8002e9a <HAL_SPI_Transmit>
}
 80048fa:	bf00      	nop
 80048fc:	3708      	adds	r7, #8
 80048fe:	46bd      	mov	sp, r7
 8004900:	bd80      	pop	{r7, pc}
 8004902:	bf00      	nop
 8004904:	20000090 	.word	0x20000090

08004908 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b082      	sub	sp, #8
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
 8004910:	460b      	mov	r3, r1
 8004912:	807b      	strh	r3, [r7, #2]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8004914:	bf00      	nop
 8004916:	4b08      	ldr	r3, [pc, #32]	@ (8004938 <SPI_TxBuffer+0x30>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	689b      	ldr	r3, [r3, #8]
 800491c:	f003 0302 	and.w	r3, r3, #2
 8004920:	2b02      	cmp	r3, #2
 8004922:	d1f8      	bne.n	8004916 <SPI_TxBuffer+0xe>
  HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8004924:	887a      	ldrh	r2, [r7, #2]
 8004926:	2364      	movs	r3, #100	@ 0x64
 8004928:	6879      	ldr	r1, [r7, #4]
 800492a:	4803      	ldr	r0, [pc, #12]	@ (8004938 <SPI_TxBuffer+0x30>)
 800492c:	f7fe fab5 	bl	8002e9a <HAL_SPI_Transmit>
}
 8004930:	bf00      	nop
 8004932:	3708      	adds	r7, #8
 8004934:	46bd      	mov	sp, r7
 8004936:	bd80      	pop	{r7, pc}
 8004938:	20000090 	.word	0x20000090

0800493c <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b084      	sub	sp, #16
 8004940:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 8004942:	23ff      	movs	r3, #255	@ 0xff
 8004944:	71fb      	strb	r3, [r7, #7]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8004946:	bf00      	nop
 8004948:	4b09      	ldr	r3, [pc, #36]	@ (8004970 <SPI_RxByte+0x34>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	689b      	ldr	r3, [r3, #8]
 800494e:	f003 0302 	and.w	r3, r3, #2
 8004952:	2b02      	cmp	r3, #2
 8004954:	d1f8      	bne.n	8004948 <SPI_RxByte+0xc>
  HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8004956:	1dba      	adds	r2, r7, #6
 8004958:	1df9      	adds	r1, r7, #7
 800495a:	2364      	movs	r3, #100	@ 0x64
 800495c:	9300      	str	r3, [sp, #0]
 800495e:	2301      	movs	r3, #1
 8004960:	4803      	ldr	r0, [pc, #12]	@ (8004970 <SPI_RxByte+0x34>)
 8004962:	f7fe fbdd 	bl	8003120 <HAL_SPI_TransmitReceive>
  return data;
 8004966:	79bb      	ldrb	r3, [r7, #6]
}
 8004968:	4618      	mov	r0, r3
 800496a:	3708      	adds	r7, #8
 800496c:	46bd      	mov	sp, r7
 800496e:	bd80      	pop	{r7, pc}
 8004970:	20000090 	.word	0x20000090

08004974 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b082      	sub	sp, #8
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 800497c:	f7ff ffde 	bl	800493c <SPI_RxByte>
 8004980:	4603      	mov	r3, r0
 8004982:	461a      	mov	r2, r3
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	701a      	strb	r2, [r3, #0]
}
 8004988:	bf00      	nop
 800498a:	3708      	adds	r7, #8
 800498c:	46bd      	mov	sp, r7
 800498e:	bd80      	pop	{r7, pc}

08004990 <SD_ReadyWait>:

//-----[ SD Card Functions ]-----

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b082      	sub	sp, #8
 8004994:	af00      	add	r7, sp, #0
  uint8_t res;
  /* timeout 500ms */
  Timer2 = 500;
 8004996:	4b0a      	ldr	r3, [pc, #40]	@ (80049c0 <SD_ReadyWait+0x30>)
 8004998:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800499c:	801a      	strh	r2, [r3, #0]
  /* if SD goes ready, receives 0xFF */
  do {
    res = SPI_RxByte();
 800499e:	f7ff ffcd 	bl	800493c <SPI_RxByte>
 80049a2:	4603      	mov	r3, r0
 80049a4:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 80049a6:	79fb      	ldrb	r3, [r7, #7]
 80049a8:	2bff      	cmp	r3, #255	@ 0xff
 80049aa:	d003      	beq.n	80049b4 <SD_ReadyWait+0x24>
 80049ac:	4b04      	ldr	r3, [pc, #16]	@ (80049c0 <SD_ReadyWait+0x30>)
 80049ae:	881b      	ldrh	r3, [r3, #0]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d1f4      	bne.n	800499e <SD_ReadyWait+0xe>
  return res;
 80049b4:	79fb      	ldrb	r3, [r7, #7]
}
 80049b6:	4618      	mov	r0, r3
 80049b8:	3708      	adds	r7, #8
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bd80      	pop	{r7, pc}
 80049be:	bf00      	nop
 80049c0:	2000029a 	.word	0x2000029a

080049c4 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b084      	sub	sp, #16
 80049c8:	af00      	add	r7, sp, #0
  uint8_t args[6];
  uint32_t cnt = 0x1FFF;
 80049ca:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 80049ce:	60fb      	str	r3, [r7, #12]
  /* transmit bytes to wake up */
  DESELECT();
 80049d0:	f7ff ff74 	bl	80048bc <DESELECT>
  for(int i = 0; i < 10; i++)
 80049d4:	2300      	movs	r3, #0
 80049d6:	60bb      	str	r3, [r7, #8]
 80049d8:	e005      	b.n	80049e6 <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 80049da:	20ff      	movs	r0, #255	@ 0xff
 80049dc:	f7ff ff7a 	bl	80048d4 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	3301      	adds	r3, #1
 80049e4:	60bb      	str	r3, [r7, #8]
 80049e6:	68bb      	ldr	r3, [r7, #8]
 80049e8:	2b09      	cmp	r3, #9
 80049ea:	ddf6      	ble.n	80049da <SD_PowerOn+0x16>
  }
  /* slave select */
  SELECT();
 80049ec:	f7ff ff5a 	bl	80048a4 <SELECT>
  /* make idle state */
  args[0] = CMD0;   /* CMD0:GO_IDLE_STATE */
 80049f0:	2340      	movs	r3, #64	@ 0x40
 80049f2:	703b      	strb	r3, [r7, #0]
  args[1] = 0;
 80049f4:	2300      	movs	r3, #0
 80049f6:	707b      	strb	r3, [r7, #1]
  args[2] = 0;
 80049f8:	2300      	movs	r3, #0
 80049fa:	70bb      	strb	r3, [r7, #2]
  args[3] = 0;
 80049fc:	2300      	movs	r3, #0
 80049fe:	70fb      	strb	r3, [r7, #3]
  args[4] = 0;
 8004a00:	2300      	movs	r3, #0
 8004a02:	713b      	strb	r3, [r7, #4]
  args[5] = 0x95;
 8004a04:	2395      	movs	r3, #149	@ 0x95
 8004a06:	717b      	strb	r3, [r7, #5]
  SPI_TxBuffer(args, sizeof(args));
 8004a08:	463b      	mov	r3, r7
 8004a0a:	2106      	movs	r1, #6
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	f7ff ff7b 	bl	8004908 <SPI_TxBuffer>
  /* wait response */
  while ((SPI_RxByte() != 0x01) && cnt)
 8004a12:	e002      	b.n	8004a1a <SD_PowerOn+0x56>
  {
    cnt--;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	3b01      	subs	r3, #1
 8004a18:	60fb      	str	r3, [r7, #12]
  while ((SPI_RxByte() != 0x01) && cnt)
 8004a1a:	f7ff ff8f 	bl	800493c <SPI_RxByte>
 8004a1e:	4603      	mov	r3, r0
 8004a20:	2b01      	cmp	r3, #1
 8004a22:	d002      	beq.n	8004a2a <SD_PowerOn+0x66>
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d1f4      	bne.n	8004a14 <SD_PowerOn+0x50>
  }
  DESELECT();
 8004a2a:	f7ff ff47 	bl	80048bc <DESELECT>
  SPI_TxByte(0XFF);
 8004a2e:	20ff      	movs	r0, #255	@ 0xff
 8004a30:	f7ff ff50 	bl	80048d4 <SPI_TxByte>
  PowerFlag = 1;
 8004a34:	4b03      	ldr	r3, [pc, #12]	@ (8004a44 <SD_PowerOn+0x80>)
 8004a36:	2201      	movs	r2, #1
 8004a38:	701a      	strb	r2, [r3, #0]
}
 8004a3a:	bf00      	nop
 8004a3c:	3710      	adds	r7, #16
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bd80      	pop	{r7, pc}
 8004a42:	bf00      	nop
 8004a44:	2000029d 	.word	0x2000029d

08004a48 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8004a4c:	4b03      	ldr	r3, [pc, #12]	@ (8004a5c <SD_PowerOff+0x14>)
 8004a4e:	2200      	movs	r2, #0
 8004a50:	701a      	strb	r2, [r3, #0]
}
 8004a52:	bf00      	nop
 8004a54:	46bd      	mov	sp, r7
 8004a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5a:	4770      	bx	lr
 8004a5c:	2000029d 	.word	0x2000029d

08004a60 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 8004a60:	b480      	push	{r7}
 8004a62:	af00      	add	r7, sp, #0
  return PowerFlag;
 8004a64:	4b03      	ldr	r3, [pc, #12]	@ (8004a74 <SD_CheckPower+0x14>)
 8004a66:	781b      	ldrb	r3, [r3, #0]
}
 8004a68:	4618      	mov	r0, r3
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a70:	4770      	bx	lr
 8004a72:	bf00      	nop
 8004a74:	2000029d 	.word	0x2000029d

08004a78 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b084      	sub	sp, #16
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
 8004a80:	6039      	str	r1, [r7, #0]
  uint8_t token;
  /* timeout 200ms */
  Timer1 = 200;
 8004a82:	4b13      	ldr	r3, [pc, #76]	@ (8004ad0 <SD_RxDataBlock+0x58>)
 8004a84:	22c8      	movs	r2, #200	@ 0xc8
 8004a86:	801a      	strh	r2, [r3, #0]
  /* loop until receive a response or timeout */
  do {
    token = SPI_RxByte();
 8004a88:	f7ff ff58 	bl	800493c <SPI_RxByte>
 8004a8c:	4603      	mov	r3, r0
 8004a8e:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 8004a90:	7bfb      	ldrb	r3, [r7, #15]
 8004a92:	2bff      	cmp	r3, #255	@ 0xff
 8004a94:	d103      	bne.n	8004a9e <SD_RxDataBlock+0x26>
 8004a96:	4b0e      	ldr	r3, [pc, #56]	@ (8004ad0 <SD_RxDataBlock+0x58>)
 8004a98:	881b      	ldrh	r3, [r3, #0]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d1f4      	bne.n	8004a88 <SD_RxDataBlock+0x10>
  /* invalid response */
  if(token != 0xFE) return FALSE;
 8004a9e:	7bfb      	ldrb	r3, [r7, #15]
 8004aa0:	2bfe      	cmp	r3, #254	@ 0xfe
 8004aa2:	d001      	beq.n	8004aa8 <SD_RxDataBlock+0x30>
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	e00f      	b.n	8004ac8 <SD_RxDataBlock+0x50>
  /* receive data */
  do {
    SPI_RxBytePtr(buff++);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	1c5a      	adds	r2, r3, #1
 8004aac:	607a      	str	r2, [r7, #4]
 8004aae:	4618      	mov	r0, r3
 8004ab0:	f7ff ff60 	bl	8004974 <SPI_RxBytePtr>
  } while(len--);
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	1e5a      	subs	r2, r3, #1
 8004ab8:	603a      	str	r2, [r7, #0]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d1f4      	bne.n	8004aa8 <SD_RxDataBlock+0x30>
  /* discard CRC */
  SPI_RxByte();
 8004abe:	f7ff ff3d 	bl	800493c <SPI_RxByte>
  SPI_RxByte();
 8004ac2:	f7ff ff3b 	bl	800493c <SPI_RxByte>
  return TRUE;
 8004ac6:	2301      	movs	r3, #1
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	3710      	adds	r7, #16
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bd80      	pop	{r7, pc}
 8004ad0:	20000298 	.word	0x20000298

08004ad4 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b084      	sub	sp, #16
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
 8004adc:	460b      	mov	r3, r1
 8004ade:	70fb      	strb	r3, [r7, #3]
  uint8_t resp;
  uint8_t i = 0;
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	73bb      	strb	r3, [r7, #14]
  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return FALSE;
 8004ae4:	f7ff ff54 	bl	8004990 <SD_ReadyWait>
 8004ae8:	4603      	mov	r3, r0
 8004aea:	2bff      	cmp	r3, #255	@ 0xff
 8004aec:	d001      	beq.n	8004af2 <SD_TxDataBlock+0x1e>
 8004aee:	2300      	movs	r3, #0
 8004af0:	e02f      	b.n	8004b52 <SD_TxDataBlock+0x7e>
  /* transmit token */
  SPI_TxByte(token);
 8004af2:	78fb      	ldrb	r3, [r7, #3]
 8004af4:	4618      	mov	r0, r3
 8004af6:	f7ff feed 	bl	80048d4 <SPI_TxByte>
  /* if it's not STOP token, transmit data */
  if (token != 0xFD)
 8004afa:	78fb      	ldrb	r3, [r7, #3]
 8004afc:	2bfd      	cmp	r3, #253	@ 0xfd
 8004afe:	d020      	beq.n	8004b42 <SD_TxDataBlock+0x6e>
  {
    SPI_TxBuffer((uint8_t*)buff, 512);
 8004b00:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004b04:	6878      	ldr	r0, [r7, #4]
 8004b06:	f7ff feff 	bl	8004908 <SPI_TxBuffer>
    /* discard CRC */
    SPI_RxByte();
 8004b0a:	f7ff ff17 	bl	800493c <SPI_RxByte>
    SPI_RxByte();
 8004b0e:	f7ff ff15 	bl	800493c <SPI_RxByte>
    /* receive response */
    while (i <= 64)
 8004b12:	e00b      	b.n	8004b2c <SD_TxDataBlock+0x58>
    {
      resp = SPI_RxByte();
 8004b14:	f7ff ff12 	bl	800493c <SPI_RxByte>
 8004b18:	4603      	mov	r3, r0
 8004b1a:	73fb      	strb	r3, [r7, #15]
      /* transmit 0x05 accepted */
      if ((resp & 0x1F) == 0x05) break;
 8004b1c:	7bfb      	ldrb	r3, [r7, #15]
 8004b1e:	f003 031f 	and.w	r3, r3, #31
 8004b22:	2b05      	cmp	r3, #5
 8004b24:	d006      	beq.n	8004b34 <SD_TxDataBlock+0x60>
      i++;
 8004b26:	7bbb      	ldrb	r3, [r7, #14]
 8004b28:	3301      	adds	r3, #1
 8004b2a:	73bb      	strb	r3, [r7, #14]
    while (i <= 64)
 8004b2c:	7bbb      	ldrb	r3, [r7, #14]
 8004b2e:	2b40      	cmp	r3, #64	@ 0x40
 8004b30:	d9f0      	bls.n	8004b14 <SD_TxDataBlock+0x40>
 8004b32:	e000      	b.n	8004b36 <SD_TxDataBlock+0x62>
      if ((resp & 0x1F) == 0x05) break;
 8004b34:	bf00      	nop
    }
    /* recv buffer clear */
    while (SPI_RxByte() == 0);
 8004b36:	bf00      	nop
 8004b38:	f7ff ff00 	bl	800493c <SPI_RxByte>
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d0fa      	beq.n	8004b38 <SD_TxDataBlock+0x64>
  }
  /* transmit 0x05 accepted */
  if ((resp & 0x1F) == 0x05) return TRUE;
 8004b42:	7bfb      	ldrb	r3, [r7, #15]
 8004b44:	f003 031f 	and.w	r3, r3, #31
 8004b48:	2b05      	cmp	r3, #5
 8004b4a:	d101      	bne.n	8004b50 <SD_TxDataBlock+0x7c>
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	e000      	b.n	8004b52 <SD_TxDataBlock+0x7e>

  return FALSE;
 8004b50:	2300      	movs	r3, #0
}
 8004b52:	4618      	mov	r0, r3
 8004b54:	3710      	adds	r7, #16
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bd80      	pop	{r7, pc}

08004b5a <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8004b5a:	b580      	push	{r7, lr}
 8004b5c:	b084      	sub	sp, #16
 8004b5e:	af00      	add	r7, sp, #0
 8004b60:	4603      	mov	r3, r0
 8004b62:	6039      	str	r1, [r7, #0]
 8004b64:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;
  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return 0xFF;
 8004b66:	f7ff ff13 	bl	8004990 <SD_ReadyWait>
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	2bff      	cmp	r3, #255	@ 0xff
 8004b6e:	d001      	beq.n	8004b74 <SD_SendCmd+0x1a>
 8004b70:	23ff      	movs	r3, #255	@ 0xff
 8004b72:	e042      	b.n	8004bfa <SD_SendCmd+0xa0>
  /* transmit command */
  SPI_TxByte(cmd);          /* Command */
 8004b74:	79fb      	ldrb	r3, [r7, #7]
 8004b76:	4618      	mov	r0, r3
 8004b78:	f7ff feac 	bl	80048d4 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 24));   /* Argument[31..24] */
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	0e1b      	lsrs	r3, r3, #24
 8004b80:	b2db      	uxtb	r3, r3
 8004b82:	4618      	mov	r0, r3
 8004b84:	f7ff fea6 	bl	80048d4 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 16));   /* Argument[23..16] */
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	0c1b      	lsrs	r3, r3, #16
 8004b8c:	b2db      	uxtb	r3, r3
 8004b8e:	4618      	mov	r0, r3
 8004b90:	f7ff fea0 	bl	80048d4 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 8));  /* Argument[15..8] */
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	0a1b      	lsrs	r3, r3, #8
 8004b98:	b2db      	uxtb	r3, r3
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	f7ff fe9a 	bl	80048d4 <SPI_TxByte>
  SPI_TxByte((uint8_t)arg);       /* Argument[7..0] */
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	b2db      	uxtb	r3, r3
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	f7ff fe95 	bl	80048d4 <SPI_TxByte>
  /* prepare CRC */
  if(cmd == CMD0) crc = 0x95; /* CRC for CMD0(0) */
 8004baa:	79fb      	ldrb	r3, [r7, #7]
 8004bac:	2b40      	cmp	r3, #64	@ 0x40
 8004bae:	d102      	bne.n	8004bb6 <SD_SendCmd+0x5c>
 8004bb0:	2395      	movs	r3, #149	@ 0x95
 8004bb2:	73fb      	strb	r3, [r7, #15]
 8004bb4:	e007      	b.n	8004bc6 <SD_SendCmd+0x6c>
  else if(cmd == CMD8) crc = 0x87;  /* CRC for CMD8(0x1AA) */
 8004bb6:	79fb      	ldrb	r3, [r7, #7]
 8004bb8:	2b48      	cmp	r3, #72	@ 0x48
 8004bba:	d102      	bne.n	8004bc2 <SD_SendCmd+0x68>
 8004bbc:	2387      	movs	r3, #135	@ 0x87
 8004bbe:	73fb      	strb	r3, [r7, #15]
 8004bc0:	e001      	b.n	8004bc6 <SD_SendCmd+0x6c>
  else crc = 1;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	73fb      	strb	r3, [r7, #15]
  /* transmit CRC */
  SPI_TxByte(crc);
 8004bc6:	7bfb      	ldrb	r3, [r7, #15]
 8004bc8:	4618      	mov	r0, r3
 8004bca:	f7ff fe83 	bl	80048d4 <SPI_TxByte>
  /* Skip a stuff byte when STOP_TRANSMISSION */
  if (cmd == CMD12) SPI_RxByte();
 8004bce:	79fb      	ldrb	r3, [r7, #7]
 8004bd0:	2b4c      	cmp	r3, #76	@ 0x4c
 8004bd2:	d101      	bne.n	8004bd8 <SD_SendCmd+0x7e>
 8004bd4:	f7ff feb2 	bl	800493c <SPI_RxByte>
  /* receive response */
  uint8_t n = 10;
 8004bd8:	230a      	movs	r3, #10
 8004bda:	73bb      	strb	r3, [r7, #14]
  do {
    res = SPI_RxByte();
 8004bdc:	f7ff feae 	bl	800493c <SPI_RxByte>
 8004be0:	4603      	mov	r3, r0
 8004be2:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 8004be4:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	da05      	bge.n	8004bf8 <SD_SendCmd+0x9e>
 8004bec:	7bbb      	ldrb	r3, [r7, #14]
 8004bee:	3b01      	subs	r3, #1
 8004bf0:	73bb      	strb	r3, [r7, #14]
 8004bf2:	7bbb      	ldrb	r3, [r7, #14]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d1f1      	bne.n	8004bdc <SD_SendCmd+0x82>

  return res;
 8004bf8:	7b7b      	ldrb	r3, [r7, #13]
}
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	3710      	adds	r7, #16
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bd80      	pop	{r7, pc}
	...

08004c04 <SD_disk_initialize>:

//-----[ user_diskio.c Functions ]-----

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8004c04:	b590      	push	{r4, r7, lr}
 8004c06:	b085      	sub	sp, #20
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	4603      	mov	r3, r0
 8004c0c:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];
  /* single drive, drv should be 0 */
  if(drv) return STA_NOINIT;
 8004c0e:	79fb      	ldrb	r3, [r7, #7]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d001      	beq.n	8004c18 <SD_disk_initialize+0x14>
 8004c14:	2301      	movs	r3, #1
 8004c16:	e0d1      	b.n	8004dbc <SD_disk_initialize+0x1b8>
  /* no disk */
  if(Stat & STA_NODISK) return Stat;
 8004c18:	4b6a      	ldr	r3, [pc, #424]	@ (8004dc4 <SD_disk_initialize+0x1c0>)
 8004c1a:	781b      	ldrb	r3, [r3, #0]
 8004c1c:	b2db      	uxtb	r3, r3
 8004c1e:	f003 0302 	and.w	r3, r3, #2
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d003      	beq.n	8004c2e <SD_disk_initialize+0x2a>
 8004c26:	4b67      	ldr	r3, [pc, #412]	@ (8004dc4 <SD_disk_initialize+0x1c0>)
 8004c28:	781b      	ldrb	r3, [r3, #0]
 8004c2a:	b2db      	uxtb	r3, r3
 8004c2c:	e0c6      	b.n	8004dbc <SD_disk_initialize+0x1b8>
  /* power on */
  SD_PowerOn();
 8004c2e:	f7ff fec9 	bl	80049c4 <SD_PowerOn>
  /* slave select */
  SELECT();
 8004c32:	f7ff fe37 	bl	80048a4 <SELECT>
  /* check disk type */
  type = 0;
 8004c36:	2300      	movs	r3, #0
 8004c38:	73bb      	strb	r3, [r7, #14]
  /* send GO_IDLE_STATE command */
  if (SD_SendCmd(CMD0, 0) == 1)
 8004c3a:	2100      	movs	r1, #0
 8004c3c:	2040      	movs	r0, #64	@ 0x40
 8004c3e:	f7ff ff8c 	bl	8004b5a <SD_SendCmd>
 8004c42:	4603      	mov	r3, r0
 8004c44:	2b01      	cmp	r3, #1
 8004c46:	f040 80a1 	bne.w	8004d8c <SD_disk_initialize+0x188>
  {
    /* timeout 1 sec */
    Timer1 = 1000;
 8004c4a:	4b5f      	ldr	r3, [pc, #380]	@ (8004dc8 <SD_disk_initialize+0x1c4>)
 8004c4c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004c50:	801a      	strh	r2, [r3, #0]
    /* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8004c52:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8004c56:	2048      	movs	r0, #72	@ 0x48
 8004c58:	f7ff ff7f 	bl	8004b5a <SD_SendCmd>
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	2b01      	cmp	r3, #1
 8004c60:	d155      	bne.n	8004d0e <SD_disk_initialize+0x10a>
    {
      /* operation condition register */
      for (n = 0; n < 4; n++)
 8004c62:	2300      	movs	r3, #0
 8004c64:	73fb      	strb	r3, [r7, #15]
 8004c66:	e00c      	b.n	8004c82 <SD_disk_initialize+0x7e>
      {
        ocr[n] = SPI_RxByte();
 8004c68:	7bfc      	ldrb	r4, [r7, #15]
 8004c6a:	f7ff fe67 	bl	800493c <SPI_RxByte>
 8004c6e:	4603      	mov	r3, r0
 8004c70:	461a      	mov	r2, r3
 8004c72:	f104 0310 	add.w	r3, r4, #16
 8004c76:	443b      	add	r3, r7
 8004c78:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 8004c7c:	7bfb      	ldrb	r3, [r7, #15]
 8004c7e:	3301      	adds	r3, #1
 8004c80:	73fb      	strb	r3, [r7, #15]
 8004c82:	7bfb      	ldrb	r3, [r7, #15]
 8004c84:	2b03      	cmp	r3, #3
 8004c86:	d9ef      	bls.n	8004c68 <SD_disk_initialize+0x64>
      }
      /* voltage range 2.7-3.6V */
      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8004c88:	7abb      	ldrb	r3, [r7, #10]
 8004c8a:	2b01      	cmp	r3, #1
 8004c8c:	d17e      	bne.n	8004d8c <SD_disk_initialize+0x188>
 8004c8e:	7afb      	ldrb	r3, [r7, #11]
 8004c90:	2baa      	cmp	r3, #170	@ 0xaa
 8004c92:	d17b      	bne.n	8004d8c <SD_disk_initialize+0x188>
      {
        /* ACMD41 with HCS bit */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8004c94:	2100      	movs	r1, #0
 8004c96:	2077      	movs	r0, #119	@ 0x77
 8004c98:	f7ff ff5f 	bl	8004b5a <SD_SendCmd>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	2b01      	cmp	r3, #1
 8004ca0:	d807      	bhi.n	8004cb2 <SD_disk_initialize+0xae>
 8004ca2:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8004ca6:	2069      	movs	r0, #105	@ 0x69
 8004ca8:	f7ff ff57 	bl	8004b5a <SD_SendCmd>
 8004cac:	4603      	mov	r3, r0
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d004      	beq.n	8004cbc <SD_disk_initialize+0xb8>
        } while (Timer1);
 8004cb2:	4b45      	ldr	r3, [pc, #276]	@ (8004dc8 <SD_disk_initialize+0x1c4>)
 8004cb4:	881b      	ldrh	r3, [r3, #0]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d1ec      	bne.n	8004c94 <SD_disk_initialize+0x90>
 8004cba:	e000      	b.n	8004cbe <SD_disk_initialize+0xba>
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8004cbc:	bf00      	nop

        /* READ_OCR */
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8004cbe:	4b42      	ldr	r3, [pc, #264]	@ (8004dc8 <SD_disk_initialize+0x1c4>)
 8004cc0:	881b      	ldrh	r3, [r3, #0]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d062      	beq.n	8004d8c <SD_disk_initialize+0x188>
 8004cc6:	2100      	movs	r1, #0
 8004cc8:	207a      	movs	r0, #122	@ 0x7a
 8004cca:	f7ff ff46 	bl	8004b5a <SD_SendCmd>
 8004cce:	4603      	mov	r3, r0
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d15b      	bne.n	8004d8c <SD_disk_initialize+0x188>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	73fb      	strb	r3, [r7, #15]
 8004cd8:	e00c      	b.n	8004cf4 <SD_disk_initialize+0xf0>
          {
            ocr[n] = SPI_RxByte();
 8004cda:	7bfc      	ldrb	r4, [r7, #15]
 8004cdc:	f7ff fe2e 	bl	800493c <SPI_RxByte>
 8004ce0:	4603      	mov	r3, r0
 8004ce2:	461a      	mov	r2, r3
 8004ce4:	f104 0310 	add.w	r3, r4, #16
 8004ce8:	443b      	add	r3, r7
 8004cea:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 8004cee:	7bfb      	ldrb	r3, [r7, #15]
 8004cf0:	3301      	adds	r3, #1
 8004cf2:	73fb      	strb	r3, [r7, #15]
 8004cf4:	7bfb      	ldrb	r3, [r7, #15]
 8004cf6:	2b03      	cmp	r3, #3
 8004cf8:	d9ef      	bls.n	8004cda <SD_disk_initialize+0xd6>
          }

          /* SDv2 (HC or SC) */
          type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8004cfa:	7a3b      	ldrb	r3, [r7, #8]
 8004cfc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d001      	beq.n	8004d08 <SD_disk_initialize+0x104>
 8004d04:	230c      	movs	r3, #12
 8004d06:	e000      	b.n	8004d0a <SD_disk_initialize+0x106>
 8004d08:	2304      	movs	r3, #4
 8004d0a:	73bb      	strb	r3, [r7, #14]
 8004d0c:	e03e      	b.n	8004d8c <SD_disk_initialize+0x188>
      }
    }
    else
    {
      /* SDC V1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8004d0e:	2100      	movs	r1, #0
 8004d10:	2077      	movs	r0, #119	@ 0x77
 8004d12:	f7ff ff22 	bl	8004b5a <SD_SendCmd>
 8004d16:	4603      	mov	r3, r0
 8004d18:	2b01      	cmp	r3, #1
 8004d1a:	d808      	bhi.n	8004d2e <SD_disk_initialize+0x12a>
 8004d1c:	2100      	movs	r1, #0
 8004d1e:	2069      	movs	r0, #105	@ 0x69
 8004d20:	f7ff ff1b 	bl	8004b5a <SD_SendCmd>
 8004d24:	4603      	mov	r3, r0
 8004d26:	2b01      	cmp	r3, #1
 8004d28:	d801      	bhi.n	8004d2e <SD_disk_initialize+0x12a>
 8004d2a:	2302      	movs	r3, #2
 8004d2c:	e000      	b.n	8004d30 <SD_disk_initialize+0x12c>
 8004d2e:	2301      	movs	r3, #1
 8004d30:	73bb      	strb	r3, [r7, #14]
      do
      {
        if (type == CT_SD1)
 8004d32:	7bbb      	ldrb	r3, [r7, #14]
 8004d34:	2b02      	cmp	r3, #2
 8004d36:	d10e      	bne.n	8004d56 <SD_disk_initialize+0x152>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8004d38:	2100      	movs	r1, #0
 8004d3a:	2077      	movs	r0, #119	@ 0x77
 8004d3c:	f7ff ff0d 	bl	8004b5a <SD_SendCmd>
 8004d40:	4603      	mov	r3, r0
 8004d42:	2b01      	cmp	r3, #1
 8004d44:	d80e      	bhi.n	8004d64 <SD_disk_initialize+0x160>
 8004d46:	2100      	movs	r1, #0
 8004d48:	2069      	movs	r0, #105	@ 0x69
 8004d4a:	f7ff ff06 	bl	8004b5a <SD_SendCmd>
 8004d4e:	4603      	mov	r3, r0
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d107      	bne.n	8004d64 <SD_disk_initialize+0x160>
 8004d54:	e00c      	b.n	8004d70 <SD_disk_initialize+0x16c>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8004d56:	2100      	movs	r1, #0
 8004d58:	2041      	movs	r0, #65	@ 0x41
 8004d5a:	f7ff fefe 	bl	8004b5a <SD_SendCmd>
 8004d5e:	4603      	mov	r3, r0
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d004      	beq.n	8004d6e <SD_disk_initialize+0x16a>
        }
      } while (Timer1);
 8004d64:	4b18      	ldr	r3, [pc, #96]	@ (8004dc8 <SD_disk_initialize+0x1c4>)
 8004d66:	881b      	ldrh	r3, [r3, #0]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d1e2      	bne.n	8004d32 <SD_disk_initialize+0x12e>
 8004d6c:	e000      	b.n	8004d70 <SD_disk_initialize+0x16c>
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8004d6e:	bf00      	nop
      /* SET_BLOCKLEN */
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8004d70:	4b15      	ldr	r3, [pc, #84]	@ (8004dc8 <SD_disk_initialize+0x1c4>)
 8004d72:	881b      	ldrh	r3, [r3, #0]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d007      	beq.n	8004d88 <SD_disk_initialize+0x184>
 8004d78:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004d7c:	2050      	movs	r0, #80	@ 0x50
 8004d7e:	f7ff feec 	bl	8004b5a <SD_SendCmd>
 8004d82:	4603      	mov	r3, r0
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d001      	beq.n	8004d8c <SD_disk_initialize+0x188>
 8004d88:	2300      	movs	r3, #0
 8004d8a:	73bb      	strb	r3, [r7, #14]
    }
  }
  CardType = type;
 8004d8c:	4a0f      	ldr	r2, [pc, #60]	@ (8004dcc <SD_disk_initialize+0x1c8>)
 8004d8e:	7bbb      	ldrb	r3, [r7, #14]
 8004d90:	7013      	strb	r3, [r2, #0]
  /* Idle */
  DESELECT();
 8004d92:	f7ff fd93 	bl	80048bc <DESELECT>
  SPI_RxByte();
 8004d96:	f7ff fdd1 	bl	800493c <SPI_RxByte>
  /* Clear STA_NOINIT */
  if (type)
 8004d9a:	7bbb      	ldrb	r3, [r7, #14]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d008      	beq.n	8004db2 <SD_disk_initialize+0x1ae>
  {
    Stat &= ~STA_NOINIT;
 8004da0:	4b08      	ldr	r3, [pc, #32]	@ (8004dc4 <SD_disk_initialize+0x1c0>)
 8004da2:	781b      	ldrb	r3, [r3, #0]
 8004da4:	b2db      	uxtb	r3, r3
 8004da6:	f023 0301 	bic.w	r3, r3, #1
 8004daa:	b2da      	uxtb	r2, r3
 8004dac:	4b05      	ldr	r3, [pc, #20]	@ (8004dc4 <SD_disk_initialize+0x1c0>)
 8004dae:	701a      	strb	r2, [r3, #0]
 8004db0:	e001      	b.n	8004db6 <SD_disk_initialize+0x1b2>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 8004db2:	f7ff fe49 	bl	8004a48 <SD_PowerOff>
  }
  return Stat;
 8004db6:	4b03      	ldr	r3, [pc, #12]	@ (8004dc4 <SD_disk_initialize+0x1c0>)
 8004db8:	781b      	ldrb	r3, [r3, #0]
 8004dba:	b2db      	uxtb	r3, r3
}
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	3714      	adds	r7, #20
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	bd90      	pop	{r4, r7, pc}
 8004dc4:	20000020 	.word	0x20000020
 8004dc8:	20000298 	.word	0x20000298
 8004dcc:	2000029c 	.word	0x2000029c

08004dd0 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	b083      	sub	sp, #12
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	71fb      	strb	r3, [r7, #7]
  if (drv) return STA_NOINIT;
 8004dda:	79fb      	ldrb	r3, [r7, #7]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d001      	beq.n	8004de4 <SD_disk_status+0x14>
 8004de0:	2301      	movs	r3, #1
 8004de2:	e002      	b.n	8004dea <SD_disk_status+0x1a>
  return Stat;
 8004de4:	4b04      	ldr	r3, [pc, #16]	@ (8004df8 <SD_disk_status+0x28>)
 8004de6:	781b      	ldrb	r3, [r3, #0]
 8004de8:	b2db      	uxtb	r3, r3
}
 8004dea:	4618      	mov	r0, r3
 8004dec:	370c      	adds	r7, #12
 8004dee:	46bd      	mov	sp, r7
 8004df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df4:	4770      	bx	lr
 8004df6:	bf00      	nop
 8004df8:	20000020 	.word	0x20000020

08004dfc <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b084      	sub	sp, #16
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	60b9      	str	r1, [r7, #8]
 8004e04:	607a      	str	r2, [r7, #4]
 8004e06:	603b      	str	r3, [r7, #0]
 8004e08:	4603      	mov	r3, r0
 8004e0a:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 8004e0c:	7bfb      	ldrb	r3, [r7, #15]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d102      	bne.n	8004e18 <SD_disk_read+0x1c>
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d101      	bne.n	8004e1c <SD_disk_read+0x20>
 8004e18:	2304      	movs	r3, #4
 8004e1a:	e051      	b.n	8004ec0 <SD_disk_read+0xc4>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8004e1c:	4b2a      	ldr	r3, [pc, #168]	@ (8004ec8 <SD_disk_read+0xcc>)
 8004e1e:	781b      	ldrb	r3, [r3, #0]
 8004e20:	b2db      	uxtb	r3, r3
 8004e22:	f003 0301 	and.w	r3, r3, #1
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d001      	beq.n	8004e2e <SD_disk_read+0x32>
 8004e2a:	2303      	movs	r3, #3
 8004e2c:	e048      	b.n	8004ec0 <SD_disk_read+0xc4>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 8004e2e:	4b27      	ldr	r3, [pc, #156]	@ (8004ecc <SD_disk_read+0xd0>)
 8004e30:	781b      	ldrb	r3, [r3, #0]
 8004e32:	f003 0304 	and.w	r3, r3, #4
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d102      	bne.n	8004e40 <SD_disk_read+0x44>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	025b      	lsls	r3, r3, #9
 8004e3e:	607b      	str	r3, [r7, #4]

  SELECT();
 8004e40:	f7ff fd30 	bl	80048a4 <SELECT>

  if (count == 1)
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	2b01      	cmp	r3, #1
 8004e48:	d111      	bne.n	8004e6e <SD_disk_read+0x72>
  {
    /* READ_SINGLE_BLOCK */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8004e4a:	6879      	ldr	r1, [r7, #4]
 8004e4c:	2051      	movs	r0, #81	@ 0x51
 8004e4e:	f7ff fe84 	bl	8004b5a <SD_SendCmd>
 8004e52:	4603      	mov	r3, r0
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d129      	bne.n	8004eac <SD_disk_read+0xb0>
 8004e58:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004e5c:	68b8      	ldr	r0, [r7, #8]
 8004e5e:	f7ff fe0b 	bl	8004a78 <SD_RxDataBlock>
 8004e62:	4603      	mov	r3, r0
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d021      	beq.n	8004eac <SD_disk_read+0xb0>
 8004e68:	2300      	movs	r3, #0
 8004e6a:	603b      	str	r3, [r7, #0]
 8004e6c:	e01e      	b.n	8004eac <SD_disk_read+0xb0>
  }
  else
  {
    /* READ_MULTIPLE_BLOCK */
    if (SD_SendCmd(CMD18, sector) == 0)
 8004e6e:	6879      	ldr	r1, [r7, #4]
 8004e70:	2052      	movs	r0, #82	@ 0x52
 8004e72:	f7ff fe72 	bl	8004b5a <SD_SendCmd>
 8004e76:	4603      	mov	r3, r0
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d117      	bne.n	8004eac <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512)) break;
 8004e7c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004e80:	68b8      	ldr	r0, [r7, #8]
 8004e82:	f7ff fdf9 	bl	8004a78 <SD_RxDataBlock>
 8004e86:	4603      	mov	r3, r0
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d00a      	beq.n	8004ea2 <SD_disk_read+0xa6>
        buff += 512;
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8004e92:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	3b01      	subs	r3, #1
 8004e98:	603b      	str	r3, [r7, #0]
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d1ed      	bne.n	8004e7c <SD_disk_read+0x80>
 8004ea0:	e000      	b.n	8004ea4 <SD_disk_read+0xa8>
        if (!SD_RxDataBlock(buff, 512)) break;
 8004ea2:	bf00      	nop

      /* STOP_TRANSMISSION */
      SD_SendCmd(CMD12, 0);
 8004ea4:	2100      	movs	r1, #0
 8004ea6:	204c      	movs	r0, #76	@ 0x4c
 8004ea8:	f7ff fe57 	bl	8004b5a <SD_SendCmd>
    }
  }

  /* Idle */
  DESELECT();
 8004eac:	f7ff fd06 	bl	80048bc <DESELECT>
  SPI_RxByte();
 8004eb0:	f7ff fd44 	bl	800493c <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	bf14      	ite	ne
 8004eba:	2301      	movne	r3, #1
 8004ebc:	2300      	moveq	r3, #0
 8004ebe:	b2db      	uxtb	r3, r3
}
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	3710      	adds	r7, #16
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	bd80      	pop	{r7, pc}
 8004ec8:	20000020 	.word	0x20000020
 8004ecc:	2000029c 	.word	0x2000029c

08004ed0 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b084      	sub	sp, #16
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	60b9      	str	r1, [r7, #8]
 8004ed8:	607a      	str	r2, [r7, #4]
 8004eda:	603b      	str	r3, [r7, #0]
 8004edc:	4603      	mov	r3, r0
 8004ede:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 8004ee0:	7bfb      	ldrb	r3, [r7, #15]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d102      	bne.n	8004eec <SD_disk_write+0x1c>
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d101      	bne.n	8004ef0 <SD_disk_write+0x20>
 8004eec:	2304      	movs	r3, #4
 8004eee:	e06b      	b.n	8004fc8 <SD_disk_write+0xf8>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8004ef0:	4b37      	ldr	r3, [pc, #220]	@ (8004fd0 <SD_disk_write+0x100>)
 8004ef2:	781b      	ldrb	r3, [r3, #0]
 8004ef4:	b2db      	uxtb	r3, r3
 8004ef6:	f003 0301 	and.w	r3, r3, #1
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d001      	beq.n	8004f02 <SD_disk_write+0x32>
 8004efe:	2303      	movs	r3, #3
 8004f00:	e062      	b.n	8004fc8 <SD_disk_write+0xf8>

  /* write protection */
  if (Stat & STA_PROTECT) return RES_WRPRT;
 8004f02:	4b33      	ldr	r3, [pc, #204]	@ (8004fd0 <SD_disk_write+0x100>)
 8004f04:	781b      	ldrb	r3, [r3, #0]
 8004f06:	b2db      	uxtb	r3, r3
 8004f08:	f003 0304 	and.w	r3, r3, #4
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d001      	beq.n	8004f14 <SD_disk_write+0x44>
 8004f10:	2302      	movs	r3, #2
 8004f12:	e059      	b.n	8004fc8 <SD_disk_write+0xf8>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 8004f14:	4b2f      	ldr	r3, [pc, #188]	@ (8004fd4 <SD_disk_write+0x104>)
 8004f16:	781b      	ldrb	r3, [r3, #0]
 8004f18:	f003 0304 	and.w	r3, r3, #4
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d102      	bne.n	8004f26 <SD_disk_write+0x56>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	025b      	lsls	r3, r3, #9
 8004f24:	607b      	str	r3, [r7, #4]

  SELECT();
 8004f26:	f7ff fcbd 	bl	80048a4 <SELECT>

  if (count == 1)
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	2b01      	cmp	r3, #1
 8004f2e:	d110      	bne.n	8004f52 <SD_disk_write+0x82>
  {
    /* WRITE_BLOCK */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8004f30:	6879      	ldr	r1, [r7, #4]
 8004f32:	2058      	movs	r0, #88	@ 0x58
 8004f34:	f7ff fe11 	bl	8004b5a <SD_SendCmd>
 8004f38:	4603      	mov	r3, r0
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d13a      	bne.n	8004fb4 <SD_disk_write+0xe4>
 8004f3e:	21fe      	movs	r1, #254	@ 0xfe
 8004f40:	68b8      	ldr	r0, [r7, #8]
 8004f42:	f7ff fdc7 	bl	8004ad4 <SD_TxDataBlock>
 8004f46:	4603      	mov	r3, r0
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d033      	beq.n	8004fb4 <SD_disk_write+0xe4>
      count = 0;
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	603b      	str	r3, [r7, #0]
 8004f50:	e030      	b.n	8004fb4 <SD_disk_write+0xe4>
  }
  else
  {
    /* WRITE_MULTIPLE_BLOCK */
    if (CardType & CT_SD1)
 8004f52:	4b20      	ldr	r3, [pc, #128]	@ (8004fd4 <SD_disk_write+0x104>)
 8004f54:	781b      	ldrb	r3, [r3, #0]
 8004f56:	f003 0302 	and.w	r3, r3, #2
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d007      	beq.n	8004f6e <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 8004f5e:	2100      	movs	r1, #0
 8004f60:	2077      	movs	r0, #119	@ 0x77
 8004f62:	f7ff fdfa 	bl	8004b5a <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 8004f66:	6839      	ldr	r1, [r7, #0]
 8004f68:	2057      	movs	r0, #87	@ 0x57
 8004f6a:	f7ff fdf6 	bl	8004b5a <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 8004f6e:	6879      	ldr	r1, [r7, #4]
 8004f70:	2059      	movs	r0, #89	@ 0x59
 8004f72:	f7ff fdf2 	bl	8004b5a <SD_SendCmd>
 8004f76:	4603      	mov	r3, r0
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d11b      	bne.n	8004fb4 <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 8004f7c:	21fc      	movs	r1, #252	@ 0xfc
 8004f7e:	68b8      	ldr	r0, [r7, #8]
 8004f80:	f7ff fda8 	bl	8004ad4 <SD_TxDataBlock>
 8004f84:	4603      	mov	r3, r0
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d00a      	beq.n	8004fa0 <SD_disk_write+0xd0>
        buff += 512;
 8004f8a:	68bb      	ldr	r3, [r7, #8]
 8004f8c:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8004f90:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	3b01      	subs	r3, #1
 8004f96:	603b      	str	r3, [r7, #0]
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d1ee      	bne.n	8004f7c <SD_disk_write+0xac>
 8004f9e:	e000      	b.n	8004fa2 <SD_disk_write+0xd2>
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 8004fa0:	bf00      	nop

      /* STOP_TRAN token */
      if(!SD_TxDataBlock(0, 0xFD))
 8004fa2:	21fd      	movs	r1, #253	@ 0xfd
 8004fa4:	2000      	movs	r0, #0
 8004fa6:	f7ff fd95 	bl	8004ad4 <SD_TxDataBlock>
 8004faa:	4603      	mov	r3, r0
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d101      	bne.n	8004fb4 <SD_disk_write+0xe4>
      {
        count = 1;
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	603b      	str	r3, [r7, #0]
      }
    }
  }

  /* Idle */
  DESELECT();
 8004fb4:	f7ff fc82 	bl	80048bc <DESELECT>
  SPI_RxByte();
 8004fb8:	f7ff fcc0 	bl	800493c <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	bf14      	ite	ne
 8004fc2:	2301      	movne	r3, #1
 8004fc4:	2300      	moveq	r3, #0
 8004fc6:	b2db      	uxtb	r3, r3
}
 8004fc8:	4618      	mov	r0, r3
 8004fca:	3710      	adds	r7, #16
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	bd80      	pop	{r7, pc}
 8004fd0:	20000020 	.word	0x20000020
 8004fd4:	2000029c 	.word	0x2000029c

08004fd8 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8004fd8:	b590      	push	{r4, r7, lr}
 8004fda:	b08b      	sub	sp, #44	@ 0x2c
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	4603      	mov	r3, r0
 8004fe0:	603a      	str	r2, [r7, #0]
 8004fe2:	71fb      	strb	r3, [r7, #7]
 8004fe4:	460b      	mov	r3, r1
 8004fe6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  uint8_t n, csd[16], *ptr = buff;
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	623b      	str	r3, [r7, #32]
  WORD csize;

  /* pdrv should be 0 */
  if (drv) return RES_PARERR;
 8004fec:	79fb      	ldrb	r3, [r7, #7]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d001      	beq.n	8004ff6 <SD_disk_ioctl+0x1e>
 8004ff2:	2304      	movs	r3, #4
 8004ff4:	e113      	b.n	800521e <SD_disk_ioctl+0x246>
  res = RES_ERROR;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  if (ctrl == CTRL_POWER)
 8004ffc:	79bb      	ldrb	r3, [r7, #6]
 8004ffe:	2b05      	cmp	r3, #5
 8005000:	d124      	bne.n	800504c <SD_disk_ioctl+0x74>
  {
    switch (*ptr)
 8005002:	6a3b      	ldr	r3, [r7, #32]
 8005004:	781b      	ldrb	r3, [r3, #0]
 8005006:	2b02      	cmp	r3, #2
 8005008:	d012      	beq.n	8005030 <SD_disk_ioctl+0x58>
 800500a:	2b02      	cmp	r3, #2
 800500c:	dc1a      	bgt.n	8005044 <SD_disk_ioctl+0x6c>
 800500e:	2b00      	cmp	r3, #0
 8005010:	d002      	beq.n	8005018 <SD_disk_ioctl+0x40>
 8005012:	2b01      	cmp	r3, #1
 8005014:	d006      	beq.n	8005024 <SD_disk_ioctl+0x4c>
 8005016:	e015      	b.n	8005044 <SD_disk_ioctl+0x6c>
    {
    case 0:
      SD_PowerOff();    /* Power Off */
 8005018:	f7ff fd16 	bl	8004a48 <SD_PowerOff>
      res = RES_OK;
 800501c:	2300      	movs	r3, #0
 800501e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8005022:	e0fa      	b.n	800521a <SD_disk_ioctl+0x242>
    case 1:
      SD_PowerOn();   /* Power On */
 8005024:	f7ff fcce 	bl	80049c4 <SD_PowerOn>
      res = RES_OK;
 8005028:	2300      	movs	r3, #0
 800502a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800502e:	e0f4      	b.n	800521a <SD_disk_ioctl+0x242>
    case 2:
      *(ptr + 1) = SD_CheckPower();
 8005030:	6a3b      	ldr	r3, [r7, #32]
 8005032:	1c5c      	adds	r4, r3, #1
 8005034:	f7ff fd14 	bl	8004a60 <SD_CheckPower>
 8005038:	4603      	mov	r3, r0
 800503a:	7023      	strb	r3, [r4, #0]
      res = RES_OK;   /* Power Check */
 800503c:	2300      	movs	r3, #0
 800503e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8005042:	e0ea      	b.n	800521a <SD_disk_ioctl+0x242>
    default:
      res = RES_PARERR;
 8005044:	2304      	movs	r3, #4
 8005046:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800504a:	e0e6      	b.n	800521a <SD_disk_ioctl+0x242>
    }
  }
  else
  {
    /* no disk */
    if (Stat & STA_NOINIT){
 800504c:	4b76      	ldr	r3, [pc, #472]	@ (8005228 <SD_disk_ioctl+0x250>)
 800504e:	781b      	ldrb	r3, [r3, #0]
 8005050:	b2db      	uxtb	r3, r3
 8005052:	f003 0301 	and.w	r3, r3, #1
 8005056:	2b00      	cmp	r3, #0
 8005058:	d001      	beq.n	800505e <SD_disk_ioctl+0x86>
    	return RES_NOTRDY;
 800505a:	2303      	movs	r3, #3
 800505c:	e0df      	b.n	800521e <SD_disk_ioctl+0x246>
    }
    SELECT();
 800505e:	f7ff fc21 	bl	80048a4 <SELECT>
    switch (ctrl)
 8005062:	79bb      	ldrb	r3, [r7, #6]
 8005064:	2b0d      	cmp	r3, #13
 8005066:	f200 80c9 	bhi.w	80051fc <SD_disk_ioctl+0x224>
 800506a:	a201      	add	r2, pc, #4	@ (adr r2, 8005070 <SD_disk_ioctl+0x98>)
 800506c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005070:	08005167 	.word	0x08005167
 8005074:	080050a9 	.word	0x080050a9
 8005078:	08005157 	.word	0x08005157
 800507c:	080051fd 	.word	0x080051fd
 8005080:	080051fd 	.word	0x080051fd
 8005084:	080051fd 	.word	0x080051fd
 8005088:	080051fd 	.word	0x080051fd
 800508c:	080051fd 	.word	0x080051fd
 8005090:	080051fd 	.word	0x080051fd
 8005094:	080051fd 	.word	0x080051fd
 8005098:	080051fd 	.word	0x080051fd
 800509c:	08005179 	.word	0x08005179
 80050a0:	0800519d 	.word	0x0800519d
 80050a4:	080051c1 	.word	0x080051c1
    {
    case GET_SECTOR_COUNT:
      /* SEND_CSD */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 80050a8:	2100      	movs	r1, #0
 80050aa:	2049      	movs	r0, #73	@ 0x49
 80050ac:	f7ff fd55 	bl	8004b5a <SD_SendCmd>
 80050b0:	4603      	mov	r3, r0
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	f040 80a6 	bne.w	8005204 <SD_disk_ioctl+0x22c>
 80050b8:	f107 030c 	add.w	r3, r7, #12
 80050bc:	2110      	movs	r1, #16
 80050be:	4618      	mov	r0, r3
 80050c0:	f7ff fcda 	bl	8004a78 <SD_RxDataBlock>
 80050c4:	4603      	mov	r3, r0
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	f000 809c 	beq.w	8005204 <SD_disk_ioctl+0x22c>
      {
        if ((csd[0] >> 6) == 1)
 80050cc:	7b3b      	ldrb	r3, [r7, #12]
 80050ce:	099b      	lsrs	r3, r3, #6
 80050d0:	b2db      	uxtb	r3, r3
 80050d2:	2b01      	cmp	r3, #1
 80050d4:	d10d      	bne.n	80050f2 <SD_disk_ioctl+0x11a>
        {
          /* SDC V2 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 80050d6:	7d7b      	ldrb	r3, [r7, #21]
 80050d8:	461a      	mov	r2, r3
 80050da:	7d3b      	ldrb	r3, [r7, #20]
 80050dc:	021b      	lsls	r3, r3, #8
 80050de:	b29b      	uxth	r3, r3
 80050e0:	4413      	add	r3, r2
 80050e2:	b29b      	uxth	r3, r3
 80050e4:	3301      	adds	r3, #1
 80050e6:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 80050e8:	8bfb      	ldrh	r3, [r7, #30]
 80050ea:	029a      	lsls	r2, r3, #10
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	601a      	str	r2, [r3, #0]
 80050f0:	e02d      	b.n	800514e <SD_disk_ioctl+0x176>
        }
        else
        {
          /* MMC or SDC V1 */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80050f2:	7c7b      	ldrb	r3, [r7, #17]
 80050f4:	f003 030f 	and.w	r3, r3, #15
 80050f8:	b2da      	uxtb	r2, r3
 80050fa:	7dbb      	ldrb	r3, [r7, #22]
 80050fc:	09db      	lsrs	r3, r3, #7
 80050fe:	b2db      	uxtb	r3, r3
 8005100:	4413      	add	r3, r2
 8005102:	b2da      	uxtb	r2, r3
 8005104:	7d7b      	ldrb	r3, [r7, #21]
 8005106:	005b      	lsls	r3, r3, #1
 8005108:	b2db      	uxtb	r3, r3
 800510a:	f003 0306 	and.w	r3, r3, #6
 800510e:	b2db      	uxtb	r3, r3
 8005110:	4413      	add	r3, r2
 8005112:	b2db      	uxtb	r3, r3
 8005114:	3302      	adds	r3, #2
 8005116:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 800511a:	7d3b      	ldrb	r3, [r7, #20]
 800511c:	099b      	lsrs	r3, r3, #6
 800511e:	b2db      	uxtb	r3, r3
 8005120:	461a      	mov	r2, r3
 8005122:	7cfb      	ldrb	r3, [r7, #19]
 8005124:	009b      	lsls	r3, r3, #2
 8005126:	b29b      	uxth	r3, r3
 8005128:	4413      	add	r3, r2
 800512a:	b29a      	uxth	r2, r3
 800512c:	7cbb      	ldrb	r3, [r7, #18]
 800512e:	029b      	lsls	r3, r3, #10
 8005130:	b29b      	uxth	r3, r3
 8005132:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005136:	b29b      	uxth	r3, r3
 8005138:	4413      	add	r3, r2
 800513a:	b29b      	uxth	r3, r3
 800513c:	3301      	adds	r3, #1
 800513e:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8005140:	8bfa      	ldrh	r2, [r7, #30]
 8005142:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005146:	3b09      	subs	r3, #9
 8005148:	409a      	lsls	r2, r3
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	601a      	str	r2, [r3, #0]
        }
        res = RES_OK;
 800514e:	2300      	movs	r3, #0
 8005150:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
      break;
 8005154:	e056      	b.n	8005204 <SD_disk_ioctl+0x22c>
    case GET_SECTOR_SIZE:
      *(WORD*) buff = 512;
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800515c:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 800515e:	2300      	movs	r3, #0
 8005160:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8005164:	e055      	b.n	8005212 <SD_disk_ioctl+0x23a>
    case CTRL_SYNC:
      if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8005166:	f7ff fc13 	bl	8004990 <SD_ReadyWait>
 800516a:	4603      	mov	r3, r0
 800516c:	2bff      	cmp	r3, #255	@ 0xff
 800516e:	d14b      	bne.n	8005208 <SD_disk_ioctl+0x230>
 8005170:	2300      	movs	r3, #0
 8005172:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8005176:	e047      	b.n	8005208 <SD_disk_ioctl+0x230>
    case MMC_GET_CSD:
      /* SEND_CSD */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8005178:	2100      	movs	r1, #0
 800517a:	2049      	movs	r0, #73	@ 0x49
 800517c:	f7ff fced 	bl	8004b5a <SD_SendCmd>
 8005180:	4603      	mov	r3, r0
 8005182:	2b00      	cmp	r3, #0
 8005184:	d142      	bne.n	800520c <SD_disk_ioctl+0x234>
 8005186:	2110      	movs	r1, #16
 8005188:	6a38      	ldr	r0, [r7, #32]
 800518a:	f7ff fc75 	bl	8004a78 <SD_RxDataBlock>
 800518e:	4603      	mov	r3, r0
 8005190:	2b00      	cmp	r3, #0
 8005192:	d03b      	beq.n	800520c <SD_disk_ioctl+0x234>
 8005194:	2300      	movs	r3, #0
 8005196:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800519a:	e037      	b.n	800520c <SD_disk_ioctl+0x234>
    case MMC_GET_CID:
      /* SEND_CID */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 800519c:	2100      	movs	r1, #0
 800519e:	204a      	movs	r0, #74	@ 0x4a
 80051a0:	f7ff fcdb 	bl	8004b5a <SD_SendCmd>
 80051a4:	4603      	mov	r3, r0
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d132      	bne.n	8005210 <SD_disk_ioctl+0x238>
 80051aa:	2110      	movs	r1, #16
 80051ac:	6a38      	ldr	r0, [r7, #32]
 80051ae:	f7ff fc63 	bl	8004a78 <SD_RxDataBlock>
 80051b2:	4603      	mov	r3, r0
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d02b      	beq.n	8005210 <SD_disk_ioctl+0x238>
 80051b8:	2300      	movs	r3, #0
 80051ba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80051be:	e027      	b.n	8005210 <SD_disk_ioctl+0x238>
    case MMC_GET_OCR:
      /* READ_OCR */
      if (SD_SendCmd(CMD58, 0) == 0)
 80051c0:	2100      	movs	r1, #0
 80051c2:	207a      	movs	r0, #122	@ 0x7a
 80051c4:	f7ff fcc9 	bl	8004b5a <SD_SendCmd>
 80051c8:	4603      	mov	r3, r0
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d116      	bne.n	80051fc <SD_disk_ioctl+0x224>
      {
        for (n = 0; n < 4; n++)
 80051ce:	2300      	movs	r3, #0
 80051d0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80051d4:	e00b      	b.n	80051ee <SD_disk_ioctl+0x216>
        {
          *ptr++ = SPI_RxByte();
 80051d6:	6a3c      	ldr	r4, [r7, #32]
 80051d8:	1c63      	adds	r3, r4, #1
 80051da:	623b      	str	r3, [r7, #32]
 80051dc:	f7ff fbae 	bl	800493c <SPI_RxByte>
 80051e0:	4603      	mov	r3, r0
 80051e2:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 80051e4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80051e8:	3301      	adds	r3, #1
 80051ea:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80051ee:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80051f2:	2b03      	cmp	r3, #3
 80051f4:	d9ef      	bls.n	80051d6 <SD_disk_ioctl+0x1fe>
        }
        res = RES_OK;
 80051f6:	2300      	movs	r3, #0
 80051f8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
    default:
      res = RES_PARERR;
 80051fc:	2304      	movs	r3, #4
 80051fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8005202:	e006      	b.n	8005212 <SD_disk_ioctl+0x23a>
      break;
 8005204:	bf00      	nop
 8005206:	e004      	b.n	8005212 <SD_disk_ioctl+0x23a>
      break;
 8005208:	bf00      	nop
 800520a:	e002      	b.n	8005212 <SD_disk_ioctl+0x23a>
      break;
 800520c:	bf00      	nop
 800520e:	e000      	b.n	8005212 <SD_disk_ioctl+0x23a>
      break;
 8005210:	bf00      	nop
    }
    DESELECT();
 8005212:	f7ff fb53 	bl	80048bc <DESELECT>
    SPI_RxByte();
 8005216:	f7ff fb91 	bl	800493c <SPI_RxByte>
  }
  return res;
 800521a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800521e:	4618      	mov	r0, r3
 8005220:	372c      	adds	r7, #44	@ 0x2c
 8005222:	46bd      	mov	sp, r7
 8005224:	bd90      	pop	{r4, r7, pc}
 8005226:	bf00      	nop
 8005228:	20000020 	.word	0x20000020

0800522c <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800522c:	b480      	push	{r7}
 800522e:	b085      	sub	sp, #20
 8005230:	af00      	add	r7, sp, #0
 8005232:	4603      	mov	r3, r0
 8005234:	6039      	str	r1, [r7, #0]
 8005236:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8005238:	88fb      	ldrh	r3, [r7, #6]
 800523a:	2b7f      	cmp	r3, #127	@ 0x7f
 800523c:	d802      	bhi.n	8005244 <ff_convert+0x18>
		c = chr;
 800523e:	88fb      	ldrh	r3, [r7, #6]
 8005240:	81fb      	strh	r3, [r7, #14]
 8005242:	e025      	b.n	8005290 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d00b      	beq.n	8005262 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800524a:	88fb      	ldrh	r3, [r7, #6]
 800524c:	2bff      	cmp	r3, #255	@ 0xff
 800524e:	d805      	bhi.n	800525c <ff_convert+0x30>
 8005250:	88fb      	ldrh	r3, [r7, #6]
 8005252:	3b80      	subs	r3, #128	@ 0x80
 8005254:	4a12      	ldr	r2, [pc, #72]	@ (80052a0 <ff_convert+0x74>)
 8005256:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800525a:	e000      	b.n	800525e <ff_convert+0x32>
 800525c:	2300      	movs	r3, #0
 800525e:	81fb      	strh	r3, [r7, #14]
 8005260:	e016      	b.n	8005290 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8005262:	2300      	movs	r3, #0
 8005264:	81fb      	strh	r3, [r7, #14]
 8005266:	e009      	b.n	800527c <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8005268:	89fb      	ldrh	r3, [r7, #14]
 800526a:	4a0d      	ldr	r2, [pc, #52]	@ (80052a0 <ff_convert+0x74>)
 800526c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005270:	88fa      	ldrh	r2, [r7, #6]
 8005272:	429a      	cmp	r2, r3
 8005274:	d006      	beq.n	8005284 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8005276:	89fb      	ldrh	r3, [r7, #14]
 8005278:	3301      	adds	r3, #1
 800527a:	81fb      	strh	r3, [r7, #14]
 800527c:	89fb      	ldrh	r3, [r7, #14]
 800527e:	2b7f      	cmp	r3, #127	@ 0x7f
 8005280:	d9f2      	bls.n	8005268 <ff_convert+0x3c>
 8005282:	e000      	b.n	8005286 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8005284:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8005286:	89fb      	ldrh	r3, [r7, #14]
 8005288:	3380      	adds	r3, #128	@ 0x80
 800528a:	b29b      	uxth	r3, r3
 800528c:	b2db      	uxtb	r3, r3
 800528e:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8005290:	89fb      	ldrh	r3, [r7, #14]
}
 8005292:	4618      	mov	r0, r3
 8005294:	3714      	adds	r7, #20
 8005296:	46bd      	mov	sp, r7
 8005298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529c:	4770      	bx	lr
 800529e:	bf00      	nop
 80052a0:	08009850 	.word	0x08009850

080052a4 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 80052a4:	b480      	push	{r7}
 80052a6:	b087      	sub	sp, #28
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	4603      	mov	r3, r0
 80052ac:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 80052ae:	88fb      	ldrh	r3, [r7, #6]
 80052b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80052b4:	d201      	bcs.n	80052ba <ff_wtoupper+0x16>
 80052b6:	4b3e      	ldr	r3, [pc, #248]	@ (80053b0 <ff_wtoupper+0x10c>)
 80052b8:	e000      	b.n	80052bc <ff_wtoupper+0x18>
 80052ba:	4b3e      	ldr	r3, [pc, #248]	@ (80053b4 <ff_wtoupper+0x110>)
 80052bc:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 80052be:	697b      	ldr	r3, [r7, #20]
 80052c0:	1c9a      	adds	r2, r3, #2
 80052c2:	617a      	str	r2, [r7, #20]
 80052c4:	881b      	ldrh	r3, [r3, #0]
 80052c6:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 80052c8:	8a7b      	ldrh	r3, [r7, #18]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d068      	beq.n	80053a0 <ff_wtoupper+0xfc>
 80052ce:	88fa      	ldrh	r2, [r7, #6]
 80052d0:	8a7b      	ldrh	r3, [r7, #18]
 80052d2:	429a      	cmp	r2, r3
 80052d4:	d364      	bcc.n	80053a0 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 80052d6:	697b      	ldr	r3, [r7, #20]
 80052d8:	1c9a      	adds	r2, r3, #2
 80052da:	617a      	str	r2, [r7, #20]
 80052dc:	881b      	ldrh	r3, [r3, #0]
 80052de:	823b      	strh	r3, [r7, #16]
 80052e0:	8a3b      	ldrh	r3, [r7, #16]
 80052e2:	0a1b      	lsrs	r3, r3, #8
 80052e4:	81fb      	strh	r3, [r7, #14]
 80052e6:	8a3b      	ldrh	r3, [r7, #16]
 80052e8:	b2db      	uxtb	r3, r3
 80052ea:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 80052ec:	88fa      	ldrh	r2, [r7, #6]
 80052ee:	8a79      	ldrh	r1, [r7, #18]
 80052f0:	8a3b      	ldrh	r3, [r7, #16]
 80052f2:	440b      	add	r3, r1
 80052f4:	429a      	cmp	r2, r3
 80052f6:	da49      	bge.n	800538c <ff_wtoupper+0xe8>
			switch (cmd) {
 80052f8:	89fb      	ldrh	r3, [r7, #14]
 80052fa:	2b08      	cmp	r3, #8
 80052fc:	d84f      	bhi.n	800539e <ff_wtoupper+0xfa>
 80052fe:	a201      	add	r2, pc, #4	@ (adr r2, 8005304 <ff_wtoupper+0x60>)
 8005300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005304:	08005329 	.word	0x08005329
 8005308:	0800533b 	.word	0x0800533b
 800530c:	08005351 	.word	0x08005351
 8005310:	08005359 	.word	0x08005359
 8005314:	08005361 	.word	0x08005361
 8005318:	08005369 	.word	0x08005369
 800531c:	08005371 	.word	0x08005371
 8005320:	08005379 	.word	0x08005379
 8005324:	08005381 	.word	0x08005381
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8005328:	88fa      	ldrh	r2, [r7, #6]
 800532a:	8a7b      	ldrh	r3, [r7, #18]
 800532c:	1ad3      	subs	r3, r2, r3
 800532e:	005b      	lsls	r3, r3, #1
 8005330:	697a      	ldr	r2, [r7, #20]
 8005332:	4413      	add	r3, r2
 8005334:	881b      	ldrh	r3, [r3, #0]
 8005336:	80fb      	strh	r3, [r7, #6]
 8005338:	e027      	b.n	800538a <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800533a:	88fa      	ldrh	r2, [r7, #6]
 800533c:	8a7b      	ldrh	r3, [r7, #18]
 800533e:	1ad3      	subs	r3, r2, r3
 8005340:	b29b      	uxth	r3, r3
 8005342:	f003 0301 	and.w	r3, r3, #1
 8005346:	b29b      	uxth	r3, r3
 8005348:	88fa      	ldrh	r2, [r7, #6]
 800534a:	1ad3      	subs	r3, r2, r3
 800534c:	80fb      	strh	r3, [r7, #6]
 800534e:	e01c      	b.n	800538a <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8005350:	88fb      	ldrh	r3, [r7, #6]
 8005352:	3b10      	subs	r3, #16
 8005354:	80fb      	strh	r3, [r7, #6]
 8005356:	e018      	b.n	800538a <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8005358:	88fb      	ldrh	r3, [r7, #6]
 800535a:	3b20      	subs	r3, #32
 800535c:	80fb      	strh	r3, [r7, #6]
 800535e:	e014      	b.n	800538a <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8005360:	88fb      	ldrh	r3, [r7, #6]
 8005362:	3b30      	subs	r3, #48	@ 0x30
 8005364:	80fb      	strh	r3, [r7, #6]
 8005366:	e010      	b.n	800538a <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8005368:	88fb      	ldrh	r3, [r7, #6]
 800536a:	3b1a      	subs	r3, #26
 800536c:	80fb      	strh	r3, [r7, #6]
 800536e:	e00c      	b.n	800538a <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8005370:	88fb      	ldrh	r3, [r7, #6]
 8005372:	3308      	adds	r3, #8
 8005374:	80fb      	strh	r3, [r7, #6]
 8005376:	e008      	b.n	800538a <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8005378:	88fb      	ldrh	r3, [r7, #6]
 800537a:	3b50      	subs	r3, #80	@ 0x50
 800537c:	80fb      	strh	r3, [r7, #6]
 800537e:	e004      	b.n	800538a <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8005380:	88fb      	ldrh	r3, [r7, #6]
 8005382:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 8005386:	80fb      	strh	r3, [r7, #6]
 8005388:	bf00      	nop
			}
			break;
 800538a:	e008      	b.n	800539e <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800538c:	89fb      	ldrh	r3, [r7, #14]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d195      	bne.n	80052be <ff_wtoupper+0x1a>
 8005392:	8a3b      	ldrh	r3, [r7, #16]
 8005394:	005b      	lsls	r3, r3, #1
 8005396:	697a      	ldr	r2, [r7, #20]
 8005398:	4413      	add	r3, r2
 800539a:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800539c:	e78f      	b.n	80052be <ff_wtoupper+0x1a>
			break;
 800539e:	bf00      	nop
	}

	return chr;
 80053a0:	88fb      	ldrh	r3, [r7, #6]
}
 80053a2:	4618      	mov	r0, r3
 80053a4:	371c      	adds	r7, #28
 80053a6:	46bd      	mov	sp, r7
 80053a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ac:	4770      	bx	lr
 80053ae:	bf00      	nop
 80053b0:	08009950 	.word	0x08009950
 80053b4:	08009b44 	.word	0x08009b44

080053b8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b084      	sub	sp, #16
 80053bc:	af00      	add	r7, sp, #0
 80053be:	4603      	mov	r3, r0
 80053c0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80053c2:	79fb      	ldrb	r3, [r7, #7]
 80053c4:	4a08      	ldr	r2, [pc, #32]	@ (80053e8 <disk_status+0x30>)
 80053c6:	009b      	lsls	r3, r3, #2
 80053c8:	4413      	add	r3, r2
 80053ca:	685b      	ldr	r3, [r3, #4]
 80053cc:	685b      	ldr	r3, [r3, #4]
 80053ce:	79fa      	ldrb	r2, [r7, #7]
 80053d0:	4905      	ldr	r1, [pc, #20]	@ (80053e8 <disk_status+0x30>)
 80053d2:	440a      	add	r2, r1
 80053d4:	7a12      	ldrb	r2, [r2, #8]
 80053d6:	4610      	mov	r0, r2
 80053d8:	4798      	blx	r3
 80053da:	4603      	mov	r3, r0
 80053dc:	73fb      	strb	r3, [r7, #15]
  return stat;
 80053de:	7bfb      	ldrb	r3, [r7, #15]
}
 80053e0:	4618      	mov	r0, r3
 80053e2:	3710      	adds	r7, #16
 80053e4:	46bd      	mov	sp, r7
 80053e6:	bd80      	pop	{r7, pc}
 80053e8:	200004c8 	.word	0x200004c8

080053ec <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b084      	sub	sp, #16
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	4603      	mov	r3, r0
 80053f4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80053f6:	2300      	movs	r3, #0
 80053f8:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80053fa:	79fb      	ldrb	r3, [r7, #7]
 80053fc:	4a0e      	ldr	r2, [pc, #56]	@ (8005438 <disk_initialize+0x4c>)
 80053fe:	5cd3      	ldrb	r3, [r2, r3]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d114      	bne.n	800542e <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8005404:	79fb      	ldrb	r3, [r7, #7]
 8005406:	4a0c      	ldr	r2, [pc, #48]	@ (8005438 <disk_initialize+0x4c>)
 8005408:	009b      	lsls	r3, r3, #2
 800540a:	4413      	add	r3, r2
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	79fa      	ldrb	r2, [r7, #7]
 8005412:	4909      	ldr	r1, [pc, #36]	@ (8005438 <disk_initialize+0x4c>)
 8005414:	440a      	add	r2, r1
 8005416:	7a12      	ldrb	r2, [r2, #8]
 8005418:	4610      	mov	r0, r2
 800541a:	4798      	blx	r3
 800541c:	4603      	mov	r3, r0
 800541e:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 8005420:	7bfb      	ldrb	r3, [r7, #15]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d103      	bne.n	800542e <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 8005426:	79fb      	ldrb	r3, [r7, #7]
 8005428:	4a03      	ldr	r2, [pc, #12]	@ (8005438 <disk_initialize+0x4c>)
 800542a:	2101      	movs	r1, #1
 800542c:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 800542e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005430:	4618      	mov	r0, r3
 8005432:	3710      	adds	r7, #16
 8005434:	46bd      	mov	sp, r7
 8005436:	bd80      	pop	{r7, pc}
 8005438:	200004c8 	.word	0x200004c8

0800543c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800543c:	b590      	push	{r4, r7, lr}
 800543e:	b087      	sub	sp, #28
 8005440:	af00      	add	r7, sp, #0
 8005442:	60b9      	str	r1, [r7, #8]
 8005444:	607a      	str	r2, [r7, #4]
 8005446:	603b      	str	r3, [r7, #0]
 8005448:	4603      	mov	r3, r0
 800544a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800544c:	7bfb      	ldrb	r3, [r7, #15]
 800544e:	4a0a      	ldr	r2, [pc, #40]	@ (8005478 <disk_read+0x3c>)
 8005450:	009b      	lsls	r3, r3, #2
 8005452:	4413      	add	r3, r2
 8005454:	685b      	ldr	r3, [r3, #4]
 8005456:	689c      	ldr	r4, [r3, #8]
 8005458:	7bfb      	ldrb	r3, [r7, #15]
 800545a:	4a07      	ldr	r2, [pc, #28]	@ (8005478 <disk_read+0x3c>)
 800545c:	4413      	add	r3, r2
 800545e:	7a18      	ldrb	r0, [r3, #8]
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	687a      	ldr	r2, [r7, #4]
 8005464:	68b9      	ldr	r1, [r7, #8]
 8005466:	47a0      	blx	r4
 8005468:	4603      	mov	r3, r0
 800546a:	75fb      	strb	r3, [r7, #23]
  return res;
 800546c:	7dfb      	ldrb	r3, [r7, #23]
}
 800546e:	4618      	mov	r0, r3
 8005470:	371c      	adds	r7, #28
 8005472:	46bd      	mov	sp, r7
 8005474:	bd90      	pop	{r4, r7, pc}
 8005476:	bf00      	nop
 8005478:	200004c8 	.word	0x200004c8

0800547c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800547c:	b590      	push	{r4, r7, lr}
 800547e:	b087      	sub	sp, #28
 8005480:	af00      	add	r7, sp, #0
 8005482:	60b9      	str	r1, [r7, #8]
 8005484:	607a      	str	r2, [r7, #4]
 8005486:	603b      	str	r3, [r7, #0]
 8005488:	4603      	mov	r3, r0
 800548a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800548c:	7bfb      	ldrb	r3, [r7, #15]
 800548e:	4a0a      	ldr	r2, [pc, #40]	@ (80054b8 <disk_write+0x3c>)
 8005490:	009b      	lsls	r3, r3, #2
 8005492:	4413      	add	r3, r2
 8005494:	685b      	ldr	r3, [r3, #4]
 8005496:	68dc      	ldr	r4, [r3, #12]
 8005498:	7bfb      	ldrb	r3, [r7, #15]
 800549a:	4a07      	ldr	r2, [pc, #28]	@ (80054b8 <disk_write+0x3c>)
 800549c:	4413      	add	r3, r2
 800549e:	7a18      	ldrb	r0, [r3, #8]
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	687a      	ldr	r2, [r7, #4]
 80054a4:	68b9      	ldr	r1, [r7, #8]
 80054a6:	47a0      	blx	r4
 80054a8:	4603      	mov	r3, r0
 80054aa:	75fb      	strb	r3, [r7, #23]
  return res;
 80054ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80054ae:	4618      	mov	r0, r3
 80054b0:	371c      	adds	r7, #28
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bd90      	pop	{r4, r7, pc}
 80054b6:	bf00      	nop
 80054b8:	200004c8 	.word	0x200004c8

080054bc <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b084      	sub	sp, #16
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	4603      	mov	r3, r0
 80054c4:	603a      	str	r2, [r7, #0]
 80054c6:	71fb      	strb	r3, [r7, #7]
 80054c8:	460b      	mov	r3, r1
 80054ca:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80054cc:	79fb      	ldrb	r3, [r7, #7]
 80054ce:	4a09      	ldr	r2, [pc, #36]	@ (80054f4 <disk_ioctl+0x38>)
 80054d0:	009b      	lsls	r3, r3, #2
 80054d2:	4413      	add	r3, r2
 80054d4:	685b      	ldr	r3, [r3, #4]
 80054d6:	691b      	ldr	r3, [r3, #16]
 80054d8:	79fa      	ldrb	r2, [r7, #7]
 80054da:	4906      	ldr	r1, [pc, #24]	@ (80054f4 <disk_ioctl+0x38>)
 80054dc:	440a      	add	r2, r1
 80054de:	7a10      	ldrb	r0, [r2, #8]
 80054e0:	79b9      	ldrb	r1, [r7, #6]
 80054e2:	683a      	ldr	r2, [r7, #0]
 80054e4:	4798      	blx	r3
 80054e6:	4603      	mov	r3, r0
 80054e8:	73fb      	strb	r3, [r7, #15]
  return res;
 80054ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80054ec:	4618      	mov	r0, r3
 80054ee:	3710      	adds	r7, #16
 80054f0:	46bd      	mov	sp, r7
 80054f2:	bd80      	pop	{r7, pc}
 80054f4:	200004c8 	.word	0x200004c8

080054f8 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80054f8:	b480      	push	{r7}
 80054fa:	b085      	sub	sp, #20
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	3301      	adds	r3, #1
 8005504:	781b      	ldrb	r3, [r3, #0]
 8005506:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8005508:	89fb      	ldrh	r3, [r7, #14]
 800550a:	021b      	lsls	r3, r3, #8
 800550c:	b21a      	sxth	r2, r3
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	781b      	ldrb	r3, [r3, #0]
 8005512:	b21b      	sxth	r3, r3
 8005514:	4313      	orrs	r3, r2
 8005516:	b21b      	sxth	r3, r3
 8005518:	81fb      	strh	r3, [r7, #14]
	return rv;
 800551a:	89fb      	ldrh	r3, [r7, #14]
}
 800551c:	4618      	mov	r0, r3
 800551e:	3714      	adds	r7, #20
 8005520:	46bd      	mov	sp, r7
 8005522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005526:	4770      	bx	lr

08005528 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8005528:	b480      	push	{r7}
 800552a:	b085      	sub	sp, #20
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	3303      	adds	r3, #3
 8005534:	781b      	ldrb	r3, [r3, #0]
 8005536:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	021b      	lsls	r3, r3, #8
 800553c:	687a      	ldr	r2, [r7, #4]
 800553e:	3202      	adds	r2, #2
 8005540:	7812      	ldrb	r2, [r2, #0]
 8005542:	4313      	orrs	r3, r2
 8005544:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	021b      	lsls	r3, r3, #8
 800554a:	687a      	ldr	r2, [r7, #4]
 800554c:	3201      	adds	r2, #1
 800554e:	7812      	ldrb	r2, [r2, #0]
 8005550:	4313      	orrs	r3, r2
 8005552:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	021b      	lsls	r3, r3, #8
 8005558:	687a      	ldr	r2, [r7, #4]
 800555a:	7812      	ldrb	r2, [r2, #0]
 800555c:	4313      	orrs	r3, r2
 800555e:	60fb      	str	r3, [r7, #12]
	return rv;
 8005560:	68fb      	ldr	r3, [r7, #12]
}
 8005562:	4618      	mov	r0, r3
 8005564:	3714      	adds	r7, #20
 8005566:	46bd      	mov	sp, r7
 8005568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556c:	4770      	bx	lr

0800556e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800556e:	b480      	push	{r7}
 8005570:	b083      	sub	sp, #12
 8005572:	af00      	add	r7, sp, #0
 8005574:	6078      	str	r0, [r7, #4]
 8005576:	460b      	mov	r3, r1
 8005578:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	1c5a      	adds	r2, r3, #1
 800557e:	607a      	str	r2, [r7, #4]
 8005580:	887a      	ldrh	r2, [r7, #2]
 8005582:	b2d2      	uxtb	r2, r2
 8005584:	701a      	strb	r2, [r3, #0]
 8005586:	887b      	ldrh	r3, [r7, #2]
 8005588:	0a1b      	lsrs	r3, r3, #8
 800558a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	1c5a      	adds	r2, r3, #1
 8005590:	607a      	str	r2, [r7, #4]
 8005592:	887a      	ldrh	r2, [r7, #2]
 8005594:	b2d2      	uxtb	r2, r2
 8005596:	701a      	strb	r2, [r3, #0]
}
 8005598:	bf00      	nop
 800559a:	370c      	adds	r7, #12
 800559c:	46bd      	mov	sp, r7
 800559e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a2:	4770      	bx	lr

080055a4 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80055a4:	b480      	push	{r7}
 80055a6:	b083      	sub	sp, #12
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
 80055ac:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	1c5a      	adds	r2, r3, #1
 80055b2:	607a      	str	r2, [r7, #4]
 80055b4:	683a      	ldr	r2, [r7, #0]
 80055b6:	b2d2      	uxtb	r2, r2
 80055b8:	701a      	strb	r2, [r3, #0]
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	0a1b      	lsrs	r3, r3, #8
 80055be:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	1c5a      	adds	r2, r3, #1
 80055c4:	607a      	str	r2, [r7, #4]
 80055c6:	683a      	ldr	r2, [r7, #0]
 80055c8:	b2d2      	uxtb	r2, r2
 80055ca:	701a      	strb	r2, [r3, #0]
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	0a1b      	lsrs	r3, r3, #8
 80055d0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	1c5a      	adds	r2, r3, #1
 80055d6:	607a      	str	r2, [r7, #4]
 80055d8:	683a      	ldr	r2, [r7, #0]
 80055da:	b2d2      	uxtb	r2, r2
 80055dc:	701a      	strb	r2, [r3, #0]
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	0a1b      	lsrs	r3, r3, #8
 80055e2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	1c5a      	adds	r2, r3, #1
 80055e8:	607a      	str	r2, [r7, #4]
 80055ea:	683a      	ldr	r2, [r7, #0]
 80055ec:	b2d2      	uxtb	r2, r2
 80055ee:	701a      	strb	r2, [r3, #0]
}
 80055f0:	bf00      	nop
 80055f2:	370c      	adds	r7, #12
 80055f4:	46bd      	mov	sp, r7
 80055f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fa:	4770      	bx	lr

080055fc <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80055fc:	b480      	push	{r7}
 80055fe:	b087      	sub	sp, #28
 8005600:	af00      	add	r7, sp, #0
 8005602:	60f8      	str	r0, [r7, #12]
 8005604:	60b9      	str	r1, [r7, #8]
 8005606:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d00d      	beq.n	8005632 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8005616:	693a      	ldr	r2, [r7, #16]
 8005618:	1c53      	adds	r3, r2, #1
 800561a:	613b      	str	r3, [r7, #16]
 800561c:	697b      	ldr	r3, [r7, #20]
 800561e:	1c59      	adds	r1, r3, #1
 8005620:	6179      	str	r1, [r7, #20]
 8005622:	7812      	ldrb	r2, [r2, #0]
 8005624:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	3b01      	subs	r3, #1
 800562a:	607b      	str	r3, [r7, #4]
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d1f1      	bne.n	8005616 <mem_cpy+0x1a>
	}
}
 8005632:	bf00      	nop
 8005634:	371c      	adds	r7, #28
 8005636:	46bd      	mov	sp, r7
 8005638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563c:	4770      	bx	lr

0800563e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800563e:	b480      	push	{r7}
 8005640:	b087      	sub	sp, #28
 8005642:	af00      	add	r7, sp, #0
 8005644:	60f8      	str	r0, [r7, #12]
 8005646:	60b9      	str	r1, [r7, #8]
 8005648:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800564e:	697b      	ldr	r3, [r7, #20]
 8005650:	1c5a      	adds	r2, r3, #1
 8005652:	617a      	str	r2, [r7, #20]
 8005654:	68ba      	ldr	r2, [r7, #8]
 8005656:	b2d2      	uxtb	r2, r2
 8005658:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	3b01      	subs	r3, #1
 800565e:	607b      	str	r3, [r7, #4]
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d1f3      	bne.n	800564e <mem_set+0x10>
}
 8005666:	bf00      	nop
 8005668:	bf00      	nop
 800566a:	371c      	adds	r7, #28
 800566c:	46bd      	mov	sp, r7
 800566e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005672:	4770      	bx	lr

08005674 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8005674:	b480      	push	{r7}
 8005676:	b089      	sub	sp, #36	@ 0x24
 8005678:	af00      	add	r7, sp, #0
 800567a:	60f8      	str	r0, [r7, #12]
 800567c:	60b9      	str	r1, [r7, #8]
 800567e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	61fb      	str	r3, [r7, #28]
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8005688:	2300      	movs	r3, #0
 800568a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800568c:	69fb      	ldr	r3, [r7, #28]
 800568e:	1c5a      	adds	r2, r3, #1
 8005690:	61fa      	str	r2, [r7, #28]
 8005692:	781b      	ldrb	r3, [r3, #0]
 8005694:	4619      	mov	r1, r3
 8005696:	69bb      	ldr	r3, [r7, #24]
 8005698:	1c5a      	adds	r2, r3, #1
 800569a:	61ba      	str	r2, [r7, #24]
 800569c:	781b      	ldrb	r3, [r3, #0]
 800569e:	1acb      	subs	r3, r1, r3
 80056a0:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	3b01      	subs	r3, #1
 80056a6:	607b      	str	r3, [r7, #4]
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d002      	beq.n	80056b4 <mem_cmp+0x40>
 80056ae:	697b      	ldr	r3, [r7, #20]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d0eb      	beq.n	800568c <mem_cmp+0x18>

	return r;
 80056b4:	697b      	ldr	r3, [r7, #20]
}
 80056b6:	4618      	mov	r0, r3
 80056b8:	3724      	adds	r7, #36	@ 0x24
 80056ba:	46bd      	mov	sp, r7
 80056bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c0:	4770      	bx	lr

080056c2 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80056c2:	b480      	push	{r7}
 80056c4:	b083      	sub	sp, #12
 80056c6:	af00      	add	r7, sp, #0
 80056c8:	6078      	str	r0, [r7, #4]
 80056ca:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80056cc:	e002      	b.n	80056d4 <chk_chr+0x12>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	3301      	adds	r3, #1
 80056d2:	607b      	str	r3, [r7, #4]
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	781b      	ldrb	r3, [r3, #0]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d005      	beq.n	80056e8 <chk_chr+0x26>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	781b      	ldrb	r3, [r3, #0]
 80056e0:	461a      	mov	r2, r3
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d1f2      	bne.n	80056ce <chk_chr+0xc>
	return *str;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	781b      	ldrb	r3, [r3, #0]
}
 80056ec:	4618      	mov	r0, r3
 80056ee:	370c      	adds	r7, #12
 80056f0:	46bd      	mov	sp, r7
 80056f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f6:	4770      	bx	lr

080056f8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80056f8:	b480      	push	{r7}
 80056fa:	b085      	sub	sp, #20
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
 8005700:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005702:	2300      	movs	r3, #0
 8005704:	60bb      	str	r3, [r7, #8]
 8005706:	68bb      	ldr	r3, [r7, #8]
 8005708:	60fb      	str	r3, [r7, #12]
 800570a:	e029      	b.n	8005760 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800570c:	4a27      	ldr	r2, [pc, #156]	@ (80057ac <chk_lock+0xb4>)
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	011b      	lsls	r3, r3, #4
 8005712:	4413      	add	r3, r2
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d01d      	beq.n	8005756 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800571a:	4a24      	ldr	r2, [pc, #144]	@ (80057ac <chk_lock+0xb4>)
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	011b      	lsls	r3, r3, #4
 8005720:	4413      	add	r3, r2
 8005722:	681a      	ldr	r2, [r3, #0]
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	429a      	cmp	r2, r3
 800572a:	d116      	bne.n	800575a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800572c:	4a1f      	ldr	r2, [pc, #124]	@ (80057ac <chk_lock+0xb4>)
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	011b      	lsls	r3, r3, #4
 8005732:	4413      	add	r3, r2
 8005734:	3304      	adds	r3, #4
 8005736:	681a      	ldr	r2, [r3, #0]
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800573c:	429a      	cmp	r2, r3
 800573e:	d10c      	bne.n	800575a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005740:	4a1a      	ldr	r2, [pc, #104]	@ (80057ac <chk_lock+0xb4>)
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	011b      	lsls	r3, r3, #4
 8005746:	4413      	add	r3, r2
 8005748:	3308      	adds	r3, #8
 800574a:	681a      	ldr	r2, [r3, #0]
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8005750:	429a      	cmp	r2, r3
 8005752:	d102      	bne.n	800575a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005754:	e007      	b.n	8005766 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8005756:	2301      	movs	r3, #1
 8005758:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	3301      	adds	r3, #1
 800575e:	60fb      	str	r3, [r7, #12]
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	2b01      	cmp	r3, #1
 8005764:	d9d2      	bls.n	800570c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	2b02      	cmp	r3, #2
 800576a:	d109      	bne.n	8005780 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800576c:	68bb      	ldr	r3, [r7, #8]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d102      	bne.n	8005778 <chk_lock+0x80>
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	2b02      	cmp	r3, #2
 8005776:	d101      	bne.n	800577c <chk_lock+0x84>
 8005778:	2300      	movs	r3, #0
 800577a:	e010      	b.n	800579e <chk_lock+0xa6>
 800577c:	2312      	movs	r3, #18
 800577e:	e00e      	b.n	800579e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d108      	bne.n	8005798 <chk_lock+0xa0>
 8005786:	4a09      	ldr	r2, [pc, #36]	@ (80057ac <chk_lock+0xb4>)
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	011b      	lsls	r3, r3, #4
 800578c:	4413      	add	r3, r2
 800578e:	330c      	adds	r3, #12
 8005790:	881b      	ldrh	r3, [r3, #0]
 8005792:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005796:	d101      	bne.n	800579c <chk_lock+0xa4>
 8005798:	2310      	movs	r3, #16
 800579a:	e000      	b.n	800579e <chk_lock+0xa6>
 800579c:	2300      	movs	r3, #0
}
 800579e:	4618      	mov	r0, r3
 80057a0:	3714      	adds	r7, #20
 80057a2:	46bd      	mov	sp, r7
 80057a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a8:	4770      	bx	lr
 80057aa:	bf00      	nop
 80057ac:	200002a8 	.word	0x200002a8

080057b0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80057b0:	b480      	push	{r7}
 80057b2:	b083      	sub	sp, #12
 80057b4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80057b6:	2300      	movs	r3, #0
 80057b8:	607b      	str	r3, [r7, #4]
 80057ba:	e002      	b.n	80057c2 <enq_lock+0x12>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	3301      	adds	r3, #1
 80057c0:	607b      	str	r3, [r7, #4]
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2b01      	cmp	r3, #1
 80057c6:	d806      	bhi.n	80057d6 <enq_lock+0x26>
 80057c8:	4a09      	ldr	r2, [pc, #36]	@ (80057f0 <enq_lock+0x40>)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	011b      	lsls	r3, r3, #4
 80057ce:	4413      	add	r3, r2
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d1f2      	bne.n	80057bc <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2b02      	cmp	r3, #2
 80057da:	bf14      	ite	ne
 80057dc:	2301      	movne	r3, #1
 80057de:	2300      	moveq	r3, #0
 80057e0:	b2db      	uxtb	r3, r3
}
 80057e2:	4618      	mov	r0, r3
 80057e4:	370c      	adds	r7, #12
 80057e6:	46bd      	mov	sp, r7
 80057e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ec:	4770      	bx	lr
 80057ee:	bf00      	nop
 80057f0:	200002a8 	.word	0x200002a8

080057f4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80057f4:	b480      	push	{r7}
 80057f6:	b085      	sub	sp, #20
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
 80057fc:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80057fe:	2300      	movs	r3, #0
 8005800:	60fb      	str	r3, [r7, #12]
 8005802:	e01f      	b.n	8005844 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8005804:	4a41      	ldr	r2, [pc, #260]	@ (800590c <inc_lock+0x118>)
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	011b      	lsls	r3, r3, #4
 800580a:	4413      	add	r3, r2
 800580c:	681a      	ldr	r2, [r3, #0]
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	429a      	cmp	r2, r3
 8005814:	d113      	bne.n	800583e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8005816:	4a3d      	ldr	r2, [pc, #244]	@ (800590c <inc_lock+0x118>)
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	011b      	lsls	r3, r3, #4
 800581c:	4413      	add	r3, r2
 800581e:	3304      	adds	r3, #4
 8005820:	681a      	ldr	r2, [r3, #0]
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8005826:	429a      	cmp	r2, r3
 8005828:	d109      	bne.n	800583e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800582a:	4a38      	ldr	r2, [pc, #224]	@ (800590c <inc_lock+0x118>)
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	011b      	lsls	r3, r3, #4
 8005830:	4413      	add	r3, r2
 8005832:	3308      	adds	r3, #8
 8005834:	681a      	ldr	r2, [r3, #0]
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800583a:	429a      	cmp	r2, r3
 800583c:	d006      	beq.n	800584c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	3301      	adds	r3, #1
 8005842:	60fb      	str	r3, [r7, #12]
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	2b01      	cmp	r3, #1
 8005848:	d9dc      	bls.n	8005804 <inc_lock+0x10>
 800584a:	e000      	b.n	800584e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800584c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	2b02      	cmp	r3, #2
 8005852:	d132      	bne.n	80058ba <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005854:	2300      	movs	r3, #0
 8005856:	60fb      	str	r3, [r7, #12]
 8005858:	e002      	b.n	8005860 <inc_lock+0x6c>
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	3301      	adds	r3, #1
 800585e:	60fb      	str	r3, [r7, #12]
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	2b01      	cmp	r3, #1
 8005864:	d806      	bhi.n	8005874 <inc_lock+0x80>
 8005866:	4a29      	ldr	r2, [pc, #164]	@ (800590c <inc_lock+0x118>)
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	011b      	lsls	r3, r3, #4
 800586c:	4413      	add	r3, r2
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d1f2      	bne.n	800585a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	2b02      	cmp	r3, #2
 8005878:	d101      	bne.n	800587e <inc_lock+0x8a>
 800587a:	2300      	movs	r3, #0
 800587c:	e040      	b.n	8005900 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681a      	ldr	r2, [r3, #0]
 8005882:	4922      	ldr	r1, [pc, #136]	@ (800590c <inc_lock+0x118>)
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	011b      	lsls	r3, r3, #4
 8005888:	440b      	add	r3, r1
 800588a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	689a      	ldr	r2, [r3, #8]
 8005890:	491e      	ldr	r1, [pc, #120]	@ (800590c <inc_lock+0x118>)
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	011b      	lsls	r3, r3, #4
 8005896:	440b      	add	r3, r1
 8005898:	3304      	adds	r3, #4
 800589a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	695a      	ldr	r2, [r3, #20]
 80058a0:	491a      	ldr	r1, [pc, #104]	@ (800590c <inc_lock+0x118>)
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	011b      	lsls	r3, r3, #4
 80058a6:	440b      	add	r3, r1
 80058a8:	3308      	adds	r3, #8
 80058aa:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80058ac:	4a17      	ldr	r2, [pc, #92]	@ (800590c <inc_lock+0x118>)
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	011b      	lsls	r3, r3, #4
 80058b2:	4413      	add	r3, r2
 80058b4:	330c      	adds	r3, #12
 80058b6:	2200      	movs	r2, #0
 80058b8:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d009      	beq.n	80058d4 <inc_lock+0xe0>
 80058c0:	4a12      	ldr	r2, [pc, #72]	@ (800590c <inc_lock+0x118>)
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	011b      	lsls	r3, r3, #4
 80058c6:	4413      	add	r3, r2
 80058c8:	330c      	adds	r3, #12
 80058ca:	881b      	ldrh	r3, [r3, #0]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d001      	beq.n	80058d4 <inc_lock+0xe0>
 80058d0:	2300      	movs	r3, #0
 80058d2:	e015      	b.n	8005900 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d108      	bne.n	80058ec <inc_lock+0xf8>
 80058da:	4a0c      	ldr	r2, [pc, #48]	@ (800590c <inc_lock+0x118>)
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	011b      	lsls	r3, r3, #4
 80058e0:	4413      	add	r3, r2
 80058e2:	330c      	adds	r3, #12
 80058e4:	881b      	ldrh	r3, [r3, #0]
 80058e6:	3301      	adds	r3, #1
 80058e8:	b29a      	uxth	r2, r3
 80058ea:	e001      	b.n	80058f0 <inc_lock+0xfc>
 80058ec:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80058f0:	4906      	ldr	r1, [pc, #24]	@ (800590c <inc_lock+0x118>)
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	011b      	lsls	r3, r3, #4
 80058f6:	440b      	add	r3, r1
 80058f8:	330c      	adds	r3, #12
 80058fa:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	3301      	adds	r3, #1
}
 8005900:	4618      	mov	r0, r3
 8005902:	3714      	adds	r7, #20
 8005904:	46bd      	mov	sp, r7
 8005906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590a:	4770      	bx	lr
 800590c:	200002a8 	.word	0x200002a8

08005910 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8005910:	b480      	push	{r7}
 8005912:	b085      	sub	sp, #20
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	3b01      	subs	r3, #1
 800591c:	607b      	str	r3, [r7, #4]
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2b01      	cmp	r3, #1
 8005922:	d825      	bhi.n	8005970 <dec_lock+0x60>
		n = Files[i].ctr;
 8005924:	4a17      	ldr	r2, [pc, #92]	@ (8005984 <dec_lock+0x74>)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	011b      	lsls	r3, r3, #4
 800592a:	4413      	add	r3, r2
 800592c:	330c      	adds	r3, #12
 800592e:	881b      	ldrh	r3, [r3, #0]
 8005930:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8005932:	89fb      	ldrh	r3, [r7, #14]
 8005934:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005938:	d101      	bne.n	800593e <dec_lock+0x2e>
 800593a:	2300      	movs	r3, #0
 800593c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800593e:	89fb      	ldrh	r3, [r7, #14]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d002      	beq.n	800594a <dec_lock+0x3a>
 8005944:	89fb      	ldrh	r3, [r7, #14]
 8005946:	3b01      	subs	r3, #1
 8005948:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800594a:	4a0e      	ldr	r2, [pc, #56]	@ (8005984 <dec_lock+0x74>)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	011b      	lsls	r3, r3, #4
 8005950:	4413      	add	r3, r2
 8005952:	330c      	adds	r3, #12
 8005954:	89fa      	ldrh	r2, [r7, #14]
 8005956:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8005958:	89fb      	ldrh	r3, [r7, #14]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d105      	bne.n	800596a <dec_lock+0x5a>
 800595e:	4a09      	ldr	r2, [pc, #36]	@ (8005984 <dec_lock+0x74>)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	011b      	lsls	r3, r3, #4
 8005964:	4413      	add	r3, r2
 8005966:	2200      	movs	r2, #0
 8005968:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800596a:	2300      	movs	r3, #0
 800596c:	737b      	strb	r3, [r7, #13]
 800596e:	e001      	b.n	8005974 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8005970:	2302      	movs	r3, #2
 8005972:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8005974:	7b7b      	ldrb	r3, [r7, #13]
}
 8005976:	4618      	mov	r0, r3
 8005978:	3714      	adds	r7, #20
 800597a:	46bd      	mov	sp, r7
 800597c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005980:	4770      	bx	lr
 8005982:	bf00      	nop
 8005984:	200002a8 	.word	0x200002a8

08005988 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8005988:	b480      	push	{r7}
 800598a:	b085      	sub	sp, #20
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8005990:	2300      	movs	r3, #0
 8005992:	60fb      	str	r3, [r7, #12]
 8005994:	e010      	b.n	80059b8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8005996:	4a0d      	ldr	r2, [pc, #52]	@ (80059cc <clear_lock+0x44>)
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	011b      	lsls	r3, r3, #4
 800599c:	4413      	add	r3, r2
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	687a      	ldr	r2, [r7, #4]
 80059a2:	429a      	cmp	r2, r3
 80059a4:	d105      	bne.n	80059b2 <clear_lock+0x2a>
 80059a6:	4a09      	ldr	r2, [pc, #36]	@ (80059cc <clear_lock+0x44>)
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	011b      	lsls	r3, r3, #4
 80059ac:	4413      	add	r3, r2
 80059ae:	2200      	movs	r2, #0
 80059b0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	3301      	adds	r3, #1
 80059b6:	60fb      	str	r3, [r7, #12]
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	2b01      	cmp	r3, #1
 80059bc:	d9eb      	bls.n	8005996 <clear_lock+0xe>
	}
}
 80059be:	bf00      	nop
 80059c0:	bf00      	nop
 80059c2:	3714      	adds	r7, #20
 80059c4:	46bd      	mov	sp, r7
 80059c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ca:	4770      	bx	lr
 80059cc:	200002a8 	.word	0x200002a8

080059d0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b086      	sub	sp, #24
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80059d8:	2300      	movs	r3, #0
 80059da:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	78db      	ldrb	r3, [r3, #3]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d034      	beq.n	8005a4e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80059e8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	7858      	ldrb	r0, [r3, #1]
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80059f4:	2301      	movs	r3, #1
 80059f6:	697a      	ldr	r2, [r7, #20]
 80059f8:	f7ff fd40 	bl	800547c <disk_write>
 80059fc:	4603      	mov	r3, r0
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d002      	beq.n	8005a08 <sync_window+0x38>
			res = FR_DISK_ERR;
 8005a02:	2301      	movs	r3, #1
 8005a04:	73fb      	strb	r3, [r7, #15]
 8005a06:	e022      	b.n	8005a4e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a12:	697a      	ldr	r2, [r7, #20]
 8005a14:	1ad2      	subs	r2, r2, r3
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6a1b      	ldr	r3, [r3, #32]
 8005a1a:	429a      	cmp	r2, r3
 8005a1c:	d217      	bcs.n	8005a4e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	789b      	ldrb	r3, [r3, #2]
 8005a22:	613b      	str	r3, [r7, #16]
 8005a24:	e010      	b.n	8005a48 <sync_window+0x78>
					wsect += fs->fsize;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6a1b      	ldr	r3, [r3, #32]
 8005a2a:	697a      	ldr	r2, [r7, #20]
 8005a2c:	4413      	add	r3, r2
 8005a2e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	7858      	ldrb	r0, [r3, #1]
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	697a      	ldr	r2, [r7, #20]
 8005a3e:	f7ff fd1d 	bl	800547c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005a42:	693b      	ldr	r3, [r7, #16]
 8005a44:	3b01      	subs	r3, #1
 8005a46:	613b      	str	r3, [r7, #16]
 8005a48:	693b      	ldr	r3, [r7, #16]
 8005a4a:	2b01      	cmp	r3, #1
 8005a4c:	d8eb      	bhi.n	8005a26 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8005a4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a50:	4618      	mov	r0, r3
 8005a52:	3718      	adds	r7, #24
 8005a54:	46bd      	mov	sp, r7
 8005a56:	bd80      	pop	{r7, pc}

08005a58 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b084      	sub	sp, #16
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
 8005a60:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8005a62:	2300      	movs	r3, #0
 8005a64:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a6a:	683a      	ldr	r2, [r7, #0]
 8005a6c:	429a      	cmp	r2, r3
 8005a6e:	d01b      	beq.n	8005aa8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8005a70:	6878      	ldr	r0, [r7, #4]
 8005a72:	f7ff ffad 	bl	80059d0 <sync_window>
 8005a76:	4603      	mov	r3, r0
 8005a78:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8005a7a:	7bfb      	ldrb	r3, [r7, #15]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d113      	bne.n	8005aa8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	7858      	ldrb	r0, [r3, #1]
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	683a      	ldr	r2, [r7, #0]
 8005a8e:	f7ff fcd5 	bl	800543c <disk_read>
 8005a92:	4603      	mov	r3, r0
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d004      	beq.n	8005aa2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8005a98:	f04f 33ff 	mov.w	r3, #4294967295
 8005a9c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	683a      	ldr	r2, [r7, #0]
 8005aa6:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 8005aa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005aaa:	4618      	mov	r0, r3
 8005aac:	3710      	adds	r7, #16
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bd80      	pop	{r7, pc}
	...

08005ab4 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b084      	sub	sp, #16
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8005abc:	6878      	ldr	r0, [r7, #4]
 8005abe:	f7ff ff87 	bl	80059d0 <sync_window>
 8005ac2:	4603      	mov	r3, r0
 8005ac4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8005ac6:	7bfb      	ldrb	r3, [r7, #15]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d159      	bne.n	8005b80 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	781b      	ldrb	r3, [r3, #0]
 8005ad0:	2b03      	cmp	r3, #3
 8005ad2:	d149      	bne.n	8005b68 <sync_fs+0xb4>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	791b      	ldrb	r3, [r3, #4]
 8005ad8:	2b01      	cmp	r3, #1
 8005ada:	d145      	bne.n	8005b68 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	899b      	ldrh	r3, [r3, #12]
 8005ae6:	461a      	mov	r2, r3
 8005ae8:	2100      	movs	r1, #0
 8005aea:	f7ff fda8 	bl	800563e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	3338      	adds	r3, #56	@ 0x38
 8005af2:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8005af6:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8005afa:	4618      	mov	r0, r3
 8005afc:	f7ff fd37 	bl	800556e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	3338      	adds	r3, #56	@ 0x38
 8005b04:	4921      	ldr	r1, [pc, #132]	@ (8005b8c <sync_fs+0xd8>)
 8005b06:	4618      	mov	r0, r3
 8005b08:	f7ff fd4c 	bl	80055a4 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	3338      	adds	r3, #56	@ 0x38
 8005b10:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8005b14:	491e      	ldr	r1, [pc, #120]	@ (8005b90 <sync_fs+0xdc>)
 8005b16:	4618      	mov	r0, r3
 8005b18:	f7ff fd44 	bl	80055a4 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	3338      	adds	r3, #56	@ 0x38
 8005b20:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	699b      	ldr	r3, [r3, #24]
 8005b28:	4619      	mov	r1, r3
 8005b2a:	4610      	mov	r0, r2
 8005b2c:	f7ff fd3a 	bl	80055a4 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	3338      	adds	r3, #56	@ 0x38
 8005b34:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	695b      	ldr	r3, [r3, #20]
 8005b3c:	4619      	mov	r1, r3
 8005b3e:	4610      	mov	r0, r2
 8005b40:	f7ff fd30 	bl	80055a4 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b48:	1c5a      	adds	r2, r3, #1
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	635a      	str	r2, [r3, #52]	@ 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	7858      	ldrb	r0, [r3, #1]
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005b5c:	2301      	movs	r3, #1
 8005b5e:	f7ff fc8d 	bl	800547c <disk_write>
			fs->fsi_flag = 0;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2200      	movs	r2, #0
 8005b66:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	785b      	ldrb	r3, [r3, #1]
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	2100      	movs	r1, #0
 8005b70:	4618      	mov	r0, r3
 8005b72:	f7ff fca3 	bl	80054bc <disk_ioctl>
 8005b76:	4603      	mov	r3, r0
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d001      	beq.n	8005b80 <sync_fs+0xcc>
 8005b7c:	2301      	movs	r3, #1
 8005b7e:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8005b80:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b82:	4618      	mov	r0, r3
 8005b84:	3710      	adds	r7, #16
 8005b86:	46bd      	mov	sp, r7
 8005b88:	bd80      	pop	{r7, pc}
 8005b8a:	bf00      	nop
 8005b8c:	41615252 	.word	0x41615252
 8005b90:	61417272 	.word	0x61417272

08005b94 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8005b94:	b480      	push	{r7}
 8005b96:	b083      	sub	sp, #12
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
 8005b9c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	3b02      	subs	r3, #2
 8005ba2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	69db      	ldr	r3, [r3, #28]
 8005ba8:	3b02      	subs	r3, #2
 8005baa:	683a      	ldr	r2, [r7, #0]
 8005bac:	429a      	cmp	r2, r3
 8005bae:	d301      	bcc.n	8005bb4 <clust2sect+0x20>
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	e008      	b.n	8005bc6 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	895b      	ldrh	r3, [r3, #10]
 8005bb8:	461a      	mov	r2, r3
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	fb03 f202 	mul.w	r2, r3, r2
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bc4:	4413      	add	r3, r2
}
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	370c      	adds	r7, #12
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd0:	4770      	bx	lr

08005bd2 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8005bd2:	b580      	push	{r7, lr}
 8005bd4:	b086      	sub	sp, #24
 8005bd6:	af00      	add	r7, sp, #0
 8005bd8:	6078      	str	r0, [r7, #4]
 8005bda:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	2b01      	cmp	r3, #1
 8005be6:	d904      	bls.n	8005bf2 <get_fat+0x20>
 8005be8:	693b      	ldr	r3, [r7, #16]
 8005bea:	69db      	ldr	r3, [r3, #28]
 8005bec:	683a      	ldr	r2, [r7, #0]
 8005bee:	429a      	cmp	r2, r3
 8005bf0:	d302      	bcc.n	8005bf8 <get_fat+0x26>
		val = 1;	/* Internal error */
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	617b      	str	r3, [r7, #20]
 8005bf6:	e0ba      	b.n	8005d6e <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8005bf8:	f04f 33ff 	mov.w	r3, #4294967295
 8005bfc:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8005bfe:	693b      	ldr	r3, [r7, #16]
 8005c00:	781b      	ldrb	r3, [r3, #0]
 8005c02:	2b03      	cmp	r3, #3
 8005c04:	f000 8082 	beq.w	8005d0c <get_fat+0x13a>
 8005c08:	2b03      	cmp	r3, #3
 8005c0a:	f300 80a6 	bgt.w	8005d5a <get_fat+0x188>
 8005c0e:	2b01      	cmp	r3, #1
 8005c10:	d002      	beq.n	8005c18 <get_fat+0x46>
 8005c12:	2b02      	cmp	r3, #2
 8005c14:	d055      	beq.n	8005cc2 <get_fat+0xf0>
 8005c16:	e0a0      	b.n	8005d5a <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	60fb      	str	r3, [r7, #12]
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	085b      	lsrs	r3, r3, #1
 8005c20:	68fa      	ldr	r2, [r7, #12]
 8005c22:	4413      	add	r3, r2
 8005c24:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005c26:	693b      	ldr	r3, [r7, #16]
 8005c28:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005c2a:	693b      	ldr	r3, [r7, #16]
 8005c2c:	899b      	ldrh	r3, [r3, #12]
 8005c2e:	4619      	mov	r1, r3
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	fbb3 f3f1 	udiv	r3, r3, r1
 8005c36:	4413      	add	r3, r2
 8005c38:	4619      	mov	r1, r3
 8005c3a:	6938      	ldr	r0, [r7, #16]
 8005c3c:	f7ff ff0c 	bl	8005a58 <move_window>
 8005c40:	4603      	mov	r3, r0
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	f040 808c 	bne.w	8005d60 <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	1c5a      	adds	r2, r3, #1
 8005c4c:	60fa      	str	r2, [r7, #12]
 8005c4e:	693a      	ldr	r2, [r7, #16]
 8005c50:	8992      	ldrh	r2, [r2, #12]
 8005c52:	fbb3 f1f2 	udiv	r1, r3, r2
 8005c56:	fb01 f202 	mul.w	r2, r1, r2
 8005c5a:	1a9b      	subs	r3, r3, r2
 8005c5c:	693a      	ldr	r2, [r7, #16]
 8005c5e:	4413      	add	r3, r2
 8005c60:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005c64:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005c66:	693b      	ldr	r3, [r7, #16]
 8005c68:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005c6a:	693b      	ldr	r3, [r7, #16]
 8005c6c:	899b      	ldrh	r3, [r3, #12]
 8005c6e:	4619      	mov	r1, r3
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	fbb3 f3f1 	udiv	r3, r3, r1
 8005c76:	4413      	add	r3, r2
 8005c78:	4619      	mov	r1, r3
 8005c7a:	6938      	ldr	r0, [r7, #16]
 8005c7c:	f7ff feec 	bl	8005a58 <move_window>
 8005c80:	4603      	mov	r3, r0
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d16e      	bne.n	8005d64 <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 8005c86:	693b      	ldr	r3, [r7, #16]
 8005c88:	899b      	ldrh	r3, [r3, #12]
 8005c8a:	461a      	mov	r2, r3
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	fbb3 f1f2 	udiv	r1, r3, r2
 8005c92:	fb01 f202 	mul.w	r2, r1, r2
 8005c96:	1a9b      	subs	r3, r3, r2
 8005c98:	693a      	ldr	r2, [r7, #16]
 8005c9a:	4413      	add	r3, r2
 8005c9c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005ca0:	021b      	lsls	r3, r3, #8
 8005ca2:	68ba      	ldr	r2, [r7, #8]
 8005ca4:	4313      	orrs	r3, r2
 8005ca6:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	f003 0301 	and.w	r3, r3, #1
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d002      	beq.n	8005cb8 <get_fat+0xe6>
 8005cb2:	68bb      	ldr	r3, [r7, #8]
 8005cb4:	091b      	lsrs	r3, r3, #4
 8005cb6:	e002      	b.n	8005cbe <get_fat+0xec>
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005cbe:	617b      	str	r3, [r7, #20]
			break;
 8005cc0:	e055      	b.n	8005d6e <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005cc2:	693b      	ldr	r3, [r7, #16]
 8005cc4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005cc6:	693b      	ldr	r3, [r7, #16]
 8005cc8:	899b      	ldrh	r3, [r3, #12]
 8005cca:	085b      	lsrs	r3, r3, #1
 8005ccc:	b29b      	uxth	r3, r3
 8005cce:	4619      	mov	r1, r3
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	fbb3 f3f1 	udiv	r3, r3, r1
 8005cd6:	4413      	add	r3, r2
 8005cd8:	4619      	mov	r1, r3
 8005cda:	6938      	ldr	r0, [r7, #16]
 8005cdc:	f7ff febc 	bl	8005a58 <move_window>
 8005ce0:	4603      	mov	r3, r0
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d140      	bne.n	8005d68 <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8005ce6:	693b      	ldr	r3, [r7, #16]
 8005ce8:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	005b      	lsls	r3, r3, #1
 8005cf0:	693a      	ldr	r2, [r7, #16]
 8005cf2:	8992      	ldrh	r2, [r2, #12]
 8005cf4:	fbb3 f0f2 	udiv	r0, r3, r2
 8005cf8:	fb00 f202 	mul.w	r2, r0, r2
 8005cfc:	1a9b      	subs	r3, r3, r2
 8005cfe:	440b      	add	r3, r1
 8005d00:	4618      	mov	r0, r3
 8005d02:	f7ff fbf9 	bl	80054f8 <ld_word>
 8005d06:	4603      	mov	r3, r0
 8005d08:	617b      	str	r3, [r7, #20]
			break;
 8005d0a:	e030      	b.n	8005d6e <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005d0c:	693b      	ldr	r3, [r7, #16]
 8005d0e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005d10:	693b      	ldr	r3, [r7, #16]
 8005d12:	899b      	ldrh	r3, [r3, #12]
 8005d14:	089b      	lsrs	r3, r3, #2
 8005d16:	b29b      	uxth	r3, r3
 8005d18:	4619      	mov	r1, r3
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	fbb3 f3f1 	udiv	r3, r3, r1
 8005d20:	4413      	add	r3, r2
 8005d22:	4619      	mov	r1, r3
 8005d24:	6938      	ldr	r0, [r7, #16]
 8005d26:	f7ff fe97 	bl	8005a58 <move_window>
 8005d2a:	4603      	mov	r3, r0
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d11d      	bne.n	8005d6c <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8005d30:	693b      	ldr	r3, [r7, #16]
 8005d32:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	009b      	lsls	r3, r3, #2
 8005d3a:	693a      	ldr	r2, [r7, #16]
 8005d3c:	8992      	ldrh	r2, [r2, #12]
 8005d3e:	fbb3 f0f2 	udiv	r0, r3, r2
 8005d42:	fb00 f202 	mul.w	r2, r0, r2
 8005d46:	1a9b      	subs	r3, r3, r2
 8005d48:	440b      	add	r3, r1
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	f7ff fbec 	bl	8005528 <ld_dword>
 8005d50:	4603      	mov	r3, r0
 8005d52:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8005d56:	617b      	str	r3, [r7, #20]
			break;
 8005d58:	e009      	b.n	8005d6e <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	617b      	str	r3, [r7, #20]
 8005d5e:	e006      	b.n	8005d6e <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005d60:	bf00      	nop
 8005d62:	e004      	b.n	8005d6e <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005d64:	bf00      	nop
 8005d66:	e002      	b.n	8005d6e <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005d68:	bf00      	nop
 8005d6a:	e000      	b.n	8005d6e <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005d6c:	bf00      	nop
		}
	}

	return val;
 8005d6e:	697b      	ldr	r3, [r7, #20]
}
 8005d70:	4618      	mov	r0, r3
 8005d72:	3718      	adds	r7, #24
 8005d74:	46bd      	mov	sp, r7
 8005d76:	bd80      	pop	{r7, pc}

08005d78 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8005d78:	b590      	push	{r4, r7, lr}
 8005d7a:	b089      	sub	sp, #36	@ 0x24
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	60f8      	str	r0, [r7, #12]
 8005d80:	60b9      	str	r1, [r7, #8]
 8005d82:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8005d84:	2302      	movs	r3, #2
 8005d86:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	2b01      	cmp	r3, #1
 8005d8c:	f240 8109 	bls.w	8005fa2 <put_fat+0x22a>
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	69db      	ldr	r3, [r3, #28]
 8005d94:	68ba      	ldr	r2, [r7, #8]
 8005d96:	429a      	cmp	r2, r3
 8005d98:	f080 8103 	bcs.w	8005fa2 <put_fat+0x22a>
		switch (fs->fs_type) {
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	781b      	ldrb	r3, [r3, #0]
 8005da0:	2b03      	cmp	r3, #3
 8005da2:	f000 80b6 	beq.w	8005f12 <put_fat+0x19a>
 8005da6:	2b03      	cmp	r3, #3
 8005da8:	f300 80fb 	bgt.w	8005fa2 <put_fat+0x22a>
 8005dac:	2b01      	cmp	r3, #1
 8005dae:	d003      	beq.n	8005db8 <put_fat+0x40>
 8005db0:	2b02      	cmp	r3, #2
 8005db2:	f000 8083 	beq.w	8005ebc <put_fat+0x144>
 8005db6:	e0f4      	b.n	8005fa2 <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8005db8:	68bb      	ldr	r3, [r7, #8]
 8005dba:	61bb      	str	r3, [r7, #24]
 8005dbc:	69bb      	ldr	r3, [r7, #24]
 8005dbe:	085b      	lsrs	r3, r3, #1
 8005dc0:	69ba      	ldr	r2, [r7, #24]
 8005dc2:	4413      	add	r3, r2
 8005dc4:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	899b      	ldrh	r3, [r3, #12]
 8005dce:	4619      	mov	r1, r3
 8005dd0:	69bb      	ldr	r3, [r7, #24]
 8005dd2:	fbb3 f3f1 	udiv	r3, r3, r1
 8005dd6:	4413      	add	r3, r2
 8005dd8:	4619      	mov	r1, r3
 8005dda:	68f8      	ldr	r0, [r7, #12]
 8005ddc:	f7ff fe3c 	bl	8005a58 <move_window>
 8005de0:	4603      	mov	r3, r0
 8005de2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005de4:	7ffb      	ldrb	r3, [r7, #31]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	f040 80d4 	bne.w	8005f94 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8005df2:	69bb      	ldr	r3, [r7, #24]
 8005df4:	1c5a      	adds	r2, r3, #1
 8005df6:	61ba      	str	r2, [r7, #24]
 8005df8:	68fa      	ldr	r2, [r7, #12]
 8005dfa:	8992      	ldrh	r2, [r2, #12]
 8005dfc:	fbb3 f0f2 	udiv	r0, r3, r2
 8005e00:	fb00 f202 	mul.w	r2, r0, r2
 8005e04:	1a9b      	subs	r3, r3, r2
 8005e06:	440b      	add	r3, r1
 8005e08:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	f003 0301 	and.w	r3, r3, #1
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d00d      	beq.n	8005e30 <put_fat+0xb8>
 8005e14:	697b      	ldr	r3, [r7, #20]
 8005e16:	781b      	ldrb	r3, [r3, #0]
 8005e18:	b25b      	sxtb	r3, r3
 8005e1a:	f003 030f 	and.w	r3, r3, #15
 8005e1e:	b25a      	sxtb	r2, r3
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	b2db      	uxtb	r3, r3
 8005e24:	011b      	lsls	r3, r3, #4
 8005e26:	b25b      	sxtb	r3, r3
 8005e28:	4313      	orrs	r3, r2
 8005e2a:	b25b      	sxtb	r3, r3
 8005e2c:	b2db      	uxtb	r3, r3
 8005e2e:	e001      	b.n	8005e34 <put_fat+0xbc>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	b2db      	uxtb	r3, r3
 8005e34:	697a      	ldr	r2, [r7, #20]
 8005e36:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	2201      	movs	r2, #1
 8005e3c:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	899b      	ldrh	r3, [r3, #12]
 8005e46:	4619      	mov	r1, r3
 8005e48:	69bb      	ldr	r3, [r7, #24]
 8005e4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8005e4e:	4413      	add	r3, r2
 8005e50:	4619      	mov	r1, r3
 8005e52:	68f8      	ldr	r0, [r7, #12]
 8005e54:	f7ff fe00 	bl	8005a58 <move_window>
 8005e58:	4603      	mov	r3, r0
 8005e5a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005e5c:	7ffb      	ldrb	r3, [r7, #31]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	f040 809a 	bne.w	8005f98 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	899b      	ldrh	r3, [r3, #12]
 8005e6e:	461a      	mov	r2, r3
 8005e70:	69bb      	ldr	r3, [r7, #24]
 8005e72:	fbb3 f0f2 	udiv	r0, r3, r2
 8005e76:	fb00 f202 	mul.w	r2, r0, r2
 8005e7a:	1a9b      	subs	r3, r3, r2
 8005e7c:	440b      	add	r3, r1
 8005e7e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	f003 0301 	and.w	r3, r3, #1
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d003      	beq.n	8005e92 <put_fat+0x11a>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	091b      	lsrs	r3, r3, #4
 8005e8e:	b2db      	uxtb	r3, r3
 8005e90:	e00e      	b.n	8005eb0 <put_fat+0x138>
 8005e92:	697b      	ldr	r3, [r7, #20]
 8005e94:	781b      	ldrb	r3, [r3, #0]
 8005e96:	b25b      	sxtb	r3, r3
 8005e98:	f023 030f 	bic.w	r3, r3, #15
 8005e9c:	b25a      	sxtb	r2, r3
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	0a1b      	lsrs	r3, r3, #8
 8005ea2:	b25b      	sxtb	r3, r3
 8005ea4:	f003 030f 	and.w	r3, r3, #15
 8005ea8:	b25b      	sxtb	r3, r3
 8005eaa:	4313      	orrs	r3, r2
 8005eac:	b25b      	sxtb	r3, r3
 8005eae:	b2db      	uxtb	r3, r3
 8005eb0:	697a      	ldr	r2, [r7, #20]
 8005eb2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	2201      	movs	r2, #1
 8005eb8:	70da      	strb	r2, [r3, #3]
			break;
 8005eba:	e072      	b.n	8005fa2 <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	899b      	ldrh	r3, [r3, #12]
 8005ec4:	085b      	lsrs	r3, r3, #1
 8005ec6:	b29b      	uxth	r3, r3
 8005ec8:	4619      	mov	r1, r3
 8005eca:	68bb      	ldr	r3, [r7, #8]
 8005ecc:	fbb3 f3f1 	udiv	r3, r3, r1
 8005ed0:	4413      	add	r3, r2
 8005ed2:	4619      	mov	r1, r3
 8005ed4:	68f8      	ldr	r0, [r7, #12]
 8005ed6:	f7ff fdbf 	bl	8005a58 <move_window>
 8005eda:	4603      	mov	r3, r0
 8005edc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005ede:	7ffb      	ldrb	r3, [r7, #31]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d15b      	bne.n	8005f9c <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8005eea:	68bb      	ldr	r3, [r7, #8]
 8005eec:	005b      	lsls	r3, r3, #1
 8005eee:	68fa      	ldr	r2, [r7, #12]
 8005ef0:	8992      	ldrh	r2, [r2, #12]
 8005ef2:	fbb3 f0f2 	udiv	r0, r3, r2
 8005ef6:	fb00 f202 	mul.w	r2, r0, r2
 8005efa:	1a9b      	subs	r3, r3, r2
 8005efc:	440b      	add	r3, r1
 8005efe:	687a      	ldr	r2, [r7, #4]
 8005f00:	b292      	uxth	r2, r2
 8005f02:	4611      	mov	r1, r2
 8005f04:	4618      	mov	r0, r3
 8005f06:	f7ff fb32 	bl	800556e <st_word>
			fs->wflag = 1;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	2201      	movs	r2, #1
 8005f0e:	70da      	strb	r2, [r3, #3]
			break;
 8005f10:	e047      	b.n	8005fa2 <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	899b      	ldrh	r3, [r3, #12]
 8005f1a:	089b      	lsrs	r3, r3, #2
 8005f1c:	b29b      	uxth	r3, r3
 8005f1e:	4619      	mov	r1, r3
 8005f20:	68bb      	ldr	r3, [r7, #8]
 8005f22:	fbb3 f3f1 	udiv	r3, r3, r1
 8005f26:	4413      	add	r3, r2
 8005f28:	4619      	mov	r1, r3
 8005f2a:	68f8      	ldr	r0, [r7, #12]
 8005f2c:	f7ff fd94 	bl	8005a58 <move_window>
 8005f30:	4603      	mov	r3, r0
 8005f32:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005f34:	7ffb      	ldrb	r3, [r7, #31]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d132      	bne.n	8005fa0 <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8005f46:	68bb      	ldr	r3, [r7, #8]
 8005f48:	009b      	lsls	r3, r3, #2
 8005f4a:	68fa      	ldr	r2, [r7, #12]
 8005f4c:	8992      	ldrh	r2, [r2, #12]
 8005f4e:	fbb3 f0f2 	udiv	r0, r3, r2
 8005f52:	fb00 f202 	mul.w	r2, r0, r2
 8005f56:	1a9b      	subs	r3, r3, r2
 8005f58:	440b      	add	r3, r1
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	f7ff fae4 	bl	8005528 <ld_dword>
 8005f60:	4603      	mov	r3, r0
 8005f62:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8005f66:	4323      	orrs	r3, r4
 8005f68:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8005f70:	68bb      	ldr	r3, [r7, #8]
 8005f72:	009b      	lsls	r3, r3, #2
 8005f74:	68fa      	ldr	r2, [r7, #12]
 8005f76:	8992      	ldrh	r2, [r2, #12]
 8005f78:	fbb3 f0f2 	udiv	r0, r3, r2
 8005f7c:	fb00 f202 	mul.w	r2, r0, r2
 8005f80:	1a9b      	subs	r3, r3, r2
 8005f82:	440b      	add	r3, r1
 8005f84:	6879      	ldr	r1, [r7, #4]
 8005f86:	4618      	mov	r0, r3
 8005f88:	f7ff fb0c 	bl	80055a4 <st_dword>
			fs->wflag = 1;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	2201      	movs	r2, #1
 8005f90:	70da      	strb	r2, [r3, #3]
			break;
 8005f92:	e006      	b.n	8005fa2 <put_fat+0x22a>
			if (res != FR_OK) break;
 8005f94:	bf00      	nop
 8005f96:	e004      	b.n	8005fa2 <put_fat+0x22a>
			if (res != FR_OK) break;
 8005f98:	bf00      	nop
 8005f9a:	e002      	b.n	8005fa2 <put_fat+0x22a>
			if (res != FR_OK) break;
 8005f9c:	bf00      	nop
 8005f9e:	e000      	b.n	8005fa2 <put_fat+0x22a>
			if (res != FR_OK) break;
 8005fa0:	bf00      	nop
		}
	}
	return res;
 8005fa2:	7ffb      	ldrb	r3, [r7, #31]
}
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	3724      	adds	r7, #36	@ 0x24
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	bd90      	pop	{r4, r7, pc}

08005fac <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b088      	sub	sp, #32
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	60f8      	str	r0, [r7, #12]
 8005fb4:	60b9      	str	r1, [r7, #8]
 8005fb6:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8005fb8:	2300      	movs	r3, #0
 8005fba:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8005fc2:	68bb      	ldr	r3, [r7, #8]
 8005fc4:	2b01      	cmp	r3, #1
 8005fc6:	d904      	bls.n	8005fd2 <remove_chain+0x26>
 8005fc8:	69bb      	ldr	r3, [r7, #24]
 8005fca:	69db      	ldr	r3, [r3, #28]
 8005fcc:	68ba      	ldr	r2, [r7, #8]
 8005fce:	429a      	cmp	r2, r3
 8005fd0:	d301      	bcc.n	8005fd6 <remove_chain+0x2a>
 8005fd2:	2302      	movs	r3, #2
 8005fd4:	e04b      	b.n	800606e <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d00c      	beq.n	8005ff6 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8005fdc:	f04f 32ff 	mov.w	r2, #4294967295
 8005fe0:	6879      	ldr	r1, [r7, #4]
 8005fe2:	69b8      	ldr	r0, [r7, #24]
 8005fe4:	f7ff fec8 	bl	8005d78 <put_fat>
 8005fe8:	4603      	mov	r3, r0
 8005fea:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8005fec:	7ffb      	ldrb	r3, [r7, #31]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d001      	beq.n	8005ff6 <remove_chain+0x4a>
 8005ff2:	7ffb      	ldrb	r3, [r7, #31]
 8005ff4:	e03b      	b.n	800606e <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8005ff6:	68b9      	ldr	r1, [r7, #8]
 8005ff8:	68f8      	ldr	r0, [r7, #12]
 8005ffa:	f7ff fdea 	bl	8005bd2 <get_fat>
 8005ffe:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8006000:	697b      	ldr	r3, [r7, #20]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d031      	beq.n	800606a <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8006006:	697b      	ldr	r3, [r7, #20]
 8006008:	2b01      	cmp	r3, #1
 800600a:	d101      	bne.n	8006010 <remove_chain+0x64>
 800600c:	2302      	movs	r3, #2
 800600e:	e02e      	b.n	800606e <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8006010:	697b      	ldr	r3, [r7, #20]
 8006012:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006016:	d101      	bne.n	800601c <remove_chain+0x70>
 8006018:	2301      	movs	r3, #1
 800601a:	e028      	b.n	800606e <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800601c:	2200      	movs	r2, #0
 800601e:	68b9      	ldr	r1, [r7, #8]
 8006020:	69b8      	ldr	r0, [r7, #24]
 8006022:	f7ff fea9 	bl	8005d78 <put_fat>
 8006026:	4603      	mov	r3, r0
 8006028:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800602a:	7ffb      	ldrb	r3, [r7, #31]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d001      	beq.n	8006034 <remove_chain+0x88>
 8006030:	7ffb      	ldrb	r3, [r7, #31]
 8006032:	e01c      	b.n	800606e <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8006034:	69bb      	ldr	r3, [r7, #24]
 8006036:	699a      	ldr	r2, [r3, #24]
 8006038:	69bb      	ldr	r3, [r7, #24]
 800603a:	69db      	ldr	r3, [r3, #28]
 800603c:	3b02      	subs	r3, #2
 800603e:	429a      	cmp	r2, r3
 8006040:	d20b      	bcs.n	800605a <remove_chain+0xae>
			fs->free_clst++;
 8006042:	69bb      	ldr	r3, [r7, #24]
 8006044:	699b      	ldr	r3, [r3, #24]
 8006046:	1c5a      	adds	r2, r3, #1
 8006048:	69bb      	ldr	r3, [r7, #24]
 800604a:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800604c:	69bb      	ldr	r3, [r7, #24]
 800604e:	791b      	ldrb	r3, [r3, #4]
 8006050:	f043 0301 	orr.w	r3, r3, #1
 8006054:	b2da      	uxtb	r2, r3
 8006056:	69bb      	ldr	r3, [r7, #24]
 8006058:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800605a:	697b      	ldr	r3, [r7, #20]
 800605c:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800605e:	69bb      	ldr	r3, [r7, #24]
 8006060:	69db      	ldr	r3, [r3, #28]
 8006062:	68ba      	ldr	r2, [r7, #8]
 8006064:	429a      	cmp	r2, r3
 8006066:	d3c6      	bcc.n	8005ff6 <remove_chain+0x4a>
 8006068:	e000      	b.n	800606c <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800606a:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800606c:	2300      	movs	r3, #0
}
 800606e:	4618      	mov	r0, r3
 8006070:	3720      	adds	r7, #32
 8006072:	46bd      	mov	sp, r7
 8006074:	bd80      	pop	{r7, pc}

08006076 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8006076:	b580      	push	{r7, lr}
 8006078:	b088      	sub	sp, #32
 800607a:	af00      	add	r7, sp, #0
 800607c:	6078      	str	r0, [r7, #4]
 800607e:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d10d      	bne.n	80060a8 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800608c:	693b      	ldr	r3, [r7, #16]
 800608e:	695b      	ldr	r3, [r3, #20]
 8006090:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8006092:	69bb      	ldr	r3, [r7, #24]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d004      	beq.n	80060a2 <create_chain+0x2c>
 8006098:	693b      	ldr	r3, [r7, #16]
 800609a:	69db      	ldr	r3, [r3, #28]
 800609c:	69ba      	ldr	r2, [r7, #24]
 800609e:	429a      	cmp	r2, r3
 80060a0:	d31b      	bcc.n	80060da <create_chain+0x64>
 80060a2:	2301      	movs	r3, #1
 80060a4:	61bb      	str	r3, [r7, #24]
 80060a6:	e018      	b.n	80060da <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80060a8:	6839      	ldr	r1, [r7, #0]
 80060aa:	6878      	ldr	r0, [r7, #4]
 80060ac:	f7ff fd91 	bl	8005bd2 <get_fat>
 80060b0:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	2b01      	cmp	r3, #1
 80060b6:	d801      	bhi.n	80060bc <create_chain+0x46>
 80060b8:	2301      	movs	r3, #1
 80060ba:	e070      	b.n	800619e <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060c2:	d101      	bne.n	80060c8 <create_chain+0x52>
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	e06a      	b.n	800619e <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80060c8:	693b      	ldr	r3, [r7, #16]
 80060ca:	69db      	ldr	r3, [r3, #28]
 80060cc:	68fa      	ldr	r2, [r7, #12]
 80060ce:	429a      	cmp	r2, r3
 80060d0:	d201      	bcs.n	80060d6 <create_chain+0x60>
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	e063      	b.n	800619e <create_chain+0x128>
		scl = clst;
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80060da:	69bb      	ldr	r3, [r7, #24]
 80060dc:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80060de:	69fb      	ldr	r3, [r7, #28]
 80060e0:	3301      	adds	r3, #1
 80060e2:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80060e4:	693b      	ldr	r3, [r7, #16]
 80060e6:	69db      	ldr	r3, [r3, #28]
 80060e8:	69fa      	ldr	r2, [r7, #28]
 80060ea:	429a      	cmp	r2, r3
 80060ec:	d307      	bcc.n	80060fe <create_chain+0x88>
				ncl = 2;
 80060ee:	2302      	movs	r3, #2
 80060f0:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80060f2:	69fa      	ldr	r2, [r7, #28]
 80060f4:	69bb      	ldr	r3, [r7, #24]
 80060f6:	429a      	cmp	r2, r3
 80060f8:	d901      	bls.n	80060fe <create_chain+0x88>
 80060fa:	2300      	movs	r3, #0
 80060fc:	e04f      	b.n	800619e <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80060fe:	69f9      	ldr	r1, [r7, #28]
 8006100:	6878      	ldr	r0, [r7, #4]
 8006102:	f7ff fd66 	bl	8005bd2 <get_fat>
 8006106:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d00e      	beq.n	800612c <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	2b01      	cmp	r3, #1
 8006112:	d003      	beq.n	800611c <create_chain+0xa6>
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	f1b3 3fff 	cmp.w	r3, #4294967295
 800611a:	d101      	bne.n	8006120 <create_chain+0xaa>
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	e03e      	b.n	800619e <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8006120:	69fa      	ldr	r2, [r7, #28]
 8006122:	69bb      	ldr	r3, [r7, #24]
 8006124:	429a      	cmp	r2, r3
 8006126:	d1da      	bne.n	80060de <create_chain+0x68>
 8006128:	2300      	movs	r3, #0
 800612a:	e038      	b.n	800619e <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800612c:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800612e:	f04f 32ff 	mov.w	r2, #4294967295
 8006132:	69f9      	ldr	r1, [r7, #28]
 8006134:	6938      	ldr	r0, [r7, #16]
 8006136:	f7ff fe1f 	bl	8005d78 <put_fat>
 800613a:	4603      	mov	r3, r0
 800613c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800613e:	7dfb      	ldrb	r3, [r7, #23]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d109      	bne.n	8006158 <create_chain+0xe2>
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d006      	beq.n	8006158 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800614a:	69fa      	ldr	r2, [r7, #28]
 800614c:	6839      	ldr	r1, [r7, #0]
 800614e:	6938      	ldr	r0, [r7, #16]
 8006150:	f7ff fe12 	bl	8005d78 <put_fat>
 8006154:	4603      	mov	r3, r0
 8006156:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8006158:	7dfb      	ldrb	r3, [r7, #23]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d116      	bne.n	800618c <create_chain+0x116>
		fs->last_clst = ncl;
 800615e:	693b      	ldr	r3, [r7, #16]
 8006160:	69fa      	ldr	r2, [r7, #28]
 8006162:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8006164:	693b      	ldr	r3, [r7, #16]
 8006166:	699a      	ldr	r2, [r3, #24]
 8006168:	693b      	ldr	r3, [r7, #16]
 800616a:	69db      	ldr	r3, [r3, #28]
 800616c:	3b02      	subs	r3, #2
 800616e:	429a      	cmp	r2, r3
 8006170:	d804      	bhi.n	800617c <create_chain+0x106>
 8006172:	693b      	ldr	r3, [r7, #16]
 8006174:	699b      	ldr	r3, [r3, #24]
 8006176:	1e5a      	subs	r2, r3, #1
 8006178:	693b      	ldr	r3, [r7, #16]
 800617a:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800617c:	693b      	ldr	r3, [r7, #16]
 800617e:	791b      	ldrb	r3, [r3, #4]
 8006180:	f043 0301 	orr.w	r3, r3, #1
 8006184:	b2da      	uxtb	r2, r3
 8006186:	693b      	ldr	r3, [r7, #16]
 8006188:	711a      	strb	r2, [r3, #4]
 800618a:	e007      	b.n	800619c <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800618c:	7dfb      	ldrb	r3, [r7, #23]
 800618e:	2b01      	cmp	r3, #1
 8006190:	d102      	bne.n	8006198 <create_chain+0x122>
 8006192:	f04f 33ff 	mov.w	r3, #4294967295
 8006196:	e000      	b.n	800619a <create_chain+0x124>
 8006198:	2301      	movs	r3, #1
 800619a:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800619c:	69fb      	ldr	r3, [r7, #28]
}
 800619e:	4618      	mov	r0, r3
 80061a0:	3720      	adds	r7, #32
 80061a2:	46bd      	mov	sp, r7
 80061a4:	bd80      	pop	{r7, pc}

080061a6 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80061a6:	b480      	push	{r7}
 80061a8:	b087      	sub	sp, #28
 80061aa:	af00      	add	r7, sp, #0
 80061ac:	6078      	str	r0, [r7, #4]
 80061ae:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061ba:	3304      	adds	r3, #4
 80061bc:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	899b      	ldrh	r3, [r3, #12]
 80061c2:	461a      	mov	r2, r3
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	fbb3 f3f2 	udiv	r3, r3, r2
 80061ca:	68fa      	ldr	r2, [r7, #12]
 80061cc:	8952      	ldrh	r2, [r2, #10]
 80061ce:	fbb3 f3f2 	udiv	r3, r3, r2
 80061d2:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80061d4:	693b      	ldr	r3, [r7, #16]
 80061d6:	1d1a      	adds	r2, r3, #4
 80061d8:	613a      	str	r2, [r7, #16]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80061de:	68bb      	ldr	r3, [r7, #8]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d101      	bne.n	80061e8 <clmt_clust+0x42>
 80061e4:	2300      	movs	r3, #0
 80061e6:	e010      	b.n	800620a <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 80061e8:	697a      	ldr	r2, [r7, #20]
 80061ea:	68bb      	ldr	r3, [r7, #8]
 80061ec:	429a      	cmp	r2, r3
 80061ee:	d307      	bcc.n	8006200 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 80061f0:	697a      	ldr	r2, [r7, #20]
 80061f2:	68bb      	ldr	r3, [r7, #8]
 80061f4:	1ad3      	subs	r3, r2, r3
 80061f6:	617b      	str	r3, [r7, #20]
 80061f8:	693b      	ldr	r3, [r7, #16]
 80061fa:	3304      	adds	r3, #4
 80061fc:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80061fe:	e7e9      	b.n	80061d4 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8006200:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8006202:	693b      	ldr	r3, [r7, #16]
 8006204:	681a      	ldr	r2, [r3, #0]
 8006206:	697b      	ldr	r3, [r7, #20]
 8006208:	4413      	add	r3, r2
}
 800620a:	4618      	mov	r0, r3
 800620c:	371c      	adds	r7, #28
 800620e:	46bd      	mov	sp, r7
 8006210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006214:	4770      	bx	lr

08006216 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8006216:	b580      	push	{r7, lr}
 8006218:	b086      	sub	sp, #24
 800621a:	af00      	add	r7, sp, #0
 800621c:	6078      	str	r0, [r7, #4]
 800621e:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800622c:	d204      	bcs.n	8006238 <dir_sdi+0x22>
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	f003 031f 	and.w	r3, r3, #31
 8006234:	2b00      	cmp	r3, #0
 8006236:	d001      	beq.n	800623c <dir_sdi+0x26>
		return FR_INT_ERR;
 8006238:	2302      	movs	r3, #2
 800623a:	e071      	b.n	8006320 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	683a      	ldr	r2, [r7, #0]
 8006240:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	689b      	ldr	r3, [r3, #8]
 8006246:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8006248:	697b      	ldr	r3, [r7, #20]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d106      	bne.n	800625c <dir_sdi+0x46>
 800624e:	693b      	ldr	r3, [r7, #16]
 8006250:	781b      	ldrb	r3, [r3, #0]
 8006252:	2b02      	cmp	r3, #2
 8006254:	d902      	bls.n	800625c <dir_sdi+0x46>
		clst = fs->dirbase;
 8006256:	693b      	ldr	r3, [r7, #16]
 8006258:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800625a:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800625c:	697b      	ldr	r3, [r7, #20]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d10c      	bne.n	800627c <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	095b      	lsrs	r3, r3, #5
 8006266:	693a      	ldr	r2, [r7, #16]
 8006268:	8912      	ldrh	r2, [r2, #8]
 800626a:	4293      	cmp	r3, r2
 800626c:	d301      	bcc.n	8006272 <dir_sdi+0x5c>
 800626e:	2302      	movs	r3, #2
 8006270:	e056      	b.n	8006320 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8006272:	693b      	ldr	r3, [r7, #16]
 8006274:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	61da      	str	r2, [r3, #28]
 800627a:	e02d      	b.n	80062d8 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800627c:	693b      	ldr	r3, [r7, #16]
 800627e:	895b      	ldrh	r3, [r3, #10]
 8006280:	461a      	mov	r2, r3
 8006282:	693b      	ldr	r3, [r7, #16]
 8006284:	899b      	ldrh	r3, [r3, #12]
 8006286:	fb02 f303 	mul.w	r3, r2, r3
 800628a:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800628c:	e019      	b.n	80062c2 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6979      	ldr	r1, [r7, #20]
 8006292:	4618      	mov	r0, r3
 8006294:	f7ff fc9d 	bl	8005bd2 <get_fat>
 8006298:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800629a:	697b      	ldr	r3, [r7, #20]
 800629c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062a0:	d101      	bne.n	80062a6 <dir_sdi+0x90>
 80062a2:	2301      	movs	r3, #1
 80062a4:	e03c      	b.n	8006320 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80062a6:	697b      	ldr	r3, [r7, #20]
 80062a8:	2b01      	cmp	r3, #1
 80062aa:	d904      	bls.n	80062b6 <dir_sdi+0xa0>
 80062ac:	693b      	ldr	r3, [r7, #16]
 80062ae:	69db      	ldr	r3, [r3, #28]
 80062b0:	697a      	ldr	r2, [r7, #20]
 80062b2:	429a      	cmp	r2, r3
 80062b4:	d301      	bcc.n	80062ba <dir_sdi+0xa4>
 80062b6:	2302      	movs	r3, #2
 80062b8:	e032      	b.n	8006320 <dir_sdi+0x10a>
			ofs -= csz;
 80062ba:	683a      	ldr	r2, [r7, #0]
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	1ad3      	subs	r3, r2, r3
 80062c0:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80062c2:	683a      	ldr	r2, [r7, #0]
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	429a      	cmp	r2, r3
 80062c8:	d2e1      	bcs.n	800628e <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 80062ca:	6979      	ldr	r1, [r7, #20]
 80062cc:	6938      	ldr	r0, [r7, #16]
 80062ce:	f7ff fc61 	bl	8005b94 <clust2sect>
 80062d2:	4602      	mov	r2, r0
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	697a      	ldr	r2, [r7, #20]
 80062dc:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	69db      	ldr	r3, [r3, #28]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d101      	bne.n	80062ea <dir_sdi+0xd4>
 80062e6:	2302      	movs	r3, #2
 80062e8:	e01a      	b.n	8006320 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	69da      	ldr	r2, [r3, #28]
 80062ee:	693b      	ldr	r3, [r7, #16]
 80062f0:	899b      	ldrh	r3, [r3, #12]
 80062f2:	4619      	mov	r1, r3
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80062fa:	441a      	add	r2, r3
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8006300:	693b      	ldr	r3, [r7, #16]
 8006302:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8006306:	693b      	ldr	r3, [r7, #16]
 8006308:	899b      	ldrh	r3, [r3, #12]
 800630a:	461a      	mov	r2, r3
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	fbb3 f0f2 	udiv	r0, r3, r2
 8006312:	fb00 f202 	mul.w	r2, r0, r2
 8006316:	1a9b      	subs	r3, r3, r2
 8006318:	18ca      	adds	r2, r1, r3
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800631e:	2300      	movs	r3, #0
}
 8006320:	4618      	mov	r0, r3
 8006322:	3718      	adds	r7, #24
 8006324:	46bd      	mov	sp, r7
 8006326:	bd80      	pop	{r7, pc}

08006328 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8006328:	b580      	push	{r7, lr}
 800632a:	b086      	sub	sp, #24
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
 8006330:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	695b      	ldr	r3, [r3, #20]
 800633c:	3320      	adds	r3, #32
 800633e:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	69db      	ldr	r3, [r3, #28]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d003      	beq.n	8006350 <dir_next+0x28>
 8006348:	68bb      	ldr	r3, [r7, #8]
 800634a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800634e:	d301      	bcc.n	8006354 <dir_next+0x2c>
 8006350:	2304      	movs	r3, #4
 8006352:	e0bb      	b.n	80064cc <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	899b      	ldrh	r3, [r3, #12]
 8006358:	461a      	mov	r2, r3
 800635a:	68bb      	ldr	r3, [r7, #8]
 800635c:	fbb3 f1f2 	udiv	r1, r3, r2
 8006360:	fb01 f202 	mul.w	r2, r1, r2
 8006364:	1a9b      	subs	r3, r3, r2
 8006366:	2b00      	cmp	r3, #0
 8006368:	f040 809d 	bne.w	80064a6 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	69db      	ldr	r3, [r3, #28]
 8006370:	1c5a      	adds	r2, r3, #1
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	699b      	ldr	r3, [r3, #24]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d10b      	bne.n	8006396 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800637e:	68bb      	ldr	r3, [r7, #8]
 8006380:	095b      	lsrs	r3, r3, #5
 8006382:	68fa      	ldr	r2, [r7, #12]
 8006384:	8912      	ldrh	r2, [r2, #8]
 8006386:	4293      	cmp	r3, r2
 8006388:	f0c0 808d 	bcc.w	80064a6 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2200      	movs	r2, #0
 8006390:	61da      	str	r2, [r3, #28]
 8006392:	2304      	movs	r3, #4
 8006394:	e09a      	b.n	80064cc <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	899b      	ldrh	r3, [r3, #12]
 800639a:	461a      	mov	r2, r3
 800639c:	68bb      	ldr	r3, [r7, #8]
 800639e:	fbb3 f3f2 	udiv	r3, r3, r2
 80063a2:	68fa      	ldr	r2, [r7, #12]
 80063a4:	8952      	ldrh	r2, [r2, #10]
 80063a6:	3a01      	subs	r2, #1
 80063a8:	4013      	ands	r3, r2
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d17b      	bne.n	80064a6 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80063ae:	687a      	ldr	r2, [r7, #4]
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	699b      	ldr	r3, [r3, #24]
 80063b4:	4619      	mov	r1, r3
 80063b6:	4610      	mov	r0, r2
 80063b8:	f7ff fc0b 	bl	8005bd2 <get_fat>
 80063bc:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80063be:	697b      	ldr	r3, [r7, #20]
 80063c0:	2b01      	cmp	r3, #1
 80063c2:	d801      	bhi.n	80063c8 <dir_next+0xa0>
 80063c4:	2302      	movs	r3, #2
 80063c6:	e081      	b.n	80064cc <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80063c8:	697b      	ldr	r3, [r7, #20]
 80063ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063ce:	d101      	bne.n	80063d4 <dir_next+0xac>
 80063d0:	2301      	movs	r3, #1
 80063d2:	e07b      	b.n	80064cc <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	69db      	ldr	r3, [r3, #28]
 80063d8:	697a      	ldr	r2, [r7, #20]
 80063da:	429a      	cmp	r2, r3
 80063dc:	d359      	bcc.n	8006492 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d104      	bne.n	80063ee <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2200      	movs	r2, #0
 80063e8:	61da      	str	r2, [r3, #28]
 80063ea:	2304      	movs	r3, #4
 80063ec:	e06e      	b.n	80064cc <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80063ee:	687a      	ldr	r2, [r7, #4]
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	699b      	ldr	r3, [r3, #24]
 80063f4:	4619      	mov	r1, r3
 80063f6:	4610      	mov	r0, r2
 80063f8:	f7ff fe3d 	bl	8006076 <create_chain>
 80063fc:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80063fe:	697b      	ldr	r3, [r7, #20]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d101      	bne.n	8006408 <dir_next+0xe0>
 8006404:	2307      	movs	r3, #7
 8006406:	e061      	b.n	80064cc <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8006408:	697b      	ldr	r3, [r7, #20]
 800640a:	2b01      	cmp	r3, #1
 800640c:	d101      	bne.n	8006412 <dir_next+0xea>
 800640e:	2302      	movs	r3, #2
 8006410:	e05c      	b.n	80064cc <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006412:	697b      	ldr	r3, [r7, #20]
 8006414:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006418:	d101      	bne.n	800641e <dir_next+0xf6>
 800641a:	2301      	movs	r3, #1
 800641c:	e056      	b.n	80064cc <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800641e:	68f8      	ldr	r0, [r7, #12]
 8006420:	f7ff fad6 	bl	80059d0 <sync_window>
 8006424:	4603      	mov	r3, r0
 8006426:	2b00      	cmp	r3, #0
 8006428:	d001      	beq.n	800642e <dir_next+0x106>
 800642a:	2301      	movs	r3, #1
 800642c:	e04e      	b.n	80064cc <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	899b      	ldrh	r3, [r3, #12]
 8006438:	461a      	mov	r2, r3
 800643a:	2100      	movs	r1, #0
 800643c:	f7ff f8ff 	bl	800563e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006440:	2300      	movs	r3, #0
 8006442:	613b      	str	r3, [r7, #16]
 8006444:	6979      	ldr	r1, [r7, #20]
 8006446:	68f8      	ldr	r0, [r7, #12]
 8006448:	f7ff fba4 	bl	8005b94 <clust2sect>
 800644c:	4602      	mov	r2, r0
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	635a      	str	r2, [r3, #52]	@ 0x34
 8006452:	e012      	b.n	800647a <dir_next+0x152>
						fs->wflag = 1;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	2201      	movs	r2, #1
 8006458:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800645a:	68f8      	ldr	r0, [r7, #12]
 800645c:	f7ff fab8 	bl	80059d0 <sync_window>
 8006460:	4603      	mov	r3, r0
 8006462:	2b00      	cmp	r3, #0
 8006464:	d001      	beq.n	800646a <dir_next+0x142>
 8006466:	2301      	movs	r3, #1
 8006468:	e030      	b.n	80064cc <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800646a:	693b      	ldr	r3, [r7, #16]
 800646c:	3301      	adds	r3, #1
 800646e:	613b      	str	r3, [r7, #16]
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006474:	1c5a      	adds	r2, r3, #1
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	635a      	str	r2, [r3, #52]	@ 0x34
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	895b      	ldrh	r3, [r3, #10]
 800647e:	461a      	mov	r2, r3
 8006480:	693b      	ldr	r3, [r7, #16]
 8006482:	4293      	cmp	r3, r2
 8006484:	d3e6      	bcc.n	8006454 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800648a:	693b      	ldr	r3, [r7, #16]
 800648c:	1ad2      	subs	r2, r2, r3
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	635a      	str	r2, [r3, #52]	@ 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	697a      	ldr	r2, [r7, #20]
 8006496:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8006498:	6979      	ldr	r1, [r7, #20]
 800649a:	68f8      	ldr	r0, [r7, #12]
 800649c:	f7ff fb7a 	bl	8005b94 <clust2sect>
 80064a0:	4602      	mov	r2, r0
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	68ba      	ldr	r2, [r7, #8]
 80064aa:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	899b      	ldrh	r3, [r3, #12]
 80064b6:	461a      	mov	r2, r3
 80064b8:	68bb      	ldr	r3, [r7, #8]
 80064ba:	fbb3 f0f2 	udiv	r0, r3, r2
 80064be:	fb00 f202 	mul.w	r2, r0, r2
 80064c2:	1a9b      	subs	r3, r3, r2
 80064c4:	18ca      	adds	r2, r1, r3
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80064ca:	2300      	movs	r3, #0
}
 80064cc:	4618      	mov	r0, r3
 80064ce:	3718      	adds	r7, #24
 80064d0:	46bd      	mov	sp, r7
 80064d2:	bd80      	pop	{r7, pc}

080064d4 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b086      	sub	sp, #24
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
 80064dc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80064e4:	2100      	movs	r1, #0
 80064e6:	6878      	ldr	r0, [r7, #4]
 80064e8:	f7ff fe95 	bl	8006216 <dir_sdi>
 80064ec:	4603      	mov	r3, r0
 80064ee:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80064f0:	7dfb      	ldrb	r3, [r7, #23]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d12b      	bne.n	800654e <dir_alloc+0x7a>
		n = 0;
 80064f6:	2300      	movs	r3, #0
 80064f8:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	69db      	ldr	r3, [r3, #28]
 80064fe:	4619      	mov	r1, r3
 8006500:	68f8      	ldr	r0, [r7, #12]
 8006502:	f7ff faa9 	bl	8005a58 <move_window>
 8006506:	4603      	mov	r3, r0
 8006508:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800650a:	7dfb      	ldrb	r3, [r7, #23]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d11d      	bne.n	800654c <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	6a1b      	ldr	r3, [r3, #32]
 8006514:	781b      	ldrb	r3, [r3, #0]
 8006516:	2be5      	cmp	r3, #229	@ 0xe5
 8006518:	d004      	beq.n	8006524 <dir_alloc+0x50>
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6a1b      	ldr	r3, [r3, #32]
 800651e:	781b      	ldrb	r3, [r3, #0]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d107      	bne.n	8006534 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8006524:	693b      	ldr	r3, [r7, #16]
 8006526:	3301      	adds	r3, #1
 8006528:	613b      	str	r3, [r7, #16]
 800652a:	693a      	ldr	r2, [r7, #16]
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	429a      	cmp	r2, r3
 8006530:	d102      	bne.n	8006538 <dir_alloc+0x64>
 8006532:	e00c      	b.n	800654e <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8006534:	2300      	movs	r3, #0
 8006536:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8006538:	2101      	movs	r1, #1
 800653a:	6878      	ldr	r0, [r7, #4]
 800653c:	f7ff fef4 	bl	8006328 <dir_next>
 8006540:	4603      	mov	r3, r0
 8006542:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8006544:	7dfb      	ldrb	r3, [r7, #23]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d0d7      	beq.n	80064fa <dir_alloc+0x26>
 800654a:	e000      	b.n	800654e <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800654c:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800654e:	7dfb      	ldrb	r3, [r7, #23]
 8006550:	2b04      	cmp	r3, #4
 8006552:	d101      	bne.n	8006558 <dir_alloc+0x84>
 8006554:	2307      	movs	r3, #7
 8006556:	75fb      	strb	r3, [r7, #23]
	return res;
 8006558:	7dfb      	ldrb	r3, [r7, #23]
}
 800655a:	4618      	mov	r0, r3
 800655c:	3718      	adds	r7, #24
 800655e:	46bd      	mov	sp, r7
 8006560:	bd80      	pop	{r7, pc}

08006562 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8006562:	b580      	push	{r7, lr}
 8006564:	b084      	sub	sp, #16
 8006566:	af00      	add	r7, sp, #0
 8006568:	6078      	str	r0, [r7, #4]
 800656a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	331a      	adds	r3, #26
 8006570:	4618      	mov	r0, r3
 8006572:	f7fe ffc1 	bl	80054f8 <ld_word>
 8006576:	4603      	mov	r3, r0
 8006578:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	781b      	ldrb	r3, [r3, #0]
 800657e:	2b03      	cmp	r3, #3
 8006580:	d109      	bne.n	8006596 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	3314      	adds	r3, #20
 8006586:	4618      	mov	r0, r3
 8006588:	f7fe ffb6 	bl	80054f8 <ld_word>
 800658c:	4603      	mov	r3, r0
 800658e:	041b      	lsls	r3, r3, #16
 8006590:	68fa      	ldr	r2, [r7, #12]
 8006592:	4313      	orrs	r3, r2
 8006594:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8006596:	68fb      	ldr	r3, [r7, #12]
}
 8006598:	4618      	mov	r0, r3
 800659a:	3710      	adds	r7, #16
 800659c:	46bd      	mov	sp, r7
 800659e:	bd80      	pop	{r7, pc}

080065a0 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b084      	sub	sp, #16
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	60f8      	str	r0, [r7, #12]
 80065a8:	60b9      	str	r1, [r7, #8]
 80065aa:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80065ac:	68bb      	ldr	r3, [r7, #8]
 80065ae:	331a      	adds	r3, #26
 80065b0:	687a      	ldr	r2, [r7, #4]
 80065b2:	b292      	uxth	r2, r2
 80065b4:	4611      	mov	r1, r2
 80065b6:	4618      	mov	r0, r3
 80065b8:	f7fe ffd9 	bl	800556e <st_word>
	if (fs->fs_type == FS_FAT32) {
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	781b      	ldrb	r3, [r3, #0]
 80065c0:	2b03      	cmp	r3, #3
 80065c2:	d109      	bne.n	80065d8 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80065c4:	68bb      	ldr	r3, [r7, #8]
 80065c6:	f103 0214 	add.w	r2, r3, #20
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	0c1b      	lsrs	r3, r3, #16
 80065ce:	b29b      	uxth	r3, r3
 80065d0:	4619      	mov	r1, r3
 80065d2:	4610      	mov	r0, r2
 80065d4:	f7fe ffcb 	bl	800556e <st_word>
	}
}
 80065d8:	bf00      	nop
 80065da:	3710      	adds	r7, #16
 80065dc:	46bd      	mov	sp, r7
 80065de:	bd80      	pop	{r7, pc}

080065e0 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 80065e0:	b590      	push	{r4, r7, lr}
 80065e2:	b087      	sub	sp, #28
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
 80065e8:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	331a      	adds	r3, #26
 80065ee:	4618      	mov	r0, r3
 80065f0:	f7fe ff82 	bl	80054f8 <ld_word>
 80065f4:	4603      	mov	r3, r0
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d001      	beq.n	80065fe <cmp_lfn+0x1e>
 80065fa:	2300      	movs	r3, #0
 80065fc:	e059      	b.n	80066b2 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	781b      	ldrb	r3, [r3, #0]
 8006602:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006606:	1e5a      	subs	r2, r3, #1
 8006608:	4613      	mov	r3, r2
 800660a:	005b      	lsls	r3, r3, #1
 800660c:	4413      	add	r3, r2
 800660e:	009b      	lsls	r3, r3, #2
 8006610:	4413      	add	r3, r2
 8006612:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8006614:	2301      	movs	r3, #1
 8006616:	81fb      	strh	r3, [r7, #14]
 8006618:	2300      	movs	r3, #0
 800661a:	613b      	str	r3, [r7, #16]
 800661c:	e033      	b.n	8006686 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800661e:	4a27      	ldr	r2, [pc, #156]	@ (80066bc <cmp_lfn+0xdc>)
 8006620:	693b      	ldr	r3, [r7, #16]
 8006622:	4413      	add	r3, r2
 8006624:	781b      	ldrb	r3, [r3, #0]
 8006626:	461a      	mov	r2, r3
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	4413      	add	r3, r2
 800662c:	4618      	mov	r0, r3
 800662e:	f7fe ff63 	bl	80054f8 <ld_word>
 8006632:	4603      	mov	r3, r0
 8006634:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8006636:	89fb      	ldrh	r3, [r7, #14]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d01a      	beq.n	8006672 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800663c:	697b      	ldr	r3, [r7, #20]
 800663e:	2bfe      	cmp	r3, #254	@ 0xfe
 8006640:	d812      	bhi.n	8006668 <cmp_lfn+0x88>
 8006642:	89bb      	ldrh	r3, [r7, #12]
 8006644:	4618      	mov	r0, r3
 8006646:	f7fe fe2d 	bl	80052a4 <ff_wtoupper>
 800664a:	4603      	mov	r3, r0
 800664c:	461c      	mov	r4, r3
 800664e:	697b      	ldr	r3, [r7, #20]
 8006650:	1c5a      	adds	r2, r3, #1
 8006652:	617a      	str	r2, [r7, #20]
 8006654:	005b      	lsls	r3, r3, #1
 8006656:	687a      	ldr	r2, [r7, #4]
 8006658:	4413      	add	r3, r2
 800665a:	881b      	ldrh	r3, [r3, #0]
 800665c:	4618      	mov	r0, r3
 800665e:	f7fe fe21 	bl	80052a4 <ff_wtoupper>
 8006662:	4603      	mov	r3, r0
 8006664:	429c      	cmp	r4, r3
 8006666:	d001      	beq.n	800666c <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8006668:	2300      	movs	r3, #0
 800666a:	e022      	b.n	80066b2 <cmp_lfn+0xd2>
			}
			wc = uc;
 800666c:	89bb      	ldrh	r3, [r7, #12]
 800666e:	81fb      	strh	r3, [r7, #14]
 8006670:	e006      	b.n	8006680 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8006672:	89bb      	ldrh	r3, [r7, #12]
 8006674:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006678:	4293      	cmp	r3, r2
 800667a:	d001      	beq.n	8006680 <cmp_lfn+0xa0>
 800667c:	2300      	movs	r3, #0
 800667e:	e018      	b.n	80066b2 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8006680:	693b      	ldr	r3, [r7, #16]
 8006682:	3301      	adds	r3, #1
 8006684:	613b      	str	r3, [r7, #16]
 8006686:	693b      	ldr	r3, [r7, #16]
 8006688:	2b0c      	cmp	r3, #12
 800668a:	d9c8      	bls.n	800661e <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	781b      	ldrb	r3, [r3, #0]
 8006690:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006694:	2b00      	cmp	r3, #0
 8006696:	d00b      	beq.n	80066b0 <cmp_lfn+0xd0>
 8006698:	89fb      	ldrh	r3, [r7, #14]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d008      	beq.n	80066b0 <cmp_lfn+0xd0>
 800669e:	697b      	ldr	r3, [r7, #20]
 80066a0:	005b      	lsls	r3, r3, #1
 80066a2:	687a      	ldr	r2, [r7, #4]
 80066a4:	4413      	add	r3, r2
 80066a6:	881b      	ldrh	r3, [r3, #0]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d001      	beq.n	80066b0 <cmp_lfn+0xd0>
 80066ac:	2300      	movs	r3, #0
 80066ae:	e000      	b.n	80066b2 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 80066b0:	2301      	movs	r3, #1
}
 80066b2:	4618      	mov	r0, r3
 80066b4:	371c      	adds	r7, #28
 80066b6:	46bd      	mov	sp, r7
 80066b8:	bd90      	pop	{r4, r7, pc}
 80066ba:	bf00      	nop
 80066bc:	08009c80 	.word	0x08009c80

080066c0 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b088      	sub	sp, #32
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	60f8      	str	r0, [r7, #12]
 80066c8:	60b9      	str	r1, [r7, #8]
 80066ca:	4611      	mov	r1, r2
 80066cc:	461a      	mov	r2, r3
 80066ce:	460b      	mov	r3, r1
 80066d0:	71fb      	strb	r3, [r7, #7]
 80066d2:	4613      	mov	r3, r2
 80066d4:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 80066d6:	68bb      	ldr	r3, [r7, #8]
 80066d8:	330d      	adds	r3, #13
 80066da:	79ba      	ldrb	r2, [r7, #6]
 80066dc:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 80066de:	68bb      	ldr	r3, [r7, #8]
 80066e0:	330b      	adds	r3, #11
 80066e2:	220f      	movs	r2, #15
 80066e4:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 80066e6:	68bb      	ldr	r3, [r7, #8]
 80066e8:	330c      	adds	r3, #12
 80066ea:	2200      	movs	r2, #0
 80066ec:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 80066ee:	68bb      	ldr	r3, [r7, #8]
 80066f0:	331a      	adds	r3, #26
 80066f2:	2100      	movs	r1, #0
 80066f4:	4618      	mov	r0, r3
 80066f6:	f7fe ff3a 	bl	800556e <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 80066fa:	79fb      	ldrb	r3, [r7, #7]
 80066fc:	1e5a      	subs	r2, r3, #1
 80066fe:	4613      	mov	r3, r2
 8006700:	005b      	lsls	r3, r3, #1
 8006702:	4413      	add	r3, r2
 8006704:	009b      	lsls	r3, r3, #2
 8006706:	4413      	add	r3, r2
 8006708:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800670a:	2300      	movs	r3, #0
 800670c:	82fb      	strh	r3, [r7, #22]
 800670e:	2300      	movs	r3, #0
 8006710:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8006712:	8afb      	ldrh	r3, [r7, #22]
 8006714:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006718:	4293      	cmp	r3, r2
 800671a:	d007      	beq.n	800672c <put_lfn+0x6c>
 800671c:	69fb      	ldr	r3, [r7, #28]
 800671e:	1c5a      	adds	r2, r3, #1
 8006720:	61fa      	str	r2, [r7, #28]
 8006722:	005b      	lsls	r3, r3, #1
 8006724:	68fa      	ldr	r2, [r7, #12]
 8006726:	4413      	add	r3, r2
 8006728:	881b      	ldrh	r3, [r3, #0]
 800672a:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800672c:	4a17      	ldr	r2, [pc, #92]	@ (800678c <put_lfn+0xcc>)
 800672e:	69bb      	ldr	r3, [r7, #24]
 8006730:	4413      	add	r3, r2
 8006732:	781b      	ldrb	r3, [r3, #0]
 8006734:	461a      	mov	r2, r3
 8006736:	68bb      	ldr	r3, [r7, #8]
 8006738:	4413      	add	r3, r2
 800673a:	8afa      	ldrh	r2, [r7, #22]
 800673c:	4611      	mov	r1, r2
 800673e:	4618      	mov	r0, r3
 8006740:	f7fe ff15 	bl	800556e <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8006744:	8afb      	ldrh	r3, [r7, #22]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d102      	bne.n	8006750 <put_lfn+0x90>
 800674a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800674e:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8006750:	69bb      	ldr	r3, [r7, #24]
 8006752:	3301      	adds	r3, #1
 8006754:	61bb      	str	r3, [r7, #24]
 8006756:	69bb      	ldr	r3, [r7, #24]
 8006758:	2b0c      	cmp	r3, #12
 800675a:	d9da      	bls.n	8006712 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800675c:	8afb      	ldrh	r3, [r7, #22]
 800675e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006762:	4293      	cmp	r3, r2
 8006764:	d006      	beq.n	8006774 <put_lfn+0xb4>
 8006766:	69fb      	ldr	r3, [r7, #28]
 8006768:	005b      	lsls	r3, r3, #1
 800676a:	68fa      	ldr	r2, [r7, #12]
 800676c:	4413      	add	r3, r2
 800676e:	881b      	ldrh	r3, [r3, #0]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d103      	bne.n	800677c <put_lfn+0xbc>
 8006774:	79fb      	ldrb	r3, [r7, #7]
 8006776:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800677a:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800677c:	68bb      	ldr	r3, [r7, #8]
 800677e:	79fa      	ldrb	r2, [r7, #7]
 8006780:	701a      	strb	r2, [r3, #0]
}
 8006782:	bf00      	nop
 8006784:	3720      	adds	r7, #32
 8006786:	46bd      	mov	sp, r7
 8006788:	bd80      	pop	{r7, pc}
 800678a:	bf00      	nop
 800678c:	08009c80 	.word	0x08009c80

08006790 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8006790:	b580      	push	{r7, lr}
 8006792:	b08c      	sub	sp, #48	@ 0x30
 8006794:	af00      	add	r7, sp, #0
 8006796:	60f8      	str	r0, [r7, #12]
 8006798:	60b9      	str	r1, [r7, #8]
 800679a:	607a      	str	r2, [r7, #4]
 800679c:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800679e:	220b      	movs	r2, #11
 80067a0:	68b9      	ldr	r1, [r7, #8]
 80067a2:	68f8      	ldr	r0, [r7, #12]
 80067a4:	f7fe ff2a 	bl	80055fc <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	2b05      	cmp	r3, #5
 80067ac:	d92b      	bls.n	8006806 <gen_numname+0x76>
		sr = seq;
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 80067b2:	e022      	b.n	80067fa <gen_numname+0x6a>
			wc = *lfn++;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	1c9a      	adds	r2, r3, #2
 80067b8:	607a      	str	r2, [r7, #4]
 80067ba:	881b      	ldrh	r3, [r3, #0]
 80067bc:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 80067be:	2300      	movs	r3, #0
 80067c0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80067c2:	e017      	b.n	80067f4 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 80067c4:	69fb      	ldr	r3, [r7, #28]
 80067c6:	005a      	lsls	r2, r3, #1
 80067c8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80067ca:	f003 0301 	and.w	r3, r3, #1
 80067ce:	4413      	add	r3, r2
 80067d0:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 80067d2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80067d4:	085b      	lsrs	r3, r3, #1
 80067d6:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 80067d8:	69fb      	ldr	r3, [r7, #28]
 80067da:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d005      	beq.n	80067ee <gen_numname+0x5e>
 80067e2:	69fb      	ldr	r3, [r7, #28]
 80067e4:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 80067e8:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 80067ec:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 80067ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067f0:	3301      	adds	r3, #1
 80067f2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80067f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067f6:	2b0f      	cmp	r3, #15
 80067f8:	d9e4      	bls.n	80067c4 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	881b      	ldrh	r3, [r3, #0]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d1d8      	bne.n	80067b4 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8006802:	69fb      	ldr	r3, [r7, #28]
 8006804:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8006806:	2307      	movs	r3, #7
 8006808:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	b2db      	uxtb	r3, r3
 800680e:	f003 030f 	and.w	r3, r3, #15
 8006812:	b2db      	uxtb	r3, r3
 8006814:	3330      	adds	r3, #48	@ 0x30
 8006816:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 800681a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800681e:	2b39      	cmp	r3, #57	@ 0x39
 8006820:	d904      	bls.n	800682c <gen_numname+0x9c>
 8006822:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006826:	3307      	adds	r3, #7
 8006828:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 800682c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800682e:	1e5a      	subs	r2, r3, #1
 8006830:	62ba      	str	r2, [r7, #40]	@ 0x28
 8006832:	3330      	adds	r3, #48	@ 0x30
 8006834:	443b      	add	r3, r7
 8006836:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800683a:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	091b      	lsrs	r3, r3, #4
 8006842:	603b      	str	r3, [r7, #0]
	} while (seq);
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d1df      	bne.n	800680a <gen_numname+0x7a>
	ns[i] = '~';
 800684a:	f107 0214 	add.w	r2, r7, #20
 800684e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006850:	4413      	add	r3, r2
 8006852:	227e      	movs	r2, #126	@ 0x7e
 8006854:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8006856:	2300      	movs	r3, #0
 8006858:	627b      	str	r3, [r7, #36]	@ 0x24
 800685a:	e002      	b.n	8006862 <gen_numname+0xd2>
 800685c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800685e:	3301      	adds	r3, #1
 8006860:	627b      	str	r3, [r7, #36]	@ 0x24
 8006862:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006864:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006866:	429a      	cmp	r2, r3
 8006868:	d205      	bcs.n	8006876 <gen_numname+0xe6>
 800686a:	68fa      	ldr	r2, [r7, #12]
 800686c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800686e:	4413      	add	r3, r2
 8006870:	781b      	ldrb	r3, [r3, #0]
 8006872:	2b20      	cmp	r3, #32
 8006874:	d1f2      	bne.n	800685c <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8006876:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006878:	2b07      	cmp	r3, #7
 800687a:	d807      	bhi.n	800688c <gen_numname+0xfc>
 800687c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800687e:	1c5a      	adds	r2, r3, #1
 8006880:	62ba      	str	r2, [r7, #40]	@ 0x28
 8006882:	3330      	adds	r3, #48	@ 0x30
 8006884:	443b      	add	r3, r7
 8006886:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800688a:	e000      	b.n	800688e <gen_numname+0xfe>
 800688c:	2120      	movs	r1, #32
 800688e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006890:	1c5a      	adds	r2, r3, #1
 8006892:	627a      	str	r2, [r7, #36]	@ 0x24
 8006894:	68fa      	ldr	r2, [r7, #12]
 8006896:	4413      	add	r3, r2
 8006898:	460a      	mov	r2, r1
 800689a:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800689c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800689e:	2b07      	cmp	r3, #7
 80068a0:	d9e9      	bls.n	8006876 <gen_numname+0xe6>
}
 80068a2:	bf00      	nop
 80068a4:	bf00      	nop
 80068a6:	3730      	adds	r7, #48	@ 0x30
 80068a8:	46bd      	mov	sp, r7
 80068aa:	bd80      	pop	{r7, pc}

080068ac <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 80068ac:	b480      	push	{r7}
 80068ae:	b085      	sub	sp, #20
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 80068b4:	2300      	movs	r3, #0
 80068b6:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 80068b8:	230b      	movs	r3, #11
 80068ba:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 80068bc:	7bfb      	ldrb	r3, [r7, #15]
 80068be:	b2da      	uxtb	r2, r3
 80068c0:	0852      	lsrs	r2, r2, #1
 80068c2:	01db      	lsls	r3, r3, #7
 80068c4:	4313      	orrs	r3, r2
 80068c6:	b2da      	uxtb	r2, r3
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	1c59      	adds	r1, r3, #1
 80068cc:	6079      	str	r1, [r7, #4]
 80068ce:	781b      	ldrb	r3, [r3, #0]
 80068d0:	4413      	add	r3, r2
 80068d2:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 80068d4:	68bb      	ldr	r3, [r7, #8]
 80068d6:	3b01      	subs	r3, #1
 80068d8:	60bb      	str	r3, [r7, #8]
 80068da:	68bb      	ldr	r3, [r7, #8]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d1ed      	bne.n	80068bc <sum_sfn+0x10>
	return sum;
 80068e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80068e2:	4618      	mov	r0, r3
 80068e4:	3714      	adds	r7, #20
 80068e6:	46bd      	mov	sp, r7
 80068e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ec:	4770      	bx	lr

080068ee <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80068ee:	b580      	push	{r7, lr}
 80068f0:	b086      	sub	sp, #24
 80068f2:	af00      	add	r7, sp, #0
 80068f4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80068fc:	2100      	movs	r1, #0
 80068fe:	6878      	ldr	r0, [r7, #4]
 8006900:	f7ff fc89 	bl	8006216 <dir_sdi>
 8006904:	4603      	mov	r3, r0
 8006906:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8006908:	7dfb      	ldrb	r3, [r7, #23]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d001      	beq.n	8006912 <dir_find+0x24>
 800690e:	7dfb      	ldrb	r3, [r7, #23]
 8006910:	e0a9      	b.n	8006a66 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8006912:	23ff      	movs	r3, #255	@ 0xff
 8006914:	753b      	strb	r3, [r7, #20]
 8006916:	7d3b      	ldrb	r3, [r7, #20]
 8006918:	757b      	strb	r3, [r7, #21]
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	f04f 32ff 	mov.w	r2, #4294967295
 8006920:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	69db      	ldr	r3, [r3, #28]
 8006926:	4619      	mov	r1, r3
 8006928:	6938      	ldr	r0, [r7, #16]
 800692a:	f7ff f895 	bl	8005a58 <move_window>
 800692e:	4603      	mov	r3, r0
 8006930:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006932:	7dfb      	ldrb	r3, [r7, #23]
 8006934:	2b00      	cmp	r3, #0
 8006936:	f040 8090 	bne.w	8006a5a <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6a1b      	ldr	r3, [r3, #32]
 800693e:	781b      	ldrb	r3, [r3, #0]
 8006940:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8006942:	7dbb      	ldrb	r3, [r7, #22]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d102      	bne.n	800694e <dir_find+0x60>
 8006948:	2304      	movs	r3, #4
 800694a:	75fb      	strb	r3, [r7, #23]
 800694c:	e08a      	b.n	8006a64 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6a1b      	ldr	r3, [r3, #32]
 8006952:	330b      	adds	r3, #11
 8006954:	781b      	ldrb	r3, [r3, #0]
 8006956:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800695a:	73fb      	strb	r3, [r7, #15]
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	7bfa      	ldrb	r2, [r7, #15]
 8006960:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8006962:	7dbb      	ldrb	r3, [r7, #22]
 8006964:	2be5      	cmp	r3, #229	@ 0xe5
 8006966:	d007      	beq.n	8006978 <dir_find+0x8a>
 8006968:	7bfb      	ldrb	r3, [r7, #15]
 800696a:	f003 0308 	and.w	r3, r3, #8
 800696e:	2b00      	cmp	r3, #0
 8006970:	d009      	beq.n	8006986 <dir_find+0x98>
 8006972:	7bfb      	ldrb	r3, [r7, #15]
 8006974:	2b0f      	cmp	r3, #15
 8006976:	d006      	beq.n	8006986 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8006978:	23ff      	movs	r3, #255	@ 0xff
 800697a:	757b      	strb	r3, [r7, #21]
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	f04f 32ff 	mov.w	r2, #4294967295
 8006982:	631a      	str	r2, [r3, #48]	@ 0x30
 8006984:	e05e      	b.n	8006a44 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8006986:	7bfb      	ldrb	r3, [r7, #15]
 8006988:	2b0f      	cmp	r3, #15
 800698a:	d136      	bne.n	80069fa <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8006992:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006996:	2b00      	cmp	r3, #0
 8006998:	d154      	bne.n	8006a44 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800699a:	7dbb      	ldrb	r3, [r7, #22]
 800699c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d00d      	beq.n	80069c0 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	6a1b      	ldr	r3, [r3, #32]
 80069a8:	7b5b      	ldrb	r3, [r3, #13]
 80069aa:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 80069ac:	7dbb      	ldrb	r3, [r7, #22]
 80069ae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80069b2:	75bb      	strb	r3, [r7, #22]
 80069b4:	7dbb      	ldrb	r3, [r7, #22]
 80069b6:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	695a      	ldr	r2, [r3, #20]
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80069c0:	7dba      	ldrb	r2, [r7, #22]
 80069c2:	7d7b      	ldrb	r3, [r7, #21]
 80069c4:	429a      	cmp	r2, r3
 80069c6:	d115      	bne.n	80069f4 <dir_find+0x106>
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	6a1b      	ldr	r3, [r3, #32]
 80069cc:	330d      	adds	r3, #13
 80069ce:	781b      	ldrb	r3, [r3, #0]
 80069d0:	7d3a      	ldrb	r2, [r7, #20]
 80069d2:	429a      	cmp	r2, r3
 80069d4:	d10e      	bne.n	80069f4 <dir_find+0x106>
 80069d6:	693b      	ldr	r3, [r7, #16]
 80069d8:	691a      	ldr	r2, [r3, #16]
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6a1b      	ldr	r3, [r3, #32]
 80069de:	4619      	mov	r1, r3
 80069e0:	4610      	mov	r0, r2
 80069e2:	f7ff fdfd 	bl	80065e0 <cmp_lfn>
 80069e6:	4603      	mov	r3, r0
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d003      	beq.n	80069f4 <dir_find+0x106>
 80069ec:	7d7b      	ldrb	r3, [r7, #21]
 80069ee:	3b01      	subs	r3, #1
 80069f0:	b2db      	uxtb	r3, r3
 80069f2:	e000      	b.n	80069f6 <dir_find+0x108>
 80069f4:	23ff      	movs	r3, #255	@ 0xff
 80069f6:	757b      	strb	r3, [r7, #21]
 80069f8:	e024      	b.n	8006a44 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80069fa:	7d7b      	ldrb	r3, [r7, #21]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d109      	bne.n	8006a14 <dir_find+0x126>
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	6a1b      	ldr	r3, [r3, #32]
 8006a04:	4618      	mov	r0, r3
 8006a06:	f7ff ff51 	bl	80068ac <sum_sfn>
 8006a0a:	4603      	mov	r3, r0
 8006a0c:	461a      	mov	r2, r3
 8006a0e:	7d3b      	ldrb	r3, [r7, #20]
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d024      	beq.n	8006a5e <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8006a1a:	f003 0301 	and.w	r3, r3, #1
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d10a      	bne.n	8006a38 <dir_find+0x14a>
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6a18      	ldr	r0, [r3, #32]
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	3324      	adds	r3, #36	@ 0x24
 8006a2a:	220b      	movs	r2, #11
 8006a2c:	4619      	mov	r1, r3
 8006a2e:	f7fe fe21 	bl	8005674 <mem_cmp>
 8006a32:	4603      	mov	r3, r0
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d014      	beq.n	8006a62 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8006a38:	23ff      	movs	r3, #255	@ 0xff
 8006a3a:	757b      	strb	r3, [r7, #21]
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	f04f 32ff 	mov.w	r2, #4294967295
 8006a42:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8006a44:	2100      	movs	r1, #0
 8006a46:	6878      	ldr	r0, [r7, #4]
 8006a48:	f7ff fc6e 	bl	8006328 <dir_next>
 8006a4c:	4603      	mov	r3, r0
 8006a4e:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8006a50:	7dfb      	ldrb	r3, [r7, #23]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	f43f af65 	beq.w	8006922 <dir_find+0x34>
 8006a58:	e004      	b.n	8006a64 <dir_find+0x176>
		if (res != FR_OK) break;
 8006a5a:	bf00      	nop
 8006a5c:	e002      	b.n	8006a64 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8006a5e:	bf00      	nop
 8006a60:	e000      	b.n	8006a64 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8006a62:	bf00      	nop

	return res;
 8006a64:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a66:	4618      	mov	r0, r3
 8006a68:	3718      	adds	r7, #24
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	bd80      	pop	{r7, pc}
	...

08006a70 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b08c      	sub	sp, #48	@ 0x30
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8006a84:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d001      	beq.n	8006a90 <dir_register+0x20>
 8006a8c:	2306      	movs	r3, #6
 8006a8e:	e0e0      	b.n	8006c52 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8006a90:	2300      	movs	r3, #0
 8006a92:	627b      	str	r3, [r7, #36]	@ 0x24
 8006a94:	e002      	b.n	8006a9c <dir_register+0x2c>
 8006a96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a98:	3301      	adds	r3, #1
 8006a9a:	627b      	str	r3, [r7, #36]	@ 0x24
 8006a9c:	69fb      	ldr	r3, [r7, #28]
 8006a9e:	691a      	ldr	r2, [r3, #16]
 8006aa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006aa2:	005b      	lsls	r3, r3, #1
 8006aa4:	4413      	add	r3, r2
 8006aa6:	881b      	ldrh	r3, [r3, #0]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d1f4      	bne.n	8006a96 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 8006ab2:	f107 030c 	add.w	r3, r7, #12
 8006ab6:	220c      	movs	r2, #12
 8006ab8:	4618      	mov	r0, r3
 8006aba:	f7fe fd9f 	bl	80055fc <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8006abe:	7dfb      	ldrb	r3, [r7, #23]
 8006ac0:	f003 0301 	and.w	r3, r3, #1
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d032      	beq.n	8006b2e <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2240      	movs	r2, #64	@ 0x40
 8006acc:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 8006ad0:	2301      	movs	r3, #1
 8006ad2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006ad4:	e016      	b.n	8006b04 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 8006adc:	69fb      	ldr	r3, [r7, #28]
 8006ade:	691a      	ldr	r2, [r3, #16]
 8006ae0:	f107 010c 	add.w	r1, r7, #12
 8006ae4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ae6:	f7ff fe53 	bl	8006790 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8006aea:	6878      	ldr	r0, [r7, #4]
 8006aec:	f7ff feff 	bl	80068ee <dir_find>
 8006af0:	4603      	mov	r3, r0
 8006af2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 8006af6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d106      	bne.n	8006b0c <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8006afe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b00:	3301      	adds	r3, #1
 8006b02:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006b04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b06:	2b63      	cmp	r3, #99	@ 0x63
 8006b08:	d9e5      	bls.n	8006ad6 <dir_register+0x66>
 8006b0a:	e000      	b.n	8006b0e <dir_register+0x9e>
			if (res != FR_OK) break;
 8006b0c:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8006b0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b10:	2b64      	cmp	r3, #100	@ 0x64
 8006b12:	d101      	bne.n	8006b18 <dir_register+0xa8>
 8006b14:	2307      	movs	r3, #7
 8006b16:	e09c      	b.n	8006c52 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8006b18:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006b1c:	2b04      	cmp	r3, #4
 8006b1e:	d002      	beq.n	8006b26 <dir_register+0xb6>
 8006b20:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006b24:	e095      	b.n	8006c52 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8006b26:	7dfa      	ldrb	r2, [r7, #23]
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8006b2e:	7dfb      	ldrb	r3, [r7, #23]
 8006b30:	f003 0302 	and.w	r3, r3, #2
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d007      	beq.n	8006b48 <dir_register+0xd8>
 8006b38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b3a:	330c      	adds	r3, #12
 8006b3c:	4a47      	ldr	r2, [pc, #284]	@ (8006c5c <dir_register+0x1ec>)
 8006b3e:	fba2 2303 	umull	r2, r3, r2, r3
 8006b42:	089b      	lsrs	r3, r3, #2
 8006b44:	3301      	adds	r3, #1
 8006b46:	e000      	b.n	8006b4a <dir_register+0xda>
 8006b48:	2301      	movs	r3, #1
 8006b4a:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8006b4c:	6a39      	ldr	r1, [r7, #32]
 8006b4e:	6878      	ldr	r0, [r7, #4]
 8006b50:	f7ff fcc0 	bl	80064d4 <dir_alloc>
 8006b54:	4603      	mov	r3, r0
 8006b56:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8006b5a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d148      	bne.n	8006bf4 <dir_register+0x184>
 8006b62:	6a3b      	ldr	r3, [r7, #32]
 8006b64:	3b01      	subs	r3, #1
 8006b66:	623b      	str	r3, [r7, #32]
 8006b68:	6a3b      	ldr	r3, [r7, #32]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d042      	beq.n	8006bf4 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	695a      	ldr	r2, [r3, #20]
 8006b72:	6a3b      	ldr	r3, [r7, #32]
 8006b74:	015b      	lsls	r3, r3, #5
 8006b76:	1ad3      	subs	r3, r2, r3
 8006b78:	4619      	mov	r1, r3
 8006b7a:	6878      	ldr	r0, [r7, #4]
 8006b7c:	f7ff fb4b 	bl	8006216 <dir_sdi>
 8006b80:	4603      	mov	r3, r0
 8006b82:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 8006b86:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d132      	bne.n	8006bf4 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	3324      	adds	r3, #36	@ 0x24
 8006b92:	4618      	mov	r0, r3
 8006b94:	f7ff fe8a 	bl	80068ac <sum_sfn>
 8006b98:	4603      	mov	r3, r0
 8006b9a:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	69db      	ldr	r3, [r3, #28]
 8006ba0:	4619      	mov	r1, r3
 8006ba2:	69f8      	ldr	r0, [r7, #28]
 8006ba4:	f7fe ff58 	bl	8005a58 <move_window>
 8006ba8:	4603      	mov	r3, r0
 8006baa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 8006bae:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d11d      	bne.n	8006bf2 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8006bb6:	69fb      	ldr	r3, [r7, #28]
 8006bb8:	6918      	ldr	r0, [r3, #16]
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6a19      	ldr	r1, [r3, #32]
 8006bbe:	6a3b      	ldr	r3, [r7, #32]
 8006bc0:	b2da      	uxtb	r2, r3
 8006bc2:	7efb      	ldrb	r3, [r7, #27]
 8006bc4:	f7ff fd7c 	bl	80066c0 <put_lfn>
				fs->wflag = 1;
 8006bc8:	69fb      	ldr	r3, [r7, #28]
 8006bca:	2201      	movs	r2, #1
 8006bcc:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8006bce:	2100      	movs	r1, #0
 8006bd0:	6878      	ldr	r0, [r7, #4]
 8006bd2:	f7ff fba9 	bl	8006328 <dir_next>
 8006bd6:	4603      	mov	r3, r0
 8006bd8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 8006bdc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d107      	bne.n	8006bf4 <dir_register+0x184>
 8006be4:	6a3b      	ldr	r3, [r7, #32]
 8006be6:	3b01      	subs	r3, #1
 8006be8:	623b      	str	r3, [r7, #32]
 8006bea:	6a3b      	ldr	r3, [r7, #32]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d1d5      	bne.n	8006b9c <dir_register+0x12c>
 8006bf0:	e000      	b.n	8006bf4 <dir_register+0x184>
				if (res != FR_OK) break;
 8006bf2:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8006bf4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d128      	bne.n	8006c4e <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	69db      	ldr	r3, [r3, #28]
 8006c00:	4619      	mov	r1, r3
 8006c02:	69f8      	ldr	r0, [r7, #28]
 8006c04:	f7fe ff28 	bl	8005a58 <move_window>
 8006c08:	4603      	mov	r3, r0
 8006c0a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 8006c0e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d11b      	bne.n	8006c4e <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6a1b      	ldr	r3, [r3, #32]
 8006c1a:	2220      	movs	r2, #32
 8006c1c:	2100      	movs	r1, #0
 8006c1e:	4618      	mov	r0, r3
 8006c20:	f7fe fd0d 	bl	800563e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	6a18      	ldr	r0, [r3, #32]
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	3324      	adds	r3, #36	@ 0x24
 8006c2c:	220b      	movs	r2, #11
 8006c2e:	4619      	mov	r1, r3
 8006c30:	f7fe fce4 	bl	80055fc <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	6a1b      	ldr	r3, [r3, #32]
 8006c3e:	330c      	adds	r3, #12
 8006c40:	f002 0218 	and.w	r2, r2, #24
 8006c44:	b2d2      	uxtb	r2, r2
 8006c46:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8006c48:	69fb      	ldr	r3, [r7, #28]
 8006c4a:	2201      	movs	r2, #1
 8006c4c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8006c4e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8006c52:	4618      	mov	r0, r3
 8006c54:	3730      	adds	r7, #48	@ 0x30
 8006c56:	46bd      	mov	sp, r7
 8006c58:	bd80      	pop	{r7, pc}
 8006c5a:	bf00      	nop
 8006c5c:	4ec4ec4f 	.word	0x4ec4ec4f

08006c60 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b088      	sub	sp, #32
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
 8006c68:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	2200      	movs	r2, #0
 8006c74:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	69db      	ldr	r3, [r3, #28]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	f000 80ca 	beq.w	8006e14 <get_fileinfo+0x1b4>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c88:	d032      	beq.n	8006cf0 <get_fileinfo+0x90>
			i = j = 0;
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	61bb      	str	r3, [r7, #24]
 8006c8e:	69bb      	ldr	r3, [r7, #24]
 8006c90:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8006c92:	e01b      	b.n	8006ccc <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 8006c94:	89fb      	ldrh	r3, [r7, #14]
 8006c96:	2100      	movs	r1, #0
 8006c98:	4618      	mov	r0, r3
 8006c9a:	f7fe fac7 	bl	800522c <ff_convert>
 8006c9e:	4603      	mov	r3, r0
 8006ca0:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 8006ca2:	89fb      	ldrh	r3, [r7, #14]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d102      	bne.n	8006cae <get_fileinfo+0x4e>
 8006ca8:	2300      	movs	r3, #0
 8006caa:	61fb      	str	r3, [r7, #28]
 8006cac:	e01a      	b.n	8006ce4 <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 8006cae:	69fb      	ldr	r3, [r7, #28]
 8006cb0:	2bfe      	cmp	r3, #254	@ 0xfe
 8006cb2:	d902      	bls.n	8006cba <get_fileinfo+0x5a>
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	61fb      	str	r3, [r7, #28]
 8006cb8:	e014      	b.n	8006ce4 <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 8006cba:	69fb      	ldr	r3, [r7, #28]
 8006cbc:	1c5a      	adds	r2, r3, #1
 8006cbe:	61fa      	str	r2, [r7, #28]
 8006cc0:	89fa      	ldrh	r2, [r7, #14]
 8006cc2:	b2d1      	uxtb	r1, r2
 8006cc4:	683a      	ldr	r2, [r7, #0]
 8006cc6:	4413      	add	r3, r2
 8006cc8:	460a      	mov	r2, r1
 8006cca:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8006ccc:	693b      	ldr	r3, [r7, #16]
 8006cce:	691a      	ldr	r2, [r3, #16]
 8006cd0:	69bb      	ldr	r3, [r7, #24]
 8006cd2:	1c59      	adds	r1, r3, #1
 8006cd4:	61b9      	str	r1, [r7, #24]
 8006cd6:	005b      	lsls	r3, r3, #1
 8006cd8:	4413      	add	r3, r2
 8006cda:	881b      	ldrh	r3, [r3, #0]
 8006cdc:	81fb      	strh	r3, [r7, #14]
 8006cde:	89fb      	ldrh	r3, [r7, #14]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d1d7      	bne.n	8006c94 <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 8006ce4:	683a      	ldr	r2, [r7, #0]
 8006ce6:	69fb      	ldr	r3, [r7, #28]
 8006ce8:	4413      	add	r3, r2
 8006cea:	3316      	adds	r3, #22
 8006cec:	2200      	movs	r2, #0
 8006cee:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	61bb      	str	r3, [r7, #24]
 8006cf4:	69bb      	ldr	r3, [r7, #24]
 8006cf6:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 8006cf8:	683a      	ldr	r2, [r7, #0]
 8006cfa:	69fb      	ldr	r3, [r7, #28]
 8006cfc:	4413      	add	r3, r2
 8006cfe:	3316      	adds	r3, #22
 8006d00:	781b      	ldrb	r3, [r3, #0]
 8006d02:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 8006d04:	e04d      	b.n	8006da2 <get_fileinfo+0x142>
		c = (TCHAR)dp->dir[i++];
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	6a1a      	ldr	r2, [r3, #32]
 8006d0a:	69fb      	ldr	r3, [r7, #28]
 8006d0c:	1c59      	adds	r1, r3, #1
 8006d0e:	61f9      	str	r1, [r7, #28]
 8006d10:	4413      	add	r3, r2
 8006d12:	781b      	ldrb	r3, [r3, #0]
 8006d14:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 8006d16:	7dfb      	ldrb	r3, [r7, #23]
 8006d18:	2b20      	cmp	r3, #32
 8006d1a:	d041      	beq.n	8006da0 <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8006d1c:	7dfb      	ldrb	r3, [r7, #23]
 8006d1e:	2b05      	cmp	r3, #5
 8006d20:	d101      	bne.n	8006d26 <get_fileinfo+0xc6>
 8006d22:	23e5      	movs	r3, #229	@ 0xe5
 8006d24:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 8006d26:	69fb      	ldr	r3, [r7, #28]
 8006d28:	2b09      	cmp	r3, #9
 8006d2a:	d10f      	bne.n	8006d4c <get_fileinfo+0xec>
			if (!lfv) fno->fname[j] = '.';
 8006d2c:	89bb      	ldrh	r3, [r7, #12]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d105      	bne.n	8006d3e <get_fileinfo+0xde>
 8006d32:	683a      	ldr	r2, [r7, #0]
 8006d34:	69bb      	ldr	r3, [r7, #24]
 8006d36:	4413      	add	r3, r2
 8006d38:	3316      	adds	r3, #22
 8006d3a:	222e      	movs	r2, #46	@ 0x2e
 8006d3c:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 8006d3e:	69bb      	ldr	r3, [r7, #24]
 8006d40:	1c5a      	adds	r2, r3, #1
 8006d42:	61ba      	str	r2, [r7, #24]
 8006d44:	683a      	ldr	r2, [r7, #0]
 8006d46:	4413      	add	r3, r2
 8006d48:	222e      	movs	r2, #46	@ 0x2e
 8006d4a:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 8006d4c:	683a      	ldr	r2, [r7, #0]
 8006d4e:	69bb      	ldr	r3, [r7, #24]
 8006d50:	4413      	add	r3, r2
 8006d52:	3309      	adds	r3, #9
 8006d54:	7dfa      	ldrb	r2, [r7, #23]
 8006d56:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 8006d58:	89bb      	ldrh	r3, [r7, #12]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d11c      	bne.n	8006d98 <get_fileinfo+0x138>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 8006d5e:	7dfb      	ldrb	r3, [r7, #23]
 8006d60:	2b40      	cmp	r3, #64	@ 0x40
 8006d62:	d913      	bls.n	8006d8c <get_fileinfo+0x12c>
 8006d64:	7dfb      	ldrb	r3, [r7, #23]
 8006d66:	2b5a      	cmp	r3, #90	@ 0x5a
 8006d68:	d810      	bhi.n	8006d8c <get_fileinfo+0x12c>
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	6a1b      	ldr	r3, [r3, #32]
 8006d6e:	330c      	adds	r3, #12
 8006d70:	781b      	ldrb	r3, [r3, #0]
 8006d72:	461a      	mov	r2, r3
 8006d74:	69fb      	ldr	r3, [r7, #28]
 8006d76:	2b08      	cmp	r3, #8
 8006d78:	d901      	bls.n	8006d7e <get_fileinfo+0x11e>
 8006d7a:	2310      	movs	r3, #16
 8006d7c:	e000      	b.n	8006d80 <get_fileinfo+0x120>
 8006d7e:	2308      	movs	r3, #8
 8006d80:	4013      	ands	r3, r2
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d002      	beq.n	8006d8c <get_fileinfo+0x12c>
				c += 0x20;			/* To lower */
 8006d86:	7dfb      	ldrb	r3, [r7, #23]
 8006d88:	3320      	adds	r3, #32
 8006d8a:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 8006d8c:	683a      	ldr	r2, [r7, #0]
 8006d8e:	69bb      	ldr	r3, [r7, #24]
 8006d90:	4413      	add	r3, r2
 8006d92:	3316      	adds	r3, #22
 8006d94:	7dfa      	ldrb	r2, [r7, #23]
 8006d96:	701a      	strb	r2, [r3, #0]
		}
		j++;
 8006d98:	69bb      	ldr	r3, [r7, #24]
 8006d9a:	3301      	adds	r3, #1
 8006d9c:	61bb      	str	r3, [r7, #24]
 8006d9e:	e000      	b.n	8006da2 <get_fileinfo+0x142>
		if (c == ' ') continue;				/* Skip padding spaces */
 8006da0:	bf00      	nop
	while (i < 11) {		/* Copy name body and extension */
 8006da2:	69fb      	ldr	r3, [r7, #28]
 8006da4:	2b0a      	cmp	r3, #10
 8006da6:	d9ae      	bls.n	8006d06 <get_fileinfo+0xa6>
	}
	if (!lfv) {
 8006da8:	89bb      	ldrh	r3, [r7, #12]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d10d      	bne.n	8006dca <get_fileinfo+0x16a>
		fno->fname[j] = 0;
 8006dae:	683a      	ldr	r2, [r7, #0]
 8006db0:	69bb      	ldr	r3, [r7, #24]
 8006db2:	4413      	add	r3, r2
 8006db4:	3316      	adds	r3, #22
 8006db6:	2200      	movs	r2, #0
 8006db8:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	6a1b      	ldr	r3, [r3, #32]
 8006dbe:	330c      	adds	r3, #12
 8006dc0:	781b      	ldrb	r3, [r3, #0]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d101      	bne.n	8006dca <get_fileinfo+0x16a>
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 8006dca:	683a      	ldr	r2, [r7, #0]
 8006dcc:	69bb      	ldr	r3, [r7, #24]
 8006dce:	4413      	add	r3, r2
 8006dd0:	3309      	adds	r3, #9
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6a1b      	ldr	r3, [r3, #32]
 8006dda:	7ada      	ldrb	r2, [r3, #11]
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	6a1b      	ldr	r3, [r3, #32]
 8006de4:	331c      	adds	r3, #28
 8006de6:	4618      	mov	r0, r3
 8006de8:	f7fe fb9e 	bl	8005528 <ld_dword>
 8006dec:	4602      	mov	r2, r0
 8006dee:	683b      	ldr	r3, [r7, #0]
 8006df0:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	6a1b      	ldr	r3, [r3, #32]
 8006df6:	3316      	adds	r3, #22
 8006df8:	4618      	mov	r0, r3
 8006dfa:	f7fe fb95 	bl	8005528 <ld_dword>
 8006dfe:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8006e00:	68bb      	ldr	r3, [r7, #8]
 8006e02:	b29a      	uxth	r2, r3
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	80da      	strh	r2, [r3, #6]
 8006e08:	68bb      	ldr	r3, [r7, #8]
 8006e0a:	0c1b      	lsrs	r3, r3, #16
 8006e0c:	b29a      	uxth	r2, r3
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	809a      	strh	r2, [r3, #4]
 8006e12:	e000      	b.n	8006e16 <get_fileinfo+0x1b6>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8006e14:	bf00      	nop
}
 8006e16:	3720      	adds	r7, #32
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	bd80      	pop	{r7, pc}

08006e1c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b08a      	sub	sp, #40	@ 0x28
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
 8006e24:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8006e26:	683b      	ldr	r3, [r7, #0]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	613b      	str	r3, [r7, #16]
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	691b      	ldr	r3, [r3, #16]
 8006e32:	60fb      	str	r3, [r7, #12]
 8006e34:	2300      	movs	r3, #0
 8006e36:	617b      	str	r3, [r7, #20]
 8006e38:	697b      	ldr	r3, [r7, #20]
 8006e3a:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8006e3c:	69bb      	ldr	r3, [r7, #24]
 8006e3e:	1c5a      	adds	r2, r3, #1
 8006e40:	61ba      	str	r2, [r7, #24]
 8006e42:	693a      	ldr	r2, [r7, #16]
 8006e44:	4413      	add	r3, r2
 8006e46:	781b      	ldrb	r3, [r3, #0]
 8006e48:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8006e4a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006e4c:	2b1f      	cmp	r3, #31
 8006e4e:	d940      	bls.n	8006ed2 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8006e50:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006e52:	2b2f      	cmp	r3, #47	@ 0x2f
 8006e54:	d006      	beq.n	8006e64 <create_name+0x48>
 8006e56:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006e58:	2b5c      	cmp	r3, #92	@ 0x5c
 8006e5a:	d110      	bne.n	8006e7e <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8006e5c:	e002      	b.n	8006e64 <create_name+0x48>
 8006e5e:	69bb      	ldr	r3, [r7, #24]
 8006e60:	3301      	adds	r3, #1
 8006e62:	61bb      	str	r3, [r7, #24]
 8006e64:	693a      	ldr	r2, [r7, #16]
 8006e66:	69bb      	ldr	r3, [r7, #24]
 8006e68:	4413      	add	r3, r2
 8006e6a:	781b      	ldrb	r3, [r3, #0]
 8006e6c:	2b2f      	cmp	r3, #47	@ 0x2f
 8006e6e:	d0f6      	beq.n	8006e5e <create_name+0x42>
 8006e70:	693a      	ldr	r2, [r7, #16]
 8006e72:	69bb      	ldr	r3, [r7, #24]
 8006e74:	4413      	add	r3, r2
 8006e76:	781b      	ldrb	r3, [r3, #0]
 8006e78:	2b5c      	cmp	r3, #92	@ 0x5c
 8006e7a:	d0f0      	beq.n	8006e5e <create_name+0x42>
			break;
 8006e7c:	e02a      	b.n	8006ed4 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8006e7e:	697b      	ldr	r3, [r7, #20]
 8006e80:	2bfe      	cmp	r3, #254	@ 0xfe
 8006e82:	d901      	bls.n	8006e88 <create_name+0x6c>
 8006e84:	2306      	movs	r3, #6
 8006e86:	e17d      	b.n	8007184 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8006e88:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006e8a:	b2db      	uxtb	r3, r3
 8006e8c:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8006e8e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006e90:	2101      	movs	r1, #1
 8006e92:	4618      	mov	r0, r3
 8006e94:	f7fe f9ca 	bl	800522c <ff_convert>
 8006e98:	4603      	mov	r3, r0
 8006e9a:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8006e9c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d101      	bne.n	8006ea6 <create_name+0x8a>
 8006ea2:	2306      	movs	r3, #6
 8006ea4:	e16e      	b.n	8007184 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8006ea6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006ea8:	2b7f      	cmp	r3, #127	@ 0x7f
 8006eaa:	d809      	bhi.n	8006ec0 <create_name+0xa4>
 8006eac:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006eae:	4619      	mov	r1, r3
 8006eb0:	488d      	ldr	r0, [pc, #564]	@ (80070e8 <create_name+0x2cc>)
 8006eb2:	f7fe fc06 	bl	80056c2 <chk_chr>
 8006eb6:	4603      	mov	r3, r0
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d001      	beq.n	8006ec0 <create_name+0xa4>
 8006ebc:	2306      	movs	r3, #6
 8006ebe:	e161      	b.n	8007184 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8006ec0:	697b      	ldr	r3, [r7, #20]
 8006ec2:	1c5a      	adds	r2, r3, #1
 8006ec4:	617a      	str	r2, [r7, #20]
 8006ec6:	005b      	lsls	r3, r3, #1
 8006ec8:	68fa      	ldr	r2, [r7, #12]
 8006eca:	4413      	add	r3, r2
 8006ecc:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8006ece:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8006ed0:	e7b4      	b.n	8006e3c <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8006ed2:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8006ed4:	693a      	ldr	r2, [r7, #16]
 8006ed6:	69bb      	ldr	r3, [r7, #24]
 8006ed8:	441a      	add	r2, r3
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8006ede:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006ee0:	2b1f      	cmp	r3, #31
 8006ee2:	d801      	bhi.n	8006ee8 <create_name+0xcc>
 8006ee4:	2304      	movs	r3, #4
 8006ee6:	e000      	b.n	8006eea <create_name+0xce>
 8006ee8:	2300      	movs	r3, #0
 8006eea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8006eee:	e011      	b.n	8006f14 <create_name+0xf8>
		w = lfn[di - 1];
 8006ef0:	697b      	ldr	r3, [r7, #20]
 8006ef2:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8006ef6:	3b01      	subs	r3, #1
 8006ef8:	005b      	lsls	r3, r3, #1
 8006efa:	68fa      	ldr	r2, [r7, #12]
 8006efc:	4413      	add	r3, r2
 8006efe:	881b      	ldrh	r3, [r3, #0]
 8006f00:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 8006f02:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006f04:	2b20      	cmp	r3, #32
 8006f06:	d002      	beq.n	8006f0e <create_name+0xf2>
 8006f08:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006f0a:	2b2e      	cmp	r3, #46	@ 0x2e
 8006f0c:	d106      	bne.n	8006f1c <create_name+0x100>
		di--;
 8006f0e:	697b      	ldr	r3, [r7, #20]
 8006f10:	3b01      	subs	r3, #1
 8006f12:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8006f14:	697b      	ldr	r3, [r7, #20]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d1ea      	bne.n	8006ef0 <create_name+0xd4>
 8006f1a:	e000      	b.n	8006f1e <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8006f1c:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8006f1e:	697b      	ldr	r3, [r7, #20]
 8006f20:	005b      	lsls	r3, r3, #1
 8006f22:	68fa      	ldr	r2, [r7, #12]
 8006f24:	4413      	add	r3, r2
 8006f26:	2200      	movs	r2, #0
 8006f28:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8006f2a:	697b      	ldr	r3, [r7, #20]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d101      	bne.n	8006f34 <create_name+0x118>
 8006f30:	2306      	movs	r3, #6
 8006f32:	e127      	b.n	8007184 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	3324      	adds	r3, #36	@ 0x24
 8006f38:	220b      	movs	r2, #11
 8006f3a:	2120      	movs	r1, #32
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	f7fe fb7e 	bl	800563e <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8006f42:	2300      	movs	r3, #0
 8006f44:	61bb      	str	r3, [r7, #24]
 8006f46:	e002      	b.n	8006f4e <create_name+0x132>
 8006f48:	69bb      	ldr	r3, [r7, #24]
 8006f4a:	3301      	adds	r3, #1
 8006f4c:	61bb      	str	r3, [r7, #24]
 8006f4e:	69bb      	ldr	r3, [r7, #24]
 8006f50:	005b      	lsls	r3, r3, #1
 8006f52:	68fa      	ldr	r2, [r7, #12]
 8006f54:	4413      	add	r3, r2
 8006f56:	881b      	ldrh	r3, [r3, #0]
 8006f58:	2b20      	cmp	r3, #32
 8006f5a:	d0f5      	beq.n	8006f48 <create_name+0x12c>
 8006f5c:	69bb      	ldr	r3, [r7, #24]
 8006f5e:	005b      	lsls	r3, r3, #1
 8006f60:	68fa      	ldr	r2, [r7, #12]
 8006f62:	4413      	add	r3, r2
 8006f64:	881b      	ldrh	r3, [r3, #0]
 8006f66:	2b2e      	cmp	r3, #46	@ 0x2e
 8006f68:	d0ee      	beq.n	8006f48 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8006f6a:	69bb      	ldr	r3, [r7, #24]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d009      	beq.n	8006f84 <create_name+0x168>
 8006f70:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006f74:	f043 0303 	orr.w	r3, r3, #3
 8006f78:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8006f7c:	e002      	b.n	8006f84 <create_name+0x168>
 8006f7e:	697b      	ldr	r3, [r7, #20]
 8006f80:	3b01      	subs	r3, #1
 8006f82:	617b      	str	r3, [r7, #20]
 8006f84:	697b      	ldr	r3, [r7, #20]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d009      	beq.n	8006f9e <create_name+0x182>
 8006f8a:	697b      	ldr	r3, [r7, #20]
 8006f8c:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8006f90:	3b01      	subs	r3, #1
 8006f92:	005b      	lsls	r3, r3, #1
 8006f94:	68fa      	ldr	r2, [r7, #12]
 8006f96:	4413      	add	r3, r2
 8006f98:	881b      	ldrh	r3, [r3, #0]
 8006f9a:	2b2e      	cmp	r3, #46	@ 0x2e
 8006f9c:	d1ef      	bne.n	8006f7e <create_name+0x162>

	i = b = 0; ni = 8;
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	623b      	str	r3, [r7, #32]
 8006fa8:	2308      	movs	r3, #8
 8006faa:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8006fac:	69bb      	ldr	r3, [r7, #24]
 8006fae:	1c5a      	adds	r2, r3, #1
 8006fb0:	61ba      	str	r2, [r7, #24]
 8006fb2:	005b      	lsls	r3, r3, #1
 8006fb4:	68fa      	ldr	r2, [r7, #12]
 8006fb6:	4413      	add	r3, r2
 8006fb8:	881b      	ldrh	r3, [r3, #0]
 8006fba:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 8006fbc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	f000 8090 	beq.w	80070e4 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8006fc4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006fc6:	2b20      	cmp	r3, #32
 8006fc8:	d006      	beq.n	8006fd8 <create_name+0x1bc>
 8006fca:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006fcc:	2b2e      	cmp	r3, #46	@ 0x2e
 8006fce:	d10a      	bne.n	8006fe6 <create_name+0x1ca>
 8006fd0:	69ba      	ldr	r2, [r7, #24]
 8006fd2:	697b      	ldr	r3, [r7, #20]
 8006fd4:	429a      	cmp	r2, r3
 8006fd6:	d006      	beq.n	8006fe6 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8006fd8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006fdc:	f043 0303 	orr.w	r3, r3, #3
 8006fe0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006fe4:	e07d      	b.n	80070e2 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8006fe6:	6a3a      	ldr	r2, [r7, #32]
 8006fe8:	69fb      	ldr	r3, [r7, #28]
 8006fea:	429a      	cmp	r2, r3
 8006fec:	d203      	bcs.n	8006ff6 <create_name+0x1da>
 8006fee:	69ba      	ldr	r2, [r7, #24]
 8006ff0:	697b      	ldr	r3, [r7, #20]
 8006ff2:	429a      	cmp	r2, r3
 8006ff4:	d123      	bne.n	800703e <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8006ff6:	69fb      	ldr	r3, [r7, #28]
 8006ff8:	2b0b      	cmp	r3, #11
 8006ffa:	d106      	bne.n	800700a <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8006ffc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007000:	f043 0303 	orr.w	r3, r3, #3
 8007004:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8007008:	e075      	b.n	80070f6 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800700a:	69ba      	ldr	r2, [r7, #24]
 800700c:	697b      	ldr	r3, [r7, #20]
 800700e:	429a      	cmp	r2, r3
 8007010:	d005      	beq.n	800701e <create_name+0x202>
 8007012:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007016:	f043 0303 	orr.w	r3, r3, #3
 800701a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 800701e:	69ba      	ldr	r2, [r7, #24]
 8007020:	697b      	ldr	r3, [r7, #20]
 8007022:	429a      	cmp	r2, r3
 8007024:	d866      	bhi.n	80070f4 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8007026:	697b      	ldr	r3, [r7, #20]
 8007028:	61bb      	str	r3, [r7, #24]
 800702a:	2308      	movs	r3, #8
 800702c:	623b      	str	r3, [r7, #32]
 800702e:	230b      	movs	r3, #11
 8007030:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8007032:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007036:	009b      	lsls	r3, r3, #2
 8007038:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800703c:	e051      	b.n	80070e2 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800703e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007040:	2b7f      	cmp	r3, #127	@ 0x7f
 8007042:	d914      	bls.n	800706e <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8007044:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007046:	2100      	movs	r1, #0
 8007048:	4618      	mov	r0, r3
 800704a:	f7fe f8ef 	bl	800522c <ff_convert>
 800704e:	4603      	mov	r3, r0
 8007050:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8007052:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007054:	2b00      	cmp	r3, #0
 8007056:	d004      	beq.n	8007062 <create_name+0x246>
 8007058:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800705a:	3b80      	subs	r3, #128	@ 0x80
 800705c:	4a23      	ldr	r2, [pc, #140]	@ (80070ec <create_name+0x2d0>)
 800705e:	5cd3      	ldrb	r3, [r2, r3]
 8007060:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8007062:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007066:	f043 0302 	orr.w	r3, r3, #2
 800706a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800706e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007070:	2b00      	cmp	r3, #0
 8007072:	d007      	beq.n	8007084 <create_name+0x268>
 8007074:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007076:	4619      	mov	r1, r3
 8007078:	481d      	ldr	r0, [pc, #116]	@ (80070f0 <create_name+0x2d4>)
 800707a:	f7fe fb22 	bl	80056c2 <chk_chr>
 800707e:	4603      	mov	r3, r0
 8007080:	2b00      	cmp	r3, #0
 8007082:	d008      	beq.n	8007096 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8007084:	235f      	movs	r3, #95	@ 0x5f
 8007086:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8007088:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800708c:	f043 0303 	orr.w	r3, r3, #3
 8007090:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8007094:	e01b      	b.n	80070ce <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8007096:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007098:	2b40      	cmp	r3, #64	@ 0x40
 800709a:	d909      	bls.n	80070b0 <create_name+0x294>
 800709c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800709e:	2b5a      	cmp	r3, #90	@ 0x5a
 80070a0:	d806      	bhi.n	80070b0 <create_name+0x294>
					b |= 2;
 80070a2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80070a6:	f043 0302 	orr.w	r3, r3, #2
 80070aa:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80070ae:	e00e      	b.n	80070ce <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 80070b0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80070b2:	2b60      	cmp	r3, #96	@ 0x60
 80070b4:	d90b      	bls.n	80070ce <create_name+0x2b2>
 80070b6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80070b8:	2b7a      	cmp	r3, #122	@ 0x7a
 80070ba:	d808      	bhi.n	80070ce <create_name+0x2b2>
						b |= 1; w -= 0x20;
 80070bc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80070c0:	f043 0301 	orr.w	r3, r3, #1
 80070c4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80070c8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80070ca:	3b20      	subs	r3, #32
 80070cc:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 80070ce:	6a3b      	ldr	r3, [r7, #32]
 80070d0:	1c5a      	adds	r2, r3, #1
 80070d2:	623a      	str	r2, [r7, #32]
 80070d4:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80070d6:	b2d1      	uxtb	r1, r2
 80070d8:	687a      	ldr	r2, [r7, #4]
 80070da:	4413      	add	r3, r2
 80070dc:	460a      	mov	r2, r1
 80070de:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 80070e2:	e763      	b.n	8006fac <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 80070e4:	bf00      	nop
 80070e6:	e006      	b.n	80070f6 <create_name+0x2da>
 80070e8:	0800973c 	.word	0x0800973c
 80070ec:	08009c00 	.word	0x08009c00
 80070f0:	08009748 	.word	0x08009748
			if (si > di) break;			/* No extension */
 80070f4:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80070fc:	2be5      	cmp	r3, #229	@ 0xe5
 80070fe:	d103      	bne.n	8007108 <create_name+0x2ec>
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2205      	movs	r2, #5
 8007104:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 8007108:	69fb      	ldr	r3, [r7, #28]
 800710a:	2b08      	cmp	r3, #8
 800710c:	d104      	bne.n	8007118 <create_name+0x2fc>
 800710e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007112:	009b      	lsls	r3, r3, #2
 8007114:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8007118:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800711c:	f003 030c 	and.w	r3, r3, #12
 8007120:	2b0c      	cmp	r3, #12
 8007122:	d005      	beq.n	8007130 <create_name+0x314>
 8007124:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007128:	f003 0303 	and.w	r3, r3, #3
 800712c:	2b03      	cmp	r3, #3
 800712e:	d105      	bne.n	800713c <create_name+0x320>
 8007130:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007134:	f043 0302 	orr.w	r3, r3, #2
 8007138:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800713c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007140:	f003 0302 	and.w	r3, r3, #2
 8007144:	2b00      	cmp	r3, #0
 8007146:	d117      	bne.n	8007178 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8007148:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800714c:	f003 0303 	and.w	r3, r3, #3
 8007150:	2b01      	cmp	r3, #1
 8007152:	d105      	bne.n	8007160 <create_name+0x344>
 8007154:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007158:	f043 0310 	orr.w	r3, r3, #16
 800715c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8007160:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007164:	f003 030c 	and.w	r3, r3, #12
 8007168:	2b04      	cmp	r3, #4
 800716a:	d105      	bne.n	8007178 <create_name+0x35c>
 800716c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007170:	f043 0308 	orr.w	r3, r3, #8
 8007174:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800717e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 8007182:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8007184:	4618      	mov	r0, r3
 8007186:	3728      	adds	r7, #40	@ 0x28
 8007188:	46bd      	mov	sp, r7
 800718a:	bd80      	pop	{r7, pc}

0800718c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800718c:	b580      	push	{r7, lr}
 800718e:	b086      	sub	sp, #24
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
 8007194:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800719a:	693b      	ldr	r3, [r7, #16]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80071a0:	e002      	b.n	80071a8 <follow_path+0x1c>
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	3301      	adds	r3, #1
 80071a6:	603b      	str	r3, [r7, #0]
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	781b      	ldrb	r3, [r3, #0]
 80071ac:	2b2f      	cmp	r3, #47	@ 0x2f
 80071ae:	d0f8      	beq.n	80071a2 <follow_path+0x16>
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	781b      	ldrb	r3, [r3, #0]
 80071b4:	2b5c      	cmp	r3, #92	@ 0x5c
 80071b6:	d0f4      	beq.n	80071a2 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80071b8:	693b      	ldr	r3, [r7, #16]
 80071ba:	2200      	movs	r2, #0
 80071bc:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	781b      	ldrb	r3, [r3, #0]
 80071c2:	2b1f      	cmp	r3, #31
 80071c4:	d80a      	bhi.n	80071dc <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	2280      	movs	r2, #128	@ 0x80
 80071ca:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 80071ce:	2100      	movs	r1, #0
 80071d0:	6878      	ldr	r0, [r7, #4]
 80071d2:	f7ff f820 	bl	8006216 <dir_sdi>
 80071d6:	4603      	mov	r3, r0
 80071d8:	75fb      	strb	r3, [r7, #23]
 80071da:	e048      	b.n	800726e <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80071dc:	463b      	mov	r3, r7
 80071de:	4619      	mov	r1, r3
 80071e0:	6878      	ldr	r0, [r7, #4]
 80071e2:	f7ff fe1b 	bl	8006e1c <create_name>
 80071e6:	4603      	mov	r3, r0
 80071e8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80071ea:	7dfb      	ldrb	r3, [r7, #23]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d139      	bne.n	8007264 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 80071f0:	6878      	ldr	r0, [r7, #4]
 80071f2:	f7ff fb7c 	bl	80068ee <dir_find>
 80071f6:	4603      	mov	r3, r0
 80071f8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8007200:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8007202:	7dfb      	ldrb	r3, [r7, #23]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d00a      	beq.n	800721e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8007208:	7dfb      	ldrb	r3, [r7, #23]
 800720a:	2b04      	cmp	r3, #4
 800720c:	d12c      	bne.n	8007268 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800720e:	7afb      	ldrb	r3, [r7, #11]
 8007210:	f003 0304 	and.w	r3, r3, #4
 8007214:	2b00      	cmp	r3, #0
 8007216:	d127      	bne.n	8007268 <follow_path+0xdc>
 8007218:	2305      	movs	r3, #5
 800721a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800721c:	e024      	b.n	8007268 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800721e:	7afb      	ldrb	r3, [r7, #11]
 8007220:	f003 0304 	and.w	r3, r3, #4
 8007224:	2b00      	cmp	r3, #0
 8007226:	d121      	bne.n	800726c <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8007228:	693b      	ldr	r3, [r7, #16]
 800722a:	799b      	ldrb	r3, [r3, #6]
 800722c:	f003 0310 	and.w	r3, r3, #16
 8007230:	2b00      	cmp	r3, #0
 8007232:	d102      	bne.n	800723a <follow_path+0xae>
				res = FR_NO_PATH; break;
 8007234:	2305      	movs	r3, #5
 8007236:	75fb      	strb	r3, [r7, #23]
 8007238:	e019      	b.n	800726e <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	695b      	ldr	r3, [r3, #20]
 8007244:	68fa      	ldr	r2, [r7, #12]
 8007246:	8992      	ldrh	r2, [r2, #12]
 8007248:	fbb3 f0f2 	udiv	r0, r3, r2
 800724c:	fb00 f202 	mul.w	r2, r0, r2
 8007250:	1a9b      	subs	r3, r3, r2
 8007252:	440b      	add	r3, r1
 8007254:	4619      	mov	r1, r3
 8007256:	68f8      	ldr	r0, [r7, #12]
 8007258:	f7ff f983 	bl	8006562 <ld_clust>
 800725c:	4602      	mov	r2, r0
 800725e:	693b      	ldr	r3, [r7, #16]
 8007260:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007262:	e7bb      	b.n	80071dc <follow_path+0x50>
			if (res != FR_OK) break;
 8007264:	bf00      	nop
 8007266:	e002      	b.n	800726e <follow_path+0xe2>
				break;
 8007268:	bf00      	nop
 800726a:	e000      	b.n	800726e <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800726c:	bf00      	nop
			}
		}
	}

	return res;
 800726e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007270:	4618      	mov	r0, r3
 8007272:	3718      	adds	r7, #24
 8007274:	46bd      	mov	sp, r7
 8007276:	bd80      	pop	{r7, pc}

08007278 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8007278:	b480      	push	{r7}
 800727a:	b087      	sub	sp, #28
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8007280:	f04f 33ff 	mov.w	r3, #4294967295
 8007284:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d031      	beq.n	80072f2 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	617b      	str	r3, [r7, #20]
 8007294:	e002      	b.n	800729c <get_ldnumber+0x24>
 8007296:	697b      	ldr	r3, [r7, #20]
 8007298:	3301      	adds	r3, #1
 800729a:	617b      	str	r3, [r7, #20]
 800729c:	697b      	ldr	r3, [r7, #20]
 800729e:	781b      	ldrb	r3, [r3, #0]
 80072a0:	2b1f      	cmp	r3, #31
 80072a2:	d903      	bls.n	80072ac <get_ldnumber+0x34>
 80072a4:	697b      	ldr	r3, [r7, #20]
 80072a6:	781b      	ldrb	r3, [r3, #0]
 80072a8:	2b3a      	cmp	r3, #58	@ 0x3a
 80072aa:	d1f4      	bne.n	8007296 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80072ac:	697b      	ldr	r3, [r7, #20]
 80072ae:	781b      	ldrb	r3, [r3, #0]
 80072b0:	2b3a      	cmp	r3, #58	@ 0x3a
 80072b2:	d11c      	bne.n	80072ee <get_ldnumber+0x76>
			tp = *path;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	1c5a      	adds	r2, r3, #1
 80072be:	60fa      	str	r2, [r7, #12]
 80072c0:	781b      	ldrb	r3, [r3, #0]
 80072c2:	3b30      	subs	r3, #48	@ 0x30
 80072c4:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80072c6:	68bb      	ldr	r3, [r7, #8]
 80072c8:	2b09      	cmp	r3, #9
 80072ca:	d80e      	bhi.n	80072ea <get_ldnumber+0x72>
 80072cc:	68fa      	ldr	r2, [r7, #12]
 80072ce:	697b      	ldr	r3, [r7, #20]
 80072d0:	429a      	cmp	r2, r3
 80072d2:	d10a      	bne.n	80072ea <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80072d4:	68bb      	ldr	r3, [r7, #8]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d107      	bne.n	80072ea <get_ldnumber+0x72>
					vol = (int)i;
 80072da:	68bb      	ldr	r3, [r7, #8]
 80072dc:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80072de:	697b      	ldr	r3, [r7, #20]
 80072e0:	3301      	adds	r3, #1
 80072e2:	617b      	str	r3, [r7, #20]
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	697a      	ldr	r2, [r7, #20]
 80072e8:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80072ea:	693b      	ldr	r3, [r7, #16]
 80072ec:	e002      	b.n	80072f4 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80072ee:	2300      	movs	r3, #0
 80072f0:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80072f2:	693b      	ldr	r3, [r7, #16]
}
 80072f4:	4618      	mov	r0, r3
 80072f6:	371c      	adds	r7, #28
 80072f8:	46bd      	mov	sp, r7
 80072fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fe:	4770      	bx	lr

08007300 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8007300:	b580      	push	{r7, lr}
 8007302:	b082      	sub	sp, #8
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
 8007308:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	2200      	movs	r2, #0
 800730e:	70da      	strb	r2, [r3, #3]
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	f04f 32ff 	mov.w	r2, #4294967295
 8007316:	635a      	str	r2, [r3, #52]	@ 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8007318:	6839      	ldr	r1, [r7, #0]
 800731a:	6878      	ldr	r0, [r7, #4]
 800731c:	f7fe fb9c 	bl	8005a58 <move_window>
 8007320:	4603      	mov	r3, r0
 8007322:	2b00      	cmp	r3, #0
 8007324:	d001      	beq.n	800732a <check_fs+0x2a>
 8007326:	2304      	movs	r3, #4
 8007328:	e038      	b.n	800739c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	3338      	adds	r3, #56	@ 0x38
 800732e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8007332:	4618      	mov	r0, r3
 8007334:	f7fe f8e0 	bl	80054f8 <ld_word>
 8007338:	4603      	mov	r3, r0
 800733a:	461a      	mov	r2, r3
 800733c:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8007340:	429a      	cmp	r2, r3
 8007342:	d001      	beq.n	8007348 <check_fs+0x48>
 8007344:	2303      	movs	r3, #3
 8007346:	e029      	b.n	800739c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800734e:	2be9      	cmp	r3, #233	@ 0xe9
 8007350:	d009      	beq.n	8007366 <check_fs+0x66>
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007358:	2beb      	cmp	r3, #235	@ 0xeb
 800735a:	d11e      	bne.n	800739a <check_fs+0x9a>
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8007362:	2b90      	cmp	r3, #144	@ 0x90
 8007364:	d119      	bne.n	800739a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	3338      	adds	r3, #56	@ 0x38
 800736a:	3336      	adds	r3, #54	@ 0x36
 800736c:	4618      	mov	r0, r3
 800736e:	f7fe f8db 	bl	8005528 <ld_dword>
 8007372:	4603      	mov	r3, r0
 8007374:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8007378:	4a0a      	ldr	r2, [pc, #40]	@ (80073a4 <check_fs+0xa4>)
 800737a:	4293      	cmp	r3, r2
 800737c:	d101      	bne.n	8007382 <check_fs+0x82>
 800737e:	2300      	movs	r3, #0
 8007380:	e00c      	b.n	800739c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	3338      	adds	r3, #56	@ 0x38
 8007386:	3352      	adds	r3, #82	@ 0x52
 8007388:	4618      	mov	r0, r3
 800738a:	f7fe f8cd 	bl	8005528 <ld_dword>
 800738e:	4603      	mov	r3, r0
 8007390:	4a05      	ldr	r2, [pc, #20]	@ (80073a8 <check_fs+0xa8>)
 8007392:	4293      	cmp	r3, r2
 8007394:	d101      	bne.n	800739a <check_fs+0x9a>
 8007396:	2300      	movs	r3, #0
 8007398:	e000      	b.n	800739c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800739a:	2302      	movs	r3, #2
}
 800739c:	4618      	mov	r0, r3
 800739e:	3708      	adds	r7, #8
 80073a0:	46bd      	mov	sp, r7
 80073a2:	bd80      	pop	{r7, pc}
 80073a4:	00544146 	.word	0x00544146
 80073a8:	33544146 	.word	0x33544146

080073ac <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b096      	sub	sp, #88	@ 0x58
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	60f8      	str	r0, [r7, #12]
 80073b4:	60b9      	str	r1, [r7, #8]
 80073b6:	4613      	mov	r3, r2
 80073b8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80073ba:	68bb      	ldr	r3, [r7, #8]
 80073bc:	2200      	movs	r2, #0
 80073be:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80073c0:	68f8      	ldr	r0, [r7, #12]
 80073c2:	f7ff ff59 	bl	8007278 <get_ldnumber>
 80073c6:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80073c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	da01      	bge.n	80073d2 <find_volume+0x26>
 80073ce:	230b      	movs	r3, #11
 80073d0:	e265      	b.n	800789e <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80073d2:	4a9f      	ldr	r2, [pc, #636]	@ (8007650 <find_volume+0x2a4>)
 80073d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80073d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80073da:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80073dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d101      	bne.n	80073e6 <find_volume+0x3a>
 80073e2:	230c      	movs	r3, #12
 80073e4:	e25b      	b.n	800789e <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80073e6:	68bb      	ldr	r3, [r7, #8]
 80073e8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80073ea:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80073ec:	79fb      	ldrb	r3, [r7, #7]
 80073ee:	f023 0301 	bic.w	r3, r3, #1
 80073f2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80073f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073f6:	781b      	ldrb	r3, [r3, #0]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d01a      	beq.n	8007432 <find_volume+0x86>
		stat = disk_status(fs->drv);
 80073fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073fe:	785b      	ldrb	r3, [r3, #1]
 8007400:	4618      	mov	r0, r3
 8007402:	f7fd ffd9 	bl	80053b8 <disk_status>
 8007406:	4603      	mov	r3, r0
 8007408:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800740c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007410:	f003 0301 	and.w	r3, r3, #1
 8007414:	2b00      	cmp	r3, #0
 8007416:	d10c      	bne.n	8007432 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8007418:	79fb      	ldrb	r3, [r7, #7]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d007      	beq.n	800742e <find_volume+0x82>
 800741e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007422:	f003 0304 	and.w	r3, r3, #4
 8007426:	2b00      	cmp	r3, #0
 8007428:	d001      	beq.n	800742e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800742a:	230a      	movs	r3, #10
 800742c:	e237      	b.n	800789e <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 800742e:	2300      	movs	r3, #0
 8007430:	e235      	b.n	800789e <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8007432:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007434:	2200      	movs	r2, #0
 8007436:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8007438:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800743a:	b2da      	uxtb	r2, r3
 800743c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800743e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8007440:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007442:	785b      	ldrb	r3, [r3, #1]
 8007444:	4618      	mov	r0, r3
 8007446:	f7fd ffd1 	bl	80053ec <disk_initialize>
 800744a:	4603      	mov	r3, r0
 800744c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8007450:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007454:	f003 0301 	and.w	r3, r3, #1
 8007458:	2b00      	cmp	r3, #0
 800745a:	d001      	beq.n	8007460 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800745c:	2303      	movs	r3, #3
 800745e:	e21e      	b.n	800789e <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8007460:	79fb      	ldrb	r3, [r7, #7]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d007      	beq.n	8007476 <find_volume+0xca>
 8007466:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800746a:	f003 0304 	and.w	r3, r3, #4
 800746e:	2b00      	cmp	r3, #0
 8007470:	d001      	beq.n	8007476 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8007472:	230a      	movs	r3, #10
 8007474:	e213      	b.n	800789e <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8007476:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007478:	7858      	ldrb	r0, [r3, #1]
 800747a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800747c:	330c      	adds	r3, #12
 800747e:	461a      	mov	r2, r3
 8007480:	2102      	movs	r1, #2
 8007482:	f7fe f81b 	bl	80054bc <disk_ioctl>
 8007486:	4603      	mov	r3, r0
 8007488:	2b00      	cmp	r3, #0
 800748a:	d001      	beq.n	8007490 <find_volume+0xe4>
 800748c:	2301      	movs	r3, #1
 800748e:	e206      	b.n	800789e <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8007490:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007492:	899b      	ldrh	r3, [r3, #12]
 8007494:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007498:	d80d      	bhi.n	80074b6 <find_volume+0x10a>
 800749a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800749c:	899b      	ldrh	r3, [r3, #12]
 800749e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80074a2:	d308      	bcc.n	80074b6 <find_volume+0x10a>
 80074a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074a6:	899b      	ldrh	r3, [r3, #12]
 80074a8:	461a      	mov	r2, r3
 80074aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074ac:	899b      	ldrh	r3, [r3, #12]
 80074ae:	3b01      	subs	r3, #1
 80074b0:	4013      	ands	r3, r2
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d001      	beq.n	80074ba <find_volume+0x10e>
 80074b6:	2301      	movs	r3, #1
 80074b8:	e1f1      	b.n	800789e <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80074ba:	2300      	movs	r3, #0
 80074bc:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80074be:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80074c0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80074c2:	f7ff ff1d 	bl	8007300 <check_fs>
 80074c6:	4603      	mov	r3, r0
 80074c8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80074cc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80074d0:	2b02      	cmp	r3, #2
 80074d2:	d149      	bne.n	8007568 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80074d4:	2300      	movs	r3, #0
 80074d6:	643b      	str	r3, [r7, #64]	@ 0x40
 80074d8:	e01e      	b.n	8007518 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80074da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074dc:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80074e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80074e2:	011b      	lsls	r3, r3, #4
 80074e4:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 80074e8:	4413      	add	r3, r2
 80074ea:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80074ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074ee:	3304      	adds	r3, #4
 80074f0:	781b      	ldrb	r3, [r3, #0]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d006      	beq.n	8007504 <find_volume+0x158>
 80074f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074f8:	3308      	adds	r3, #8
 80074fa:	4618      	mov	r0, r3
 80074fc:	f7fe f814 	bl	8005528 <ld_dword>
 8007500:	4602      	mov	r2, r0
 8007502:	e000      	b.n	8007506 <find_volume+0x15a>
 8007504:	2200      	movs	r2, #0
 8007506:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007508:	009b      	lsls	r3, r3, #2
 800750a:	3358      	adds	r3, #88	@ 0x58
 800750c:	443b      	add	r3, r7
 800750e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007512:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007514:	3301      	adds	r3, #1
 8007516:	643b      	str	r3, [r7, #64]	@ 0x40
 8007518:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800751a:	2b03      	cmp	r3, #3
 800751c:	d9dd      	bls.n	80074da <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800751e:	2300      	movs	r3, #0
 8007520:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8007522:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007524:	2b00      	cmp	r3, #0
 8007526:	d002      	beq.n	800752e <find_volume+0x182>
 8007528:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800752a:	3b01      	subs	r3, #1
 800752c:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800752e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007530:	009b      	lsls	r3, r3, #2
 8007532:	3358      	adds	r3, #88	@ 0x58
 8007534:	443b      	add	r3, r7
 8007536:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800753a:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800753c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800753e:	2b00      	cmp	r3, #0
 8007540:	d005      	beq.n	800754e <find_volume+0x1a2>
 8007542:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007544:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007546:	f7ff fedb 	bl	8007300 <check_fs>
 800754a:	4603      	mov	r3, r0
 800754c:	e000      	b.n	8007550 <find_volume+0x1a4>
 800754e:	2303      	movs	r3, #3
 8007550:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8007554:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007558:	2b01      	cmp	r3, #1
 800755a:	d905      	bls.n	8007568 <find_volume+0x1bc>
 800755c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800755e:	3301      	adds	r3, #1
 8007560:	643b      	str	r3, [r7, #64]	@ 0x40
 8007562:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007564:	2b03      	cmp	r3, #3
 8007566:	d9e2      	bls.n	800752e <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8007568:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800756c:	2b04      	cmp	r3, #4
 800756e:	d101      	bne.n	8007574 <find_volume+0x1c8>
 8007570:	2301      	movs	r3, #1
 8007572:	e194      	b.n	800789e <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8007574:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007578:	2b01      	cmp	r3, #1
 800757a:	d901      	bls.n	8007580 <find_volume+0x1d4>
 800757c:	230d      	movs	r3, #13
 800757e:	e18e      	b.n	800789e <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8007580:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007582:	3338      	adds	r3, #56	@ 0x38
 8007584:	330b      	adds	r3, #11
 8007586:	4618      	mov	r0, r3
 8007588:	f7fd ffb6 	bl	80054f8 <ld_word>
 800758c:	4603      	mov	r3, r0
 800758e:	461a      	mov	r2, r3
 8007590:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007592:	899b      	ldrh	r3, [r3, #12]
 8007594:	429a      	cmp	r2, r3
 8007596:	d001      	beq.n	800759c <find_volume+0x1f0>
 8007598:	230d      	movs	r3, #13
 800759a:	e180      	b.n	800789e <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800759c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800759e:	3338      	adds	r3, #56	@ 0x38
 80075a0:	3316      	adds	r3, #22
 80075a2:	4618      	mov	r0, r3
 80075a4:	f7fd ffa8 	bl	80054f8 <ld_word>
 80075a8:	4603      	mov	r3, r0
 80075aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80075ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d106      	bne.n	80075c0 <find_volume+0x214>
 80075b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075b4:	3338      	adds	r3, #56	@ 0x38
 80075b6:	3324      	adds	r3, #36	@ 0x24
 80075b8:	4618      	mov	r0, r3
 80075ba:	f7fd ffb5 	bl	8005528 <ld_dword>
 80075be:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 80075c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075c2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80075c4:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80075c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075c8:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 80075cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075ce:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80075d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075d2:	789b      	ldrb	r3, [r3, #2]
 80075d4:	2b01      	cmp	r3, #1
 80075d6:	d005      	beq.n	80075e4 <find_volume+0x238>
 80075d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075da:	789b      	ldrb	r3, [r3, #2]
 80075dc:	2b02      	cmp	r3, #2
 80075de:	d001      	beq.n	80075e4 <find_volume+0x238>
 80075e0:	230d      	movs	r3, #13
 80075e2:	e15c      	b.n	800789e <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80075e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075e6:	789b      	ldrb	r3, [r3, #2]
 80075e8:	461a      	mov	r2, r3
 80075ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80075ec:	fb02 f303 	mul.w	r3, r2, r3
 80075f0:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80075f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075f4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80075f8:	461a      	mov	r2, r3
 80075fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075fc:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80075fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007600:	895b      	ldrh	r3, [r3, #10]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d008      	beq.n	8007618 <find_volume+0x26c>
 8007606:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007608:	895b      	ldrh	r3, [r3, #10]
 800760a:	461a      	mov	r2, r3
 800760c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800760e:	895b      	ldrh	r3, [r3, #10]
 8007610:	3b01      	subs	r3, #1
 8007612:	4013      	ands	r3, r2
 8007614:	2b00      	cmp	r3, #0
 8007616:	d001      	beq.n	800761c <find_volume+0x270>
 8007618:	230d      	movs	r3, #13
 800761a:	e140      	b.n	800789e <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800761c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800761e:	3338      	adds	r3, #56	@ 0x38
 8007620:	3311      	adds	r3, #17
 8007622:	4618      	mov	r0, r3
 8007624:	f7fd ff68 	bl	80054f8 <ld_word>
 8007628:	4603      	mov	r3, r0
 800762a:	461a      	mov	r2, r3
 800762c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800762e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8007630:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007632:	891b      	ldrh	r3, [r3, #8]
 8007634:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007636:	8992      	ldrh	r2, [r2, #12]
 8007638:	0952      	lsrs	r2, r2, #5
 800763a:	b292      	uxth	r2, r2
 800763c:	fbb3 f1f2 	udiv	r1, r3, r2
 8007640:	fb01 f202 	mul.w	r2, r1, r2
 8007644:	1a9b      	subs	r3, r3, r2
 8007646:	b29b      	uxth	r3, r3
 8007648:	2b00      	cmp	r3, #0
 800764a:	d003      	beq.n	8007654 <find_volume+0x2a8>
 800764c:	230d      	movs	r3, #13
 800764e:	e126      	b.n	800789e <find_volume+0x4f2>
 8007650:	200002a0 	.word	0x200002a0

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8007654:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007656:	3338      	adds	r3, #56	@ 0x38
 8007658:	3313      	adds	r3, #19
 800765a:	4618      	mov	r0, r3
 800765c:	f7fd ff4c 	bl	80054f8 <ld_word>
 8007660:	4603      	mov	r3, r0
 8007662:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8007664:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007666:	2b00      	cmp	r3, #0
 8007668:	d106      	bne.n	8007678 <find_volume+0x2cc>
 800766a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800766c:	3338      	adds	r3, #56	@ 0x38
 800766e:	3320      	adds	r3, #32
 8007670:	4618      	mov	r0, r3
 8007672:	f7fd ff59 	bl	8005528 <ld_dword>
 8007676:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8007678:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800767a:	3338      	adds	r3, #56	@ 0x38
 800767c:	330e      	adds	r3, #14
 800767e:	4618      	mov	r0, r3
 8007680:	f7fd ff3a 	bl	80054f8 <ld_word>
 8007684:	4603      	mov	r3, r0
 8007686:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8007688:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800768a:	2b00      	cmp	r3, #0
 800768c:	d101      	bne.n	8007692 <find_volume+0x2e6>
 800768e:	230d      	movs	r3, #13
 8007690:	e105      	b.n	800789e <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8007692:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8007694:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007696:	4413      	add	r3, r2
 8007698:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800769a:	8911      	ldrh	r1, [r2, #8]
 800769c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800769e:	8992      	ldrh	r2, [r2, #12]
 80076a0:	0952      	lsrs	r2, r2, #5
 80076a2:	b292      	uxth	r2, r2
 80076a4:	fbb1 f2f2 	udiv	r2, r1, r2
 80076a8:	b292      	uxth	r2, r2
 80076aa:	4413      	add	r3, r2
 80076ac:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80076ae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80076b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076b2:	429a      	cmp	r2, r3
 80076b4:	d201      	bcs.n	80076ba <find_volume+0x30e>
 80076b6:	230d      	movs	r3, #13
 80076b8:	e0f1      	b.n	800789e <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80076ba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80076bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076be:	1ad3      	subs	r3, r2, r3
 80076c0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80076c2:	8952      	ldrh	r2, [r2, #10]
 80076c4:	fbb3 f3f2 	udiv	r3, r3, r2
 80076c8:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80076ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d101      	bne.n	80076d4 <find_volume+0x328>
 80076d0:	230d      	movs	r3, #13
 80076d2:	e0e4      	b.n	800789e <find_volume+0x4f2>
		fmt = FS_FAT32;
 80076d4:	2303      	movs	r3, #3
 80076d6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80076da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076dc:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 80076e0:	4293      	cmp	r3, r2
 80076e2:	d802      	bhi.n	80076ea <find_volume+0x33e>
 80076e4:	2302      	movs	r3, #2
 80076e6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80076ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076ec:	f640 72f5 	movw	r2, #4085	@ 0xff5
 80076f0:	4293      	cmp	r3, r2
 80076f2:	d802      	bhi.n	80076fa <find_volume+0x34e>
 80076f4:	2301      	movs	r3, #1
 80076f6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80076fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076fc:	1c9a      	adds	r2, r3, #2
 80076fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007700:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8007702:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007704:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007706:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8007708:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800770a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800770c:	441a      	add	r2, r3
 800770e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007710:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8007712:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007714:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007716:	441a      	add	r2, r3
 8007718:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800771a:	631a      	str	r2, [r3, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 800771c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007720:	2b03      	cmp	r3, #3
 8007722:	d11e      	bne.n	8007762 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8007724:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007726:	3338      	adds	r3, #56	@ 0x38
 8007728:	332a      	adds	r3, #42	@ 0x2a
 800772a:	4618      	mov	r0, r3
 800772c:	f7fd fee4 	bl	80054f8 <ld_word>
 8007730:	4603      	mov	r3, r0
 8007732:	2b00      	cmp	r3, #0
 8007734:	d001      	beq.n	800773a <find_volume+0x38e>
 8007736:	230d      	movs	r3, #13
 8007738:	e0b1      	b.n	800789e <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800773a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800773c:	891b      	ldrh	r3, [r3, #8]
 800773e:	2b00      	cmp	r3, #0
 8007740:	d001      	beq.n	8007746 <find_volume+0x39a>
 8007742:	230d      	movs	r3, #13
 8007744:	e0ab      	b.n	800789e <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8007746:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007748:	3338      	adds	r3, #56	@ 0x38
 800774a:	332c      	adds	r3, #44	@ 0x2c
 800774c:	4618      	mov	r0, r3
 800774e:	f7fd feeb 	bl	8005528 <ld_dword>
 8007752:	4602      	mov	r2, r0
 8007754:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007756:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8007758:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800775a:	69db      	ldr	r3, [r3, #28]
 800775c:	009b      	lsls	r3, r3, #2
 800775e:	647b      	str	r3, [r7, #68]	@ 0x44
 8007760:	e01f      	b.n	80077a2 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8007762:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007764:	891b      	ldrh	r3, [r3, #8]
 8007766:	2b00      	cmp	r3, #0
 8007768:	d101      	bne.n	800776e <find_volume+0x3c2>
 800776a:	230d      	movs	r3, #13
 800776c:	e097      	b.n	800789e <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800776e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007770:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007772:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007774:	441a      	add	r2, r3
 8007776:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007778:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800777a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800777e:	2b02      	cmp	r3, #2
 8007780:	d103      	bne.n	800778a <find_volume+0x3de>
 8007782:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007784:	69db      	ldr	r3, [r3, #28]
 8007786:	005b      	lsls	r3, r3, #1
 8007788:	e00a      	b.n	80077a0 <find_volume+0x3f4>
 800778a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800778c:	69da      	ldr	r2, [r3, #28]
 800778e:	4613      	mov	r3, r2
 8007790:	005b      	lsls	r3, r3, #1
 8007792:	4413      	add	r3, r2
 8007794:	085a      	lsrs	r2, r3, #1
 8007796:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007798:	69db      	ldr	r3, [r3, #28]
 800779a:	f003 0301 	and.w	r3, r3, #1
 800779e:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80077a0:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80077a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077a4:	6a1a      	ldr	r2, [r3, #32]
 80077a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077a8:	899b      	ldrh	r3, [r3, #12]
 80077aa:	4619      	mov	r1, r3
 80077ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80077ae:	440b      	add	r3, r1
 80077b0:	3b01      	subs	r3, #1
 80077b2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80077b4:	8989      	ldrh	r1, [r1, #12]
 80077b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80077ba:	429a      	cmp	r2, r3
 80077bc:	d201      	bcs.n	80077c2 <find_volume+0x416>
 80077be:	230d      	movs	r3, #13
 80077c0:	e06d      	b.n	800789e <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80077c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077c4:	f04f 32ff 	mov.w	r2, #4294967295
 80077c8:	619a      	str	r2, [r3, #24]
 80077ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077cc:	699a      	ldr	r2, [r3, #24]
 80077ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077d0:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 80077d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077d4:	2280      	movs	r2, #128	@ 0x80
 80077d6:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80077d8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80077dc:	2b03      	cmp	r3, #3
 80077de:	d149      	bne.n	8007874 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80077e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077e2:	3338      	adds	r3, #56	@ 0x38
 80077e4:	3330      	adds	r3, #48	@ 0x30
 80077e6:	4618      	mov	r0, r3
 80077e8:	f7fd fe86 	bl	80054f8 <ld_word>
 80077ec:	4603      	mov	r3, r0
 80077ee:	2b01      	cmp	r3, #1
 80077f0:	d140      	bne.n	8007874 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 80077f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80077f4:	3301      	adds	r3, #1
 80077f6:	4619      	mov	r1, r3
 80077f8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80077fa:	f7fe f92d 	bl	8005a58 <move_window>
 80077fe:	4603      	mov	r3, r0
 8007800:	2b00      	cmp	r3, #0
 8007802:	d137      	bne.n	8007874 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8007804:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007806:	2200      	movs	r2, #0
 8007808:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800780a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800780c:	3338      	adds	r3, #56	@ 0x38
 800780e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8007812:	4618      	mov	r0, r3
 8007814:	f7fd fe70 	bl	80054f8 <ld_word>
 8007818:	4603      	mov	r3, r0
 800781a:	461a      	mov	r2, r3
 800781c:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8007820:	429a      	cmp	r2, r3
 8007822:	d127      	bne.n	8007874 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8007824:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007826:	3338      	adds	r3, #56	@ 0x38
 8007828:	4618      	mov	r0, r3
 800782a:	f7fd fe7d 	bl	8005528 <ld_dword>
 800782e:	4603      	mov	r3, r0
 8007830:	4a1d      	ldr	r2, [pc, #116]	@ (80078a8 <find_volume+0x4fc>)
 8007832:	4293      	cmp	r3, r2
 8007834:	d11e      	bne.n	8007874 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8007836:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007838:	3338      	adds	r3, #56	@ 0x38
 800783a:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800783e:	4618      	mov	r0, r3
 8007840:	f7fd fe72 	bl	8005528 <ld_dword>
 8007844:	4603      	mov	r3, r0
 8007846:	4a19      	ldr	r2, [pc, #100]	@ (80078ac <find_volume+0x500>)
 8007848:	4293      	cmp	r3, r2
 800784a:	d113      	bne.n	8007874 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800784c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800784e:	3338      	adds	r3, #56	@ 0x38
 8007850:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8007854:	4618      	mov	r0, r3
 8007856:	f7fd fe67 	bl	8005528 <ld_dword>
 800785a:	4602      	mov	r2, r0
 800785c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800785e:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8007860:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007862:	3338      	adds	r3, #56	@ 0x38
 8007864:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8007868:	4618      	mov	r0, r3
 800786a:	f7fd fe5d 	bl	8005528 <ld_dword>
 800786e:	4602      	mov	r2, r0
 8007870:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007872:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8007874:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007876:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800787a:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800787c:	4b0c      	ldr	r3, [pc, #48]	@ (80078b0 <find_volume+0x504>)
 800787e:	881b      	ldrh	r3, [r3, #0]
 8007880:	3301      	adds	r3, #1
 8007882:	b29a      	uxth	r2, r3
 8007884:	4b0a      	ldr	r3, [pc, #40]	@ (80078b0 <find_volume+0x504>)
 8007886:	801a      	strh	r2, [r3, #0]
 8007888:	4b09      	ldr	r3, [pc, #36]	@ (80078b0 <find_volume+0x504>)
 800788a:	881a      	ldrh	r2, [r3, #0]
 800788c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800788e:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8007890:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007892:	4a08      	ldr	r2, [pc, #32]	@ (80078b4 <find_volume+0x508>)
 8007894:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8007896:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007898:	f7fe f876 	bl	8005988 <clear_lock>
#endif
	return FR_OK;
 800789c:	2300      	movs	r3, #0
}
 800789e:	4618      	mov	r0, r3
 80078a0:	3758      	adds	r7, #88	@ 0x58
 80078a2:	46bd      	mov	sp, r7
 80078a4:	bd80      	pop	{r7, pc}
 80078a6:	bf00      	nop
 80078a8:	41615252 	.word	0x41615252
 80078ac:	61417272 	.word	0x61417272
 80078b0:	200002a4 	.word	0x200002a4
 80078b4:	200002c8 	.word	0x200002c8

080078b8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b084      	sub	sp, #16
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
 80078c0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80078c2:	2309      	movs	r3, #9
 80078c4:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d01c      	beq.n	8007906 <validate+0x4e>
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d018      	beq.n	8007906 <validate+0x4e>
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	781b      	ldrb	r3, [r3, #0]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d013      	beq.n	8007906 <validate+0x4e>
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	889a      	ldrh	r2, [r3, #4]
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	88db      	ldrh	r3, [r3, #6]
 80078e8:	429a      	cmp	r2, r3
 80078ea:	d10c      	bne.n	8007906 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	785b      	ldrb	r3, [r3, #1]
 80078f2:	4618      	mov	r0, r3
 80078f4:	f7fd fd60 	bl	80053b8 <disk_status>
 80078f8:	4603      	mov	r3, r0
 80078fa:	f003 0301 	and.w	r3, r3, #1
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d101      	bne.n	8007906 <validate+0x4e>
			res = FR_OK;
 8007902:	2300      	movs	r3, #0
 8007904:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8007906:	7bfb      	ldrb	r3, [r7, #15]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d102      	bne.n	8007912 <validate+0x5a>
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	e000      	b.n	8007914 <validate+0x5c>
 8007912:	2300      	movs	r3, #0
 8007914:	683a      	ldr	r2, [r7, #0]
 8007916:	6013      	str	r3, [r2, #0]
	return res;
 8007918:	7bfb      	ldrb	r3, [r7, #15]
}
 800791a:	4618      	mov	r0, r3
 800791c:	3710      	adds	r7, #16
 800791e:	46bd      	mov	sp, r7
 8007920:	bd80      	pop	{r7, pc}
	...

08007924 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8007924:	b580      	push	{r7, lr}
 8007926:	b088      	sub	sp, #32
 8007928:	af00      	add	r7, sp, #0
 800792a:	60f8      	str	r0, [r7, #12]
 800792c:	60b9      	str	r1, [r7, #8]
 800792e:	4613      	mov	r3, r2
 8007930:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8007932:	68bb      	ldr	r3, [r7, #8]
 8007934:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8007936:	f107 0310 	add.w	r3, r7, #16
 800793a:	4618      	mov	r0, r3
 800793c:	f7ff fc9c 	bl	8007278 <get_ldnumber>
 8007940:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8007942:	69fb      	ldr	r3, [r7, #28]
 8007944:	2b00      	cmp	r3, #0
 8007946:	da01      	bge.n	800794c <f_mount+0x28>
 8007948:	230b      	movs	r3, #11
 800794a:	e02b      	b.n	80079a4 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800794c:	4a17      	ldr	r2, [pc, #92]	@ (80079ac <f_mount+0x88>)
 800794e:	69fb      	ldr	r3, [r7, #28]
 8007950:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007954:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8007956:	69bb      	ldr	r3, [r7, #24]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d005      	beq.n	8007968 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800795c:	69b8      	ldr	r0, [r7, #24]
 800795e:	f7fe f813 	bl	8005988 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8007962:	69bb      	ldr	r3, [r7, #24]
 8007964:	2200      	movs	r2, #0
 8007966:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	2b00      	cmp	r3, #0
 800796c:	d002      	beq.n	8007974 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	2200      	movs	r2, #0
 8007972:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8007974:	68fa      	ldr	r2, [r7, #12]
 8007976:	490d      	ldr	r1, [pc, #52]	@ (80079ac <f_mount+0x88>)
 8007978:	69fb      	ldr	r3, [r7, #28]
 800797a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d002      	beq.n	800798a <f_mount+0x66>
 8007984:	79fb      	ldrb	r3, [r7, #7]
 8007986:	2b01      	cmp	r3, #1
 8007988:	d001      	beq.n	800798e <f_mount+0x6a>
 800798a:	2300      	movs	r3, #0
 800798c:	e00a      	b.n	80079a4 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800798e:	f107 010c 	add.w	r1, r7, #12
 8007992:	f107 0308 	add.w	r3, r7, #8
 8007996:	2200      	movs	r2, #0
 8007998:	4618      	mov	r0, r3
 800799a:	f7ff fd07 	bl	80073ac <find_volume>
 800799e:	4603      	mov	r3, r0
 80079a0:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80079a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80079a4:	4618      	mov	r0, r3
 80079a6:	3720      	adds	r7, #32
 80079a8:	46bd      	mov	sp, r7
 80079aa:	bd80      	pop	{r7, pc}
 80079ac:	200002a0 	.word	0x200002a0

080079b0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80079b0:	b580      	push	{r7, lr}
 80079b2:	b09a      	sub	sp, #104	@ 0x68
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	60f8      	str	r0, [r7, #12]
 80079b8:	60b9      	str	r1, [r7, #8]
 80079ba:	4613      	mov	r3, r2
 80079bc:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d101      	bne.n	80079c8 <f_open+0x18>
 80079c4:	2309      	movs	r3, #9
 80079c6:	e1b7      	b.n	8007d38 <f_open+0x388>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80079c8:	79fb      	ldrb	r3, [r7, #7]
 80079ca:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80079ce:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80079d0:	79fa      	ldrb	r2, [r7, #7]
 80079d2:	f107 0114 	add.w	r1, r7, #20
 80079d6:	f107 0308 	add.w	r3, r7, #8
 80079da:	4618      	mov	r0, r3
 80079dc:	f7ff fce6 	bl	80073ac <find_volume>
 80079e0:	4603      	mov	r3, r0
 80079e2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 80079e6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	f040 819b 	bne.w	8007d26 <f_open+0x376>
		dj.obj.fs = fs;
 80079f0:	697b      	ldr	r3, [r7, #20]
 80079f2:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80079f4:	68ba      	ldr	r2, [r7, #8]
 80079f6:	f107 0318 	add.w	r3, r7, #24
 80079fa:	4611      	mov	r1, r2
 80079fc:	4618      	mov	r0, r3
 80079fe:	f7ff fbc5 	bl	800718c <follow_path>
 8007a02:	4603      	mov	r3, r0
 8007a04:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8007a08:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d118      	bne.n	8007a42 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8007a10:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8007a14:	b25b      	sxtb	r3, r3
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	da03      	bge.n	8007a22 <f_open+0x72>
				res = FR_INVALID_NAME;
 8007a1a:	2306      	movs	r3, #6
 8007a1c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8007a20:	e00f      	b.n	8007a42 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007a22:	79fb      	ldrb	r3, [r7, #7]
 8007a24:	2b01      	cmp	r3, #1
 8007a26:	bf8c      	ite	hi
 8007a28:	2301      	movhi	r3, #1
 8007a2a:	2300      	movls	r3, #0
 8007a2c:	b2db      	uxtb	r3, r3
 8007a2e:	461a      	mov	r2, r3
 8007a30:	f107 0318 	add.w	r3, r7, #24
 8007a34:	4611      	mov	r1, r2
 8007a36:	4618      	mov	r0, r3
 8007a38:	f7fd fe5e 	bl	80056f8 <chk_lock>
 8007a3c:	4603      	mov	r3, r0
 8007a3e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8007a42:	79fb      	ldrb	r3, [r7, #7]
 8007a44:	f003 031c 	and.w	r3, r3, #28
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d07f      	beq.n	8007b4c <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 8007a4c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d017      	beq.n	8007a84 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8007a54:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007a58:	2b04      	cmp	r3, #4
 8007a5a:	d10e      	bne.n	8007a7a <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8007a5c:	f7fd fea8 	bl	80057b0 <enq_lock>
 8007a60:	4603      	mov	r3, r0
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d006      	beq.n	8007a74 <f_open+0xc4>
 8007a66:	f107 0318 	add.w	r3, r7, #24
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	f7ff f800 	bl	8006a70 <dir_register>
 8007a70:	4603      	mov	r3, r0
 8007a72:	e000      	b.n	8007a76 <f_open+0xc6>
 8007a74:	2312      	movs	r3, #18
 8007a76:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8007a7a:	79fb      	ldrb	r3, [r7, #7]
 8007a7c:	f043 0308 	orr.w	r3, r3, #8
 8007a80:	71fb      	strb	r3, [r7, #7]
 8007a82:	e010      	b.n	8007aa6 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8007a84:	7fbb      	ldrb	r3, [r7, #30]
 8007a86:	f003 0311 	and.w	r3, r3, #17
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d003      	beq.n	8007a96 <f_open+0xe6>
					res = FR_DENIED;
 8007a8e:	2307      	movs	r3, #7
 8007a90:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8007a94:	e007      	b.n	8007aa6 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8007a96:	79fb      	ldrb	r3, [r7, #7]
 8007a98:	f003 0304 	and.w	r3, r3, #4
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d002      	beq.n	8007aa6 <f_open+0xf6>
 8007aa0:	2308      	movs	r3, #8
 8007aa2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8007aa6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d168      	bne.n	8007b80 <f_open+0x1d0>
 8007aae:	79fb      	ldrb	r3, [r7, #7]
 8007ab0:	f003 0308 	and.w	r3, r3, #8
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d063      	beq.n	8007b80 <f_open+0x1d0>
				dw = GET_FATTIME();
 8007ab8:	f7fc fe84 	bl	80047c4 <get_fattime>
 8007abc:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8007abe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ac0:	330e      	adds	r3, #14
 8007ac2:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	f7fd fd6d 	bl	80055a4 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8007aca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007acc:	3316      	adds	r3, #22
 8007ace:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	f7fd fd67 	bl	80055a4 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8007ad6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ad8:	330b      	adds	r3, #11
 8007ada:	2220      	movs	r2, #32
 8007adc:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8007ade:	697b      	ldr	r3, [r7, #20]
 8007ae0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007ae2:	4611      	mov	r1, r2
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	f7fe fd3c 	bl	8006562 <ld_clust>
 8007aea:	6578      	str	r0, [r7, #84]	@ 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8007aec:	697b      	ldr	r3, [r7, #20]
 8007aee:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007af0:	2200      	movs	r2, #0
 8007af2:	4618      	mov	r0, r3
 8007af4:	f7fe fd54 	bl	80065a0 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8007af8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007afa:	331c      	adds	r3, #28
 8007afc:	2100      	movs	r1, #0
 8007afe:	4618      	mov	r0, r3
 8007b00:	f7fd fd50 	bl	80055a4 <st_dword>
					fs->wflag = 1;
 8007b04:	697b      	ldr	r3, [r7, #20]
 8007b06:	2201      	movs	r2, #1
 8007b08:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8007b0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d037      	beq.n	8007b80 <f_open+0x1d0>
						dw = fs->winsect;
 8007b10:	697b      	ldr	r3, [r7, #20]
 8007b12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b14:	65bb      	str	r3, [r7, #88]	@ 0x58
						res = remove_chain(&dj.obj, cl, 0);
 8007b16:	f107 0318 	add.w	r3, r7, #24
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007b1e:	4618      	mov	r0, r3
 8007b20:	f7fe fa44 	bl	8005fac <remove_chain>
 8007b24:	4603      	mov	r3, r0
 8007b26:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 8007b2a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d126      	bne.n	8007b80 <f_open+0x1d0>
							res = move_window(fs, dw);
 8007b32:	697b      	ldr	r3, [r7, #20]
 8007b34:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8007b36:	4618      	mov	r0, r3
 8007b38:	f7fd ff8e 	bl	8005a58 <move_window>
 8007b3c:	4603      	mov	r3, r0
 8007b3e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8007b42:	697b      	ldr	r3, [r7, #20]
 8007b44:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007b46:	3a01      	subs	r2, #1
 8007b48:	615a      	str	r2, [r3, #20]
 8007b4a:	e019      	b.n	8007b80 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8007b4c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d115      	bne.n	8007b80 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8007b54:	7fbb      	ldrb	r3, [r7, #30]
 8007b56:	f003 0310 	and.w	r3, r3, #16
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d003      	beq.n	8007b66 <f_open+0x1b6>
					res = FR_NO_FILE;
 8007b5e:	2304      	movs	r3, #4
 8007b60:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8007b64:	e00c      	b.n	8007b80 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8007b66:	79fb      	ldrb	r3, [r7, #7]
 8007b68:	f003 0302 	and.w	r3, r3, #2
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d007      	beq.n	8007b80 <f_open+0x1d0>
 8007b70:	7fbb      	ldrb	r3, [r7, #30]
 8007b72:	f003 0301 	and.w	r3, r3, #1
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d002      	beq.n	8007b80 <f_open+0x1d0>
						res = FR_DENIED;
 8007b7a:	2307      	movs	r3, #7
 8007b7c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8007b80:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d126      	bne.n	8007bd6 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8007b88:	79fb      	ldrb	r3, [r7, #7]
 8007b8a:	f003 0308 	and.w	r3, r3, #8
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d003      	beq.n	8007b9a <f_open+0x1ea>
				mode |= FA_MODIFIED;
 8007b92:	79fb      	ldrb	r3, [r7, #7]
 8007b94:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007b98:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8007b9a:	697b      	ldr	r3, [r7, #20]
 8007b9c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8007ba2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007ba8:	79fb      	ldrb	r3, [r7, #7]
 8007baa:	2b01      	cmp	r3, #1
 8007bac:	bf8c      	ite	hi
 8007bae:	2301      	movhi	r3, #1
 8007bb0:	2300      	movls	r3, #0
 8007bb2:	b2db      	uxtb	r3, r3
 8007bb4:	461a      	mov	r2, r3
 8007bb6:	f107 0318 	add.w	r3, r7, #24
 8007bba:	4611      	mov	r1, r2
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	f7fd fe19 	bl	80057f4 <inc_lock>
 8007bc2:	4602      	mov	r2, r0
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	691b      	ldr	r3, [r3, #16]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d102      	bne.n	8007bd6 <f_open+0x226>
 8007bd0:	2302      	movs	r3, #2
 8007bd2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8007bd6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	f040 80a3 	bne.w	8007d26 <f_open+0x376>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8007be0:	697b      	ldr	r3, [r7, #20]
 8007be2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007be4:	4611      	mov	r1, r2
 8007be6:	4618      	mov	r0, r3
 8007be8:	f7fe fcbb 	bl	8006562 <ld_clust>
 8007bec:	4602      	mov	r2, r0
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8007bf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bf4:	331c      	adds	r3, #28
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	f7fd fc96 	bl	8005528 <ld_dword>
 8007bfc:	4602      	mov	r2, r0
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	2200      	movs	r2, #0
 8007c06:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8007c08:	697a      	ldr	r2, [r7, #20]
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8007c0e:	697b      	ldr	r3, [r7, #20]
 8007c10:	88da      	ldrh	r2, [r3, #6]
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	79fa      	ldrb	r2, [r7, #7]
 8007c1a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	2200      	movs	r2, #0
 8007c20:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	2200      	movs	r2, #0
 8007c26:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	3330      	adds	r3, #48	@ 0x30
 8007c32:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8007c36:	2100      	movs	r1, #0
 8007c38:	4618      	mov	r0, r3
 8007c3a:	f7fd fd00 	bl	800563e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8007c3e:	79fb      	ldrb	r3, [r7, #7]
 8007c40:	f003 0320 	and.w	r3, r3, #32
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d06e      	beq.n	8007d26 <f_open+0x376>
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	68db      	ldr	r3, [r3, #12]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d06a      	beq.n	8007d26 <f_open+0x376>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	68da      	ldr	r2, [r3, #12]
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8007c58:	697b      	ldr	r3, [r7, #20]
 8007c5a:	895b      	ldrh	r3, [r3, #10]
 8007c5c:	461a      	mov	r2, r3
 8007c5e:	697b      	ldr	r3, [r7, #20]
 8007c60:	899b      	ldrh	r3, [r3, #12]
 8007c62:	fb02 f303 	mul.w	r3, r2, r3
 8007c66:	653b      	str	r3, [r7, #80]	@ 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	689b      	ldr	r3, [r3, #8]
 8007c6c:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	68db      	ldr	r3, [r3, #12]
 8007c72:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007c74:	e016      	b.n	8007ca4 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	f7fd ffa9 	bl	8005bd2 <get_fat>
 8007c80:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8007c82:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007c84:	2b01      	cmp	r3, #1
 8007c86:	d802      	bhi.n	8007c8e <f_open+0x2de>
 8007c88:	2302      	movs	r3, #2
 8007c8a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8007c8e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007c90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c94:	d102      	bne.n	8007c9c <f_open+0x2ec>
 8007c96:	2301      	movs	r3, #1
 8007c98:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007c9c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8007c9e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007ca0:	1ad3      	subs	r3, r2, r3
 8007ca2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007ca4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d103      	bne.n	8007cb4 <f_open+0x304>
 8007cac:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8007cae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007cb0:	429a      	cmp	r2, r3
 8007cb2:	d8e0      	bhi.n	8007c76 <f_open+0x2c6>
				}
				fp->clust = clst;
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007cb8:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8007cba:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d131      	bne.n	8007d26 <f_open+0x376>
 8007cc2:	697b      	ldr	r3, [r7, #20]
 8007cc4:	899b      	ldrh	r3, [r3, #12]
 8007cc6:	461a      	mov	r2, r3
 8007cc8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007cca:	fbb3 f1f2 	udiv	r1, r3, r2
 8007cce:	fb01 f202 	mul.w	r2, r1, r2
 8007cd2:	1a9b      	subs	r3, r3, r2
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d026      	beq.n	8007d26 <f_open+0x376>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8007cd8:	697b      	ldr	r3, [r7, #20]
 8007cda:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8007cdc:	4618      	mov	r0, r3
 8007cde:	f7fd ff59 	bl	8005b94 <clust2sect>
 8007ce2:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8007ce4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d103      	bne.n	8007cf2 <f_open+0x342>
						res = FR_INT_ERR;
 8007cea:	2302      	movs	r3, #2
 8007cec:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8007cf0:	e019      	b.n	8007d26 <f_open+0x376>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8007cf2:	697b      	ldr	r3, [r7, #20]
 8007cf4:	899b      	ldrh	r3, [r3, #12]
 8007cf6:	461a      	mov	r2, r3
 8007cf8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007cfa:	fbb3 f2f2 	udiv	r2, r3, r2
 8007cfe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007d00:	441a      	add	r2, r3
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8007d06:	697b      	ldr	r3, [r7, #20]
 8007d08:	7858      	ldrb	r0, [r3, #1]
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	6a1a      	ldr	r2, [r3, #32]
 8007d14:	2301      	movs	r3, #1
 8007d16:	f7fd fb91 	bl	800543c <disk_read>
 8007d1a:	4603      	mov	r3, r0
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d002      	beq.n	8007d26 <f_open+0x376>
 8007d20:	2301      	movs	r3, #1
 8007d22:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8007d26:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d002      	beq.n	8007d34 <f_open+0x384>
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	2200      	movs	r2, #0
 8007d32:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8007d34:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8007d38:	4618      	mov	r0, r3
 8007d3a:	3768      	adds	r7, #104	@ 0x68
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	bd80      	pop	{r7, pc}

08007d40 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8007d40:	b580      	push	{r7, lr}
 8007d42:	b08c      	sub	sp, #48	@ 0x30
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	60f8      	str	r0, [r7, #12]
 8007d48:	60b9      	str	r1, [r7, #8]
 8007d4a:	607a      	str	r2, [r7, #4]
 8007d4c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8007d4e:	68bb      	ldr	r3, [r7, #8]
 8007d50:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8007d52:	683b      	ldr	r3, [r7, #0]
 8007d54:	2200      	movs	r2, #0
 8007d56:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	f107 0210 	add.w	r2, r7, #16
 8007d5e:	4611      	mov	r1, r2
 8007d60:	4618      	mov	r0, r3
 8007d62:	f7ff fda9 	bl	80078b8 <validate>
 8007d66:	4603      	mov	r3, r0
 8007d68:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8007d6c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d107      	bne.n	8007d84 <f_write+0x44>
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	7d5b      	ldrb	r3, [r3, #21]
 8007d78:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8007d7c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d002      	beq.n	8007d8a <f_write+0x4a>
 8007d84:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007d88:	e16a      	b.n	8008060 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	7d1b      	ldrb	r3, [r3, #20]
 8007d8e:	f003 0302 	and.w	r3, r3, #2
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d101      	bne.n	8007d9a <f_write+0x5a>
 8007d96:	2307      	movs	r3, #7
 8007d98:	e162      	b.n	8008060 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	699a      	ldr	r2, [r3, #24]
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	441a      	add	r2, r3
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	699b      	ldr	r3, [r3, #24]
 8007da6:	429a      	cmp	r2, r3
 8007da8:	f080 814c 	bcs.w	8008044 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	699b      	ldr	r3, [r3, #24]
 8007db0:	43db      	mvns	r3, r3
 8007db2:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8007db4:	e146      	b.n	8008044 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	699b      	ldr	r3, [r3, #24]
 8007dba:	693a      	ldr	r2, [r7, #16]
 8007dbc:	8992      	ldrh	r2, [r2, #12]
 8007dbe:	fbb3 f1f2 	udiv	r1, r3, r2
 8007dc2:	fb01 f202 	mul.w	r2, r1, r2
 8007dc6:	1a9b      	subs	r3, r3, r2
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	f040 80f1 	bne.w	8007fb0 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	699b      	ldr	r3, [r3, #24]
 8007dd2:	693a      	ldr	r2, [r7, #16]
 8007dd4:	8992      	ldrh	r2, [r2, #12]
 8007dd6:	fbb3 f3f2 	udiv	r3, r3, r2
 8007dda:	693a      	ldr	r2, [r7, #16]
 8007ddc:	8952      	ldrh	r2, [r2, #10]
 8007dde:	3a01      	subs	r2, #1
 8007de0:	4013      	ands	r3, r2
 8007de2:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8007de4:	69bb      	ldr	r3, [r7, #24]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d143      	bne.n	8007e72 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	699b      	ldr	r3, [r3, #24]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d10c      	bne.n	8007e0c <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	689b      	ldr	r3, [r3, #8]
 8007df6:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8007df8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d11a      	bne.n	8007e34 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	2100      	movs	r1, #0
 8007e02:	4618      	mov	r0, r3
 8007e04:	f7fe f937 	bl	8006076 <create_chain>
 8007e08:	62b8      	str	r0, [r7, #40]	@ 0x28
 8007e0a:	e013      	b.n	8007e34 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d007      	beq.n	8007e24 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	699b      	ldr	r3, [r3, #24]
 8007e18:	4619      	mov	r1, r3
 8007e1a:	68f8      	ldr	r0, [r7, #12]
 8007e1c:	f7fe f9c3 	bl	80061a6 <clmt_clust>
 8007e20:	62b8      	str	r0, [r7, #40]	@ 0x28
 8007e22:	e007      	b.n	8007e34 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8007e24:	68fa      	ldr	r2, [r7, #12]
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	69db      	ldr	r3, [r3, #28]
 8007e2a:	4619      	mov	r1, r3
 8007e2c:	4610      	mov	r0, r2
 8007e2e:	f7fe f922 	bl	8006076 <create_chain>
 8007e32:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8007e34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	f000 8109 	beq.w	800804e <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8007e3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e3e:	2b01      	cmp	r3, #1
 8007e40:	d104      	bne.n	8007e4c <f_write+0x10c>
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	2202      	movs	r2, #2
 8007e46:	755a      	strb	r2, [r3, #21]
 8007e48:	2302      	movs	r3, #2
 8007e4a:	e109      	b.n	8008060 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007e4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e52:	d104      	bne.n	8007e5e <f_write+0x11e>
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	2201      	movs	r2, #1
 8007e58:	755a      	strb	r2, [r3, #21]
 8007e5a:	2301      	movs	r3, #1
 8007e5c:	e100      	b.n	8008060 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007e62:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	689b      	ldr	r3, [r3, #8]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d102      	bne.n	8007e72 <f_write+0x132>
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007e70:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	7d1b      	ldrb	r3, [r3, #20]
 8007e76:	b25b      	sxtb	r3, r3
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	da18      	bge.n	8007eae <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007e7c:	693b      	ldr	r3, [r7, #16]
 8007e7e:	7858      	ldrb	r0, [r3, #1]
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	6a1a      	ldr	r2, [r3, #32]
 8007e8a:	2301      	movs	r3, #1
 8007e8c:	f7fd faf6 	bl	800547c <disk_write>
 8007e90:	4603      	mov	r3, r0
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d004      	beq.n	8007ea0 <f_write+0x160>
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	2201      	movs	r2, #1
 8007e9a:	755a      	strb	r2, [r3, #21]
 8007e9c:	2301      	movs	r3, #1
 8007e9e:	e0df      	b.n	8008060 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	7d1b      	ldrb	r3, [r3, #20]
 8007ea4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007ea8:	b2da      	uxtb	r2, r3
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8007eae:	693a      	ldr	r2, [r7, #16]
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	69db      	ldr	r3, [r3, #28]
 8007eb4:	4619      	mov	r1, r3
 8007eb6:	4610      	mov	r0, r2
 8007eb8:	f7fd fe6c 	bl	8005b94 <clust2sect>
 8007ebc:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8007ebe:	697b      	ldr	r3, [r7, #20]
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d104      	bne.n	8007ece <f_write+0x18e>
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	2202      	movs	r2, #2
 8007ec8:	755a      	strb	r2, [r3, #21]
 8007eca:	2302      	movs	r3, #2
 8007ecc:	e0c8      	b.n	8008060 <f_write+0x320>
			sect += csect;
 8007ece:	697a      	ldr	r2, [r7, #20]
 8007ed0:	69bb      	ldr	r3, [r7, #24]
 8007ed2:	4413      	add	r3, r2
 8007ed4:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8007ed6:	693b      	ldr	r3, [r7, #16]
 8007ed8:	899b      	ldrh	r3, [r3, #12]
 8007eda:	461a      	mov	r2, r3
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	fbb3 f3f2 	udiv	r3, r3, r2
 8007ee2:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8007ee4:	6a3b      	ldr	r3, [r7, #32]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d043      	beq.n	8007f72 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8007eea:	69ba      	ldr	r2, [r7, #24]
 8007eec:	6a3b      	ldr	r3, [r7, #32]
 8007eee:	4413      	add	r3, r2
 8007ef0:	693a      	ldr	r2, [r7, #16]
 8007ef2:	8952      	ldrh	r2, [r2, #10]
 8007ef4:	4293      	cmp	r3, r2
 8007ef6:	d905      	bls.n	8007f04 <f_write+0x1c4>
					cc = fs->csize - csect;
 8007ef8:	693b      	ldr	r3, [r7, #16]
 8007efa:	895b      	ldrh	r3, [r3, #10]
 8007efc:	461a      	mov	r2, r3
 8007efe:	69bb      	ldr	r3, [r7, #24]
 8007f00:	1ad3      	subs	r3, r2, r3
 8007f02:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007f04:	693b      	ldr	r3, [r7, #16]
 8007f06:	7858      	ldrb	r0, [r3, #1]
 8007f08:	6a3b      	ldr	r3, [r7, #32]
 8007f0a:	697a      	ldr	r2, [r7, #20]
 8007f0c:	69f9      	ldr	r1, [r7, #28]
 8007f0e:	f7fd fab5 	bl	800547c <disk_write>
 8007f12:	4603      	mov	r3, r0
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d004      	beq.n	8007f22 <f_write+0x1e2>
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	2201      	movs	r2, #1
 8007f1c:	755a      	strb	r2, [r3, #21]
 8007f1e:	2301      	movs	r3, #1
 8007f20:	e09e      	b.n	8008060 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	6a1a      	ldr	r2, [r3, #32]
 8007f26:	697b      	ldr	r3, [r7, #20]
 8007f28:	1ad3      	subs	r3, r2, r3
 8007f2a:	6a3a      	ldr	r2, [r7, #32]
 8007f2c:	429a      	cmp	r2, r3
 8007f2e:	d918      	bls.n	8007f62 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	6a1a      	ldr	r2, [r3, #32]
 8007f3a:	697b      	ldr	r3, [r7, #20]
 8007f3c:	1ad3      	subs	r3, r2, r3
 8007f3e:	693a      	ldr	r2, [r7, #16]
 8007f40:	8992      	ldrh	r2, [r2, #12]
 8007f42:	fb02 f303 	mul.w	r3, r2, r3
 8007f46:	69fa      	ldr	r2, [r7, #28]
 8007f48:	18d1      	adds	r1, r2, r3
 8007f4a:	693b      	ldr	r3, [r7, #16]
 8007f4c:	899b      	ldrh	r3, [r3, #12]
 8007f4e:	461a      	mov	r2, r3
 8007f50:	f7fd fb54 	bl	80055fc <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	7d1b      	ldrb	r3, [r3, #20]
 8007f58:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007f5c:	b2da      	uxtb	r2, r3
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8007f62:	693b      	ldr	r3, [r7, #16]
 8007f64:	899b      	ldrh	r3, [r3, #12]
 8007f66:	461a      	mov	r2, r3
 8007f68:	6a3b      	ldr	r3, [r7, #32]
 8007f6a:	fb02 f303 	mul.w	r3, r2, r3
 8007f6e:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 8007f70:	e04b      	b.n	800800a <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	6a1b      	ldr	r3, [r3, #32]
 8007f76:	697a      	ldr	r2, [r7, #20]
 8007f78:	429a      	cmp	r2, r3
 8007f7a:	d016      	beq.n	8007faa <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	699a      	ldr	r2, [r3, #24]
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8007f84:	429a      	cmp	r2, r3
 8007f86:	d210      	bcs.n	8007faa <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8007f88:	693b      	ldr	r3, [r7, #16]
 8007f8a:	7858      	ldrb	r0, [r3, #1]
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007f92:	2301      	movs	r3, #1
 8007f94:	697a      	ldr	r2, [r7, #20]
 8007f96:	f7fd fa51 	bl	800543c <disk_read>
 8007f9a:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d004      	beq.n	8007faa <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	2201      	movs	r2, #1
 8007fa4:	755a      	strb	r2, [r3, #21]
 8007fa6:	2301      	movs	r3, #1
 8007fa8:	e05a      	b.n	8008060 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	697a      	ldr	r2, [r7, #20]
 8007fae:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8007fb0:	693b      	ldr	r3, [r7, #16]
 8007fb2:	899b      	ldrh	r3, [r3, #12]
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	699b      	ldr	r3, [r3, #24]
 8007fba:	693a      	ldr	r2, [r7, #16]
 8007fbc:	8992      	ldrh	r2, [r2, #12]
 8007fbe:	fbb3 f1f2 	udiv	r1, r3, r2
 8007fc2:	fb01 f202 	mul.w	r2, r1, r2
 8007fc6:	1a9b      	subs	r3, r3, r2
 8007fc8:	1ac3      	subs	r3, r0, r3
 8007fca:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8007fcc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	429a      	cmp	r2, r3
 8007fd2:	d901      	bls.n	8007fd8 <f_write+0x298>
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	699b      	ldr	r3, [r3, #24]
 8007fe2:	693a      	ldr	r2, [r7, #16]
 8007fe4:	8992      	ldrh	r2, [r2, #12]
 8007fe6:	fbb3 f0f2 	udiv	r0, r3, r2
 8007fea:	fb00 f202 	mul.w	r2, r0, r2
 8007fee:	1a9b      	subs	r3, r3, r2
 8007ff0:	440b      	add	r3, r1
 8007ff2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007ff4:	69f9      	ldr	r1, [r7, #28]
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	f7fd fb00 	bl	80055fc <mem_cpy>
		fp->flag |= FA_DIRTY;
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	7d1b      	ldrb	r3, [r3, #20]
 8008000:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008004:	b2da      	uxtb	r2, r3
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800800a:	69fa      	ldr	r2, [r7, #28]
 800800c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800800e:	4413      	add	r3, r2
 8008010:	61fb      	str	r3, [r7, #28]
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	699a      	ldr	r2, [r3, #24]
 8008016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008018:	441a      	add	r2, r3
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	619a      	str	r2, [r3, #24]
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	68da      	ldr	r2, [r3, #12]
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	699b      	ldr	r3, [r3, #24]
 8008026:	429a      	cmp	r2, r3
 8008028:	bf38      	it	cc
 800802a:	461a      	movcc	r2, r3
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	60da      	str	r2, [r3, #12]
 8008030:	683b      	ldr	r3, [r7, #0]
 8008032:	681a      	ldr	r2, [r3, #0]
 8008034:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008036:	441a      	add	r2, r3
 8008038:	683b      	ldr	r3, [r7, #0]
 800803a:	601a      	str	r2, [r3, #0]
 800803c:	687a      	ldr	r2, [r7, #4]
 800803e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008040:	1ad3      	subs	r3, r2, r3
 8008042:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2b00      	cmp	r3, #0
 8008048:	f47f aeb5 	bne.w	8007db6 <f_write+0x76>
 800804c:	e000      	b.n	8008050 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800804e:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	7d1b      	ldrb	r3, [r3, #20]
 8008054:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008058:	b2da      	uxtb	r2, r3
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800805e:	2300      	movs	r3, #0
}
 8008060:	4618      	mov	r0, r3
 8008062:	3730      	adds	r7, #48	@ 0x30
 8008064:	46bd      	mov	sp, r7
 8008066:	bd80      	pop	{r7, pc}

08008068 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8008068:	b580      	push	{r7, lr}
 800806a:	b086      	sub	sp, #24
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	f107 0208 	add.w	r2, r7, #8
 8008076:	4611      	mov	r1, r2
 8008078:	4618      	mov	r0, r3
 800807a:	f7ff fc1d 	bl	80078b8 <validate>
 800807e:	4603      	mov	r3, r0
 8008080:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008082:	7dfb      	ldrb	r3, [r7, #23]
 8008084:	2b00      	cmp	r3, #0
 8008086:	d168      	bne.n	800815a <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	7d1b      	ldrb	r3, [r3, #20]
 800808c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008090:	2b00      	cmp	r3, #0
 8008092:	d062      	beq.n	800815a <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	7d1b      	ldrb	r3, [r3, #20]
 8008098:	b25b      	sxtb	r3, r3
 800809a:	2b00      	cmp	r3, #0
 800809c:	da15      	bge.n	80080ca <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800809e:	68bb      	ldr	r3, [r7, #8]
 80080a0:	7858      	ldrb	r0, [r3, #1]
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	6a1a      	ldr	r2, [r3, #32]
 80080ac:	2301      	movs	r3, #1
 80080ae:	f7fd f9e5 	bl	800547c <disk_write>
 80080b2:	4603      	mov	r3, r0
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d001      	beq.n	80080bc <f_sync+0x54>
 80080b8:	2301      	movs	r3, #1
 80080ba:	e04f      	b.n	800815c <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	7d1b      	ldrb	r3, [r3, #20]
 80080c0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80080c4:	b2da      	uxtb	r2, r3
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80080ca:	f7fc fb7b 	bl	80047c4 <get_fattime>
 80080ce:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80080d0:	68ba      	ldr	r2, [r7, #8]
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080d6:	4619      	mov	r1, r3
 80080d8:	4610      	mov	r0, r2
 80080da:	f7fd fcbd 	bl	8005a58 <move_window>
 80080de:	4603      	mov	r3, r0
 80080e0:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80080e2:	7dfb      	ldrb	r3, [r7, #23]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d138      	bne.n	800815a <f_sync+0xf2>
					dir = fp->dir_ptr;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080ec:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	330b      	adds	r3, #11
 80080f2:	781a      	ldrb	r2, [r3, #0]
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	330b      	adds	r3, #11
 80080f8:	f042 0220 	orr.w	r2, r2, #32
 80080fc:	b2d2      	uxtb	r2, r2
 80080fe:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	6818      	ldr	r0, [r3, #0]
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	689b      	ldr	r3, [r3, #8]
 8008108:	461a      	mov	r2, r3
 800810a:	68f9      	ldr	r1, [r7, #12]
 800810c:	f7fe fa48 	bl	80065a0 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	f103 021c 	add.w	r2, r3, #28
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	68db      	ldr	r3, [r3, #12]
 800811a:	4619      	mov	r1, r3
 800811c:	4610      	mov	r0, r2
 800811e:	f7fd fa41 	bl	80055a4 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	3316      	adds	r3, #22
 8008126:	6939      	ldr	r1, [r7, #16]
 8008128:	4618      	mov	r0, r3
 800812a:	f7fd fa3b 	bl	80055a4 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	3312      	adds	r3, #18
 8008132:	2100      	movs	r1, #0
 8008134:	4618      	mov	r0, r3
 8008136:	f7fd fa1a 	bl	800556e <st_word>
					fs->wflag = 1;
 800813a:	68bb      	ldr	r3, [r7, #8]
 800813c:	2201      	movs	r2, #1
 800813e:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8008140:	68bb      	ldr	r3, [r7, #8]
 8008142:	4618      	mov	r0, r3
 8008144:	f7fd fcb6 	bl	8005ab4 <sync_fs>
 8008148:	4603      	mov	r3, r0
 800814a:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	7d1b      	ldrb	r3, [r3, #20]
 8008150:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008154:	b2da      	uxtb	r2, r3
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800815a:	7dfb      	ldrb	r3, [r7, #23]
}
 800815c:	4618      	mov	r0, r3
 800815e:	3718      	adds	r7, #24
 8008160:	46bd      	mov	sp, r7
 8008162:	bd80      	pop	{r7, pc}

08008164 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8008164:	b580      	push	{r7, lr}
 8008166:	b084      	sub	sp, #16
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800816c:	6878      	ldr	r0, [r7, #4]
 800816e:	f7ff ff7b 	bl	8008068 <f_sync>
 8008172:	4603      	mov	r3, r0
 8008174:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8008176:	7bfb      	ldrb	r3, [r7, #15]
 8008178:	2b00      	cmp	r3, #0
 800817a:	d118      	bne.n	80081ae <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	f107 0208 	add.w	r2, r7, #8
 8008182:	4611      	mov	r1, r2
 8008184:	4618      	mov	r0, r3
 8008186:	f7ff fb97 	bl	80078b8 <validate>
 800818a:	4603      	mov	r3, r0
 800818c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800818e:	7bfb      	ldrb	r3, [r7, #15]
 8008190:	2b00      	cmp	r3, #0
 8008192:	d10c      	bne.n	80081ae <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	691b      	ldr	r3, [r3, #16]
 8008198:	4618      	mov	r0, r3
 800819a:	f7fd fbb9 	bl	8005910 <dec_lock>
 800819e:	4603      	mov	r3, r0
 80081a0:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80081a2:	7bfb      	ldrb	r3, [r7, #15]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d102      	bne.n	80081ae <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2200      	movs	r2, #0
 80081ac:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80081ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80081b0:	4618      	mov	r0, r3
 80081b2:	3710      	adds	r7, #16
 80081b4:	46bd      	mov	sp, r7
 80081b6:	bd80      	pop	{r7, pc}

080081b8 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b090      	sub	sp, #64	@ 0x40
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
 80081c0:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 80081c2:	f107 0108 	add.w	r1, r7, #8
 80081c6:	1d3b      	adds	r3, r7, #4
 80081c8:	2200      	movs	r2, #0
 80081ca:	4618      	mov	r0, r3
 80081cc:	f7ff f8ee 	bl	80073ac <find_volume>
 80081d0:	4603      	mov	r3, r0
 80081d2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) {
 80081d6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d11f      	bne.n	800821e <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80081de:	687a      	ldr	r2, [r7, #4]
 80081e0:	f107 0308 	add.w	r3, r7, #8
 80081e4:	4611      	mov	r1, r2
 80081e6:	4618      	mov	r0, r3
 80081e8:	f7fe ffd0 	bl	800718c <follow_path>
 80081ec:	4603      	mov	r3, r0
 80081ee:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
		if (res == FR_OK) {				/* Follow completed */
 80081f2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d111      	bne.n	800821e <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 80081fa:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80081fe:	b25b      	sxtb	r3, r3
 8008200:	2b00      	cmp	r3, #0
 8008202:	da03      	bge.n	800820c <f_stat+0x54>
				res = FR_INVALID_NAME;
 8008204:	2306      	movs	r3, #6
 8008206:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800820a:	e008      	b.n	800821e <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 800820c:	683b      	ldr	r3, [r7, #0]
 800820e:	2b00      	cmp	r3, #0
 8008210:	d005      	beq.n	800821e <f_stat+0x66>
 8008212:	f107 0308 	add.w	r3, r7, #8
 8008216:	6839      	ldr	r1, [r7, #0]
 8008218:	4618      	mov	r0, r3
 800821a:	f7fe fd21 	bl	8006c60 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 800821e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 8008222:	4618      	mov	r0, r3
 8008224:	3740      	adds	r7, #64	@ 0x40
 8008226:	46bd      	mov	sp, r7
 8008228:	bd80      	pop	{r7, pc}

0800822a <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800822a:	b580      	push	{r7, lr}
 800822c:	b092      	sub	sp, #72	@ 0x48
 800822e:	af00      	add	r7, sp, #0
 8008230:	60f8      	str	r0, [r7, #12]
 8008232:	60b9      	str	r1, [r7, #8]
 8008234:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8008236:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800823a:	f107 030c 	add.w	r3, r7, #12
 800823e:	2200      	movs	r2, #0
 8008240:	4618      	mov	r0, r3
 8008242:	f7ff f8b3 	bl	80073ac <find_volume>
 8008246:	4603      	mov	r3, r0
 8008248:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	if (res == FR_OK) {
 800824c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8008250:	2b00      	cmp	r3, #0
 8008252:	f040 8099 	bne.w	8008388 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 8008256:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800825c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800825e:	699a      	ldr	r2, [r3, #24]
 8008260:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008262:	69db      	ldr	r3, [r3, #28]
 8008264:	3b02      	subs	r3, #2
 8008266:	429a      	cmp	r2, r3
 8008268:	d804      	bhi.n	8008274 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 800826a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800826c:	699a      	ldr	r2, [r3, #24]
 800826e:	68bb      	ldr	r3, [r7, #8]
 8008270:	601a      	str	r2, [r3, #0]
 8008272:	e089      	b.n	8008388 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 8008274:	2300      	movs	r3, #0
 8008276:	643b      	str	r3, [r7, #64]	@ 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 8008278:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800827a:	781b      	ldrb	r3, [r3, #0]
 800827c:	2b01      	cmp	r3, #1
 800827e:	d128      	bne.n	80082d2 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 8008280:	2302      	movs	r3, #2
 8008282:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008284:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008286:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 8008288:	f107 0314 	add.w	r3, r7, #20
 800828c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800828e:	4618      	mov	r0, r3
 8008290:	f7fd fc9f 	bl	8005bd2 <get_fat>
 8008294:	62f8      	str	r0, [r7, #44]	@ 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8008296:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008298:	f1b3 3fff 	cmp.w	r3, #4294967295
 800829c:	d103      	bne.n	80082a6 <f_getfree+0x7c>
 800829e:	2301      	movs	r3, #1
 80082a0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80082a4:	e063      	b.n	800836e <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 80082a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082a8:	2b01      	cmp	r3, #1
 80082aa:	d103      	bne.n	80082b4 <f_getfree+0x8a>
 80082ac:	2302      	movs	r3, #2
 80082ae:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80082b2:	e05c      	b.n	800836e <f_getfree+0x144>
					if (stat == 0) nfree++;
 80082b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d102      	bne.n	80082c0 <f_getfree+0x96>
 80082ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80082bc:	3301      	adds	r3, #1
 80082be:	643b      	str	r3, [r7, #64]	@ 0x40
				} while (++clst < fs->n_fatent);
 80082c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80082c2:	3301      	adds	r3, #1
 80082c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80082c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082c8:	69db      	ldr	r3, [r3, #28]
 80082ca:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80082cc:	429a      	cmp	r2, r3
 80082ce:	d3db      	bcc.n	8008288 <f_getfree+0x5e>
 80082d0:	e04d      	b.n	800836e <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 80082d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082d4:	69db      	ldr	r3, [r3, #28]
 80082d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80082d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082dc:	63bb      	str	r3, [r7, #56]	@ 0x38
					i = 0; p = 0;
 80082de:	2300      	movs	r3, #0
 80082e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80082e2:	2300      	movs	r3, #0
 80082e4:	633b      	str	r3, [r7, #48]	@ 0x30
					do {
						if (i == 0) {
 80082e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d113      	bne.n	8008314 <f_getfree+0xea>
							res = move_window(fs, sect++);
 80082ec:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80082ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082f0:	1c5a      	adds	r2, r3, #1
 80082f2:	63ba      	str	r2, [r7, #56]	@ 0x38
 80082f4:	4619      	mov	r1, r3
 80082f6:	f7fd fbaf 	bl	8005a58 <move_window>
 80082fa:	4603      	mov	r3, r0
 80082fc:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
							if (res != FR_OK) break;
 8008300:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8008304:	2b00      	cmp	r3, #0
 8008306:	d131      	bne.n	800836c <f_getfree+0x142>
							p = fs->win;
 8008308:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800830a:	3338      	adds	r3, #56	@ 0x38
 800830c:	633b      	str	r3, [r7, #48]	@ 0x30
							i = SS(fs);
 800830e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008310:	899b      	ldrh	r3, [r3, #12]
 8008312:	637b      	str	r3, [r7, #52]	@ 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 8008314:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008316:	781b      	ldrb	r3, [r3, #0]
 8008318:	2b02      	cmp	r3, #2
 800831a:	d10f      	bne.n	800833c <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 800831c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800831e:	f7fd f8eb 	bl	80054f8 <ld_word>
 8008322:	4603      	mov	r3, r0
 8008324:	2b00      	cmp	r3, #0
 8008326:	d102      	bne.n	800832e <f_getfree+0x104>
 8008328:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800832a:	3301      	adds	r3, #1
 800832c:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 2; i -= 2;
 800832e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008330:	3302      	adds	r3, #2
 8008332:	633b      	str	r3, [r7, #48]	@ 0x30
 8008334:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008336:	3b02      	subs	r3, #2
 8008338:	637b      	str	r3, [r7, #52]	@ 0x34
 800833a:	e010      	b.n	800835e <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800833c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800833e:	f7fd f8f3 	bl	8005528 <ld_dword>
 8008342:	4603      	mov	r3, r0
 8008344:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8008348:	2b00      	cmp	r3, #0
 800834a:	d102      	bne.n	8008352 <f_getfree+0x128>
 800834c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800834e:	3301      	adds	r3, #1
 8008350:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 4; i -= 4;
 8008352:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008354:	3304      	adds	r3, #4
 8008356:	633b      	str	r3, [r7, #48]	@ 0x30
 8008358:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800835a:	3b04      	subs	r3, #4
 800835c:	637b      	str	r3, [r7, #52]	@ 0x34
						}
					} while (--clst);
 800835e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008360:	3b01      	subs	r3, #1
 8008362:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008364:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008366:	2b00      	cmp	r3, #0
 8008368:	d1bd      	bne.n	80082e6 <f_getfree+0xbc>
 800836a:	e000      	b.n	800836e <f_getfree+0x144>
							if (res != FR_OK) break;
 800836c:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800836e:	68bb      	ldr	r3, [r7, #8]
 8008370:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008372:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 8008374:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008376:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008378:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800837a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800837c:	791a      	ldrb	r2, [r3, #4]
 800837e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008380:	f042 0201 	orr.w	r2, r2, #1
 8008384:	b2d2      	uxtb	r2, r2
 8008386:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 8008388:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800838c:	4618      	mov	r0, r3
 800838e:	3748      	adds	r7, #72	@ 0x48
 8008390:	46bd      	mov	sp, r7
 8008392:	bd80      	pop	{r7, pc}

08008394 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 8008394:	b580      	push	{r7, lr}
 8008396:	b084      	sub	sp, #16
 8008398:	af00      	add	r7, sp, #0
 800839a:	6078      	str	r0, [r7, #4]
 800839c:	460b      	mov	r3, r1
 800839e:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 80083a0:	78fb      	ldrb	r3, [r7, #3]
 80083a2:	2b0a      	cmp	r3, #10
 80083a4:	d103      	bne.n	80083ae <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 80083a6:	210d      	movs	r1, #13
 80083a8:	6878      	ldr	r0, [r7, #4]
 80083aa:	f7ff fff3 	bl	8008394 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	685b      	ldr	r3, [r3, #4]
 80083b2:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	db25      	blt.n	8008406 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	1c5a      	adds	r2, r3, #1
 80083be:	60fa      	str	r2, [r7, #12]
 80083c0:	687a      	ldr	r2, [r7, #4]
 80083c2:	4413      	add	r3, r2
 80083c4:	78fa      	ldrb	r2, [r7, #3]
 80083c6:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	2b3c      	cmp	r3, #60	@ 0x3c
 80083cc:	dd12      	ble.n	80083f4 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	6818      	ldr	r0, [r3, #0]
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	f103 010c 	add.w	r1, r3, #12
 80083d8:	68fa      	ldr	r2, [r7, #12]
 80083da:	f107 0308 	add.w	r3, r7, #8
 80083de:	f7ff fcaf 	bl	8007d40 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 80083e2:	68ba      	ldr	r2, [r7, #8]
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	429a      	cmp	r2, r3
 80083e8:	d101      	bne.n	80083ee <putc_bfd+0x5a>
 80083ea:	2300      	movs	r3, #0
 80083ec:	e001      	b.n	80083f2 <putc_bfd+0x5e>
 80083ee:	f04f 33ff 	mov.w	r3, #4294967295
 80083f2:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	68fa      	ldr	r2, [r7, #12]
 80083f8:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	689b      	ldr	r3, [r3, #8]
 80083fe:	1c5a      	adds	r2, r3, #1
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	609a      	str	r2, [r3, #8]
 8008404:	e000      	b.n	8008408 <putc_bfd+0x74>
	if (i < 0) return;
 8008406:	bf00      	nop
}
 8008408:	3710      	adds	r7, #16
 800840a:	46bd      	mov	sp, r7
 800840c:	bd80      	pop	{r7, pc}

0800840e <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 800840e:	b580      	push	{r7, lr}
 8008410:	b084      	sub	sp, #16
 8008412:	af00      	add	r7, sp, #0
 8008414:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	685b      	ldr	r3, [r3, #4]
 800841a:	2b00      	cmp	r3, #0
 800841c:	db16      	blt.n	800844c <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	6818      	ldr	r0, [r3, #0]
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	f103 010c 	add.w	r1, r3, #12
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	685b      	ldr	r3, [r3, #4]
 800842c:	461a      	mov	r2, r3
 800842e:	f107 030c 	add.w	r3, r7, #12
 8008432:	f7ff fc85 	bl	8007d40 <f_write>
 8008436:	4603      	mov	r3, r0
 8008438:	2b00      	cmp	r3, #0
 800843a:	d107      	bne.n	800844c <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	685b      	ldr	r3, [r3, #4]
 8008440:	68fa      	ldr	r2, [r7, #12]
 8008442:	4293      	cmp	r3, r2
 8008444:	d102      	bne.n	800844c <putc_flush+0x3e>
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	689b      	ldr	r3, [r3, #8]
 800844a:	e001      	b.n	8008450 <putc_flush+0x42>
	return EOF;
 800844c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008450:	4618      	mov	r0, r3
 8008452:	3710      	adds	r7, #16
 8008454:	46bd      	mov	sp, r7
 8008456:	bd80      	pop	{r7, pc}

08008458 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 8008458:	b480      	push	{r7}
 800845a:	b083      	sub	sp, #12
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
 8008460:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	683a      	ldr	r2, [r7, #0]
 8008466:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	2200      	movs	r2, #0
 800846c:	605a      	str	r2, [r3, #4]
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	685a      	ldr	r2, [r3, #4]
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	609a      	str	r2, [r3, #8]
}
 8008476:	bf00      	nop
 8008478:	370c      	adds	r7, #12
 800847a:	46bd      	mov	sp, r7
 800847c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008480:	4770      	bx	lr

08008482 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 8008482:	b580      	push	{r7, lr}
 8008484:	b096      	sub	sp, #88	@ 0x58
 8008486:	af00      	add	r7, sp, #0
 8008488:	6078      	str	r0, [r7, #4]
 800848a:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 800848c:	f107 030c 	add.w	r3, r7, #12
 8008490:	6839      	ldr	r1, [r7, #0]
 8008492:	4618      	mov	r0, r3
 8008494:	f7ff ffe0 	bl	8008458 <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 8008498:	e009      	b.n	80084ae <f_puts+0x2c>
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	1c5a      	adds	r2, r3, #1
 800849e:	607a      	str	r2, [r7, #4]
 80084a0:	781a      	ldrb	r2, [r3, #0]
 80084a2:	f107 030c 	add.w	r3, r7, #12
 80084a6:	4611      	mov	r1, r2
 80084a8:	4618      	mov	r0, r3
 80084aa:	f7ff ff73 	bl	8008394 <putc_bfd>
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	781b      	ldrb	r3, [r3, #0]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d1f1      	bne.n	800849a <f_puts+0x18>
	return putc_flush(&pb);
 80084b6:	f107 030c 	add.w	r3, r7, #12
 80084ba:	4618      	mov	r0, r3
 80084bc:	f7ff ffa7 	bl	800840e <putc_flush>
 80084c0:	4603      	mov	r3, r0
}
 80084c2:	4618      	mov	r0, r3
 80084c4:	3758      	adds	r7, #88	@ 0x58
 80084c6:	46bd      	mov	sp, r7
 80084c8:	bd80      	pop	{r7, pc}
	...

080084cc <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
 80084cc:	b40e      	push	{r1, r2, r3}
 80084ce:	b580      	push	{r7, lr}
 80084d0:	b0a7      	sub	sp, #156	@ 0x9c
 80084d2:	af00      	add	r7, sp, #0
 80084d4:	6078      	str	r0, [r7, #4]
	UINT i, j, w;
	DWORD v;
	TCHAR c, d, str[32], *p;


	putc_init(&pb, fp);
 80084d6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80084da:	6879      	ldr	r1, [r7, #4]
 80084dc:	4618      	mov	r0, r3
 80084de:	f7ff ffbb 	bl	8008458 <putc_init>

	va_start(arp, fmt);
 80084e2:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 80084e6:	67bb      	str	r3, [r7, #120]	@ 0x78

	for (;;) {
		c = *fmt++;
 80084e8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80084ec:	1c5a      	adds	r2, r3, #1
 80084ee:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80084f2:	781b      	ldrb	r3, [r3, #0]
 80084f4:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
		if (c == 0) break;			/* End of string */
 80084f8:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	f000 81f2 	beq.w	80088e6 <f_printf+0x41a>
		if (c != '%') {				/* Non escape character */
 8008502:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8008506:	2b25      	cmp	r3, #37	@ 0x25
 8008508:	d008      	beq.n	800851c <f_printf+0x50>
			putc_bfd(&pb, c);
 800850a:	f897 2083 	ldrb.w	r2, [r7, #131]	@ 0x83
 800850e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8008512:	4611      	mov	r1, r2
 8008514:	4618      	mov	r0, r3
 8008516:	f7ff ff3d 	bl	8008394 <putc_bfd>
			continue;
 800851a:	e1e3      	b.n	80088e4 <f_printf+0x418>
		}
		w = f = 0;
 800851c:	2300      	movs	r3, #0
 800851e:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 8008522:	2300      	movs	r3, #0
 8008524:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
		c = *fmt++;
 8008528:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800852c:	1c5a      	adds	r2, r3, #1
 800852e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8008532:	781b      	ldrb	r3, [r3, #0]
 8008534:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
		if (c == '0') {				/* Flag: '0' padding */
 8008538:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 800853c:	2b30      	cmp	r3, #48	@ 0x30
 800853e:	d10b      	bne.n	8008558 <f_printf+0x8c>
			f = 1; c = *fmt++;
 8008540:	2301      	movs	r3, #1
 8008542:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 8008546:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800854a:	1c5a      	adds	r2, r3, #1
 800854c:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8008550:	781b      	ldrb	r3, [r3, #0]
 8008552:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
 8008556:	e024      	b.n	80085a2 <f_printf+0xd6>
		} else {
			if (c == '-') {			/* Flag: left justified */
 8008558:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 800855c:	2b2d      	cmp	r3, #45	@ 0x2d
 800855e:	d120      	bne.n	80085a2 <f_printf+0xd6>
				f = 2; c = *fmt++;
 8008560:	2302      	movs	r3, #2
 8008562:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 8008566:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800856a:	1c5a      	adds	r2, r3, #1
 800856c:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8008570:	781b      	ldrb	r3, [r3, #0]
 8008572:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
			}
		}
		while (IsDigit(c)) {		/* Precision */
 8008576:	e014      	b.n	80085a2 <f_printf+0xd6>
			w = w * 10 + c - '0';
 8008578:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800857c:	4613      	mov	r3, r2
 800857e:	009b      	lsls	r3, r3, #2
 8008580:	4413      	add	r3, r2
 8008582:	005b      	lsls	r3, r3, #1
 8008584:	461a      	mov	r2, r3
 8008586:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 800858a:	4413      	add	r3, r2
 800858c:	3b30      	subs	r3, #48	@ 0x30
 800858e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
			c = *fmt++;
 8008592:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8008596:	1c5a      	adds	r2, r3, #1
 8008598:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800859c:	781b      	ldrb	r3, [r3, #0]
 800859e:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
		while (IsDigit(c)) {		/* Precision */
 80085a2:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 80085a6:	2b2f      	cmp	r3, #47	@ 0x2f
 80085a8:	d903      	bls.n	80085b2 <f_printf+0xe6>
 80085aa:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 80085ae:	2b39      	cmp	r3, #57	@ 0x39
 80085b0:	d9e2      	bls.n	8008578 <f_printf+0xac>
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 80085b2:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 80085b6:	2b6c      	cmp	r3, #108	@ 0x6c
 80085b8:	d003      	beq.n	80085c2 <f_printf+0xf6>
 80085ba:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 80085be:	2b4c      	cmp	r3, #76	@ 0x4c
 80085c0:	d10d      	bne.n	80085de <f_printf+0x112>
			f |= 4; c = *fmt++;
 80085c2:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 80085c6:	f043 0304 	orr.w	r3, r3, #4
 80085ca:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 80085ce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80085d2:	1c5a      	adds	r2, r3, #1
 80085d4:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80085d8:	781b      	ldrb	r3, [r3, #0]
 80085da:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
		}
		if (!c) break;
 80085de:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	f000 8181 	beq.w	80088ea <f_printf+0x41e>
		d = c;
 80085e8:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 80085ec:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
		if (IsLower(d)) d -= 0x20;
 80085f0:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 80085f4:	2b60      	cmp	r3, #96	@ 0x60
 80085f6:	d908      	bls.n	800860a <f_printf+0x13e>
 80085f8:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 80085fc:	2b7a      	cmp	r3, #122	@ 0x7a
 80085fe:	d804      	bhi.n	800860a <f_printf+0x13e>
 8008600:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 8008604:	3b20      	subs	r3, #32
 8008606:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
		switch (d) {				/* Type is... */
 800860a:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 800860e:	3b42      	subs	r3, #66	@ 0x42
 8008610:	2b16      	cmp	r3, #22
 8008612:	f200 8098 	bhi.w	8008746 <f_printf+0x27a>
 8008616:	a201      	add	r2, pc, #4	@ (adr r2, 800861c <f_printf+0x150>)
 8008618:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800861c:	08008727 	.word	0x08008727
 8008620:	0800870f 	.word	0x0800870f
 8008624:	08008737 	.word	0x08008737
 8008628:	08008747 	.word	0x08008747
 800862c:	08008747 	.word	0x08008747
 8008630:	08008747 	.word	0x08008747
 8008634:	08008747 	.word	0x08008747
 8008638:	08008747 	.word	0x08008747
 800863c:	08008747 	.word	0x08008747
 8008640:	08008747 	.word	0x08008747
 8008644:	08008747 	.word	0x08008747
 8008648:	08008747 	.word	0x08008747
 800864c:	08008747 	.word	0x08008747
 8008650:	0800872f 	.word	0x0800872f
 8008654:	08008747 	.word	0x08008747
 8008658:	08008747 	.word	0x08008747
 800865c:	08008747 	.word	0x08008747
 8008660:	08008679 	.word	0x08008679
 8008664:	08008747 	.word	0x08008747
 8008668:	08008737 	.word	0x08008737
 800866c:	08008747 	.word	0x08008747
 8008670:	08008747 	.word	0x08008747
 8008674:	0800873f 	.word	0x0800873f
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
 8008678:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800867a:	1d1a      	adds	r2, r3, #4
 800867c:	67ba      	str	r2, [r7, #120]	@ 0x78
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	67fb      	str	r3, [r7, #124]	@ 0x7c
			for (j = 0; p[j]; j++) ;
 8008682:	2300      	movs	r3, #0
 8008684:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008688:	e004      	b.n	8008694 <f_printf+0x1c8>
 800868a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800868e:	3301      	adds	r3, #1
 8008690:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008694:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8008696:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800869a:	4413      	add	r3, r2
 800869c:	781b      	ldrb	r3, [r3, #0]
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d1f3      	bne.n	800868a <f_printf+0x1be>
			if (!(f & 2)) {
 80086a2:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 80086a6:	f003 0302 	and.w	r3, r3, #2
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d11a      	bne.n	80086e4 <f_printf+0x218>
				while (j++ < w) putc_bfd(&pb, ' ');
 80086ae:	e005      	b.n	80086bc <f_printf+0x1f0>
 80086b0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80086b4:	2120      	movs	r1, #32
 80086b6:	4618      	mov	r0, r3
 80086b8:	f7ff fe6c 	bl	8008394 <putc_bfd>
 80086bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80086c0:	1c5a      	adds	r2, r3, #1
 80086c2:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80086c6:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80086ca:	429a      	cmp	r2, r3
 80086cc:	d8f0      	bhi.n	80086b0 <f_printf+0x1e4>
			}
			while (*p) putc_bfd(&pb, *p++);
 80086ce:	e009      	b.n	80086e4 <f_printf+0x218>
 80086d0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80086d2:	1c5a      	adds	r2, r3, #1
 80086d4:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80086d6:	781a      	ldrb	r2, [r3, #0]
 80086d8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80086dc:	4611      	mov	r1, r2
 80086de:	4618      	mov	r0, r3
 80086e0:	f7ff fe58 	bl	8008394 <putc_bfd>
 80086e4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80086e6:	781b      	ldrb	r3, [r3, #0]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d1f1      	bne.n	80086d0 <f_printf+0x204>
			while (j++ < w) putc_bfd(&pb, ' ');
 80086ec:	e005      	b.n	80086fa <f_printf+0x22e>
 80086ee:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80086f2:	2120      	movs	r1, #32
 80086f4:	4618      	mov	r0, r3
 80086f6:	f7ff fe4d 	bl	8008394 <putc_bfd>
 80086fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80086fe:	1c5a      	adds	r2, r3, #1
 8008700:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8008704:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8008708:	429a      	cmp	r2, r3
 800870a:	d8f0      	bhi.n	80086ee <f_printf+0x222>
			continue;
 800870c:	e0ea      	b.n	80088e4 <f_printf+0x418>

		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 800870e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008710:	1d1a      	adds	r2, r3, #4
 8008712:	67ba      	str	r2, [r7, #120]	@ 0x78
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	b2da      	uxtb	r2, r3
 8008718:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800871c:	4611      	mov	r1, r2
 800871e:	4618      	mov	r0, r3
 8008720:	f7ff fe38 	bl	8008394 <putc_bfd>
 8008724:	e0de      	b.n	80088e4 <f_printf+0x418>

		case 'B' :					/* Binary */
			r = 2; break;
 8008726:	2302      	movs	r3, #2
 8008728:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 800872c:	e014      	b.n	8008758 <f_printf+0x28c>

		case 'O' :					/* Octal */
			r = 8; break;
 800872e:	2308      	movs	r3, #8
 8008730:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 8008734:	e010      	b.n	8008758 <f_printf+0x28c>

		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
 8008736:	230a      	movs	r3, #10
 8008738:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 800873c:	e00c      	b.n	8008758 <f_printf+0x28c>

		case 'X' :					/* Hexdecimal */
			r = 16; break;
 800873e:	2310      	movs	r3, #16
 8008740:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 8008744:	e008      	b.n	8008758 <f_printf+0x28c>

		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
 8008746:	f897 2083 	ldrb.w	r2, [r7, #131]	@ 0x83
 800874a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800874e:	4611      	mov	r1, r2
 8008750:	4618      	mov	r0, r3
 8008752:	f7ff fe1f 	bl	8008394 <putc_bfd>
 8008756:	e0c5      	b.n	80088e4 <f_printf+0x418>
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 8008758:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800875c:	f003 0304 	and.w	r3, r3, #4
 8008760:	2b00      	cmp	r3, #0
 8008762:	d004      	beq.n	800876e <f_printf+0x2a2>
 8008764:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008766:	1d1a      	adds	r2, r3, #4
 8008768:	67ba      	str	r2, [r7, #120]	@ 0x78
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	e00c      	b.n	8008788 <f_printf+0x2bc>
 800876e:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 8008772:	2b44      	cmp	r3, #68	@ 0x44
 8008774:	d104      	bne.n	8008780 <f_printf+0x2b4>
 8008776:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008778:	1d1a      	adds	r2, r3, #4
 800877a:	67ba      	str	r2, [r7, #120]	@ 0x78
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	e003      	b.n	8008788 <f_printf+0x2bc>
 8008780:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008782:	1d1a      	adds	r2, r3, #4
 8008784:	67ba      	str	r2, [r7, #120]	@ 0x78
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
		if (d == 'D' && (v & 0x80000000)) {
 800878c:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 8008790:	2b44      	cmp	r3, #68	@ 0x44
 8008792:	d10e      	bne.n	80087b2 <f_printf+0x2e6>
 8008794:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008798:	2b00      	cmp	r3, #0
 800879a:	da0a      	bge.n	80087b2 <f_printf+0x2e6>
			v = 0 - v;
 800879c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80087a0:	425b      	negs	r3, r3
 80087a2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
			f |= 8;
 80087a6:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 80087aa:	f043 0308 	orr.w	r3, r3, #8
 80087ae:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
		}
		i = 0;
 80087b2:	2300      	movs	r3, #0
 80087b4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
		do {
			d = (TCHAR)(v % r); v /= r;
 80087b8:	f897 2096 	ldrb.w	r2, [r7, #150]	@ 0x96
 80087bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80087c0:	fbb3 f1f2 	udiv	r1, r3, r2
 80087c4:	fb01 f202 	mul.w	r2, r1, r2
 80087c8:	1a9b      	subs	r3, r3, r2
 80087ca:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
 80087ce:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 80087d2:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80087d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80087da:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 80087de:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 80087e2:	2b09      	cmp	r3, #9
 80087e4:	d90b      	bls.n	80087fe <f_printf+0x332>
 80087e6:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 80087ea:	2b78      	cmp	r3, #120	@ 0x78
 80087ec:	d101      	bne.n	80087f2 <f_printf+0x326>
 80087ee:	2227      	movs	r2, #39	@ 0x27
 80087f0:	e000      	b.n	80087f4 <f_printf+0x328>
 80087f2:	2207      	movs	r2, #7
 80087f4:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 80087f8:	4413      	add	r3, r2
 80087fa:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
			str[i++] = d + '0';
 80087fe:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008802:	1c5a      	adds	r2, r3, #1
 8008804:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8008808:	f897 2082 	ldrb.w	r2, [r7, #130]	@ 0x82
 800880c:	3230      	adds	r2, #48	@ 0x30
 800880e:	b2d2      	uxtb	r2, r2
 8008810:	3398      	adds	r3, #152	@ 0x98
 8008812:	443b      	add	r3, r7
 8008814:	f803 2c8c 	strb.w	r2, [r3, #-140]
		} while (v && i < sizeof str / sizeof str[0]);
 8008818:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800881c:	2b00      	cmp	r3, #0
 800881e:	d003      	beq.n	8008828 <f_printf+0x35c>
 8008820:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008824:	2b1f      	cmp	r3, #31
 8008826:	d9c7      	bls.n	80087b8 <f_printf+0x2ec>
		if (f & 8) str[i++] = '-';
 8008828:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800882c:	f003 0308 	and.w	r3, r3, #8
 8008830:	2b00      	cmp	r3, #0
 8008832:	d009      	beq.n	8008848 <f_printf+0x37c>
 8008834:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008838:	1c5a      	adds	r2, r3, #1
 800883a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 800883e:	3398      	adds	r3, #152	@ 0x98
 8008840:	443b      	add	r3, r7
 8008842:	222d      	movs	r2, #45	@ 0x2d
 8008844:	f803 2c8c 	strb.w	r2, [r3, #-140]
		j = i; d = (f & 1) ? '0' : ' ';
 8008848:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800884c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008850:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8008854:	f003 0301 	and.w	r3, r3, #1
 8008858:	2b00      	cmp	r3, #0
 800885a:	d001      	beq.n	8008860 <f_printf+0x394>
 800885c:	2330      	movs	r3, #48	@ 0x30
 800885e:	e000      	b.n	8008862 <f_printf+0x396>
 8008860:	2320      	movs	r3, #32
 8008862:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 8008866:	e007      	b.n	8008878 <f_printf+0x3ac>
 8008868:	f897 2082 	ldrb.w	r2, [r7, #130]	@ 0x82
 800886c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8008870:	4611      	mov	r1, r2
 8008872:	4618      	mov	r0, r3
 8008874:	f7ff fd8e 	bl	8008394 <putc_bfd>
 8008878:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800887c:	f003 0302 	and.w	r3, r3, #2
 8008880:	2b00      	cmp	r3, #0
 8008882:	d108      	bne.n	8008896 <f_printf+0x3ca>
 8008884:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008888:	1c5a      	adds	r2, r3, #1
 800888a:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800888e:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8008892:	429a      	cmp	r2, r3
 8008894:	d8e8      	bhi.n	8008868 <f_printf+0x39c>
		do {
			putc_bfd(&pb, str[--i]);
 8008896:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800889a:	3b01      	subs	r3, #1
 800889c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80088a0:	f107 020c 	add.w	r2, r7, #12
 80088a4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80088a8:	4413      	add	r3, r2
 80088aa:	781a      	ldrb	r2, [r3, #0]
 80088ac:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80088b0:	4611      	mov	r1, r2
 80088b2:	4618      	mov	r0, r3
 80088b4:	f7ff fd6e 	bl	8008394 <putc_bfd>
		} while (i);
 80088b8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d1ea      	bne.n	8008896 <f_printf+0x3ca>
		while (j++ < w) putc_bfd(&pb, d);
 80088c0:	e007      	b.n	80088d2 <f_printf+0x406>
 80088c2:	f897 2082 	ldrb.w	r2, [r7, #130]	@ 0x82
 80088c6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80088ca:	4611      	mov	r1, r2
 80088cc:	4618      	mov	r0, r3
 80088ce:	f7ff fd61 	bl	8008394 <putc_bfd>
 80088d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80088d6:	1c5a      	adds	r2, r3, #1
 80088d8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80088dc:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80088e0:	429a      	cmp	r2, r3
 80088e2:	d8ee      	bhi.n	80088c2 <f_printf+0x3f6>
		c = *fmt++;
 80088e4:	e600      	b.n	80084e8 <f_printf+0x1c>
		if (c == 0) break;			/* End of string */
 80088e6:	bf00      	nop
 80088e8:	e000      	b.n	80088ec <f_printf+0x420>
		if (!c) break;
 80088ea:	bf00      	nop
	}

	va_end(arp);

	return putc_flush(&pb);
 80088ec:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80088f0:	4618      	mov	r0, r3
 80088f2:	f7ff fd8c 	bl	800840e <putc_flush>
 80088f6:	4603      	mov	r3, r0
}
 80088f8:	4618      	mov	r0, r3
 80088fa:	379c      	adds	r7, #156	@ 0x9c
 80088fc:	46bd      	mov	sp, r7
 80088fe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008902:	b003      	add	sp, #12
 8008904:	4770      	bx	lr
 8008906:	bf00      	nop

08008908 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8008908:	b480      	push	{r7}
 800890a:	b087      	sub	sp, #28
 800890c:	af00      	add	r7, sp, #0
 800890e:	60f8      	str	r0, [r7, #12]
 8008910:	60b9      	str	r1, [r7, #8]
 8008912:	4613      	mov	r3, r2
 8008914:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8008916:	2301      	movs	r3, #1
 8008918:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800891a:	2300      	movs	r3, #0
 800891c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800891e:	4b1f      	ldr	r3, [pc, #124]	@ (800899c <FATFS_LinkDriverEx+0x94>)
 8008920:	7a5b      	ldrb	r3, [r3, #9]
 8008922:	b2db      	uxtb	r3, r3
 8008924:	2b00      	cmp	r3, #0
 8008926:	d131      	bne.n	800898c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8008928:	4b1c      	ldr	r3, [pc, #112]	@ (800899c <FATFS_LinkDriverEx+0x94>)
 800892a:	7a5b      	ldrb	r3, [r3, #9]
 800892c:	b2db      	uxtb	r3, r3
 800892e:	461a      	mov	r2, r3
 8008930:	4b1a      	ldr	r3, [pc, #104]	@ (800899c <FATFS_LinkDriverEx+0x94>)
 8008932:	2100      	movs	r1, #0
 8008934:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8008936:	4b19      	ldr	r3, [pc, #100]	@ (800899c <FATFS_LinkDriverEx+0x94>)
 8008938:	7a5b      	ldrb	r3, [r3, #9]
 800893a:	b2db      	uxtb	r3, r3
 800893c:	4a17      	ldr	r2, [pc, #92]	@ (800899c <FATFS_LinkDriverEx+0x94>)
 800893e:	009b      	lsls	r3, r3, #2
 8008940:	4413      	add	r3, r2
 8008942:	68fa      	ldr	r2, [r7, #12]
 8008944:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8008946:	4b15      	ldr	r3, [pc, #84]	@ (800899c <FATFS_LinkDriverEx+0x94>)
 8008948:	7a5b      	ldrb	r3, [r3, #9]
 800894a:	b2db      	uxtb	r3, r3
 800894c:	461a      	mov	r2, r3
 800894e:	4b13      	ldr	r3, [pc, #76]	@ (800899c <FATFS_LinkDriverEx+0x94>)
 8008950:	4413      	add	r3, r2
 8008952:	79fa      	ldrb	r2, [r7, #7]
 8008954:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8008956:	4b11      	ldr	r3, [pc, #68]	@ (800899c <FATFS_LinkDriverEx+0x94>)
 8008958:	7a5b      	ldrb	r3, [r3, #9]
 800895a:	b2db      	uxtb	r3, r3
 800895c:	1c5a      	adds	r2, r3, #1
 800895e:	b2d1      	uxtb	r1, r2
 8008960:	4a0e      	ldr	r2, [pc, #56]	@ (800899c <FATFS_LinkDriverEx+0x94>)
 8008962:	7251      	strb	r1, [r2, #9]
 8008964:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8008966:	7dbb      	ldrb	r3, [r7, #22]
 8008968:	3330      	adds	r3, #48	@ 0x30
 800896a:	b2da      	uxtb	r2, r3
 800896c:	68bb      	ldr	r3, [r7, #8]
 800896e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8008970:	68bb      	ldr	r3, [r7, #8]
 8008972:	3301      	adds	r3, #1
 8008974:	223a      	movs	r2, #58	@ 0x3a
 8008976:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8008978:	68bb      	ldr	r3, [r7, #8]
 800897a:	3302      	adds	r3, #2
 800897c:	222f      	movs	r2, #47	@ 0x2f
 800897e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8008980:	68bb      	ldr	r3, [r7, #8]
 8008982:	3303      	adds	r3, #3
 8008984:	2200      	movs	r2, #0
 8008986:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8008988:	2300      	movs	r3, #0
 800898a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800898c:	7dfb      	ldrb	r3, [r7, #23]
}
 800898e:	4618      	mov	r0, r3
 8008990:	371c      	adds	r7, #28
 8008992:	46bd      	mov	sp, r7
 8008994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008998:	4770      	bx	lr
 800899a:	bf00      	nop
 800899c:	200004c8 	.word	0x200004c8

080089a0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80089a0:	b580      	push	{r7, lr}
 80089a2:	b082      	sub	sp, #8
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	6078      	str	r0, [r7, #4]
 80089a8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80089aa:	2200      	movs	r2, #0
 80089ac:	6839      	ldr	r1, [r7, #0]
 80089ae:	6878      	ldr	r0, [r7, #4]
 80089b0:	f7ff ffaa 	bl	8008908 <FATFS_LinkDriverEx>
 80089b4:	4603      	mov	r3, r0
}
 80089b6:	4618      	mov	r0, r3
 80089b8:	3708      	adds	r7, #8
 80089ba:	46bd      	mov	sp, r7
 80089bc:	bd80      	pop	{r7, pc}
	...

080089c0 <is_sd_card_mounted>:
 *
 * @return								- uint8_t : if mounted, return 1 else return 0
 *
 * @note								- None
 ******************************************************************************************************/
uint8_t is_sd_card_mounted(void) {
 80089c0:	b580      	push	{r7, lr}
 80089c2:	af00      	add	r7, sp, #0
	// Check if the File system is mounted
	if (f_mount(&FatFs, "", 1) == FR_OK) {
 80089c4:	2201      	movs	r2, #1
 80089c6:	4906      	ldr	r1, [pc, #24]	@ (80089e0 <is_sd_card_mounted+0x20>)
 80089c8:	4806      	ldr	r0, [pc, #24]	@ (80089e4 <is_sd_card_mounted+0x24>)
 80089ca:	f7fe ffab 	bl	8007924 <f_mount>
 80089ce:	4603      	mov	r3, r0
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d101      	bne.n	80089d8 <is_sd_card_mounted+0x18>
		// File system mounted successfully
		return 1;
 80089d4:	2301      	movs	r3, #1
 80089d6:	e000      	b.n	80089da <is_sd_card_mounted+0x1a>
	} else {
		// File system not mounted
		return 0;
 80089d8:	2300      	movs	r3, #0
	}
}
 80089da:	4618      	mov	r0, r3
 80089dc:	bd80      	pop	{r7, pc}
 80089de:	bf00      	nop
 80089e0:	08009784 	.word	0x08009784
 80089e4:	200004d4 	.word	0x200004d4

080089e8 <updateLogFile>:
 * @return								- None
 *
 * @note								- None
 ******************************************************************************************************/
void updateLogFile(const char* TAG, const char* InfoString)
{
 80089e8:	b580      	push	{r7, lr}
 80089ea:	f5ad 5d89 	sub.w	sp, sp, #4384	@ 0x1120
 80089ee:	b086      	sub	sp, #24
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80089f6:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80089fa:	6018      	str	r0, [r3, #0]
 80089fc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008a00:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8008a04:	6019      	str	r1, [r3, #0]
	FIL File;
	FRESULT FR_Status;
	char txBuff[250];
	// Open the file in append mode
	FR_Status = f_open(&File, "log.txt", FA_OPEN_ALWAYS | FA_WRITE | FA_OPEN_APPEND);
 8008a06:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8008a0a:	3b14      	subs	r3, #20
 8008a0c:	2232      	movs	r2, #50	@ 0x32
 8008a0e:	491c      	ldr	r1, [pc, #112]	@ (8008a80 <updateLogFile+0x98>)
 8008a10:	4618      	mov	r0, r3
 8008a12:	f7fe ffcd 	bl	80079b0 <f_open>
 8008a16:	4603      	mov	r3, r0
 8008a18:	f507 5289 	add.w	r2, r7, #4384	@ 0x1120
 8008a1c:	f102 0217 	add.w	r2, r2, #23
 8008a20:	7013      	strb	r3, [r2, #0]
	if (FR_Status != FR_OK) {
 8008a22:	f507 5389 	add.w	r3, r7, #4384	@ 0x1120
 8008a26:	f103 0317 	add.w	r3, r3, #23
 8008a2a:	781b      	ldrb	r3, [r3, #0]
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d120      	bne.n	8008a72 <updateLogFile+0x8a>
		// Write Error handler
		return;
	}

	// Write information to the file
	sprintf(txBuff, "%s: %s\r\n", TAG, InfoString);
 8008a30:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008a34:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8008a38:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8008a3c:	f5a2 729a 	sub.w	r2, r2, #308	@ 0x134
 8008a40:	f107 0018 	add.w	r0, r7, #24
 8008a44:	3810      	subs	r0, #16
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	6812      	ldr	r2, [r2, #0]
 8008a4a:	490e      	ldr	r1, [pc, #56]	@ (8008a84 <updateLogFile+0x9c>)
 8008a4c:	f000 f9ca 	bl	8008de4 <siprintf>
	f_puts(txBuff, &File);
 8008a50:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 8008a54:	3a14      	subs	r2, #20
 8008a56:	f107 0318 	add.w	r3, r7, #24
 8008a5a:	3b10      	subs	r3, #16
 8008a5c:	4611      	mov	r1, r2
 8008a5e:	4618      	mov	r0, r3
 8008a60:	f7ff fd0f 	bl	8008482 <f_puts>
	f_close(&File);
 8008a64:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8008a68:	3b14      	subs	r3, #20
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	f7ff fb7a 	bl	8008164 <f_close>
 8008a70:	e000      	b.n	8008a74 <updateLogFile+0x8c>
		return;
 8008a72:	bf00      	nop

}
 8008a74:	f507 5789 	add.w	r7, r7, #4384	@ 0x1120
 8008a78:	3718      	adds	r7, #24
 8008a7a:	46bd      	mov	sp, r7
 8008a7c:	bd80      	pop	{r7, pc}
 8008a7e:	bf00      	nop
 8008a80:	08009788 	.word	0x08009788
 8008a84:	08009790 	.word	0x08009790

08008a88 <isFileExist>:
 *
 * @return								- bool - true/false
 *
 * @note								- None
 ******************************************************************************************************/
bool isFileExist(const char* filename) {
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	b0ca      	sub	sp, #296	@ 0x128
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8008a92:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8008a96:	6018      	str	r0, [r3, #0]
	FILINFO fno; // Gathering file info, if not needed keep it NULL
	FRESULT fr;
	fr = f_stat(filename, &fno);
 8008a98:	f107 020c 	add.w	r2, r7, #12
 8008a9c:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8008aa0:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8008aa4:	4611      	mov	r1, r2
 8008aa6:	6818      	ldr	r0, [r3, #0]
 8008aa8:	f7ff fb86 	bl	80081b8 <f_stat>
 8008aac:	4603      	mov	r3, r0
 8008aae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
	if(fr == FR_NO_FILE)
 8008ab2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008ab6:	2b04      	cmp	r3, #4
 8008ab8:	d101      	bne.n	8008abe <isFileExist+0x36>
	{
		return false; // File not exist
 8008aba:	2300      	movs	r3, #0
 8008abc:	e000      	b.n	8008ac0 <isFileExist+0x38>
	}

	return true;	// File already exist
 8008abe:	2301      	movs	r3, #1
}
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8008ac6:	46bd      	mov	sp, r7
 8008ac8:	bd80      	pop	{r7, pc}
	...

08008acc <SDCard_Init>:
 * @return								- bool - true/false
 *
 * @note								- None
 ******************************************************************************************************/
void SDCard_Init(void)
{
 8008acc:	b580      	push	{r7, lr}
 8008ace:	b082      	sub	sp, #8
 8008ad0:	af00      	add	r7, sp, #0
	do
	{
		//----------------------------------[ Mount The SD Card ]----------------------------------------
		FR_Status = f_mount(&FatFs, "", 1);
 8008ad2:	2201      	movs	r2, #1
 8008ad4:	492c      	ldr	r1, [pc, #176]	@ (8008b88 <SDCard_Init+0xbc>)
 8008ad6:	482d      	ldr	r0, [pc, #180]	@ (8008b8c <SDCard_Init+0xc0>)
 8008ad8:	f7fe ff24 	bl	8007924 <f_mount>
 8008adc:	4603      	mov	r3, r0
 8008ade:	461a      	mov	r2, r3
 8008ae0:	4b2b      	ldr	r3, [pc, #172]	@ (8008b90 <SDCard_Init+0xc4>)
 8008ae2:	701a      	strb	r2, [r3, #0]
		if (FR_Status != FR_OK)
 8008ae4:	4b2a      	ldr	r3, [pc, #168]	@ (8008b90 <SDCard_Init+0xc4>)
 8008ae6:	781b      	ldrb	r3, [r3, #0]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d147      	bne.n	8008b7c <SDCard_Init+0xb0>
		{
			// Write an Error Handler Function
			break;
		}
		//-----------------------------[ Get & Print The SD Card Size & Free Space ]--------------------
		f_getfree("", &FreeClusters, &FS_Ptr);
 8008aec:	4a29      	ldr	r2, [pc, #164]	@ (8008b94 <SDCard_Init+0xc8>)
 8008aee:	492a      	ldr	r1, [pc, #168]	@ (8008b98 <SDCard_Init+0xcc>)
 8008af0:	4825      	ldr	r0, [pc, #148]	@ (8008b88 <SDCard_Init+0xbc>)
 8008af2:	f7ff fb9a 	bl	800822a <f_getfree>
		TotalSize = (uint32_t)((FS_Ptr->n_fatent - 2) * FS_Ptr->csize * 0.5);
 8008af6:	4b27      	ldr	r3, [pc, #156]	@ (8008b94 <SDCard_Init+0xc8>)
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	69db      	ldr	r3, [r3, #28]
 8008afc:	3b02      	subs	r3, #2
 8008afe:	4a25      	ldr	r2, [pc, #148]	@ (8008b94 <SDCard_Init+0xc8>)
 8008b00:	6812      	ldr	r2, [r2, #0]
 8008b02:	8952      	ldrh	r2, [r2, #10]
 8008b04:	fb02 f303 	mul.w	r3, r2, r3
 8008b08:	4618      	mov	r0, r3
 8008b0a:	f7f7 fe3d 	bl	8000788 <__aeabi_ui2d>
 8008b0e:	f04f 0200 	mov.w	r2, #0
 8008b12:	4b22      	ldr	r3, [pc, #136]	@ (8008b9c <SDCard_Init+0xd0>)
 8008b14:	f7f7 fbcc 	bl	80002b0 <__aeabi_dmul>
 8008b18:	4602      	mov	r2, r0
 8008b1a:	460b      	mov	r3, r1
 8008b1c:	4610      	mov	r0, r2
 8008b1e:	4619      	mov	r1, r3
 8008b20:	f7f7 feac 	bl	800087c <__aeabi_d2uiz>
 8008b24:	4603      	mov	r3, r0
 8008b26:	4a1e      	ldr	r2, [pc, #120]	@ (8008ba0 <SDCard_Init+0xd4>)
 8008b28:	6013      	str	r3, [r2, #0]
		FreeSpace = (uint32_t)(FreeClusters * FS_Ptr->csize * 0.5);
 8008b2a:	4b1a      	ldr	r3, [pc, #104]	@ (8008b94 <SDCard_Init+0xc8>)
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	895b      	ldrh	r3, [r3, #10]
 8008b30:	461a      	mov	r2, r3
 8008b32:	4b19      	ldr	r3, [pc, #100]	@ (8008b98 <SDCard_Init+0xcc>)
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	fb02 f303 	mul.w	r3, r2, r3
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	f7f7 fe24 	bl	8000788 <__aeabi_ui2d>
 8008b40:	f04f 0200 	mov.w	r2, #0
 8008b44:	4b15      	ldr	r3, [pc, #84]	@ (8008b9c <SDCard_Init+0xd0>)
 8008b46:	f7f7 fbb3 	bl	80002b0 <__aeabi_dmul>
 8008b4a:	4602      	mov	r2, r0
 8008b4c:	460b      	mov	r3, r1
 8008b4e:	4610      	mov	r0, r2
 8008b50:	4619      	mov	r1, r3
 8008b52:	f7f7 fe93 	bl	800087c <__aeabi_d2uiz>
 8008b56:	4603      	mov	r3, r0
 8008b58:	4a12      	ldr	r2, [pc, #72]	@ (8008ba4 <SDCard_Init+0xd8>)
 8008b5a:	6013      	str	r3, [r2, #0]
		//----------------------------------------------------------------------------------------------
		for (int i = 0; i < 70; i++)
 8008b5c:	2300      	movs	r3, #0
 8008b5e:	607b      	str	r3, [r7, #4]
 8008b60:	e008      	b.n	8008b74 <SDCard_Init+0xa8>
		{
			iTxArr[i] = INT32_MAX;
 8008b62:	4a11      	ldr	r2, [pc, #68]	@ (8008ba8 <SDCard_Init+0xdc>)
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008b6a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for (int i = 0; i < 70; i++)
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	3301      	adds	r3, #1
 8008b72:	607b      	str	r3, [r7, #4]
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	2b45      	cmp	r3, #69	@ 0x45
 8008b78:	ddf3      	ble.n	8008b62 <SDCard_Init+0x96>
		}
	} while(0);
}
 8008b7a:	e000      	b.n	8008b7e <SDCard_Init+0xb2>
			break;
 8008b7c:	bf00      	nop
}
 8008b7e:	bf00      	nop
 8008b80:	3708      	adds	r7, #8
 8008b82:	46bd      	mov	sp, r7
 8008b84:	bd80      	pop	{r7, pc}
 8008b86:	bf00      	nop
 8008b88:	08009784 	.word	0x08009784
 8008b8c:	200004d4 	.word	0x200004d4
 8008b90:	2000253c 	.word	0x2000253c
 8008b94:	20002540 	.word	0x20002540
 8008b98:	20002544 	.word	0x20002544
 8008b9c:	3fe00000 	.word	0x3fe00000
 8008ba0:	20002548 	.word	0x20002548
 8008ba4:	2000254c 	.word	0x2000254c
 8008ba8:	20002754 	.word	0x20002754

08008bac <CharaExtendedCSVFile_Create>:

void CharaExtendedCSVFile_Create(void)
{
 8008bac:	b590      	push	{r4, r7, lr}
 8008bae:	b085      	sub	sp, #20
 8008bb0:	af02      	add	r7, sp, #8

	strcpy(Filename, "DATA0000.csv");
 8008bb2:	4a45      	ldr	r2, [pc, #276]	@ (8008cc8 <CharaExtendedCSVFile_Create+0x11c>)
 8008bb4:	4b45      	ldr	r3, [pc, #276]	@ (8008ccc <CharaExtendedCSVFile_Create+0x120>)
 8008bb6:	4614      	mov	r4, r2
 8008bb8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008bba:	c407      	stmia	r4!, {r0, r1, r2}
 8008bbc:	7023      	strb	r3, [r4, #0]

	for(uint16_t i = 0; i < SD_NUM_OF_FILES; i++)
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	80fb      	strh	r3, [r7, #6]
 8008bc2:	e03c      	b.n	8008c3e <CharaExtendedCSVFile_Create+0x92>
	{
		Filename[4] = '0' + i / 1000; // Thousands digit
 8008bc4:	88fb      	ldrh	r3, [r7, #6]
 8008bc6:	4a42      	ldr	r2, [pc, #264]	@ (8008cd0 <CharaExtendedCSVFile_Create+0x124>)
 8008bc8:	fba2 2303 	umull	r2, r3, r2, r3
 8008bcc:	099b      	lsrs	r3, r3, #6
 8008bce:	b29b      	uxth	r3, r3
 8008bd0:	b2db      	uxtb	r3, r3
 8008bd2:	3330      	adds	r3, #48	@ 0x30
 8008bd4:	b2da      	uxtb	r2, r3
 8008bd6:	4b3c      	ldr	r3, [pc, #240]	@ (8008cc8 <CharaExtendedCSVFile_Create+0x11c>)
 8008bd8:	711a      	strb	r2, [r3, #4]
		Filename[5] = '0' + i / 100; // Hundreds digit
 8008bda:	88fb      	ldrh	r3, [r7, #6]
 8008bdc:	4a3d      	ldr	r2, [pc, #244]	@ (8008cd4 <CharaExtendedCSVFile_Create+0x128>)
 8008bde:	fba2 2303 	umull	r2, r3, r2, r3
 8008be2:	095b      	lsrs	r3, r3, #5
 8008be4:	b29b      	uxth	r3, r3
 8008be6:	b2db      	uxtb	r3, r3
 8008be8:	3330      	adds	r3, #48	@ 0x30
 8008bea:	b2da      	uxtb	r2, r3
 8008bec:	4b36      	ldr	r3, [pc, #216]	@ (8008cc8 <CharaExtendedCSVFile_Create+0x11c>)
 8008bee:	715a      	strb	r2, [r3, #5]
		Filename[6] = '0' + i / 10; // Tens digit
 8008bf0:	88fb      	ldrh	r3, [r7, #6]
 8008bf2:	4a39      	ldr	r2, [pc, #228]	@ (8008cd8 <CharaExtendedCSVFile_Create+0x12c>)
 8008bf4:	fba2 2303 	umull	r2, r3, r2, r3
 8008bf8:	08db      	lsrs	r3, r3, #3
 8008bfa:	b29b      	uxth	r3, r3
 8008bfc:	b2db      	uxtb	r3, r3
 8008bfe:	3330      	adds	r3, #48	@ 0x30
 8008c00:	b2da      	uxtb	r2, r3
 8008c02:	4b31      	ldr	r3, [pc, #196]	@ (8008cc8 <CharaExtendedCSVFile_Create+0x11c>)
 8008c04:	719a      	strb	r2, [r3, #6]
		Filename[7] = '0' + i % 10; // Ones digit
 8008c06:	88fa      	ldrh	r2, [r7, #6]
 8008c08:	4b33      	ldr	r3, [pc, #204]	@ (8008cd8 <CharaExtendedCSVFile_Create+0x12c>)
 8008c0a:	fba3 1302 	umull	r1, r3, r3, r2
 8008c0e:	08d9      	lsrs	r1, r3, #3
 8008c10:	460b      	mov	r3, r1
 8008c12:	009b      	lsls	r3, r3, #2
 8008c14:	440b      	add	r3, r1
 8008c16:	005b      	lsls	r3, r3, #1
 8008c18:	1ad3      	subs	r3, r2, r3
 8008c1a:	b29b      	uxth	r3, r3
 8008c1c:	b2db      	uxtb	r3, r3
 8008c1e:	3330      	adds	r3, #48	@ 0x30
 8008c20:	b2da      	uxtb	r2, r3
 8008c22:	4b29      	ldr	r3, [pc, #164]	@ (8008cc8 <CharaExtendedCSVFile_Create+0x11c>)
 8008c24:	71da      	strb	r2, [r3, #7]
		// Check if the file already exists
		if(!isFileExist(Filename))
 8008c26:	4828      	ldr	r0, [pc, #160]	@ (8008cc8 <CharaExtendedCSVFile_Create+0x11c>)
 8008c28:	f7ff ff2e 	bl	8008a88 <isFileExist>
 8008c2c:	4603      	mov	r3, r0
 8008c2e:	f083 0301 	eor.w	r3, r3, #1
 8008c32:	b2db      	uxtb	r3, r3
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d108      	bne.n	8008c4a <CharaExtendedCSVFile_Create+0x9e>
	for(uint16_t i = 0; i < SD_NUM_OF_FILES; i++)
 8008c38:	88fb      	ldrh	r3, [r7, #6]
 8008c3a:	3301      	adds	r3, #1
 8008c3c:	80fb      	strh	r3, [r7, #6]
 8008c3e:	88fb      	ldrh	r3, [r7, #6]
 8008c40:	f242 720f 	movw	r2, #9999	@ 0x270f
 8008c44:	4293      	cmp	r3, r2
 8008c46:	d9bd      	bls.n	8008bc4 <CharaExtendedCSVFile_Create+0x18>
 8008c48:	e000      	b.n	8008c4c <CharaExtendedCSVFile_Create+0xa0>
		{
			break;
 8008c4a:	bf00      	nop
		}
	}
	// Check if the SD card is mounted
	if (is_sd_card_mounted())
 8008c4c:	f7ff feb8 	bl	80089c0 <is_sd_card_mounted>
 8008c50:	4603      	mov	r3, r0
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d034      	beq.n	8008cc0 <CharaExtendedCSVFile_Create+0x114>
	{
		// Open the CSV File
		if (f_open(&File, Filename, FA_OPEN_ALWAYS | FA_WRITE) == FR_OK)
 8008c56:	2212      	movs	r2, #18
 8008c58:	491b      	ldr	r1, [pc, #108]	@ (8008cc8 <CharaExtendedCSVFile_Create+0x11c>)
 8008c5a:	4820      	ldr	r0, [pc, #128]	@ (8008cdc <CharaExtendedCSVFile_Create+0x130>)
 8008c5c:	f7fe fea8 	bl	80079b0 <f_open>
 8008c60:	4603      	mov	r3, r0
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d11a      	bne.n	8008c9c <CharaExtendedCSVFile_Create+0xf0>
		{
			for(uint8_t i = 0; i < SD_NUM_COLUMNS; i++)
 8008c66:	2300      	movs	r3, #0
 8008c68:	717b      	strb	r3, [r7, #5]
 8008c6a:	e009      	b.n	8008c80 <CharaExtendedCSVFile_Create+0xd4>
			{
				f_printf(&File, "field%d,", i+1);
 8008c6c:	797b      	ldrb	r3, [r7, #5]
 8008c6e:	3301      	adds	r3, #1
 8008c70:	461a      	mov	r2, r3
 8008c72:	491b      	ldr	r1, [pc, #108]	@ (8008ce0 <CharaExtendedCSVFile_Create+0x134>)
 8008c74:	4819      	ldr	r0, [pc, #100]	@ (8008cdc <CharaExtendedCSVFile_Create+0x130>)
 8008c76:	f7ff fc29 	bl	80084cc <f_printf>
			for(uint8_t i = 0; i < SD_NUM_COLUMNS; i++)
 8008c7a:	797b      	ldrb	r3, [r7, #5]
 8008c7c:	3301      	adds	r3, #1
 8008c7e:	717b      	strb	r3, [r7, #5]
 8008c80:	797b      	ldrb	r3, [r7, #5]
 8008c82:	2b3f      	cmp	r3, #63	@ 0x3f
 8008c84:	d9f2      	bls.n	8008c6c <CharaExtendedCSVFile_Create+0xc0>

			}

			// Write a new line character
			f_puts("rowcount", &File);
 8008c86:	4915      	ldr	r1, [pc, #84]	@ (8008cdc <CharaExtendedCSVFile_Create+0x130>)
 8008c88:	4816      	ldr	r0, [pc, #88]	@ (8008ce4 <CharaExtendedCSVFile_Create+0x138>)
 8008c8a:	f7ff fbfa 	bl	8008482 <f_puts>
			f_puts("\n", &File);
 8008c8e:	4913      	ldr	r1, [pc, #76]	@ (8008cdc <CharaExtendedCSVFile_Create+0x130>)
 8008c90:	4815      	ldr	r0, [pc, #84]	@ (8008ce8 <CharaExtendedCSVFile_Create+0x13c>)
 8008c92:	f7ff fbf6 	bl	8008482 <f_puts>

			// Close the file
			f_close(&File);
 8008c96:	4811      	ldr	r0, [pc, #68]	@ (8008cdc <CharaExtendedCSVFile_Create+0x130>)
 8008c98:	f7ff fa64 	bl	8008164 <f_close>
		}

		//--------------------------[ Open An Existing log.txt File, Update Its Content]-----------------------
		sprintf(TxBuffer, "The %s has been created.Total size and free space are %ld and %ld, respectively", Filename, TotalSize, FreeSpace);
 8008c9c:	4b13      	ldr	r3, [pc, #76]	@ (8008cec <CharaExtendedCSVFile_Create+0x140>)
 8008c9e:	681a      	ldr	r2, [r3, #0]
 8008ca0:	4b13      	ldr	r3, [pc, #76]	@ (8008cf0 <CharaExtendedCSVFile_Create+0x144>)
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	9300      	str	r3, [sp, #0]
 8008ca6:	4613      	mov	r3, r2
 8008ca8:	4a07      	ldr	r2, [pc, #28]	@ (8008cc8 <CharaExtendedCSVFile_Create+0x11c>)
 8008caa:	4912      	ldr	r1, [pc, #72]	@ (8008cf4 <CharaExtendedCSVFile_Create+0x148>)
 8008cac:	4812      	ldr	r0, [pc, #72]	@ (8008cf8 <CharaExtendedCSVFile_Create+0x14c>)
 8008cae:	f000 f899 	bl	8008de4 <siprintf>
		updateLogFile("INFO", TxBuffer);
 8008cb2:	4911      	ldr	r1, [pc, #68]	@ (8008cf8 <CharaExtendedCSVFile_Create+0x14c>)
 8008cb4:	4811      	ldr	r0, [pc, #68]	@ (8008cfc <CharaExtendedCSVFile_Create+0x150>)
 8008cb6:	f7ff fe97 	bl	80089e8 <updateLogFile>
		sdInitialized = true;
 8008cba:	4b11      	ldr	r3, [pc, #68]	@ (8008d00 <CharaExtendedCSVFile_Create+0x154>)
 8008cbc:	2201      	movs	r2, #1
 8008cbe:	701a      	strb	r2, [r3, #0]
	}
}
 8008cc0:	bf00      	nop
 8008cc2:	370c      	adds	r7, #12
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	bd90      	pop	{r4, r7, pc}
 8008cc8:	20002744 	.word	0x20002744
 8008ccc:	0800979c 	.word	0x0800979c
 8008cd0:	10624dd3 	.word	0x10624dd3
 8008cd4:	51eb851f 	.word	0x51eb851f
 8008cd8:	cccccccd 	.word	0xcccccccd
 8008cdc:	2000150c 	.word	0x2000150c
 8008ce0:	080097ac 	.word	0x080097ac
 8008ce4:	080097b8 	.word	0x080097b8
 8008ce8:	080097c4 	.word	0x080097c4
 8008cec:	20002548 	.word	0x20002548
 8008cf0:	2000254c 	.word	0x2000254c
 8008cf4:	080097c8 	.word	0x080097c8
 8008cf8:	20002550 	.word	0x20002550
 8008cfc:	08009818 	.word	0x08009818
 8008d00:	2000286c 	.word	0x2000286c

08008d04 <SD_Card_Test>:

void SD_Card_Test(void) {
 8008d04:	b580      	push	{r7, lr}
 8008d06:	f5ad 5d81 	sub.w	sp, sp, #4128	@ 0x1020
 8008d0a:	b086      	sub	sp, #24
 8008d0c:	af00      	add	r7, sp, #0
	// Define local variables
	FIL csv_File;   // File object
	static uint32_t sd_count = 0;

	// Check if the SD card is mounted
	if (sdInitialized  == true)
 8008d0e:	4b2e      	ldr	r3, [pc, #184]	@ (8008dc8 <SD_Card_Test+0xc4>)
 8008d10:	781b      	ldrb	r3, [r3, #0]
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d051      	beq.n	8008dba <SD_Card_Test+0xb6>
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, SET);
 8008d16:	2201      	movs	r2, #1
 8008d18:	2120      	movs	r1, #32
 8008d1a:	482c      	ldr	r0, [pc, #176]	@ (8008dcc <SD_Card_Test+0xc8>)
 8008d1c:	f7f9 fa32 	bl	8002184 <HAL_GPIO_WritePin>
		// Open the CSV File
		if (f_open(&csv_File, Filename, FA_OPEN_APPEND | FA_WRITE) == FR_OK)
 8008d20:	f107 0318 	add.w	r3, r7, #24
 8008d24:	3b14      	subs	r3, #20
 8008d26:	2232      	movs	r2, #50	@ 0x32
 8008d28:	4929      	ldr	r1, [pc, #164]	@ (8008dd0 <SD_Card_Test+0xcc>)
 8008d2a:	4618      	mov	r0, r3
 8008d2c:	f7fe fe40 	bl	80079b0 <f_open>
 8008d30:	4603      	mov	r3, r0
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d137      	bne.n	8008da6 <SD_Card_Test+0xa2>
		{
			// Write the count to the File
			for(uint8_t i = 0; i < SD_NUM_COLUMNS; i++)
 8008d36:	2300      	movs	r3, #0
 8008d38:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8008d3c:	f102 0217 	add.w	r2, r2, #23
 8008d40:	7013      	strb	r3, [r2, #0]
 8008d42:	e019      	b.n	8008d78 <SD_Card_Test+0x74>
			{

				f_printf(&csv_File, "%ld,", iTxArr[i]);
 8008d44:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8008d48:	f103 0317 	add.w	r3, r3, #23
 8008d4c:	781b      	ldrb	r3, [r3, #0]
 8008d4e:	4a21      	ldr	r2, [pc, #132]	@ (8008dd4 <SD_Card_Test+0xd0>)
 8008d50:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008d54:	f107 0318 	add.w	r3, r7, #24
 8008d58:	3b14      	subs	r3, #20
 8008d5a:	491f      	ldr	r1, [pc, #124]	@ (8008dd8 <SD_Card_Test+0xd4>)
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	f7ff fbb5 	bl	80084cc <f_printf>
			for(uint8_t i = 0; i < SD_NUM_COLUMNS; i++)
 8008d62:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8008d66:	f103 0317 	add.w	r3, r3, #23
 8008d6a:	781b      	ldrb	r3, [r3, #0]
 8008d6c:	3301      	adds	r3, #1
 8008d6e:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8008d72:	f102 0217 	add.w	r2, r2, #23
 8008d76:	7013      	strb	r3, [r2, #0]
 8008d78:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8008d7c:	f103 0317 	add.w	r3, r3, #23
 8008d80:	781b      	ldrb	r3, [r3, #0]
 8008d82:	2b3f      	cmp	r3, #63	@ 0x3f
 8008d84:	d9de      	bls.n	8008d44 <SD_Card_Test+0x40>

			}

			f_printf(&csv_File, "%ld\n", sd_count + 1);
 8008d86:	4b15      	ldr	r3, [pc, #84]	@ (8008ddc <SD_Card_Test+0xd8>)
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	1c5a      	adds	r2, r3, #1
 8008d8c:	f107 0318 	add.w	r3, r7, #24
 8008d90:	3b14      	subs	r3, #20
 8008d92:	4913      	ldr	r1, [pc, #76]	@ (8008de0 <SD_Card_Test+0xdc>)
 8008d94:	4618      	mov	r0, r3
 8008d96:	f7ff fb99 	bl	80084cc <f_printf>

			// Close the File
			f_close(&csv_File);
 8008d9a:	f107 0318 	add.w	r3, r7, #24
 8008d9e:	3b14      	subs	r3, #20
 8008da0:	4618      	mov	r0, r3
 8008da2:	f7ff f9df 	bl	8008164 <f_close>
		} else
		{
			// Write Error handler function
		}
		sd_count++;
 8008da6:	4b0d      	ldr	r3, [pc, #52]	@ (8008ddc <SD_Card_Test+0xd8>)
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	3301      	adds	r3, #1
 8008dac:	4a0b      	ldr	r2, [pc, #44]	@ (8008ddc <SD_Card_Test+0xd8>)
 8008dae:	6013      	str	r3, [r2, #0]
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, RESET);
 8008db0:	2200      	movs	r2, #0
 8008db2:	2120      	movs	r1, #32
 8008db4:	4805      	ldr	r0, [pc, #20]	@ (8008dcc <SD_Card_Test+0xc8>)
 8008db6:	f7f9 f9e5 	bl	8002184 <HAL_GPIO_WritePin>
	{
		// Write Error handler function
	}


}
 8008dba:	bf00      	nop
 8008dbc:	f507 5781 	add.w	r7, r7, #4128	@ 0x1020
 8008dc0:	3718      	adds	r7, #24
 8008dc2:	46bd      	mov	sp, r7
 8008dc4:	bd80      	pop	{r7, pc}
 8008dc6:	bf00      	nop
 8008dc8:	2000286c 	.word	0x2000286c
 8008dcc:	40020000 	.word	0x40020000
 8008dd0:	20002744 	.word	0x20002744
 8008dd4:	20002754 	.word	0x20002754
 8008dd8:	08009820 	.word	0x08009820
 8008ddc:	20002870 	.word	0x20002870
 8008de0:	08009828 	.word	0x08009828

08008de4 <siprintf>:
 8008de4:	b40e      	push	{r1, r2, r3}
 8008de6:	b500      	push	{lr}
 8008de8:	b09c      	sub	sp, #112	@ 0x70
 8008dea:	ab1d      	add	r3, sp, #116	@ 0x74
 8008dec:	9002      	str	r0, [sp, #8]
 8008dee:	9006      	str	r0, [sp, #24]
 8008df0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008df4:	4809      	ldr	r0, [pc, #36]	@ (8008e1c <siprintf+0x38>)
 8008df6:	9107      	str	r1, [sp, #28]
 8008df8:	9104      	str	r1, [sp, #16]
 8008dfa:	4909      	ldr	r1, [pc, #36]	@ (8008e20 <siprintf+0x3c>)
 8008dfc:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e00:	9105      	str	r1, [sp, #20]
 8008e02:	6800      	ldr	r0, [r0, #0]
 8008e04:	9301      	str	r3, [sp, #4]
 8008e06:	a902      	add	r1, sp, #8
 8008e08:	f000 f994 	bl	8009134 <_svfiprintf_r>
 8008e0c:	9b02      	ldr	r3, [sp, #8]
 8008e0e:	2200      	movs	r2, #0
 8008e10:	701a      	strb	r2, [r3, #0]
 8008e12:	b01c      	add	sp, #112	@ 0x70
 8008e14:	f85d eb04 	ldr.w	lr, [sp], #4
 8008e18:	b003      	add	sp, #12
 8008e1a:	4770      	bx	lr
 8008e1c:	20000024 	.word	0x20000024
 8008e20:	ffff0208 	.word	0xffff0208

08008e24 <memset>:
 8008e24:	4402      	add	r2, r0
 8008e26:	4603      	mov	r3, r0
 8008e28:	4293      	cmp	r3, r2
 8008e2a:	d100      	bne.n	8008e2e <memset+0xa>
 8008e2c:	4770      	bx	lr
 8008e2e:	f803 1b01 	strb.w	r1, [r3], #1
 8008e32:	e7f9      	b.n	8008e28 <memset+0x4>

08008e34 <__errno>:
 8008e34:	4b01      	ldr	r3, [pc, #4]	@ (8008e3c <__errno+0x8>)
 8008e36:	6818      	ldr	r0, [r3, #0]
 8008e38:	4770      	bx	lr
 8008e3a:	bf00      	nop
 8008e3c:	20000024 	.word	0x20000024

08008e40 <__libc_init_array>:
 8008e40:	b570      	push	{r4, r5, r6, lr}
 8008e42:	4d0d      	ldr	r5, [pc, #52]	@ (8008e78 <__libc_init_array+0x38>)
 8008e44:	4c0d      	ldr	r4, [pc, #52]	@ (8008e7c <__libc_init_array+0x3c>)
 8008e46:	1b64      	subs	r4, r4, r5
 8008e48:	10a4      	asrs	r4, r4, #2
 8008e4a:	2600      	movs	r6, #0
 8008e4c:	42a6      	cmp	r6, r4
 8008e4e:	d109      	bne.n	8008e64 <__libc_init_array+0x24>
 8008e50:	4d0b      	ldr	r5, [pc, #44]	@ (8008e80 <__libc_init_array+0x40>)
 8008e52:	4c0c      	ldr	r4, [pc, #48]	@ (8008e84 <__libc_init_array+0x44>)
 8008e54:	f000 fc66 	bl	8009724 <_init>
 8008e58:	1b64      	subs	r4, r4, r5
 8008e5a:	10a4      	asrs	r4, r4, #2
 8008e5c:	2600      	movs	r6, #0
 8008e5e:	42a6      	cmp	r6, r4
 8008e60:	d105      	bne.n	8008e6e <__libc_init_array+0x2e>
 8008e62:	bd70      	pop	{r4, r5, r6, pc}
 8008e64:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e68:	4798      	blx	r3
 8008e6a:	3601      	adds	r6, #1
 8008e6c:	e7ee      	b.n	8008e4c <__libc_init_array+0xc>
 8008e6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e72:	4798      	blx	r3
 8008e74:	3601      	adds	r6, #1
 8008e76:	e7f2      	b.n	8008e5e <__libc_init_array+0x1e>
 8008e78:	08009cc8 	.word	0x08009cc8
 8008e7c:	08009cc8 	.word	0x08009cc8
 8008e80:	08009cc8 	.word	0x08009cc8
 8008e84:	08009ccc 	.word	0x08009ccc

08008e88 <__retarget_lock_acquire_recursive>:
 8008e88:	4770      	bx	lr

08008e8a <__retarget_lock_release_recursive>:
 8008e8a:	4770      	bx	lr

08008e8c <_free_r>:
 8008e8c:	b538      	push	{r3, r4, r5, lr}
 8008e8e:	4605      	mov	r5, r0
 8008e90:	2900      	cmp	r1, #0
 8008e92:	d041      	beq.n	8008f18 <_free_r+0x8c>
 8008e94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008e98:	1f0c      	subs	r4, r1, #4
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	bfb8      	it	lt
 8008e9e:	18e4      	addlt	r4, r4, r3
 8008ea0:	f000 f8e0 	bl	8009064 <__malloc_lock>
 8008ea4:	4a1d      	ldr	r2, [pc, #116]	@ (8008f1c <_free_r+0x90>)
 8008ea6:	6813      	ldr	r3, [r2, #0]
 8008ea8:	b933      	cbnz	r3, 8008eb8 <_free_r+0x2c>
 8008eaa:	6063      	str	r3, [r4, #4]
 8008eac:	6014      	str	r4, [r2, #0]
 8008eae:	4628      	mov	r0, r5
 8008eb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008eb4:	f000 b8dc 	b.w	8009070 <__malloc_unlock>
 8008eb8:	42a3      	cmp	r3, r4
 8008eba:	d908      	bls.n	8008ece <_free_r+0x42>
 8008ebc:	6820      	ldr	r0, [r4, #0]
 8008ebe:	1821      	adds	r1, r4, r0
 8008ec0:	428b      	cmp	r3, r1
 8008ec2:	bf01      	itttt	eq
 8008ec4:	6819      	ldreq	r1, [r3, #0]
 8008ec6:	685b      	ldreq	r3, [r3, #4]
 8008ec8:	1809      	addeq	r1, r1, r0
 8008eca:	6021      	streq	r1, [r4, #0]
 8008ecc:	e7ed      	b.n	8008eaa <_free_r+0x1e>
 8008ece:	461a      	mov	r2, r3
 8008ed0:	685b      	ldr	r3, [r3, #4]
 8008ed2:	b10b      	cbz	r3, 8008ed8 <_free_r+0x4c>
 8008ed4:	42a3      	cmp	r3, r4
 8008ed6:	d9fa      	bls.n	8008ece <_free_r+0x42>
 8008ed8:	6811      	ldr	r1, [r2, #0]
 8008eda:	1850      	adds	r0, r2, r1
 8008edc:	42a0      	cmp	r0, r4
 8008ede:	d10b      	bne.n	8008ef8 <_free_r+0x6c>
 8008ee0:	6820      	ldr	r0, [r4, #0]
 8008ee2:	4401      	add	r1, r0
 8008ee4:	1850      	adds	r0, r2, r1
 8008ee6:	4283      	cmp	r3, r0
 8008ee8:	6011      	str	r1, [r2, #0]
 8008eea:	d1e0      	bne.n	8008eae <_free_r+0x22>
 8008eec:	6818      	ldr	r0, [r3, #0]
 8008eee:	685b      	ldr	r3, [r3, #4]
 8008ef0:	6053      	str	r3, [r2, #4]
 8008ef2:	4408      	add	r0, r1
 8008ef4:	6010      	str	r0, [r2, #0]
 8008ef6:	e7da      	b.n	8008eae <_free_r+0x22>
 8008ef8:	d902      	bls.n	8008f00 <_free_r+0x74>
 8008efa:	230c      	movs	r3, #12
 8008efc:	602b      	str	r3, [r5, #0]
 8008efe:	e7d6      	b.n	8008eae <_free_r+0x22>
 8008f00:	6820      	ldr	r0, [r4, #0]
 8008f02:	1821      	adds	r1, r4, r0
 8008f04:	428b      	cmp	r3, r1
 8008f06:	bf04      	itt	eq
 8008f08:	6819      	ldreq	r1, [r3, #0]
 8008f0a:	685b      	ldreq	r3, [r3, #4]
 8008f0c:	6063      	str	r3, [r4, #4]
 8008f0e:	bf04      	itt	eq
 8008f10:	1809      	addeq	r1, r1, r0
 8008f12:	6021      	streq	r1, [r4, #0]
 8008f14:	6054      	str	r4, [r2, #4]
 8008f16:	e7ca      	b.n	8008eae <_free_r+0x22>
 8008f18:	bd38      	pop	{r3, r4, r5, pc}
 8008f1a:	bf00      	nop
 8008f1c:	200029b8 	.word	0x200029b8

08008f20 <sbrk_aligned>:
 8008f20:	b570      	push	{r4, r5, r6, lr}
 8008f22:	4e0f      	ldr	r6, [pc, #60]	@ (8008f60 <sbrk_aligned+0x40>)
 8008f24:	460c      	mov	r4, r1
 8008f26:	6831      	ldr	r1, [r6, #0]
 8008f28:	4605      	mov	r5, r0
 8008f2a:	b911      	cbnz	r1, 8008f32 <sbrk_aligned+0x12>
 8008f2c:	f000 fba6 	bl	800967c <_sbrk_r>
 8008f30:	6030      	str	r0, [r6, #0]
 8008f32:	4621      	mov	r1, r4
 8008f34:	4628      	mov	r0, r5
 8008f36:	f000 fba1 	bl	800967c <_sbrk_r>
 8008f3a:	1c43      	adds	r3, r0, #1
 8008f3c:	d103      	bne.n	8008f46 <sbrk_aligned+0x26>
 8008f3e:	f04f 34ff 	mov.w	r4, #4294967295
 8008f42:	4620      	mov	r0, r4
 8008f44:	bd70      	pop	{r4, r5, r6, pc}
 8008f46:	1cc4      	adds	r4, r0, #3
 8008f48:	f024 0403 	bic.w	r4, r4, #3
 8008f4c:	42a0      	cmp	r0, r4
 8008f4e:	d0f8      	beq.n	8008f42 <sbrk_aligned+0x22>
 8008f50:	1a21      	subs	r1, r4, r0
 8008f52:	4628      	mov	r0, r5
 8008f54:	f000 fb92 	bl	800967c <_sbrk_r>
 8008f58:	3001      	adds	r0, #1
 8008f5a:	d1f2      	bne.n	8008f42 <sbrk_aligned+0x22>
 8008f5c:	e7ef      	b.n	8008f3e <sbrk_aligned+0x1e>
 8008f5e:	bf00      	nop
 8008f60:	200029b4 	.word	0x200029b4

08008f64 <_malloc_r>:
 8008f64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f68:	1ccd      	adds	r5, r1, #3
 8008f6a:	f025 0503 	bic.w	r5, r5, #3
 8008f6e:	3508      	adds	r5, #8
 8008f70:	2d0c      	cmp	r5, #12
 8008f72:	bf38      	it	cc
 8008f74:	250c      	movcc	r5, #12
 8008f76:	2d00      	cmp	r5, #0
 8008f78:	4606      	mov	r6, r0
 8008f7a:	db01      	blt.n	8008f80 <_malloc_r+0x1c>
 8008f7c:	42a9      	cmp	r1, r5
 8008f7e:	d904      	bls.n	8008f8a <_malloc_r+0x26>
 8008f80:	230c      	movs	r3, #12
 8008f82:	6033      	str	r3, [r6, #0]
 8008f84:	2000      	movs	r0, #0
 8008f86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f8a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009060 <_malloc_r+0xfc>
 8008f8e:	f000 f869 	bl	8009064 <__malloc_lock>
 8008f92:	f8d8 3000 	ldr.w	r3, [r8]
 8008f96:	461c      	mov	r4, r3
 8008f98:	bb44      	cbnz	r4, 8008fec <_malloc_r+0x88>
 8008f9a:	4629      	mov	r1, r5
 8008f9c:	4630      	mov	r0, r6
 8008f9e:	f7ff ffbf 	bl	8008f20 <sbrk_aligned>
 8008fa2:	1c43      	adds	r3, r0, #1
 8008fa4:	4604      	mov	r4, r0
 8008fa6:	d158      	bne.n	800905a <_malloc_r+0xf6>
 8008fa8:	f8d8 4000 	ldr.w	r4, [r8]
 8008fac:	4627      	mov	r7, r4
 8008fae:	2f00      	cmp	r7, #0
 8008fb0:	d143      	bne.n	800903a <_malloc_r+0xd6>
 8008fb2:	2c00      	cmp	r4, #0
 8008fb4:	d04b      	beq.n	800904e <_malloc_r+0xea>
 8008fb6:	6823      	ldr	r3, [r4, #0]
 8008fb8:	4639      	mov	r1, r7
 8008fba:	4630      	mov	r0, r6
 8008fbc:	eb04 0903 	add.w	r9, r4, r3
 8008fc0:	f000 fb5c 	bl	800967c <_sbrk_r>
 8008fc4:	4581      	cmp	r9, r0
 8008fc6:	d142      	bne.n	800904e <_malloc_r+0xea>
 8008fc8:	6821      	ldr	r1, [r4, #0]
 8008fca:	1a6d      	subs	r5, r5, r1
 8008fcc:	4629      	mov	r1, r5
 8008fce:	4630      	mov	r0, r6
 8008fd0:	f7ff ffa6 	bl	8008f20 <sbrk_aligned>
 8008fd4:	3001      	adds	r0, #1
 8008fd6:	d03a      	beq.n	800904e <_malloc_r+0xea>
 8008fd8:	6823      	ldr	r3, [r4, #0]
 8008fda:	442b      	add	r3, r5
 8008fdc:	6023      	str	r3, [r4, #0]
 8008fde:	f8d8 3000 	ldr.w	r3, [r8]
 8008fe2:	685a      	ldr	r2, [r3, #4]
 8008fe4:	bb62      	cbnz	r2, 8009040 <_malloc_r+0xdc>
 8008fe6:	f8c8 7000 	str.w	r7, [r8]
 8008fea:	e00f      	b.n	800900c <_malloc_r+0xa8>
 8008fec:	6822      	ldr	r2, [r4, #0]
 8008fee:	1b52      	subs	r2, r2, r5
 8008ff0:	d420      	bmi.n	8009034 <_malloc_r+0xd0>
 8008ff2:	2a0b      	cmp	r2, #11
 8008ff4:	d917      	bls.n	8009026 <_malloc_r+0xc2>
 8008ff6:	1961      	adds	r1, r4, r5
 8008ff8:	42a3      	cmp	r3, r4
 8008ffa:	6025      	str	r5, [r4, #0]
 8008ffc:	bf18      	it	ne
 8008ffe:	6059      	strne	r1, [r3, #4]
 8009000:	6863      	ldr	r3, [r4, #4]
 8009002:	bf08      	it	eq
 8009004:	f8c8 1000 	streq.w	r1, [r8]
 8009008:	5162      	str	r2, [r4, r5]
 800900a:	604b      	str	r3, [r1, #4]
 800900c:	4630      	mov	r0, r6
 800900e:	f000 f82f 	bl	8009070 <__malloc_unlock>
 8009012:	f104 000b 	add.w	r0, r4, #11
 8009016:	1d23      	adds	r3, r4, #4
 8009018:	f020 0007 	bic.w	r0, r0, #7
 800901c:	1ac2      	subs	r2, r0, r3
 800901e:	bf1c      	itt	ne
 8009020:	1a1b      	subne	r3, r3, r0
 8009022:	50a3      	strne	r3, [r4, r2]
 8009024:	e7af      	b.n	8008f86 <_malloc_r+0x22>
 8009026:	6862      	ldr	r2, [r4, #4]
 8009028:	42a3      	cmp	r3, r4
 800902a:	bf0c      	ite	eq
 800902c:	f8c8 2000 	streq.w	r2, [r8]
 8009030:	605a      	strne	r2, [r3, #4]
 8009032:	e7eb      	b.n	800900c <_malloc_r+0xa8>
 8009034:	4623      	mov	r3, r4
 8009036:	6864      	ldr	r4, [r4, #4]
 8009038:	e7ae      	b.n	8008f98 <_malloc_r+0x34>
 800903a:	463c      	mov	r4, r7
 800903c:	687f      	ldr	r7, [r7, #4]
 800903e:	e7b6      	b.n	8008fae <_malloc_r+0x4a>
 8009040:	461a      	mov	r2, r3
 8009042:	685b      	ldr	r3, [r3, #4]
 8009044:	42a3      	cmp	r3, r4
 8009046:	d1fb      	bne.n	8009040 <_malloc_r+0xdc>
 8009048:	2300      	movs	r3, #0
 800904a:	6053      	str	r3, [r2, #4]
 800904c:	e7de      	b.n	800900c <_malloc_r+0xa8>
 800904e:	230c      	movs	r3, #12
 8009050:	6033      	str	r3, [r6, #0]
 8009052:	4630      	mov	r0, r6
 8009054:	f000 f80c 	bl	8009070 <__malloc_unlock>
 8009058:	e794      	b.n	8008f84 <_malloc_r+0x20>
 800905a:	6005      	str	r5, [r0, #0]
 800905c:	e7d6      	b.n	800900c <_malloc_r+0xa8>
 800905e:	bf00      	nop
 8009060:	200029b8 	.word	0x200029b8

08009064 <__malloc_lock>:
 8009064:	4801      	ldr	r0, [pc, #4]	@ (800906c <__malloc_lock+0x8>)
 8009066:	f7ff bf0f 	b.w	8008e88 <__retarget_lock_acquire_recursive>
 800906a:	bf00      	nop
 800906c:	200029b0 	.word	0x200029b0

08009070 <__malloc_unlock>:
 8009070:	4801      	ldr	r0, [pc, #4]	@ (8009078 <__malloc_unlock+0x8>)
 8009072:	f7ff bf0a 	b.w	8008e8a <__retarget_lock_release_recursive>
 8009076:	bf00      	nop
 8009078:	200029b0 	.word	0x200029b0

0800907c <__ssputs_r>:
 800907c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009080:	688e      	ldr	r6, [r1, #8]
 8009082:	461f      	mov	r7, r3
 8009084:	42be      	cmp	r6, r7
 8009086:	680b      	ldr	r3, [r1, #0]
 8009088:	4682      	mov	sl, r0
 800908a:	460c      	mov	r4, r1
 800908c:	4690      	mov	r8, r2
 800908e:	d82d      	bhi.n	80090ec <__ssputs_r+0x70>
 8009090:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009094:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009098:	d026      	beq.n	80090e8 <__ssputs_r+0x6c>
 800909a:	6965      	ldr	r5, [r4, #20]
 800909c:	6909      	ldr	r1, [r1, #16]
 800909e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80090a2:	eba3 0901 	sub.w	r9, r3, r1
 80090a6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80090aa:	1c7b      	adds	r3, r7, #1
 80090ac:	444b      	add	r3, r9
 80090ae:	106d      	asrs	r5, r5, #1
 80090b0:	429d      	cmp	r5, r3
 80090b2:	bf38      	it	cc
 80090b4:	461d      	movcc	r5, r3
 80090b6:	0553      	lsls	r3, r2, #21
 80090b8:	d527      	bpl.n	800910a <__ssputs_r+0x8e>
 80090ba:	4629      	mov	r1, r5
 80090bc:	f7ff ff52 	bl	8008f64 <_malloc_r>
 80090c0:	4606      	mov	r6, r0
 80090c2:	b360      	cbz	r0, 800911e <__ssputs_r+0xa2>
 80090c4:	6921      	ldr	r1, [r4, #16]
 80090c6:	464a      	mov	r2, r9
 80090c8:	f000 fae8 	bl	800969c <memcpy>
 80090cc:	89a3      	ldrh	r3, [r4, #12]
 80090ce:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80090d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80090d6:	81a3      	strh	r3, [r4, #12]
 80090d8:	6126      	str	r6, [r4, #16]
 80090da:	6165      	str	r5, [r4, #20]
 80090dc:	444e      	add	r6, r9
 80090de:	eba5 0509 	sub.w	r5, r5, r9
 80090e2:	6026      	str	r6, [r4, #0]
 80090e4:	60a5      	str	r5, [r4, #8]
 80090e6:	463e      	mov	r6, r7
 80090e8:	42be      	cmp	r6, r7
 80090ea:	d900      	bls.n	80090ee <__ssputs_r+0x72>
 80090ec:	463e      	mov	r6, r7
 80090ee:	6820      	ldr	r0, [r4, #0]
 80090f0:	4632      	mov	r2, r6
 80090f2:	4641      	mov	r1, r8
 80090f4:	f000 faa8 	bl	8009648 <memmove>
 80090f8:	68a3      	ldr	r3, [r4, #8]
 80090fa:	1b9b      	subs	r3, r3, r6
 80090fc:	60a3      	str	r3, [r4, #8]
 80090fe:	6823      	ldr	r3, [r4, #0]
 8009100:	4433      	add	r3, r6
 8009102:	6023      	str	r3, [r4, #0]
 8009104:	2000      	movs	r0, #0
 8009106:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800910a:	462a      	mov	r2, r5
 800910c:	f000 fad4 	bl	80096b8 <_realloc_r>
 8009110:	4606      	mov	r6, r0
 8009112:	2800      	cmp	r0, #0
 8009114:	d1e0      	bne.n	80090d8 <__ssputs_r+0x5c>
 8009116:	6921      	ldr	r1, [r4, #16]
 8009118:	4650      	mov	r0, sl
 800911a:	f7ff feb7 	bl	8008e8c <_free_r>
 800911e:	230c      	movs	r3, #12
 8009120:	f8ca 3000 	str.w	r3, [sl]
 8009124:	89a3      	ldrh	r3, [r4, #12]
 8009126:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800912a:	81a3      	strh	r3, [r4, #12]
 800912c:	f04f 30ff 	mov.w	r0, #4294967295
 8009130:	e7e9      	b.n	8009106 <__ssputs_r+0x8a>
	...

08009134 <_svfiprintf_r>:
 8009134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009138:	4698      	mov	r8, r3
 800913a:	898b      	ldrh	r3, [r1, #12]
 800913c:	061b      	lsls	r3, r3, #24
 800913e:	b09d      	sub	sp, #116	@ 0x74
 8009140:	4607      	mov	r7, r0
 8009142:	460d      	mov	r5, r1
 8009144:	4614      	mov	r4, r2
 8009146:	d510      	bpl.n	800916a <_svfiprintf_r+0x36>
 8009148:	690b      	ldr	r3, [r1, #16]
 800914a:	b973      	cbnz	r3, 800916a <_svfiprintf_r+0x36>
 800914c:	2140      	movs	r1, #64	@ 0x40
 800914e:	f7ff ff09 	bl	8008f64 <_malloc_r>
 8009152:	6028      	str	r0, [r5, #0]
 8009154:	6128      	str	r0, [r5, #16]
 8009156:	b930      	cbnz	r0, 8009166 <_svfiprintf_r+0x32>
 8009158:	230c      	movs	r3, #12
 800915a:	603b      	str	r3, [r7, #0]
 800915c:	f04f 30ff 	mov.w	r0, #4294967295
 8009160:	b01d      	add	sp, #116	@ 0x74
 8009162:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009166:	2340      	movs	r3, #64	@ 0x40
 8009168:	616b      	str	r3, [r5, #20]
 800916a:	2300      	movs	r3, #0
 800916c:	9309      	str	r3, [sp, #36]	@ 0x24
 800916e:	2320      	movs	r3, #32
 8009170:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009174:	f8cd 800c 	str.w	r8, [sp, #12]
 8009178:	2330      	movs	r3, #48	@ 0x30
 800917a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009318 <_svfiprintf_r+0x1e4>
 800917e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009182:	f04f 0901 	mov.w	r9, #1
 8009186:	4623      	mov	r3, r4
 8009188:	469a      	mov	sl, r3
 800918a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800918e:	b10a      	cbz	r2, 8009194 <_svfiprintf_r+0x60>
 8009190:	2a25      	cmp	r2, #37	@ 0x25
 8009192:	d1f9      	bne.n	8009188 <_svfiprintf_r+0x54>
 8009194:	ebba 0b04 	subs.w	fp, sl, r4
 8009198:	d00b      	beq.n	80091b2 <_svfiprintf_r+0x7e>
 800919a:	465b      	mov	r3, fp
 800919c:	4622      	mov	r2, r4
 800919e:	4629      	mov	r1, r5
 80091a0:	4638      	mov	r0, r7
 80091a2:	f7ff ff6b 	bl	800907c <__ssputs_r>
 80091a6:	3001      	adds	r0, #1
 80091a8:	f000 80a7 	beq.w	80092fa <_svfiprintf_r+0x1c6>
 80091ac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80091ae:	445a      	add	r2, fp
 80091b0:	9209      	str	r2, [sp, #36]	@ 0x24
 80091b2:	f89a 3000 	ldrb.w	r3, [sl]
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	f000 809f 	beq.w	80092fa <_svfiprintf_r+0x1c6>
 80091bc:	2300      	movs	r3, #0
 80091be:	f04f 32ff 	mov.w	r2, #4294967295
 80091c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80091c6:	f10a 0a01 	add.w	sl, sl, #1
 80091ca:	9304      	str	r3, [sp, #16]
 80091cc:	9307      	str	r3, [sp, #28]
 80091ce:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80091d2:	931a      	str	r3, [sp, #104]	@ 0x68
 80091d4:	4654      	mov	r4, sl
 80091d6:	2205      	movs	r2, #5
 80091d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091dc:	484e      	ldr	r0, [pc, #312]	@ (8009318 <_svfiprintf_r+0x1e4>)
 80091de:	f7f7 f817 	bl	8000210 <memchr>
 80091e2:	9a04      	ldr	r2, [sp, #16]
 80091e4:	b9d8      	cbnz	r0, 800921e <_svfiprintf_r+0xea>
 80091e6:	06d0      	lsls	r0, r2, #27
 80091e8:	bf44      	itt	mi
 80091ea:	2320      	movmi	r3, #32
 80091ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80091f0:	0711      	lsls	r1, r2, #28
 80091f2:	bf44      	itt	mi
 80091f4:	232b      	movmi	r3, #43	@ 0x2b
 80091f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80091fa:	f89a 3000 	ldrb.w	r3, [sl]
 80091fe:	2b2a      	cmp	r3, #42	@ 0x2a
 8009200:	d015      	beq.n	800922e <_svfiprintf_r+0xfa>
 8009202:	9a07      	ldr	r2, [sp, #28]
 8009204:	4654      	mov	r4, sl
 8009206:	2000      	movs	r0, #0
 8009208:	f04f 0c0a 	mov.w	ip, #10
 800920c:	4621      	mov	r1, r4
 800920e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009212:	3b30      	subs	r3, #48	@ 0x30
 8009214:	2b09      	cmp	r3, #9
 8009216:	d94b      	bls.n	80092b0 <_svfiprintf_r+0x17c>
 8009218:	b1b0      	cbz	r0, 8009248 <_svfiprintf_r+0x114>
 800921a:	9207      	str	r2, [sp, #28]
 800921c:	e014      	b.n	8009248 <_svfiprintf_r+0x114>
 800921e:	eba0 0308 	sub.w	r3, r0, r8
 8009222:	fa09 f303 	lsl.w	r3, r9, r3
 8009226:	4313      	orrs	r3, r2
 8009228:	9304      	str	r3, [sp, #16]
 800922a:	46a2      	mov	sl, r4
 800922c:	e7d2      	b.n	80091d4 <_svfiprintf_r+0xa0>
 800922e:	9b03      	ldr	r3, [sp, #12]
 8009230:	1d19      	adds	r1, r3, #4
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	9103      	str	r1, [sp, #12]
 8009236:	2b00      	cmp	r3, #0
 8009238:	bfbb      	ittet	lt
 800923a:	425b      	neglt	r3, r3
 800923c:	f042 0202 	orrlt.w	r2, r2, #2
 8009240:	9307      	strge	r3, [sp, #28]
 8009242:	9307      	strlt	r3, [sp, #28]
 8009244:	bfb8      	it	lt
 8009246:	9204      	strlt	r2, [sp, #16]
 8009248:	7823      	ldrb	r3, [r4, #0]
 800924a:	2b2e      	cmp	r3, #46	@ 0x2e
 800924c:	d10a      	bne.n	8009264 <_svfiprintf_r+0x130>
 800924e:	7863      	ldrb	r3, [r4, #1]
 8009250:	2b2a      	cmp	r3, #42	@ 0x2a
 8009252:	d132      	bne.n	80092ba <_svfiprintf_r+0x186>
 8009254:	9b03      	ldr	r3, [sp, #12]
 8009256:	1d1a      	adds	r2, r3, #4
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	9203      	str	r2, [sp, #12]
 800925c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009260:	3402      	adds	r4, #2
 8009262:	9305      	str	r3, [sp, #20]
 8009264:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009328 <_svfiprintf_r+0x1f4>
 8009268:	7821      	ldrb	r1, [r4, #0]
 800926a:	2203      	movs	r2, #3
 800926c:	4650      	mov	r0, sl
 800926e:	f7f6 ffcf 	bl	8000210 <memchr>
 8009272:	b138      	cbz	r0, 8009284 <_svfiprintf_r+0x150>
 8009274:	9b04      	ldr	r3, [sp, #16]
 8009276:	eba0 000a 	sub.w	r0, r0, sl
 800927a:	2240      	movs	r2, #64	@ 0x40
 800927c:	4082      	lsls	r2, r0
 800927e:	4313      	orrs	r3, r2
 8009280:	3401      	adds	r4, #1
 8009282:	9304      	str	r3, [sp, #16]
 8009284:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009288:	4824      	ldr	r0, [pc, #144]	@ (800931c <_svfiprintf_r+0x1e8>)
 800928a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800928e:	2206      	movs	r2, #6
 8009290:	f7f6 ffbe 	bl	8000210 <memchr>
 8009294:	2800      	cmp	r0, #0
 8009296:	d036      	beq.n	8009306 <_svfiprintf_r+0x1d2>
 8009298:	4b21      	ldr	r3, [pc, #132]	@ (8009320 <_svfiprintf_r+0x1ec>)
 800929a:	bb1b      	cbnz	r3, 80092e4 <_svfiprintf_r+0x1b0>
 800929c:	9b03      	ldr	r3, [sp, #12]
 800929e:	3307      	adds	r3, #7
 80092a0:	f023 0307 	bic.w	r3, r3, #7
 80092a4:	3308      	adds	r3, #8
 80092a6:	9303      	str	r3, [sp, #12]
 80092a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80092aa:	4433      	add	r3, r6
 80092ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80092ae:	e76a      	b.n	8009186 <_svfiprintf_r+0x52>
 80092b0:	fb0c 3202 	mla	r2, ip, r2, r3
 80092b4:	460c      	mov	r4, r1
 80092b6:	2001      	movs	r0, #1
 80092b8:	e7a8      	b.n	800920c <_svfiprintf_r+0xd8>
 80092ba:	2300      	movs	r3, #0
 80092bc:	3401      	adds	r4, #1
 80092be:	9305      	str	r3, [sp, #20]
 80092c0:	4619      	mov	r1, r3
 80092c2:	f04f 0c0a 	mov.w	ip, #10
 80092c6:	4620      	mov	r0, r4
 80092c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80092cc:	3a30      	subs	r2, #48	@ 0x30
 80092ce:	2a09      	cmp	r2, #9
 80092d0:	d903      	bls.n	80092da <_svfiprintf_r+0x1a6>
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d0c6      	beq.n	8009264 <_svfiprintf_r+0x130>
 80092d6:	9105      	str	r1, [sp, #20]
 80092d8:	e7c4      	b.n	8009264 <_svfiprintf_r+0x130>
 80092da:	fb0c 2101 	mla	r1, ip, r1, r2
 80092de:	4604      	mov	r4, r0
 80092e0:	2301      	movs	r3, #1
 80092e2:	e7f0      	b.n	80092c6 <_svfiprintf_r+0x192>
 80092e4:	ab03      	add	r3, sp, #12
 80092e6:	9300      	str	r3, [sp, #0]
 80092e8:	462a      	mov	r2, r5
 80092ea:	4b0e      	ldr	r3, [pc, #56]	@ (8009324 <_svfiprintf_r+0x1f0>)
 80092ec:	a904      	add	r1, sp, #16
 80092ee:	4638      	mov	r0, r7
 80092f0:	f3af 8000 	nop.w
 80092f4:	1c42      	adds	r2, r0, #1
 80092f6:	4606      	mov	r6, r0
 80092f8:	d1d6      	bne.n	80092a8 <_svfiprintf_r+0x174>
 80092fa:	89ab      	ldrh	r3, [r5, #12]
 80092fc:	065b      	lsls	r3, r3, #25
 80092fe:	f53f af2d 	bmi.w	800915c <_svfiprintf_r+0x28>
 8009302:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009304:	e72c      	b.n	8009160 <_svfiprintf_r+0x2c>
 8009306:	ab03      	add	r3, sp, #12
 8009308:	9300      	str	r3, [sp, #0]
 800930a:	462a      	mov	r2, r5
 800930c:	4b05      	ldr	r3, [pc, #20]	@ (8009324 <_svfiprintf_r+0x1f0>)
 800930e:	a904      	add	r1, sp, #16
 8009310:	4638      	mov	r0, r7
 8009312:	f000 f879 	bl	8009408 <_printf_i>
 8009316:	e7ed      	b.n	80092f4 <_svfiprintf_r+0x1c0>
 8009318:	08009c8d 	.word	0x08009c8d
 800931c:	08009c97 	.word	0x08009c97
 8009320:	00000000 	.word	0x00000000
 8009324:	0800907d 	.word	0x0800907d
 8009328:	08009c93 	.word	0x08009c93

0800932c <_printf_common>:
 800932c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009330:	4616      	mov	r6, r2
 8009332:	4698      	mov	r8, r3
 8009334:	688a      	ldr	r2, [r1, #8]
 8009336:	690b      	ldr	r3, [r1, #16]
 8009338:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800933c:	4293      	cmp	r3, r2
 800933e:	bfb8      	it	lt
 8009340:	4613      	movlt	r3, r2
 8009342:	6033      	str	r3, [r6, #0]
 8009344:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009348:	4607      	mov	r7, r0
 800934a:	460c      	mov	r4, r1
 800934c:	b10a      	cbz	r2, 8009352 <_printf_common+0x26>
 800934e:	3301      	adds	r3, #1
 8009350:	6033      	str	r3, [r6, #0]
 8009352:	6823      	ldr	r3, [r4, #0]
 8009354:	0699      	lsls	r1, r3, #26
 8009356:	bf42      	ittt	mi
 8009358:	6833      	ldrmi	r3, [r6, #0]
 800935a:	3302      	addmi	r3, #2
 800935c:	6033      	strmi	r3, [r6, #0]
 800935e:	6825      	ldr	r5, [r4, #0]
 8009360:	f015 0506 	ands.w	r5, r5, #6
 8009364:	d106      	bne.n	8009374 <_printf_common+0x48>
 8009366:	f104 0a19 	add.w	sl, r4, #25
 800936a:	68e3      	ldr	r3, [r4, #12]
 800936c:	6832      	ldr	r2, [r6, #0]
 800936e:	1a9b      	subs	r3, r3, r2
 8009370:	42ab      	cmp	r3, r5
 8009372:	dc26      	bgt.n	80093c2 <_printf_common+0x96>
 8009374:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009378:	6822      	ldr	r2, [r4, #0]
 800937a:	3b00      	subs	r3, #0
 800937c:	bf18      	it	ne
 800937e:	2301      	movne	r3, #1
 8009380:	0692      	lsls	r2, r2, #26
 8009382:	d42b      	bmi.n	80093dc <_printf_common+0xb0>
 8009384:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009388:	4641      	mov	r1, r8
 800938a:	4638      	mov	r0, r7
 800938c:	47c8      	blx	r9
 800938e:	3001      	adds	r0, #1
 8009390:	d01e      	beq.n	80093d0 <_printf_common+0xa4>
 8009392:	6823      	ldr	r3, [r4, #0]
 8009394:	6922      	ldr	r2, [r4, #16]
 8009396:	f003 0306 	and.w	r3, r3, #6
 800939a:	2b04      	cmp	r3, #4
 800939c:	bf02      	ittt	eq
 800939e:	68e5      	ldreq	r5, [r4, #12]
 80093a0:	6833      	ldreq	r3, [r6, #0]
 80093a2:	1aed      	subeq	r5, r5, r3
 80093a4:	68a3      	ldr	r3, [r4, #8]
 80093a6:	bf0c      	ite	eq
 80093a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80093ac:	2500      	movne	r5, #0
 80093ae:	4293      	cmp	r3, r2
 80093b0:	bfc4      	itt	gt
 80093b2:	1a9b      	subgt	r3, r3, r2
 80093b4:	18ed      	addgt	r5, r5, r3
 80093b6:	2600      	movs	r6, #0
 80093b8:	341a      	adds	r4, #26
 80093ba:	42b5      	cmp	r5, r6
 80093bc:	d11a      	bne.n	80093f4 <_printf_common+0xc8>
 80093be:	2000      	movs	r0, #0
 80093c0:	e008      	b.n	80093d4 <_printf_common+0xa8>
 80093c2:	2301      	movs	r3, #1
 80093c4:	4652      	mov	r2, sl
 80093c6:	4641      	mov	r1, r8
 80093c8:	4638      	mov	r0, r7
 80093ca:	47c8      	blx	r9
 80093cc:	3001      	adds	r0, #1
 80093ce:	d103      	bne.n	80093d8 <_printf_common+0xac>
 80093d0:	f04f 30ff 	mov.w	r0, #4294967295
 80093d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093d8:	3501      	adds	r5, #1
 80093da:	e7c6      	b.n	800936a <_printf_common+0x3e>
 80093dc:	18e1      	adds	r1, r4, r3
 80093de:	1c5a      	adds	r2, r3, #1
 80093e0:	2030      	movs	r0, #48	@ 0x30
 80093e2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80093e6:	4422      	add	r2, r4
 80093e8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80093ec:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80093f0:	3302      	adds	r3, #2
 80093f2:	e7c7      	b.n	8009384 <_printf_common+0x58>
 80093f4:	2301      	movs	r3, #1
 80093f6:	4622      	mov	r2, r4
 80093f8:	4641      	mov	r1, r8
 80093fa:	4638      	mov	r0, r7
 80093fc:	47c8      	blx	r9
 80093fe:	3001      	adds	r0, #1
 8009400:	d0e6      	beq.n	80093d0 <_printf_common+0xa4>
 8009402:	3601      	adds	r6, #1
 8009404:	e7d9      	b.n	80093ba <_printf_common+0x8e>
	...

08009408 <_printf_i>:
 8009408:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800940c:	7e0f      	ldrb	r7, [r1, #24]
 800940e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009410:	2f78      	cmp	r7, #120	@ 0x78
 8009412:	4691      	mov	r9, r2
 8009414:	4680      	mov	r8, r0
 8009416:	460c      	mov	r4, r1
 8009418:	469a      	mov	sl, r3
 800941a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800941e:	d807      	bhi.n	8009430 <_printf_i+0x28>
 8009420:	2f62      	cmp	r7, #98	@ 0x62
 8009422:	d80a      	bhi.n	800943a <_printf_i+0x32>
 8009424:	2f00      	cmp	r7, #0
 8009426:	f000 80d2 	beq.w	80095ce <_printf_i+0x1c6>
 800942a:	2f58      	cmp	r7, #88	@ 0x58
 800942c:	f000 80b9 	beq.w	80095a2 <_printf_i+0x19a>
 8009430:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009434:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009438:	e03a      	b.n	80094b0 <_printf_i+0xa8>
 800943a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800943e:	2b15      	cmp	r3, #21
 8009440:	d8f6      	bhi.n	8009430 <_printf_i+0x28>
 8009442:	a101      	add	r1, pc, #4	@ (adr r1, 8009448 <_printf_i+0x40>)
 8009444:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009448:	080094a1 	.word	0x080094a1
 800944c:	080094b5 	.word	0x080094b5
 8009450:	08009431 	.word	0x08009431
 8009454:	08009431 	.word	0x08009431
 8009458:	08009431 	.word	0x08009431
 800945c:	08009431 	.word	0x08009431
 8009460:	080094b5 	.word	0x080094b5
 8009464:	08009431 	.word	0x08009431
 8009468:	08009431 	.word	0x08009431
 800946c:	08009431 	.word	0x08009431
 8009470:	08009431 	.word	0x08009431
 8009474:	080095b5 	.word	0x080095b5
 8009478:	080094df 	.word	0x080094df
 800947c:	0800956f 	.word	0x0800956f
 8009480:	08009431 	.word	0x08009431
 8009484:	08009431 	.word	0x08009431
 8009488:	080095d7 	.word	0x080095d7
 800948c:	08009431 	.word	0x08009431
 8009490:	080094df 	.word	0x080094df
 8009494:	08009431 	.word	0x08009431
 8009498:	08009431 	.word	0x08009431
 800949c:	08009577 	.word	0x08009577
 80094a0:	6833      	ldr	r3, [r6, #0]
 80094a2:	1d1a      	adds	r2, r3, #4
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	6032      	str	r2, [r6, #0]
 80094a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80094ac:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80094b0:	2301      	movs	r3, #1
 80094b2:	e09d      	b.n	80095f0 <_printf_i+0x1e8>
 80094b4:	6833      	ldr	r3, [r6, #0]
 80094b6:	6820      	ldr	r0, [r4, #0]
 80094b8:	1d19      	adds	r1, r3, #4
 80094ba:	6031      	str	r1, [r6, #0]
 80094bc:	0606      	lsls	r6, r0, #24
 80094be:	d501      	bpl.n	80094c4 <_printf_i+0xbc>
 80094c0:	681d      	ldr	r5, [r3, #0]
 80094c2:	e003      	b.n	80094cc <_printf_i+0xc4>
 80094c4:	0645      	lsls	r5, r0, #25
 80094c6:	d5fb      	bpl.n	80094c0 <_printf_i+0xb8>
 80094c8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80094cc:	2d00      	cmp	r5, #0
 80094ce:	da03      	bge.n	80094d8 <_printf_i+0xd0>
 80094d0:	232d      	movs	r3, #45	@ 0x2d
 80094d2:	426d      	negs	r5, r5
 80094d4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80094d8:	4859      	ldr	r0, [pc, #356]	@ (8009640 <_printf_i+0x238>)
 80094da:	230a      	movs	r3, #10
 80094dc:	e011      	b.n	8009502 <_printf_i+0xfa>
 80094de:	6821      	ldr	r1, [r4, #0]
 80094e0:	6833      	ldr	r3, [r6, #0]
 80094e2:	0608      	lsls	r0, r1, #24
 80094e4:	f853 5b04 	ldr.w	r5, [r3], #4
 80094e8:	d402      	bmi.n	80094f0 <_printf_i+0xe8>
 80094ea:	0649      	lsls	r1, r1, #25
 80094ec:	bf48      	it	mi
 80094ee:	b2ad      	uxthmi	r5, r5
 80094f0:	2f6f      	cmp	r7, #111	@ 0x6f
 80094f2:	4853      	ldr	r0, [pc, #332]	@ (8009640 <_printf_i+0x238>)
 80094f4:	6033      	str	r3, [r6, #0]
 80094f6:	bf14      	ite	ne
 80094f8:	230a      	movne	r3, #10
 80094fa:	2308      	moveq	r3, #8
 80094fc:	2100      	movs	r1, #0
 80094fe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009502:	6866      	ldr	r6, [r4, #4]
 8009504:	60a6      	str	r6, [r4, #8]
 8009506:	2e00      	cmp	r6, #0
 8009508:	bfa2      	ittt	ge
 800950a:	6821      	ldrge	r1, [r4, #0]
 800950c:	f021 0104 	bicge.w	r1, r1, #4
 8009510:	6021      	strge	r1, [r4, #0]
 8009512:	b90d      	cbnz	r5, 8009518 <_printf_i+0x110>
 8009514:	2e00      	cmp	r6, #0
 8009516:	d04b      	beq.n	80095b0 <_printf_i+0x1a8>
 8009518:	4616      	mov	r6, r2
 800951a:	fbb5 f1f3 	udiv	r1, r5, r3
 800951e:	fb03 5711 	mls	r7, r3, r1, r5
 8009522:	5dc7      	ldrb	r7, [r0, r7]
 8009524:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009528:	462f      	mov	r7, r5
 800952a:	42bb      	cmp	r3, r7
 800952c:	460d      	mov	r5, r1
 800952e:	d9f4      	bls.n	800951a <_printf_i+0x112>
 8009530:	2b08      	cmp	r3, #8
 8009532:	d10b      	bne.n	800954c <_printf_i+0x144>
 8009534:	6823      	ldr	r3, [r4, #0]
 8009536:	07df      	lsls	r7, r3, #31
 8009538:	d508      	bpl.n	800954c <_printf_i+0x144>
 800953a:	6923      	ldr	r3, [r4, #16]
 800953c:	6861      	ldr	r1, [r4, #4]
 800953e:	4299      	cmp	r1, r3
 8009540:	bfde      	ittt	le
 8009542:	2330      	movle	r3, #48	@ 0x30
 8009544:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009548:	f106 36ff 	addle.w	r6, r6, #4294967295
 800954c:	1b92      	subs	r2, r2, r6
 800954e:	6122      	str	r2, [r4, #16]
 8009550:	f8cd a000 	str.w	sl, [sp]
 8009554:	464b      	mov	r3, r9
 8009556:	aa03      	add	r2, sp, #12
 8009558:	4621      	mov	r1, r4
 800955a:	4640      	mov	r0, r8
 800955c:	f7ff fee6 	bl	800932c <_printf_common>
 8009560:	3001      	adds	r0, #1
 8009562:	d14a      	bne.n	80095fa <_printf_i+0x1f2>
 8009564:	f04f 30ff 	mov.w	r0, #4294967295
 8009568:	b004      	add	sp, #16
 800956a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800956e:	6823      	ldr	r3, [r4, #0]
 8009570:	f043 0320 	orr.w	r3, r3, #32
 8009574:	6023      	str	r3, [r4, #0]
 8009576:	4833      	ldr	r0, [pc, #204]	@ (8009644 <_printf_i+0x23c>)
 8009578:	2778      	movs	r7, #120	@ 0x78
 800957a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800957e:	6823      	ldr	r3, [r4, #0]
 8009580:	6831      	ldr	r1, [r6, #0]
 8009582:	061f      	lsls	r7, r3, #24
 8009584:	f851 5b04 	ldr.w	r5, [r1], #4
 8009588:	d402      	bmi.n	8009590 <_printf_i+0x188>
 800958a:	065f      	lsls	r7, r3, #25
 800958c:	bf48      	it	mi
 800958e:	b2ad      	uxthmi	r5, r5
 8009590:	6031      	str	r1, [r6, #0]
 8009592:	07d9      	lsls	r1, r3, #31
 8009594:	bf44      	itt	mi
 8009596:	f043 0320 	orrmi.w	r3, r3, #32
 800959a:	6023      	strmi	r3, [r4, #0]
 800959c:	b11d      	cbz	r5, 80095a6 <_printf_i+0x19e>
 800959e:	2310      	movs	r3, #16
 80095a0:	e7ac      	b.n	80094fc <_printf_i+0xf4>
 80095a2:	4827      	ldr	r0, [pc, #156]	@ (8009640 <_printf_i+0x238>)
 80095a4:	e7e9      	b.n	800957a <_printf_i+0x172>
 80095a6:	6823      	ldr	r3, [r4, #0]
 80095a8:	f023 0320 	bic.w	r3, r3, #32
 80095ac:	6023      	str	r3, [r4, #0]
 80095ae:	e7f6      	b.n	800959e <_printf_i+0x196>
 80095b0:	4616      	mov	r6, r2
 80095b2:	e7bd      	b.n	8009530 <_printf_i+0x128>
 80095b4:	6833      	ldr	r3, [r6, #0]
 80095b6:	6825      	ldr	r5, [r4, #0]
 80095b8:	6961      	ldr	r1, [r4, #20]
 80095ba:	1d18      	adds	r0, r3, #4
 80095bc:	6030      	str	r0, [r6, #0]
 80095be:	062e      	lsls	r6, r5, #24
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	d501      	bpl.n	80095c8 <_printf_i+0x1c0>
 80095c4:	6019      	str	r1, [r3, #0]
 80095c6:	e002      	b.n	80095ce <_printf_i+0x1c6>
 80095c8:	0668      	lsls	r0, r5, #25
 80095ca:	d5fb      	bpl.n	80095c4 <_printf_i+0x1bc>
 80095cc:	8019      	strh	r1, [r3, #0]
 80095ce:	2300      	movs	r3, #0
 80095d0:	6123      	str	r3, [r4, #16]
 80095d2:	4616      	mov	r6, r2
 80095d4:	e7bc      	b.n	8009550 <_printf_i+0x148>
 80095d6:	6833      	ldr	r3, [r6, #0]
 80095d8:	1d1a      	adds	r2, r3, #4
 80095da:	6032      	str	r2, [r6, #0]
 80095dc:	681e      	ldr	r6, [r3, #0]
 80095de:	6862      	ldr	r2, [r4, #4]
 80095e0:	2100      	movs	r1, #0
 80095e2:	4630      	mov	r0, r6
 80095e4:	f7f6 fe14 	bl	8000210 <memchr>
 80095e8:	b108      	cbz	r0, 80095ee <_printf_i+0x1e6>
 80095ea:	1b80      	subs	r0, r0, r6
 80095ec:	6060      	str	r0, [r4, #4]
 80095ee:	6863      	ldr	r3, [r4, #4]
 80095f0:	6123      	str	r3, [r4, #16]
 80095f2:	2300      	movs	r3, #0
 80095f4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80095f8:	e7aa      	b.n	8009550 <_printf_i+0x148>
 80095fa:	6923      	ldr	r3, [r4, #16]
 80095fc:	4632      	mov	r2, r6
 80095fe:	4649      	mov	r1, r9
 8009600:	4640      	mov	r0, r8
 8009602:	47d0      	blx	sl
 8009604:	3001      	adds	r0, #1
 8009606:	d0ad      	beq.n	8009564 <_printf_i+0x15c>
 8009608:	6823      	ldr	r3, [r4, #0]
 800960a:	079b      	lsls	r3, r3, #30
 800960c:	d413      	bmi.n	8009636 <_printf_i+0x22e>
 800960e:	68e0      	ldr	r0, [r4, #12]
 8009610:	9b03      	ldr	r3, [sp, #12]
 8009612:	4298      	cmp	r0, r3
 8009614:	bfb8      	it	lt
 8009616:	4618      	movlt	r0, r3
 8009618:	e7a6      	b.n	8009568 <_printf_i+0x160>
 800961a:	2301      	movs	r3, #1
 800961c:	4632      	mov	r2, r6
 800961e:	4649      	mov	r1, r9
 8009620:	4640      	mov	r0, r8
 8009622:	47d0      	blx	sl
 8009624:	3001      	adds	r0, #1
 8009626:	d09d      	beq.n	8009564 <_printf_i+0x15c>
 8009628:	3501      	adds	r5, #1
 800962a:	68e3      	ldr	r3, [r4, #12]
 800962c:	9903      	ldr	r1, [sp, #12]
 800962e:	1a5b      	subs	r3, r3, r1
 8009630:	42ab      	cmp	r3, r5
 8009632:	dcf2      	bgt.n	800961a <_printf_i+0x212>
 8009634:	e7eb      	b.n	800960e <_printf_i+0x206>
 8009636:	2500      	movs	r5, #0
 8009638:	f104 0619 	add.w	r6, r4, #25
 800963c:	e7f5      	b.n	800962a <_printf_i+0x222>
 800963e:	bf00      	nop
 8009640:	08009c9e 	.word	0x08009c9e
 8009644:	08009caf 	.word	0x08009caf

08009648 <memmove>:
 8009648:	4288      	cmp	r0, r1
 800964a:	b510      	push	{r4, lr}
 800964c:	eb01 0402 	add.w	r4, r1, r2
 8009650:	d902      	bls.n	8009658 <memmove+0x10>
 8009652:	4284      	cmp	r4, r0
 8009654:	4623      	mov	r3, r4
 8009656:	d807      	bhi.n	8009668 <memmove+0x20>
 8009658:	1e43      	subs	r3, r0, #1
 800965a:	42a1      	cmp	r1, r4
 800965c:	d008      	beq.n	8009670 <memmove+0x28>
 800965e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009662:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009666:	e7f8      	b.n	800965a <memmove+0x12>
 8009668:	4402      	add	r2, r0
 800966a:	4601      	mov	r1, r0
 800966c:	428a      	cmp	r2, r1
 800966e:	d100      	bne.n	8009672 <memmove+0x2a>
 8009670:	bd10      	pop	{r4, pc}
 8009672:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009676:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800967a:	e7f7      	b.n	800966c <memmove+0x24>

0800967c <_sbrk_r>:
 800967c:	b538      	push	{r3, r4, r5, lr}
 800967e:	4d06      	ldr	r5, [pc, #24]	@ (8009698 <_sbrk_r+0x1c>)
 8009680:	2300      	movs	r3, #0
 8009682:	4604      	mov	r4, r0
 8009684:	4608      	mov	r0, r1
 8009686:	602b      	str	r3, [r5, #0]
 8009688:	f7f7 fd44 	bl	8001114 <_sbrk>
 800968c:	1c43      	adds	r3, r0, #1
 800968e:	d102      	bne.n	8009696 <_sbrk_r+0x1a>
 8009690:	682b      	ldr	r3, [r5, #0]
 8009692:	b103      	cbz	r3, 8009696 <_sbrk_r+0x1a>
 8009694:	6023      	str	r3, [r4, #0]
 8009696:	bd38      	pop	{r3, r4, r5, pc}
 8009698:	200029ac 	.word	0x200029ac

0800969c <memcpy>:
 800969c:	440a      	add	r2, r1
 800969e:	4291      	cmp	r1, r2
 80096a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80096a4:	d100      	bne.n	80096a8 <memcpy+0xc>
 80096a6:	4770      	bx	lr
 80096a8:	b510      	push	{r4, lr}
 80096aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80096ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 80096b2:	4291      	cmp	r1, r2
 80096b4:	d1f9      	bne.n	80096aa <memcpy+0xe>
 80096b6:	bd10      	pop	{r4, pc}

080096b8 <_realloc_r>:
 80096b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096bc:	4680      	mov	r8, r0
 80096be:	4615      	mov	r5, r2
 80096c0:	460c      	mov	r4, r1
 80096c2:	b921      	cbnz	r1, 80096ce <_realloc_r+0x16>
 80096c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80096c8:	4611      	mov	r1, r2
 80096ca:	f7ff bc4b 	b.w	8008f64 <_malloc_r>
 80096ce:	b92a      	cbnz	r2, 80096dc <_realloc_r+0x24>
 80096d0:	f7ff fbdc 	bl	8008e8c <_free_r>
 80096d4:	2400      	movs	r4, #0
 80096d6:	4620      	mov	r0, r4
 80096d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80096dc:	f000 f81a 	bl	8009714 <_malloc_usable_size_r>
 80096e0:	4285      	cmp	r5, r0
 80096e2:	4606      	mov	r6, r0
 80096e4:	d802      	bhi.n	80096ec <_realloc_r+0x34>
 80096e6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80096ea:	d8f4      	bhi.n	80096d6 <_realloc_r+0x1e>
 80096ec:	4629      	mov	r1, r5
 80096ee:	4640      	mov	r0, r8
 80096f0:	f7ff fc38 	bl	8008f64 <_malloc_r>
 80096f4:	4607      	mov	r7, r0
 80096f6:	2800      	cmp	r0, #0
 80096f8:	d0ec      	beq.n	80096d4 <_realloc_r+0x1c>
 80096fa:	42b5      	cmp	r5, r6
 80096fc:	462a      	mov	r2, r5
 80096fe:	4621      	mov	r1, r4
 8009700:	bf28      	it	cs
 8009702:	4632      	movcs	r2, r6
 8009704:	f7ff ffca 	bl	800969c <memcpy>
 8009708:	4621      	mov	r1, r4
 800970a:	4640      	mov	r0, r8
 800970c:	f7ff fbbe 	bl	8008e8c <_free_r>
 8009710:	463c      	mov	r4, r7
 8009712:	e7e0      	b.n	80096d6 <_realloc_r+0x1e>

08009714 <_malloc_usable_size_r>:
 8009714:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009718:	1f18      	subs	r0, r3, #4
 800971a:	2b00      	cmp	r3, #0
 800971c:	bfbc      	itt	lt
 800971e:	580b      	ldrlt	r3, [r1, r0]
 8009720:	18c0      	addlt	r0, r0, r3
 8009722:	4770      	bx	lr

08009724 <_init>:
 8009724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009726:	bf00      	nop
 8009728:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800972a:	bc08      	pop	{r3}
 800972c:	469e      	mov	lr, r3
 800972e:	4770      	bx	lr

08009730 <_fini>:
 8009730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009732:	bf00      	nop
 8009734:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009736:	bc08      	pop	{r3}
 8009738:	469e      	mov	lr, r3
 800973a:	4770      	bx	lr
