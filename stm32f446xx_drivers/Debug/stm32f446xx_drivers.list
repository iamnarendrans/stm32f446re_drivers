
stm32f446xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000a08  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000bcc  08000bd4  00010bd4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000bcc  08000bcc  00010bd4  2**0
                  CONTENTS
  4 .ARM          00000000  08000bcc  08000bcc  00010bd4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000bcc  08000bd4  00010bd4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000bcc  08000bcc  00010bcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000bd0  08000bd0  00010bd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010bd4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000bd4  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000bd4  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010bd4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00010c04  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001dca  00000000  00000000  00010c47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000007ab  00000000  00000000  00012a11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000228  00000000  00000000  000131c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000198  00000000  00000000  000133e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002bd2  00000000  00000000  00013580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000026b7  00000000  00000000  00016152  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000c02c  00000000  00000000  00018809  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000848  00000000  00000000  00024838  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  00025080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000000 	.word	0x20000000
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000bb4 	.word	0x08000bb4

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000004 	.word	0x20000004
 8000200:	08000bb4 	.word	0x08000bb4

08000204 <SPI2_GPIOInits>:
 * PB15 --> SPI2_MOSI
 * ALT Function Mode - 5
 */


void SPI2_GPIOInits(void){
 8000204:	b580      	push	{r7, lr}
 8000206:	b084      	sub	sp, #16
 8000208:	af00      	add	r7, sp, #0

	GPIO_Handle_t SPIPins;

	SPIPins.pGPIOx = GPIOB;
 800020a:	4b14      	ldr	r3, [pc, #80]	; (800025c <SPI2_GPIOInits+0x58>)
 800020c:	607b      	str	r3, [r7, #4]
	SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 800020e:	2302      	movs	r3, #2
 8000210:	727b      	strb	r3, [r7, #9]
	SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
 8000212:	2305      	movs	r3, #5
 8000214:	737b      	strb	r3, [r7, #13]
	SPIPins.GPIO_PinConfig.GPIO_PinOType = GPIO_OP_TYPE_PP;
 8000216:	2300      	movs	r3, #0
 8000218:	733b      	strb	r3, [r7, #12]
	SPIPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 800021a:	2300      	movs	r3, #0
 800021c:	72fb      	strb	r3, [r7, #11]
	SPIPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 800021e:	2302      	movs	r3, #2
 8000220:	72bb      	strb	r3, [r7, #10]

	// SCLK
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NUM_13;
 8000222:	230d      	movs	r3, #13
 8000224:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000226:	1d3b      	adds	r3, r7, #4
 8000228:	4618      	mov	r0, r3
 800022a:	f000 f94b 	bl	80004c4 <GPIO_Init>

	// MOSI
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NUM_15;
 800022e:	230f      	movs	r3, #15
 8000230:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000232:	1d3b      	adds	r3, r7, #4
 8000234:	4618      	mov	r0, r3
 8000236:	f000 f945 	bl	80004c4 <GPIO_Init>

	// MISO
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NUM_14;
 800023a:	230e      	movs	r3, #14
 800023c:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 800023e:	1d3b      	adds	r3, r7, #4
 8000240:	4618      	mov	r0, r3
 8000242:	f000 f93f 	bl	80004c4 <GPIO_Init>

	// NSS
	// SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
	// SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode = 0;
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NUM_12;
 8000246:	230c      	movs	r3, #12
 8000248:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 800024a:	1d3b      	adds	r3, r7, #4
 800024c:	4618      	mov	r0, r3
 800024e:	f000 f939 	bl	80004c4 <GPIO_Init>
	// GPIO_WriteToOutputPin(GPIOB, GPIO_PIN_NUM_12, ENABLE);
}
 8000252:	bf00      	nop
 8000254:	3710      	adds	r7, #16
 8000256:	46bd      	mov	sp, r7
 8000258:	bd80      	pop	{r7, pc}
 800025a:	bf00      	nop
 800025c:	40020400 	.word	0x40020400

08000260 <SPI2_Inits>:
void delay()
{
	for (uint32_t i; i <= 5000000; i++);
}

void SPI2_Inits(void){
 8000260:	b580      	push	{r7, lr}
 8000262:	b088      	sub	sp, #32
 8000264:	af00      	add	r7, sp, #0

	SPI_Handle_t SPI2Handle;

	SPI2Handle.pSPIx = SPI2;
 8000266:	4b0c      	ldr	r3, [pc, #48]	; (8000298 <SPI2_Inits+0x38>)
 8000268:	603b      	str	r3, [r7, #0]
	SPI2Handle.SPIConfig.SPI_BusConfig = SPI_BUS_CONFIG_FD;
 800026a:	2301      	movs	r3, #1
 800026c:	717b      	strb	r3, [r7, #5]
	SPI2Handle.SPIConfig.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;
 800026e:	2301      	movs	r3, #1
 8000270:	713b      	strb	r3, [r7, #4]
	SPI2Handle.SPIConfig.SPI_ClkSpeed = SPI_CLK_SPEED_DIV128;
 8000272:	2306      	movs	r3, #6
 8000274:	71bb      	strb	r3, [r7, #6]
	SPI2Handle.SPIConfig.SPI_DFF = SPI_DFF_8BITS;
 8000276:	2300      	movs	r3, #0
 8000278:	71fb      	strb	r3, [r7, #7]
	SPI2Handle.SPIConfig.SPI_CPOL = SPI_CPOL_LOW;
 800027a:	2300      	movs	r3, #0
 800027c:	723b      	strb	r3, [r7, #8]
	SPI2Handle.SPIConfig.SPI_CPHA = SPI_CPHA_LOW;
 800027e:	2300      	movs	r3, #0
 8000280:	727b      	strb	r3, [r7, #9]
	SPI2Handle.SPIConfig.SPI_SSM = SPI_SSM_DI; // Hardware slave management enabled for NSS pin
 8000282:	2300      	movs	r3, #0
 8000284:	72bb      	strb	r3, [r7, #10]

	SPI_Init(&SPI2Handle);
 8000286:	463b      	mov	r3, r7
 8000288:	4618      	mov	r0, r3
 800028a:	f000 fb0f 	bl	80008ac <SPI_Init>
}
 800028e:	bf00      	nop
 8000290:	3720      	adds	r7, #32
 8000292:	46bd      	mov	sp, r7
 8000294:	bd80      	pop	{r7, pc}
 8000296:	bf00      	nop
 8000298:	40003800 	.word	0x40003800

0800029c <main>:

	GPIO_Init(&GpioLed);
}

int main(void)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	b086      	sub	sp, #24
 80002a0:	af00      	add	r7, sp, #0
	// uint8_t id = 0x0A;
	bool status;
	W25QXX_HandleTypeDef w25q;

    // Initialize GPIO pins and SPI2
    SPI2_GPIOInits();
 80002a2:	f7ff ffaf 	bl	8000204 <SPI2_GPIOInits>
    SPI2_Inits();
 80002a6:	f7ff ffdb 	bl	8000260 <SPI2_Inits>
    SPI_SSOEConfig(SPI2, ENABLE);
 80002aa:	2101      	movs	r1, #1
 80002ac:	4807      	ldr	r0, [pc, #28]	; (80002cc <main+0x30>)
 80002ae:	f000 fb88 	bl	80009c2 <SPI_SSOEConfig>

    // Function to Read Read SR1
    // W25QXX_ReadReg1(SPI2);

    // Function to Write Write SR1
    status = W25QXX_Init(&w25q, SPI2);
 80002b2:	463b      	mov	r3, r7
 80002b4:	4905      	ldr	r1, [pc, #20]	; (80002cc <main+0x30>)
 80002b6:	4618      	mov	r0, r3
 80002b8:	f000 fc31 	bl	8000b1e <W25QXX_Init>
 80002bc:	4603      	mov	r3, r0
 80002be:	75fb      	strb	r3, [r7, #23]

    return 0;
 80002c0:	2300      	movs	r3, #0
}
 80002c2:	4618      	mov	r0, r3
 80002c4:	3718      	adds	r7, #24
 80002c6:	46bd      	mov	sp, r7
 80002c8:	bd80      	pop	{r7, pc}
 80002ca:	bf00      	nop
 80002cc:	40003800 	.word	0x40003800

080002d0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002d0:	480d      	ldr	r0, [pc, #52]	; (8000308 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002d2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002d4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002d8:	480c      	ldr	r0, [pc, #48]	; (800030c <LoopForever+0x6>)
  ldr r1, =_edata
 80002da:	490d      	ldr	r1, [pc, #52]	; (8000310 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002dc:	4a0d      	ldr	r2, [pc, #52]	; (8000314 <LoopForever+0xe>)
  movs r3, #0
 80002de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002e0:	e002      	b.n	80002e8 <LoopCopyDataInit>

080002e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002e6:	3304      	adds	r3, #4

080002e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002ec:	d3f9      	bcc.n	80002e2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002ee:	4a0a      	ldr	r2, [pc, #40]	; (8000318 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002f0:	4c0a      	ldr	r4, [pc, #40]	; (800031c <LoopForever+0x16>)
  movs r3, #0
 80002f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002f4:	e001      	b.n	80002fa <LoopFillZerobss>

080002f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002f8:	3204      	adds	r2, #4

080002fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002fc:	d3fb      	bcc.n	80002f6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002fe:	f000 fc35 	bl	8000b6c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000302:	f7ff ffcb 	bl	800029c <main>

08000306 <LoopForever>:

LoopForever:
  b LoopForever
 8000306:	e7fe      	b.n	8000306 <LoopForever>
  ldr   r0, =_estack
 8000308:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800030c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000310:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000314:	08000bd4 	.word	0x08000bd4
  ldr r2, =_sbss
 8000318:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800031c:	2000001c 	.word	0x2000001c

08000320 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000320:	e7fe      	b.n	8000320 <ADC_IRQHandler>
	...

08000324 <GPIO_PeriClockControl>:
 * @return								- None
 *
 * @note								- None
 *****************************************************************************************************************/
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 8000324:	b480      	push	{r7}
 8000326:	b083      	sub	sp, #12
 8000328:	af00      	add	r7, sp, #0
 800032a:	6078      	str	r0, [r7, #4]
 800032c:	460b      	mov	r3, r1
 800032e:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000330:	78fb      	ldrb	r3, [r7, #3]
 8000332:	2b01      	cmp	r3, #1
 8000334:	d157      	bne.n	80003e6 <GPIO_PeriClockControl+0xc2>
	{
		if(pGPIOx == GPIOA)
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	4a59      	ldr	r2, [pc, #356]	; (80004a0 <GPIO_PeriClockControl+0x17c>)
 800033a:	4293      	cmp	r3, r2
 800033c:	d106      	bne.n	800034c <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 800033e:	4b59      	ldr	r3, [pc, #356]	; (80004a4 <GPIO_PeriClockControl+0x180>)
 8000340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000342:	4a58      	ldr	r2, [pc, #352]	; (80004a4 <GPIO_PeriClockControl+0x180>)
 8000344:	f043 0301 	orr.w	r3, r3, #1
 8000348:	6313      	str	r3, [r2, #48]	; 0x30
		else if(pGPIOx == GPIOH)
		{
			GPIOH_PCLK_DI();
		}
	}
}
 800034a:	e0a3      	b.n	8000494 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOB)
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	4a56      	ldr	r2, [pc, #344]	; (80004a8 <GPIO_PeriClockControl+0x184>)
 8000350:	4293      	cmp	r3, r2
 8000352:	d106      	bne.n	8000362 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000354:	4b53      	ldr	r3, [pc, #332]	; (80004a4 <GPIO_PeriClockControl+0x180>)
 8000356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000358:	4a52      	ldr	r2, [pc, #328]	; (80004a4 <GPIO_PeriClockControl+0x180>)
 800035a:	f043 0302 	orr.w	r3, r3, #2
 800035e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000360:	e098      	b.n	8000494 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOC)
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	4a51      	ldr	r2, [pc, #324]	; (80004ac <GPIO_PeriClockControl+0x188>)
 8000366:	4293      	cmp	r3, r2
 8000368:	d106      	bne.n	8000378 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 800036a:	4b4e      	ldr	r3, [pc, #312]	; (80004a4 <GPIO_PeriClockControl+0x180>)
 800036c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800036e:	4a4d      	ldr	r2, [pc, #308]	; (80004a4 <GPIO_PeriClockControl+0x180>)
 8000370:	f043 0304 	orr.w	r3, r3, #4
 8000374:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000376:	e08d      	b.n	8000494 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOD)
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	4a4d      	ldr	r2, [pc, #308]	; (80004b0 <GPIO_PeriClockControl+0x18c>)
 800037c:	4293      	cmp	r3, r2
 800037e:	d106      	bne.n	800038e <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000380:	4b48      	ldr	r3, [pc, #288]	; (80004a4 <GPIO_PeriClockControl+0x180>)
 8000382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000384:	4a47      	ldr	r2, [pc, #284]	; (80004a4 <GPIO_PeriClockControl+0x180>)
 8000386:	f043 0308 	orr.w	r3, r3, #8
 800038a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800038c:	e082      	b.n	8000494 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOE)
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	4a48      	ldr	r2, [pc, #288]	; (80004b4 <GPIO_PeriClockControl+0x190>)
 8000392:	4293      	cmp	r3, r2
 8000394:	d106      	bne.n	80003a4 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 8000396:	4b43      	ldr	r3, [pc, #268]	; (80004a4 <GPIO_PeriClockControl+0x180>)
 8000398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800039a:	4a42      	ldr	r2, [pc, #264]	; (80004a4 <GPIO_PeriClockControl+0x180>)
 800039c:	f043 0310 	orr.w	r3, r3, #16
 80003a0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003a2:	e077      	b.n	8000494 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOF)
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	4a44      	ldr	r2, [pc, #272]	; (80004b8 <GPIO_PeriClockControl+0x194>)
 80003a8:	4293      	cmp	r3, r2
 80003aa:	d106      	bne.n	80003ba <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 80003ac:	4b3d      	ldr	r3, [pc, #244]	; (80004a4 <GPIO_PeriClockControl+0x180>)
 80003ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003b0:	4a3c      	ldr	r2, [pc, #240]	; (80004a4 <GPIO_PeriClockControl+0x180>)
 80003b2:	f043 0320 	orr.w	r3, r3, #32
 80003b6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003b8:	e06c      	b.n	8000494 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOG)
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	4a3f      	ldr	r2, [pc, #252]	; (80004bc <GPIO_PeriClockControl+0x198>)
 80003be:	4293      	cmp	r3, r2
 80003c0:	d106      	bne.n	80003d0 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 80003c2:	4b38      	ldr	r3, [pc, #224]	; (80004a4 <GPIO_PeriClockControl+0x180>)
 80003c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003c6:	4a37      	ldr	r2, [pc, #220]	; (80004a4 <GPIO_PeriClockControl+0x180>)
 80003c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80003cc:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003ce:	e061      	b.n	8000494 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOH)
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	4a3b      	ldr	r2, [pc, #236]	; (80004c0 <GPIO_PeriClockControl+0x19c>)
 80003d4:	4293      	cmp	r3, r2
 80003d6:	d15d      	bne.n	8000494 <GPIO_PeriClockControl+0x170>
			GPIOH_PCLK_EN();
 80003d8:	4b32      	ldr	r3, [pc, #200]	; (80004a4 <GPIO_PeriClockControl+0x180>)
 80003da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003dc:	4a31      	ldr	r2, [pc, #196]	; (80004a4 <GPIO_PeriClockControl+0x180>)
 80003de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80003e2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003e4:	e056      	b.n	8000494 <GPIO_PeriClockControl+0x170>
		if(pGPIOx == GPIOA)
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	4a2d      	ldr	r2, [pc, #180]	; (80004a0 <GPIO_PeriClockControl+0x17c>)
 80003ea:	4293      	cmp	r3, r2
 80003ec:	d106      	bne.n	80003fc <GPIO_PeriClockControl+0xd8>
			GPIOA_PCLK_DI();
 80003ee:	4b2d      	ldr	r3, [pc, #180]	; (80004a4 <GPIO_PeriClockControl+0x180>)
 80003f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003f2:	4a2c      	ldr	r2, [pc, #176]	; (80004a4 <GPIO_PeriClockControl+0x180>)
 80003f4:	f023 0301 	bic.w	r3, r3, #1
 80003f8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003fa:	e04b      	b.n	8000494 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOB)
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	4a2a      	ldr	r2, [pc, #168]	; (80004a8 <GPIO_PeriClockControl+0x184>)
 8000400:	4293      	cmp	r3, r2
 8000402:	d106      	bne.n	8000412 <GPIO_PeriClockControl+0xee>
			GPIOB_PCLK_DI();
 8000404:	4b27      	ldr	r3, [pc, #156]	; (80004a4 <GPIO_PeriClockControl+0x180>)
 8000406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000408:	4a26      	ldr	r2, [pc, #152]	; (80004a4 <GPIO_PeriClockControl+0x180>)
 800040a:	f023 0302 	bic.w	r3, r3, #2
 800040e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000410:	e040      	b.n	8000494 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOC)
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	4a25      	ldr	r2, [pc, #148]	; (80004ac <GPIO_PeriClockControl+0x188>)
 8000416:	4293      	cmp	r3, r2
 8000418:	d106      	bne.n	8000428 <GPIO_PeriClockControl+0x104>
			GPIOC_PCLK_DI();
 800041a:	4b22      	ldr	r3, [pc, #136]	; (80004a4 <GPIO_PeriClockControl+0x180>)
 800041c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800041e:	4a21      	ldr	r2, [pc, #132]	; (80004a4 <GPIO_PeriClockControl+0x180>)
 8000420:	f023 0304 	bic.w	r3, r3, #4
 8000424:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000426:	e035      	b.n	8000494 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOD)
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	4a21      	ldr	r2, [pc, #132]	; (80004b0 <GPIO_PeriClockControl+0x18c>)
 800042c:	4293      	cmp	r3, r2
 800042e:	d106      	bne.n	800043e <GPIO_PeriClockControl+0x11a>
			GPIOD_PCLK_DI();
 8000430:	4b1c      	ldr	r3, [pc, #112]	; (80004a4 <GPIO_PeriClockControl+0x180>)
 8000432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000434:	4a1b      	ldr	r2, [pc, #108]	; (80004a4 <GPIO_PeriClockControl+0x180>)
 8000436:	f023 0308 	bic.w	r3, r3, #8
 800043a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800043c:	e02a      	b.n	8000494 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOE)
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	4a1c      	ldr	r2, [pc, #112]	; (80004b4 <GPIO_PeriClockControl+0x190>)
 8000442:	4293      	cmp	r3, r2
 8000444:	d106      	bne.n	8000454 <GPIO_PeriClockControl+0x130>
			GPIOE_PCLK_DI();
 8000446:	4b17      	ldr	r3, [pc, #92]	; (80004a4 <GPIO_PeriClockControl+0x180>)
 8000448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800044a:	4a16      	ldr	r2, [pc, #88]	; (80004a4 <GPIO_PeriClockControl+0x180>)
 800044c:	f023 0310 	bic.w	r3, r3, #16
 8000450:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000452:	e01f      	b.n	8000494 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOF)
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	4a18      	ldr	r2, [pc, #96]	; (80004b8 <GPIO_PeriClockControl+0x194>)
 8000458:	4293      	cmp	r3, r2
 800045a:	d106      	bne.n	800046a <GPIO_PeriClockControl+0x146>
			GPIOF_PCLK_EN();
 800045c:	4b11      	ldr	r3, [pc, #68]	; (80004a4 <GPIO_PeriClockControl+0x180>)
 800045e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000460:	4a10      	ldr	r2, [pc, #64]	; (80004a4 <GPIO_PeriClockControl+0x180>)
 8000462:	f043 0320 	orr.w	r3, r3, #32
 8000466:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000468:	e014      	b.n	8000494 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOG)
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	4a13      	ldr	r2, [pc, #76]	; (80004bc <GPIO_PeriClockControl+0x198>)
 800046e:	4293      	cmp	r3, r2
 8000470:	d106      	bne.n	8000480 <GPIO_PeriClockControl+0x15c>
			GPIOG_PCLK_DI();
 8000472:	4b0c      	ldr	r3, [pc, #48]	; (80004a4 <GPIO_PeriClockControl+0x180>)
 8000474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000476:	4a0b      	ldr	r2, [pc, #44]	; (80004a4 <GPIO_PeriClockControl+0x180>)
 8000478:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800047c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800047e:	e009      	b.n	8000494 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOH)
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	4a0f      	ldr	r2, [pc, #60]	; (80004c0 <GPIO_PeriClockControl+0x19c>)
 8000484:	4293      	cmp	r3, r2
 8000486:	d105      	bne.n	8000494 <GPIO_PeriClockControl+0x170>
			GPIOH_PCLK_DI();
 8000488:	4b06      	ldr	r3, [pc, #24]	; (80004a4 <GPIO_PeriClockControl+0x180>)
 800048a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800048c:	4a05      	ldr	r2, [pc, #20]	; (80004a4 <GPIO_PeriClockControl+0x180>)
 800048e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000492:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000494:	bf00      	nop
 8000496:	370c      	adds	r7, #12
 8000498:	46bd      	mov	sp, r7
 800049a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800049e:	4770      	bx	lr
 80004a0:	40020000 	.word	0x40020000
 80004a4:	40023800 	.word	0x40023800
 80004a8:	40020400 	.word	0x40020400
 80004ac:	40020800 	.word	0x40020800
 80004b0:	40020c00 	.word	0x40020c00
 80004b4:	40021000 	.word	0x40021000
 80004b8:	40021400 	.word	0x40021400
 80004bc:	40021800 	.word	0x40021800
 80004c0:	40021c00 	.word	0x40021c00

080004c4 <GPIO_Init>:
 * @return								- None
 *
 * @note								- None
 *****************************************************************************************************************/
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b086      	sub	sp, #24
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0; // Temp register
 80004cc:	2300      	movs	r3, #0
 80004ce:	617b      	str	r3, [r7, #20]

	// Enable the peripheral clock
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	2101      	movs	r1, #1
 80004d6:	4618      	mov	r0, r3
 80004d8:	f7ff ff24 	bl	8000324 <GPIO_PeriClockControl>

	//1. Configure the mode of GPIO PIN
	if(pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	795b      	ldrb	r3, [r3, #5]
 80004e0:	2b03      	cmp	r3, #3
 80004e2:	d81f      	bhi.n	8000524 <GPIO_Init+0x60>
	{
		// Non interrupt mode
		temp = (pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber));
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	795b      	ldrb	r3, [r3, #5]
 80004e8:	461a      	mov	r2, r3
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	791b      	ldrb	r3, [r3, #4]
 80004ee:	005b      	lsls	r3, r3, #1
 80004f0:	fa02 f303 	lsl.w	r3, r2, r3
 80004f4:	617b      	str	r3, [r7, #20]
		pGPIOHandle -> pGPIOx -> MODER &= ~(0x3 << pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);	// Clearing
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	681a      	ldr	r2, [r3, #0]
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	791b      	ldrb	r3, [r3, #4]
 8000500:	4619      	mov	r1, r3
 8000502:	2303      	movs	r3, #3
 8000504:	408b      	lsls	r3, r1
 8000506:	43db      	mvns	r3, r3
 8000508:	4619      	mov	r1, r3
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	400a      	ands	r2, r1
 8000510:	601a      	str	r2, [r3, #0]
		pGPIOHandle -> pGPIOx -> MODER |= temp;	// Setting
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	6819      	ldr	r1, [r3, #0]
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	697a      	ldr	r2, [r7, #20]
 800051e:	430a      	orrs	r2, r1
 8000520:	601a      	str	r2, [r3, #0]
 8000522:	e0c2      	b.n	80006aa <GPIO_Init+0x1e6>
	}
	else
	{
		// this part will code later (interrupt mode)
		if(pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	795b      	ldrb	r3, [r3, #5]
 8000528:	2b04      	cmp	r3, #4
 800052a:	d117      	bne.n	800055c <GPIO_Init+0x98>
		{
			//1. Configure the FTSR
			EXTI ->FTSR |= (1 << pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 800052c:	4b47      	ldr	r3, [pc, #284]	; (800064c <GPIO_Init+0x188>)
 800052e:	68db      	ldr	r3, [r3, #12]
 8000530:	687a      	ldr	r2, [r7, #4]
 8000532:	7912      	ldrb	r2, [r2, #4]
 8000534:	4611      	mov	r1, r2
 8000536:	2201      	movs	r2, #1
 8000538:	408a      	lsls	r2, r1
 800053a:	4611      	mov	r1, r2
 800053c:	4a43      	ldr	r2, [pc, #268]	; (800064c <GPIO_Init+0x188>)
 800053e:	430b      	orrs	r3, r1
 8000540:	60d3      	str	r3, [r2, #12]
			// Clear the corresponding RTSR bit
			EXTI ->RTSR &= ~(1 << pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 8000542:	4b42      	ldr	r3, [pc, #264]	; (800064c <GPIO_Init+0x188>)
 8000544:	689b      	ldr	r3, [r3, #8]
 8000546:	687a      	ldr	r2, [r7, #4]
 8000548:	7912      	ldrb	r2, [r2, #4]
 800054a:	4611      	mov	r1, r2
 800054c:	2201      	movs	r2, #1
 800054e:	408a      	lsls	r2, r1
 8000550:	43d2      	mvns	r2, r2
 8000552:	4611      	mov	r1, r2
 8000554:	4a3d      	ldr	r2, [pc, #244]	; (800064c <GPIO_Init+0x188>)
 8000556:	400b      	ands	r3, r1
 8000558:	6093      	str	r3, [r2, #8]
 800055a:	e035      	b.n	80005c8 <GPIO_Init+0x104>
		}
		else if(pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	795b      	ldrb	r3, [r3, #5]
 8000560:	2b05      	cmp	r3, #5
 8000562:	d117      	bne.n	8000594 <GPIO_Init+0xd0>
		{
			//1. Configure the RTSR
			EXTI ->RTSR |= (1 << pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 8000564:	4b39      	ldr	r3, [pc, #228]	; (800064c <GPIO_Init+0x188>)
 8000566:	689b      	ldr	r3, [r3, #8]
 8000568:	687a      	ldr	r2, [r7, #4]
 800056a:	7912      	ldrb	r2, [r2, #4]
 800056c:	4611      	mov	r1, r2
 800056e:	2201      	movs	r2, #1
 8000570:	408a      	lsls	r2, r1
 8000572:	4611      	mov	r1, r2
 8000574:	4a35      	ldr	r2, [pc, #212]	; (800064c <GPIO_Init+0x188>)
 8000576:	430b      	orrs	r3, r1
 8000578:	6093      	str	r3, [r2, #8]
			// Clear the corresponding FTSR bit
			EXTI ->FTSR &= ~(1 << pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 800057a:	4b34      	ldr	r3, [pc, #208]	; (800064c <GPIO_Init+0x188>)
 800057c:	68db      	ldr	r3, [r3, #12]
 800057e:	687a      	ldr	r2, [r7, #4]
 8000580:	7912      	ldrb	r2, [r2, #4]
 8000582:	4611      	mov	r1, r2
 8000584:	2201      	movs	r2, #1
 8000586:	408a      	lsls	r2, r1
 8000588:	43d2      	mvns	r2, r2
 800058a:	4611      	mov	r1, r2
 800058c:	4a2f      	ldr	r2, [pc, #188]	; (800064c <GPIO_Init+0x188>)
 800058e:	400b      	ands	r3, r1
 8000590:	60d3      	str	r3, [r2, #12]
 8000592:	e019      	b.n	80005c8 <GPIO_Init+0x104>
		}
		else if(pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	795b      	ldrb	r3, [r3, #5]
 8000598:	2b06      	cmp	r3, #6
 800059a:	d115      	bne.n	80005c8 <GPIO_Init+0x104>
		{
			//1. Configure both FTSR and RTSR
			EXTI ->RTSR |= (1 << pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 800059c:	4b2b      	ldr	r3, [pc, #172]	; (800064c <GPIO_Init+0x188>)
 800059e:	689b      	ldr	r3, [r3, #8]
 80005a0:	687a      	ldr	r2, [r7, #4]
 80005a2:	7912      	ldrb	r2, [r2, #4]
 80005a4:	4611      	mov	r1, r2
 80005a6:	2201      	movs	r2, #1
 80005a8:	408a      	lsls	r2, r1
 80005aa:	4611      	mov	r1, r2
 80005ac:	4a27      	ldr	r2, [pc, #156]	; (800064c <GPIO_Init+0x188>)
 80005ae:	430b      	orrs	r3, r1
 80005b0:	6093      	str	r3, [r2, #8]

			EXTI ->FTSR |= (1 << pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 80005b2:	4b26      	ldr	r3, [pc, #152]	; (800064c <GPIO_Init+0x188>)
 80005b4:	68db      	ldr	r3, [r3, #12]
 80005b6:	687a      	ldr	r2, [r7, #4]
 80005b8:	7912      	ldrb	r2, [r2, #4]
 80005ba:	4611      	mov	r1, r2
 80005bc:	2201      	movs	r2, #1
 80005be:	408a      	lsls	r2, r1
 80005c0:	4611      	mov	r1, r2
 80005c2:	4a22      	ldr	r2, [pc, #136]	; (800064c <GPIO_Init+0x188>)
 80005c4:	430b      	orrs	r3, r1
 80005c6:	60d3      	str	r3, [r2, #12]
		}

		//2. Configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber / 4;
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	791b      	ldrb	r3, [r3, #4]
 80005cc:	089b      	lsrs	r3, r3, #2
 80005ce:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber % 4;
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	791b      	ldrb	r3, [r3, #4]
 80005d4:	f003 0303 	and.w	r3, r3, #3
 80005d8:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle ->pGPIOx);
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	4a1c      	ldr	r2, [pc, #112]	; (8000650 <GPIO_Init+0x18c>)
 80005e0:	4293      	cmp	r3, r2
 80005e2:	d045      	beq.n	8000670 <GPIO_Init+0x1ac>
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	4a1a      	ldr	r2, [pc, #104]	; (8000654 <GPIO_Init+0x190>)
 80005ea:	4293      	cmp	r3, r2
 80005ec:	d02b      	beq.n	8000646 <GPIO_Init+0x182>
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	4a19      	ldr	r2, [pc, #100]	; (8000658 <GPIO_Init+0x194>)
 80005f4:	4293      	cmp	r3, r2
 80005f6:	d024      	beq.n	8000642 <GPIO_Init+0x17e>
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	4a17      	ldr	r2, [pc, #92]	; (800065c <GPIO_Init+0x198>)
 80005fe:	4293      	cmp	r3, r2
 8000600:	d01d      	beq.n	800063e <GPIO_Init+0x17a>
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	4a16      	ldr	r2, [pc, #88]	; (8000660 <GPIO_Init+0x19c>)
 8000608:	4293      	cmp	r3, r2
 800060a:	d016      	beq.n	800063a <GPIO_Init+0x176>
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4a14      	ldr	r2, [pc, #80]	; (8000664 <GPIO_Init+0x1a0>)
 8000612:	4293      	cmp	r3, r2
 8000614:	d00f      	beq.n	8000636 <GPIO_Init+0x172>
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	4a13      	ldr	r2, [pc, #76]	; (8000668 <GPIO_Init+0x1a4>)
 800061c:	4293      	cmp	r3, r2
 800061e:	d008      	beq.n	8000632 <GPIO_Init+0x16e>
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	4a11      	ldr	r2, [pc, #68]	; (800066c <GPIO_Init+0x1a8>)
 8000626:	4293      	cmp	r3, r2
 8000628:	d101      	bne.n	800062e <GPIO_Init+0x16a>
 800062a:	2307      	movs	r3, #7
 800062c:	e021      	b.n	8000672 <GPIO_Init+0x1ae>
 800062e:	2300      	movs	r3, #0
 8000630:	e01f      	b.n	8000672 <GPIO_Init+0x1ae>
 8000632:	2306      	movs	r3, #6
 8000634:	e01d      	b.n	8000672 <GPIO_Init+0x1ae>
 8000636:	2305      	movs	r3, #5
 8000638:	e01b      	b.n	8000672 <GPIO_Init+0x1ae>
 800063a:	2304      	movs	r3, #4
 800063c:	e019      	b.n	8000672 <GPIO_Init+0x1ae>
 800063e:	2303      	movs	r3, #3
 8000640:	e017      	b.n	8000672 <GPIO_Init+0x1ae>
 8000642:	2302      	movs	r3, #2
 8000644:	e015      	b.n	8000672 <GPIO_Init+0x1ae>
 8000646:	2301      	movs	r3, #1
 8000648:	e013      	b.n	8000672 <GPIO_Init+0x1ae>
 800064a:	bf00      	nop
 800064c:	40013c00 	.word	0x40013c00
 8000650:	40020000 	.word	0x40020000
 8000654:	40020400 	.word	0x40020400
 8000658:	40020800 	.word	0x40020800
 800065c:	40020c00 	.word	0x40020c00
 8000660:	40021000 	.word	0x40021000
 8000664:	40021400 	.word	0x40021400
 8000668:	40021800 	.word	0x40021800
 800066c:	40021c00 	.word	0x40021c00
 8000670:	2300      	movs	r3, #0
 8000672:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 8000674:	4b5d      	ldr	r3, [pc, #372]	; (80007ec <GPIO_Init+0x328>)
 8000676:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000678:	4a5c      	ldr	r2, [pc, #368]	; (80007ec <GPIO_Init+0x328>)
 800067a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800067e:	6453      	str	r3, [r2, #68]	; 0x44
		SYSGFG -> EXTICR[temp1] = portcode << (temp2 * 4);
 8000680:	7c7a      	ldrb	r2, [r7, #17]
 8000682:	7cbb      	ldrb	r3, [r7, #18]
 8000684:	009b      	lsls	r3, r3, #2
 8000686:	fa02 f103 	lsl.w	r1, r2, r3
 800068a:	4a59      	ldr	r2, [pc, #356]	; (80007f0 <GPIO_Init+0x32c>)
 800068c:	7cfb      	ldrb	r3, [r7, #19]
 800068e:	3302      	adds	r3, #2
 8000690:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//3. Enable the EXTI interrupt delivery using IMR
		EXTI->IMR |= (1 << pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 8000694:	4b57      	ldr	r3, [pc, #348]	; (80007f4 <GPIO_Init+0x330>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	687a      	ldr	r2, [r7, #4]
 800069a:	7912      	ldrb	r2, [r2, #4]
 800069c:	4611      	mov	r1, r2
 800069e:	2201      	movs	r2, #1
 80006a0:	408a      	lsls	r2, r1
 80006a2:	4611      	mov	r1, r2
 80006a4:	4a53      	ldr	r2, [pc, #332]	; (80007f4 <GPIO_Init+0x330>)
 80006a6:	430b      	orrs	r3, r1
 80006a8:	6013      	str	r3, [r2, #0]

	}

	temp = 0;
 80006aa:	2300      	movs	r3, #0
 80006ac:	617b      	str	r3, [r7, #20]
	//2. Configure the Speed
	temp = (pGPIOHandle -> GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber));
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	799b      	ldrb	r3, [r3, #6]
 80006b2:	461a      	mov	r2, r3
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	791b      	ldrb	r3, [r3, #4]
 80006b8:	005b      	lsls	r3, r3, #1
 80006ba:	fa02 f303 	lsl.w	r3, r2, r3
 80006be:	617b      	str	r3, [r7, #20]
	pGPIOHandle -> pGPIOx -> OSPEEDR &= ~(0x3 << pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);	// clearing
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	689a      	ldr	r2, [r3, #8]
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	791b      	ldrb	r3, [r3, #4]
 80006ca:	4619      	mov	r1, r3
 80006cc:	2303      	movs	r3, #3
 80006ce:	408b      	lsls	r3, r1
 80006d0:	43db      	mvns	r3, r3
 80006d2:	4619      	mov	r1, r3
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	400a      	ands	r2, r1
 80006da:	609a      	str	r2, [r3, #8]
	pGPIOHandle -> pGPIOx -> OSPEEDR |= temp;	// Setting
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	6899      	ldr	r1, [r3, #8]
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	697a      	ldr	r2, [r7, #20]
 80006e8:	430a      	orrs	r2, r1
 80006ea:	609a      	str	r2, [r3, #8]

	temp = 0;
 80006ec:	2300      	movs	r3, #0
 80006ee:	617b      	str	r3, [r7, #20]
	//3. Configure the Push-pull settings
	temp = (pGPIOHandle -> GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber));
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	79db      	ldrb	r3, [r3, #7]
 80006f4:	461a      	mov	r2, r3
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	791b      	ldrb	r3, [r3, #4]
 80006fa:	005b      	lsls	r3, r3, #1
 80006fc:	fa02 f303 	lsl.w	r3, r2, r3
 8000700:	617b      	str	r3, [r7, #20]
	pGPIOHandle -> pGPIOx -> PUPDR &= ~(0x3 << pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	68da      	ldr	r2, [r3, #12]
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	791b      	ldrb	r3, [r3, #4]
 800070c:	4619      	mov	r1, r3
 800070e:	2303      	movs	r3, #3
 8000710:	408b      	lsls	r3, r1
 8000712:	43db      	mvns	r3, r3
 8000714:	4619      	mov	r1, r3
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	400a      	ands	r2, r1
 800071c:	60da      	str	r2, [r3, #12]
	pGPIOHandle -> pGPIOx -> PUPDR |= temp;
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	68d9      	ldr	r1, [r3, #12]
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	697a      	ldr	r2, [r7, #20]
 800072a:	430a      	orrs	r2, r1
 800072c:	60da      	str	r2, [r3, #12]

	temp = 0;
 800072e:	2300      	movs	r3, #0
 8000730:	617b      	str	r3, [r7, #20]
	//4. Configure the Output Type
	if(pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_OUT){
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	795b      	ldrb	r3, [r3, #5]
 8000736:	2b01      	cmp	r3, #1
 8000738:	d11d      	bne.n	8000776 <GPIO_Init+0x2b2>
		temp = (pGPIOHandle -> GPIO_PinConfig.GPIO_PinOType << pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	7a1b      	ldrb	r3, [r3, #8]
 800073e:	461a      	mov	r2, r3
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	791b      	ldrb	r3, [r3, #4]
 8000744:	fa02 f303 	lsl.w	r3, r2, r3
 8000748:	617b      	str	r3, [r7, #20]
		pGPIOHandle -> pGPIOx -> OTYPER &= ~(0x3 << pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	685a      	ldr	r2, [r3, #4]
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	791b      	ldrb	r3, [r3, #4]
 8000754:	4619      	mov	r1, r3
 8000756:	2303      	movs	r3, #3
 8000758:	408b      	lsls	r3, r1
 800075a:	43db      	mvns	r3, r3
 800075c:	4619      	mov	r1, r3
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	400a      	ands	r2, r1
 8000764:	605a      	str	r2, [r3, #4]
		pGPIOHandle -> pGPIOx -> OTYPER |= temp;
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	6859      	ldr	r1, [r3, #4]
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	697a      	ldr	r2, [r7, #20]
 8000772:	430a      	orrs	r2, r1
 8000774:	605a      	str	r2, [r3, #4]
	}
	//5. Configure the Alternate functionality, if required
	if(pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	795b      	ldrb	r3, [r3, #5]
 800077a:	2b02      	cmp	r3, #2
 800077c:	d131      	bne.n	80007e2 <GPIO_Init+0x31e>
	{
		// Configure the alternate function here
		uint8_t temp1, temp2;

		temp1 = pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber / 8;
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	791b      	ldrb	r3, [r3, #4]
 8000782:	08db      	lsrs	r3, r3, #3
 8000784:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber % 8;
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	791b      	ldrb	r3, [r3, #4]
 800078a:	f003 0307 	and.w	r3, r3, #7
 800078e:	73fb      	strb	r3, [r7, #15]

		pGPIOHandle -> pGPIOx -> AFR[temp1] &= ~(0xF << (4 * temp2));
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	7c3a      	ldrb	r2, [r7, #16]
 8000796:	3208      	adds	r2, #8
 8000798:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800079c:	7bfb      	ldrb	r3, [r7, #15]
 800079e:	009b      	lsls	r3, r3, #2
 80007a0:	220f      	movs	r2, #15
 80007a2:	fa02 f303 	lsl.w	r3, r2, r3
 80007a6:	43db      	mvns	r3, r3
 80007a8:	4618      	mov	r0, r3
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	7c3a      	ldrb	r2, [r7, #16]
 80007b0:	4001      	ands	r1, r0
 80007b2:	3208      	adds	r2, #8
 80007b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle -> pGPIOx -> AFR[temp1] |= pGPIOHandle -> GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp2);
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	7c3a      	ldrb	r2, [r7, #16]
 80007be:	3208      	adds	r2, #8
 80007c0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	7a5b      	ldrb	r3, [r3, #9]
 80007c8:	461a      	mov	r2, r3
 80007ca:	7bfb      	ldrb	r3, [r7, #15]
 80007cc:	009b      	lsls	r3, r3, #2
 80007ce:	fa02 f303 	lsl.w	r3, r2, r3
 80007d2:	4618      	mov	r0, r3
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	7c3a      	ldrb	r2, [r7, #16]
 80007da:	4301      	orrs	r1, r0
 80007dc:	3208      	adds	r2, #8
 80007de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	}
}
 80007e2:	bf00      	nop
 80007e4:	3718      	adds	r7, #24
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	40023800 	.word	0x40023800
 80007f0:	40013800 	.word	0x40013800
 80007f4:	40013c00 	.word	0x40013c00

080007f8 <SPI_PeriClockControl>:
 * @return								- None
 *
 * @note								- None
 *****************************************************************************************************************/
void SPI_PeriClockControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi)
{
 80007f8:	b480      	push	{r7}
 80007fa:	b083      	sub	sp, #12
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
 8000800:	460b      	mov	r3, r1
 8000802:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000804:	78fb      	ldrb	r3, [r7, #3]
 8000806:	2b01      	cmp	r3, #1
 8000808:	d12b      	bne.n	8000862 <SPI_PeriClockControl+0x6a>
	{
		if(pSPIx == SPI1)
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	4a22      	ldr	r2, [pc, #136]	; (8000898 <SPI_PeriClockControl+0xa0>)
 800080e:	4293      	cmp	r3, r2
 8000810:	d106      	bne.n	8000820 <SPI_PeriClockControl+0x28>
		{
			SPI1_PCLK_EN();
 8000812:	4b22      	ldr	r3, [pc, #136]	; (800089c <SPI_PeriClockControl+0xa4>)
 8000814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000816:	4a21      	ldr	r2, [pc, #132]	; (800089c <SPI_PeriClockControl+0xa4>)
 8000818:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800081c:	6453      	str	r3, [r2, #68]	; 0x44
		}else if(pSPIx == SPI2)
		{
			SPI2_PCLK_DI();
		}
	}
}
 800081e:	e035      	b.n	800088c <SPI_PeriClockControl+0x94>
		}else if(pSPIx == SPI2)
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	4a1f      	ldr	r2, [pc, #124]	; (80008a0 <SPI_PeriClockControl+0xa8>)
 8000824:	4293      	cmp	r3, r2
 8000826:	d106      	bne.n	8000836 <SPI_PeriClockControl+0x3e>
			SPI2_PCLK_EN();
 8000828:	4b1c      	ldr	r3, [pc, #112]	; (800089c <SPI_PeriClockControl+0xa4>)
 800082a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800082c:	4a1b      	ldr	r2, [pc, #108]	; (800089c <SPI_PeriClockControl+0xa4>)
 800082e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000832:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000834:	e02a      	b.n	800088c <SPI_PeriClockControl+0x94>
		}else if(pSPIx == SPI3)
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	4a1a      	ldr	r2, [pc, #104]	; (80008a4 <SPI_PeriClockControl+0xac>)
 800083a:	4293      	cmp	r3, r2
 800083c:	d106      	bne.n	800084c <SPI_PeriClockControl+0x54>
			SPI3_PCLK_EN();
 800083e:	4b17      	ldr	r3, [pc, #92]	; (800089c <SPI_PeriClockControl+0xa4>)
 8000840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000842:	4a16      	ldr	r2, [pc, #88]	; (800089c <SPI_PeriClockControl+0xa4>)
 8000844:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000848:	6413      	str	r3, [r2, #64]	; 0x40
}
 800084a:	e01f      	b.n	800088c <SPI_PeriClockControl+0x94>
		}else if(pSPIx == SPI4)
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	4a16      	ldr	r2, [pc, #88]	; (80008a8 <SPI_PeriClockControl+0xb0>)
 8000850:	4293      	cmp	r3, r2
 8000852:	d11b      	bne.n	800088c <SPI_PeriClockControl+0x94>
			SPI4_PCLK_EN();
 8000854:	4b11      	ldr	r3, [pc, #68]	; (800089c <SPI_PeriClockControl+0xa4>)
 8000856:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000858:	4a10      	ldr	r2, [pc, #64]	; (800089c <SPI_PeriClockControl+0xa4>)
 800085a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800085e:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000860:	e014      	b.n	800088c <SPI_PeriClockControl+0x94>
		if(pSPIx == SPI1)
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	4a0c      	ldr	r2, [pc, #48]	; (8000898 <SPI_PeriClockControl+0xa0>)
 8000866:	4293      	cmp	r3, r2
 8000868:	d106      	bne.n	8000878 <SPI_PeriClockControl+0x80>
			SPI1_PCLK_DI();
 800086a:	4b0c      	ldr	r3, [pc, #48]	; (800089c <SPI_PeriClockControl+0xa4>)
 800086c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800086e:	4a0b      	ldr	r2, [pc, #44]	; (800089c <SPI_PeriClockControl+0xa4>)
 8000870:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000874:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000876:	e009      	b.n	800088c <SPI_PeriClockControl+0x94>
		}else if(pSPIx == SPI2)
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	4a09      	ldr	r2, [pc, #36]	; (80008a0 <SPI_PeriClockControl+0xa8>)
 800087c:	4293      	cmp	r3, r2
 800087e:	d105      	bne.n	800088c <SPI_PeriClockControl+0x94>
			SPI2_PCLK_DI();
 8000880:	4b06      	ldr	r3, [pc, #24]	; (800089c <SPI_PeriClockControl+0xa4>)
 8000882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000884:	4a05      	ldr	r2, [pc, #20]	; (800089c <SPI_PeriClockControl+0xa4>)
 8000886:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800088a:	6413      	str	r3, [r2, #64]	; 0x40
}
 800088c:	bf00      	nop
 800088e:	370c      	adds	r7, #12
 8000890:	46bd      	mov	sp, r7
 8000892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000896:	4770      	bx	lr
 8000898:	40013000 	.word	0x40013000
 800089c:	40023800 	.word	0x40023800
 80008a0:	40003800 	.word	0x40003800
 80008a4:	40003c00 	.word	0x40003c00
 80008a8:	40013400 	.word	0x40013400

080008ac <SPI_Init>:
 * @return								- None
 *
 * @note								- None
 *****************************************************************************************************************/
void SPI_Init(SPI_Handle_t *pSPIHandle)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b084      	sub	sp, #16
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
	// Configure the SPI_CR1 Register

	// Enable the peripheral clock
	SPI_PeriClockControl(pSPIHandle->pSPIx, ENABLE);
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	2101      	movs	r1, #1
 80008ba:	4618      	mov	r0, r3
 80008bc:	f7ff ff9c 	bl	80007f8 <SPI_PeriClockControl>

	uint32_t tempReg = 0;
 80008c0:	2300      	movs	r3, #0
 80008c2:	60fb      	str	r3, [r7, #12]

	// 1. Configure the device mode
	tempReg |= pSPIHandle->SPIConfig.SPI_DeviceMode << SPI_CR1_MSTR;
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	791b      	ldrb	r3, [r3, #4]
 80008c8:	009b      	lsls	r3, r3, #2
 80008ca:	461a      	mov	r2, r3
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	4313      	orrs	r3, r2
 80008d0:	60fb      	str	r3, [r7, #12]

	// 2. Configure the bus config
	if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_FD)
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	795b      	ldrb	r3, [r3, #5]
 80008d6:	2b01      	cmp	r3, #1
 80008d8:	d104      	bne.n	80008e4 <SPI_Init+0x38>
	{
		// BIDI mode should be cleared
		tempReg &= ~(1 << SPI_CR1_BIDIMODE);
 80008da:	68fb      	ldr	r3, [r7, #12]
 80008dc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80008e0:	60fb      	str	r3, [r7, #12]
 80008e2:	e014      	b.n	800090e <SPI_Init+0x62>

	}else if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_HD)
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	795b      	ldrb	r3, [r3, #5]
 80008e8:	2b02      	cmp	r3, #2
 80008ea:	d104      	bne.n	80008f6 <SPI_Init+0x4a>
	{
		// BIDI mode should be set
		tempReg |= (1 << SPI_CR1_BIDIMODE);
 80008ec:	68fb      	ldr	r3, [r7, #12]
 80008ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80008f2:	60fb      	str	r3, [r7, #12]
 80008f4:	e00b      	b.n	800090e <SPI_Init+0x62>
	}else if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_SIMPLEX_RXONLY)
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	795b      	ldrb	r3, [r3, #5]
 80008fa:	2b03      	cmp	r3, #3
 80008fc:	d107      	bne.n	800090e <SPI_Init+0x62>
	{
		// BIDI mode should be cleared & RXONLY bit must be set
		tempReg &= ~(1 << SPI_CR1_BIDIMODE);
 80008fe:	68fb      	ldr	r3, [r7, #12]
 8000900:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000904:	60fb      	str	r3, [r7, #12]
		tempReg |= (1 << SPI_CR1_RXONLY);
 8000906:	68fb      	ldr	r3, [r7, #12]
 8000908:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800090c:	60fb      	str	r3, [r7, #12]
	}

	// 3. Configure the SPI serial clock speed (baudRate)
	tempReg |= pSPIHandle->SPIConfig.SPI_ClkSpeed << SPI_CR1_BR;
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	799b      	ldrb	r3, [r3, #6]
 8000912:	00db      	lsls	r3, r3, #3
 8000914:	461a      	mov	r2, r3
 8000916:	68fb      	ldr	r3, [r7, #12]
 8000918:	4313      	orrs	r3, r2
 800091a:	60fb      	str	r3, [r7, #12]

	// 4. Configure the DFF [DATA FRAME FORMAT]
	tempReg |= pSPIHandle->SPIConfig.SPI_DFF << SPI_CR1_DFF;
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	79db      	ldrb	r3, [r3, #7]
 8000920:	02db      	lsls	r3, r3, #11
 8000922:	461a      	mov	r2, r3
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	4313      	orrs	r3, r2
 8000928:	60fb      	str	r3, [r7, #12]

	// 5. Configure the CPOL
	tempReg |= pSPIHandle->SPIConfig.SPI_CPOL << SPI_CR1_CPOL;
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	7a1b      	ldrb	r3, [r3, #8]
 800092e:	005b      	lsls	r3, r3, #1
 8000930:	461a      	mov	r2, r3
 8000932:	68fb      	ldr	r3, [r7, #12]
 8000934:	4313      	orrs	r3, r2
 8000936:	60fb      	str	r3, [r7, #12]

	// 6. Configure the CPHA
	tempReg |= pSPIHandle->SPIConfig.SPI_CPHA << SPI_CR1_CPHA;
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	7a5b      	ldrb	r3, [r3, #9]
 800093c:	461a      	mov	r2, r3
 800093e:	68fb      	ldr	r3, [r7, #12]
 8000940:	4313      	orrs	r3, r2
 8000942:	60fb      	str	r3, [r7, #12]

	// 7. Configur the SSM
	tempReg |= pSPIHandle->SPIConfig.SPI_SSM << SPI_CR1_SSM;
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	7a9b      	ldrb	r3, [r3, #10]
 8000948:	025b      	lsls	r3, r3, #9
 800094a:	461a      	mov	r2, r3
 800094c:	68fb      	ldr	r3, [r7, #12]
 800094e:	4313      	orrs	r3, r2
 8000950:	60fb      	str	r3, [r7, #12]

	pSPIHandle->pSPIx->CR1 = tempReg;
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	68fa      	ldr	r2, [r7, #12]
 8000958:	601a      	str	r2, [r3, #0]

}
 800095a:	bf00      	nop
 800095c:	3710      	adds	r7, #16
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}

08000962 <SPI_GetFlagStatus>:
 * @return								- status of the flag either 0 or 1
 *
 * @note								- None
 *****************************************************************************************************************/
uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx, uint32_t FlagName)
{
 8000962:	b480      	push	{r7}
 8000964:	b083      	sub	sp, #12
 8000966:	af00      	add	r7, sp, #0
 8000968:	6078      	str	r0, [r7, #4]
 800096a:	6039      	str	r1, [r7, #0]
	if(pSPIx->SR & FlagName)
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	689a      	ldr	r2, [r3, #8]
 8000970:	683b      	ldr	r3, [r7, #0]
 8000972:	4013      	ands	r3, r2
 8000974:	2b00      	cmp	r3, #0
 8000976:	d001      	beq.n	800097c <SPI_GetFlagStatus+0x1a>
	{
		return FLAG_SET;
 8000978:	2301      	movs	r3, #1
 800097a:	e000      	b.n	800097e <SPI_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;
 800097c:	2300      	movs	r3, #0
}
 800097e:	4618      	mov	r0, r3
 8000980:	370c      	adds	r7, #12
 8000982:	46bd      	mov	sp, r7
 8000984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000988:	4770      	bx	lr

0800098a <SPI_PeripheralControl>:
 * @return								- None
 *
 * @note								- None
 *****************************************************************************************************************/
void SPI_PeripheralControl(SPI_RegDef_t *pSPIx, uint8_t EnOrDi)
{
 800098a:	b480      	push	{r7}
 800098c:	b083      	sub	sp, #12
 800098e:	af00      	add	r7, sp, #0
 8000990:	6078      	str	r0, [r7, #4]
 8000992:	460b      	mov	r3, r1
 8000994:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 8000996:	78fb      	ldrb	r3, [r7, #3]
 8000998:	2b01      	cmp	r3, #1
 800099a:	d106      	bne.n	80009aa <SPI_PeripheralControl+0x20>
	{
		pSPIx->CR1 |= (1 << SPI_CR1_SPE);
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
	}
}
 80009a8:	e005      	b.n	80009b6 <SPI_PeripheralControl+0x2c>
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	601a      	str	r2, [r3, #0]
}
 80009b6:	bf00      	nop
 80009b8:	370c      	adds	r7, #12
 80009ba:	46bd      	mov	sp, r7
 80009bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c0:	4770      	bx	lr

080009c2 <SPI_SSOEConfig>:
 * @return								- None
 *
 * @note								- None
 *****************************************************************************************************************/
void SPI_SSOEConfig(SPI_RegDef_t *pSPIx, uint8_t EnOrDi)
{
 80009c2:	b480      	push	{r7}
 80009c4:	b083      	sub	sp, #12
 80009c6:	af00      	add	r7, sp, #0
 80009c8:	6078      	str	r0, [r7, #4]
 80009ca:	460b      	mov	r3, r1
 80009cc:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 80009ce:	78fb      	ldrb	r3, [r7, #3]
 80009d0:	2b01      	cmp	r3, #1
 80009d2:	d106      	bne.n	80009e2 <SPI_SSOEConfig+0x20>
	{
		pSPIx->CR2 |= (1 << SPI_CR2_SSOE);
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	685b      	ldr	r3, [r3, #4]
 80009d8:	f043 0204 	orr.w	r2, r3, #4
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	605a      	str	r2, [r3, #4]
	}
	else
	{
		pSPIx->CR2 &= ~(1 << SPI_CR2_SSOE);
	}
}
 80009e0:	e005      	b.n	80009ee <SPI_SSOEConfig+0x2c>
		pSPIx->CR2 &= ~(1 << SPI_CR2_SSOE);
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	685b      	ldr	r3, [r3, #4]
 80009e6:	f023 0204 	bic.w	r2, r3, #4
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	605a      	str	r2, [r3, #4]
}
 80009ee:	bf00      	nop
 80009f0:	370c      	adds	r7, #12
 80009f2:	46bd      	mov	sp, r7
 80009f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f8:	4770      	bx	lr

080009fa <SPI_TransmitReceive>:
 * @return								- receivedData
 *
 * @note								- Polling Method
 *****************************************************************************************************************/
bool SPI_TransmitReceive(SPI_RegDef_t *pSPIx, uint8_t *tx_data, uint8_t *rx_data, uint8_t len)
{
 80009fa:	b580      	push	{r7, lr}
 80009fc:	b086      	sub	sp, #24
 80009fe:	af00      	add	r7, sp, #0
 8000a00:	60f8      	str	r0, [r7, #12]
 8000a02:	60b9      	str	r1, [r7, #8]
 8000a04:	607a      	str	r2, [r7, #4]
 8000a06:	70fb      	strb	r3, [r7, #3]
	bool status = true;
 8000a08:	2301      	movs	r3, #1
 8000a0a:	75fb      	strb	r3, [r7, #23]
	// Enable SPI
	// pSPIx->CR1 |= (1 << SPI_CR1_SPE);

    for (uint32_t i = 0; i < (len); ++i) {
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	613b      	str	r3, [r7, #16]
 8000a10:	e01d      	b.n	8000a4e <SPI_TransmitReceive+0x54>
        // Write Data to the register
        pSPIx->DR = tx_data[i];
 8000a12:	68ba      	ldr	r2, [r7, #8]
 8000a14:	693b      	ldr	r3, [r7, #16]
 8000a16:	4413      	add	r3, r2
 8000a18:	781b      	ldrb	r3, [r3, #0]
 8000a1a:	461a      	mov	r2, r3
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	60da      	str	r2, [r3, #12]

        // Delay to ensure the SPI transaction completes (adjust as needed)
        // for(uint32_t j = 0; j < 100; j++);

        // Wait until SPI is not busy and Rx Buffer is not empty
        while (((pSPIx->SR) & (1 << SPI_SR_BSY)) || (!((pSPIx->SR) & (1 << SPI_SR_RXNE))));
 8000a20:	bf00      	nop
 8000a22:	68fb      	ldr	r3, [r7, #12]
 8000a24:	689b      	ldr	r3, [r3, #8]
 8000a26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d1f9      	bne.n	8000a22 <SPI_TransmitReceive+0x28>
 8000a2e:	68fb      	ldr	r3, [r7, #12]
 8000a30:	689b      	ldr	r3, [r3, #8]
 8000a32:	f003 0301 	and.w	r3, r3, #1
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d0f3      	beq.n	8000a22 <SPI_TransmitReceive+0x28>

        // Read a Byte from The Rx Buffer
        rx_data[i] = (uint8_t)pSPIx->DR;
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	68d9      	ldr	r1, [r3, #12]
 8000a3e:	687a      	ldr	r2, [r7, #4]
 8000a40:	693b      	ldr	r3, [r7, #16]
 8000a42:	4413      	add	r3, r2
 8000a44:	b2ca      	uxtb	r2, r1
 8000a46:	701a      	strb	r2, [r3, #0]
    for (uint32_t i = 0; i < (len); ++i) {
 8000a48:	693b      	ldr	r3, [r7, #16]
 8000a4a:	3301      	adds	r3, #1
 8000a4c:	613b      	str	r3, [r7, #16]
 8000a4e:	78fb      	ldrb	r3, [r7, #3]
 8000a50:	693a      	ldr	r2, [r7, #16]
 8000a52:	429a      	cmp	r2, r3
 8000a54:	d3dd      	bcc.n	8000a12 <SPI_TransmitReceive+0x18>

        // Delay to ensure the SPI transaction completes (adjust as needed)
        // for(uint32_t j = 0; j < 100; j++);
    }

    if(SPI_GetFlagStatus(pSPIx, SPI_BUSY_FLAG) == 1)
 8000a56:	2180      	movs	r1, #128	; 0x80
 8000a58:	68f8      	ldr	r0, [r7, #12]
 8000a5a:	f7ff ff82 	bl	8000962 <SPI_GetFlagStatus>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b01      	cmp	r3, #1
 8000a62:	d101      	bne.n	8000a68 <SPI_TransmitReceive+0x6e>
    {
    	status = false;
 8000a64:	2300      	movs	r3, #0
 8000a66:	75fb      	strb	r3, [r7, #23]
    }

	return status;
 8000a68:	7dfb      	ldrb	r3, [r7, #23]

}
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	3718      	adds	r7, #24
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}

08000a72 <W25QXX_JEDECID>:
#include "w25qxx.h"
#include "helper.h"


bool W25QXX_JEDECID(W25QXX_HandleTypeDef *handle)
{
 8000a72:	b580      	push	{r7, lr}
 8000a74:	b086      	sub	sp, #24
 8000a76:	af00      	add	r7, sp, #0
 8000a78:	6078      	str	r0, [r7, #4]
	bool status = false;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	75fb      	strb	r3, [r7, #23]
	// Message ID to get Manufacturer ID
	uint8_t tx[4] = {W25QXX_JEDEC_ID, W25QXX_DUMMY_BYTE, W25QXX_DUMMY_BYTE, W25QXX_DUMMY_BYTE};	// Array of Requesting Bytes
 8000a7e:	f06f 0360 	mvn.w	r3, #96	; 0x60
 8000a82:	60fb      	str	r3, [r7, #12]
	uint8_t rx[4] = {0};
 8000a84:	2300      	movs	r3, #0
 8000a86:	60bb      	str	r3, [r7, #8]
	// int8_t recvData = 0;
	do
	{

		SPI_PeripheralControl(handle->hSPIx, ENABLE);
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	2101      	movs	r1, #1
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f7ff ff7b 	bl	800098a <SPI_PeripheralControl>


		if(SPI_TransmitReceive(handle->hSPIx, tx, rx, 4) != H_OK)
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	6818      	ldr	r0, [r3, #0]
 8000a98:	f107 0208 	add.w	r2, r7, #8
 8000a9c:	f107 010c 	add.w	r1, r7, #12
 8000aa0:	2304      	movs	r3, #4
 8000aa2:	f7ff ffaa 	bl	80009fa <SPI_TransmitReceive>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	f083 0301 	eor.w	r3, r3, #1
 8000aac:	b2db      	uxtb	r3, r3
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d010      	beq.n	8000ad4 <W25QXX_JEDECID+0x62>
		{
			// recvData = rx[1];

			// Delay to ensure the SPI transaction completes (adjust as needed)
			for(uint32_t j = 0; j < 1000; j++);
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	613b      	str	r3, [r7, #16]
 8000ab6:	e002      	b.n	8000abe <W25QXX_JEDECID+0x4c>
 8000ab8:	693b      	ldr	r3, [r7, #16]
 8000aba:	3301      	adds	r3, #1
 8000abc:	613b      	str	r3, [r7, #16]
 8000abe:	693b      	ldr	r3, [r7, #16]
 8000ac0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000ac4:	d3f8      	bcc.n	8000ab8 <W25QXX_JEDECID+0x46>

			SPI_PeripheralControl(handle->hSPIx, DISABLE);
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	2100      	movs	r1, #0
 8000acc:	4618      	mov	r0, r3
 8000ace:	f7ff ff5c 	bl	800098a <SPI_PeripheralControl>

			break;
 8000ad2:	e01f      	b.n	8000b14 <W25QXX_JEDECID+0xa2>

		}

	    SPI_PeripheralControl(handle->hSPIx, DISABLE);
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	2100      	movs	r1, #0
 8000ada:	4618      	mov	r0, r3
 8000adc:	f7ff ff55 	bl	800098a <SPI_PeripheralControl>

	    handle->Manufacturer = rx[1];
 8000ae0:	7a7a      	ldrb	r2, [r7, #9]
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	711a      	strb	r2, [r3, #4]
	    handle->memType = rx[2];
 8000ae6:	7aba      	ldrb	r2, [r7, #10]
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	715a      	strb	r2, [r3, #5]
	    handle->size = rx[3];
 8000aec:	7afa      	ldrb	r2, [r7, #11]
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	719a      	strb	r2, [r3, #6]
	    handle->blockCnt = W25QXX_SIZE_BLOCK_COUNT(128);
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000af8:	611a      	str	r2, [r3, #16]
	    handle->sectorCnt = handle->blockCnt * 16;
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	691b      	ldr	r3, [r3, #16]
 8000afe:	011a      	lsls	r2, r3, #4
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	60da      	str	r2, [r3, #12]
	    handle->pageCnt = (handle->sectorCnt * W25QXX_SECTOR_SIZE) / W25QXX_PAGE_SIZE;
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	68db      	ldr	r3, [r3, #12]
 8000b08:	031b      	lsls	r3, r3, #12
 8000b0a:	0a1a      	lsrs	r2, r3, #8
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	609a      	str	r2, [r3, #8]
	    status = true;
 8000b10:	2301      	movs	r3, #1
 8000b12:	75fb      	strb	r3, [r7, #23]

	}while(0);

    return status;
 8000b14:	7dfb      	ldrb	r3, [r7, #23]

}
 8000b16:	4618      	mov	r0, r3
 8000b18:	3718      	adds	r7, #24
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}

08000b1e <W25QXX_Init>:
	SPI_PeripheralControl(handle->hSPIx, EnorDn);
	for(uint8_t i = 0; i<10; i++);
}

bool W25QXX_Init(W25QXX_HandleTypeDef *handle, SPI_RegDef_t *pSPIx)
{
 8000b1e:	b580      	push	{r7, lr}
 8000b20:	b084      	sub	sp, #16
 8000b22:	af00      	add	r7, sp, #0
 8000b24:	6078      	str	r0, [r7, #4]
 8000b26:	6039      	str	r1, [r7, #0]
	bool status = false;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	73fb      	strb	r3, [r7, #15]

	do
	{

		memset(handle, 0, sizeof(W25QXX_HandleTypeDef));
 8000b2c:	2214      	movs	r2, #20
 8000b2e:	2100      	movs	r1, #0
 8000b30:	6878      	ldr	r0, [r7, #4]
 8000b32:	f000 f813 	bl	8000b5c <memset>
		handle->hSPIx = pSPIx;
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	683a      	ldr	r2, [r7, #0]
 8000b3a:	601a      	str	r2, [r3, #0]
//			break;
//		}
//
//		for(uint8_t i = 0; i < 100; i++); // Giving some delay

		status = W25QXX_JEDECID(handle);
 8000b3c:	6878      	ldr	r0, [r7, #4]
 8000b3e:	f7ff ff98 	bl	8000a72 <W25QXX_JEDECID>
 8000b42:	4603      	mov	r3, r0
 8000b44:	73fb      	strb	r3, [r7, #15]

		if(status)
 8000b46:	7bfb      	ldrb	r3, [r7, #15]
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d002      	beq.n	8000b52 <W25QXX_Init+0x34>
		{
			handle->initialized = 1;
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	2201      	movs	r2, #1
 8000b50:	71da      	strb	r2, [r3, #7]
			// W25QXX_CS_PinControl(handle, DISABLE); // It Enables the SPI Peripheral, which is CS = 0
		}

	}while(0);

	return status;
 8000b52:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b54:	4618      	mov	r0, r3
 8000b56:	3710      	adds	r7, #16
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}

08000b5c <memset>:
 8000b5c:	4402      	add	r2, r0
 8000b5e:	4603      	mov	r3, r0
 8000b60:	4293      	cmp	r3, r2
 8000b62:	d100      	bne.n	8000b66 <memset+0xa>
 8000b64:	4770      	bx	lr
 8000b66:	f803 1b01 	strb.w	r1, [r3], #1
 8000b6a:	e7f9      	b.n	8000b60 <memset+0x4>

08000b6c <__libc_init_array>:
 8000b6c:	b570      	push	{r4, r5, r6, lr}
 8000b6e:	4d0d      	ldr	r5, [pc, #52]	; (8000ba4 <__libc_init_array+0x38>)
 8000b70:	4c0d      	ldr	r4, [pc, #52]	; (8000ba8 <__libc_init_array+0x3c>)
 8000b72:	1b64      	subs	r4, r4, r5
 8000b74:	10a4      	asrs	r4, r4, #2
 8000b76:	2600      	movs	r6, #0
 8000b78:	42a6      	cmp	r6, r4
 8000b7a:	d109      	bne.n	8000b90 <__libc_init_array+0x24>
 8000b7c:	4d0b      	ldr	r5, [pc, #44]	; (8000bac <__libc_init_array+0x40>)
 8000b7e:	4c0c      	ldr	r4, [pc, #48]	; (8000bb0 <__libc_init_array+0x44>)
 8000b80:	f000 f818 	bl	8000bb4 <_init>
 8000b84:	1b64      	subs	r4, r4, r5
 8000b86:	10a4      	asrs	r4, r4, #2
 8000b88:	2600      	movs	r6, #0
 8000b8a:	42a6      	cmp	r6, r4
 8000b8c:	d105      	bne.n	8000b9a <__libc_init_array+0x2e>
 8000b8e:	bd70      	pop	{r4, r5, r6, pc}
 8000b90:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b94:	4798      	blx	r3
 8000b96:	3601      	adds	r6, #1
 8000b98:	e7ee      	b.n	8000b78 <__libc_init_array+0xc>
 8000b9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b9e:	4798      	blx	r3
 8000ba0:	3601      	adds	r6, #1
 8000ba2:	e7f2      	b.n	8000b8a <__libc_init_array+0x1e>
 8000ba4:	08000bcc 	.word	0x08000bcc
 8000ba8:	08000bcc 	.word	0x08000bcc
 8000bac:	08000bcc 	.word	0x08000bcc
 8000bb0:	08000bd0 	.word	0x08000bd0

08000bb4 <_init>:
 8000bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bb6:	bf00      	nop
 8000bb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000bba:	bc08      	pop	{r3}
 8000bbc:	469e      	mov	lr, r3
 8000bbe:	4770      	bx	lr

08000bc0 <_fini>:
 8000bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bc2:	bf00      	nop
 8000bc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000bc6:	bc08      	pop	{r3}
 8000bc8:	469e      	mov	lr, r3
 8000bca:	4770      	bx	lr
