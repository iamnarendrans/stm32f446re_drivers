
stm32f446xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000bf8  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08000dbc  08000dbc  00001dbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000ddc  08000ddc  00002018  2**0
                  CONTENTS
  4 .ARM          00000008  08000ddc  08000ddc  00001ddc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08000de4  08000de4  00002018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000de4  08000de4  00001de4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000de8  08000de8  00001de8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08000dec  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000028  20000018  08000e04  00002018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000040  08000e04  00002040  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00002018  2**0
                  CONTENTS, READONLY
 12 .debug_info   000014a3  00000000  00000000  00002048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000005e4  00000000  00000000  000034eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000180  00000000  00000000  00003ad0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000117  00000000  00000000  00003c50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000020ac  00000000  00000000  00003d67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001b42  00000000  00000000  00005e13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00008632  00000000  00000000  00007955  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0000ff87  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000057c  00000000  00000000  0000ffcc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  00010548  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000018 	.word	0x20000018
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000da4 	.word	0x08000da4

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	2000001c 	.word	0x2000001c
 8000200:	08000da4 	.word	0x08000da4

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr

08000214 <delay>:

#define MY_ADDR		0x61
#define SLAVE_ADDR	0x68

void delay(void)
{
 8000214:	b480      	push	{r7}
 8000216:	b083      	sub	sp, #12
 8000218:	af00      	add	r7, sp, #0
	for(uint32_t i = 0; i < 500000/2; i++);
 800021a:	2300      	movs	r3, #0
 800021c:	607b      	str	r3, [r7, #4]
 800021e:	e002      	b.n	8000226 <delay+0x12>
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	3301      	adds	r3, #1
 8000224:	607b      	str	r3, [r7, #4]
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	4a04      	ldr	r2, [pc, #16]	@ (800023c <delay+0x28>)
 800022a:	4293      	cmp	r3, r2
 800022c:	d9f8      	bls.n	8000220 <delay+0xc>
}
 800022e:	bf00      	nop
 8000230:	bf00      	nop
 8000232:	370c      	adds	r7, #12
 8000234:	46bd      	mov	sp, r7
 8000236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800023a:	4770      	bx	lr
 800023c:	0003d08f 	.word	0x0003d08f

08000240 <I2C1_GPIOInits>:
 */
I2C_Handle_t I2C1Handle;


void I2C1_GPIOInits(void)
{
 8000240:	b580      	push	{r7, lr}
 8000242:	b084      	sub	sp, #16
 8000244:	af00      	add	r7, sp, #0
	GPIO_Handle_t I2CPins;

	I2CPins.pGPIOx = GPIOB;
 8000246:	4b0e      	ldr	r3, [pc, #56]	@ (8000280 <I2C1_GPIOInits+0x40>)
 8000248:	607b      	str	r3, [r7, #4]
	I2CPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 800024a:	2302      	movs	r3, #2
 800024c:	727b      	strb	r3, [r7, #9]
	I2CPins.GPIO_PinConfig.GPIO_PinOType = GPIO_OP_TYPE_OD;
 800024e:	2301      	movs	r3, #1
 8000250:	733b      	strb	r3, [r7, #12]
	I2CPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 8000252:	2301      	movs	r3, #1
 8000254:	72fb      	strb	r3, [r7, #11]
	I2CPins.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
 8000256:	2304      	movs	r3, #4
 8000258:	737b      	strb	r3, [r7, #13]
	I2CPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 800025a:	2302      	movs	r3, #2
 800025c:	72bb      	strb	r3, [r7, #10]

	// SCL
	I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NUM_6;
 800025e:	2306      	movs	r3, #6
 8000260:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2CPins);
 8000262:	1d3b      	adds	r3, r7, #4
 8000264:	4618      	mov	r0, r3
 8000266:	f000 f96f 	bl	8000548 <GPIO_Init>

	// SDA
	I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NUM_9;
 800026a:	2309      	movs	r3, #9
 800026c:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2CPins);
 800026e:	1d3b      	adds	r3, r7, #4
 8000270:	4618      	mov	r0, r3
 8000272:	f000 f969 	bl	8000548 <GPIO_Init>
}
 8000276:	bf00      	nop
 8000278:	3710      	adds	r7, #16
 800027a:	46bd      	mov	sp, r7
 800027c:	bd80      	pop	{r7, pc}
 800027e:	bf00      	nop
 8000280:	40020400 	.word	0x40020400

08000284 <I2C1_Inits>:

void I2C1_Inits(void)
{
 8000284:	b580      	push	{r7, lr}
 8000286:	af00      	add	r7, sp, #0

	I2C1Handle.pI2Cx = I2C1;
 8000288:	4b09      	ldr	r3, [pc, #36]	@ (80002b0 <I2C1_Inits+0x2c>)
 800028a:	4a0a      	ldr	r2, [pc, #40]	@ (80002b4 <I2C1_Inits+0x30>)
 800028c:	601a      	str	r2, [r3, #0]
	I2C1Handle.I2C_Config.I2C_AckCtrl = I2C_ACK_EN;
 800028e:	4b08      	ldr	r3, [pc, #32]	@ (80002b0 <I2C1_Inits+0x2c>)
 8000290:	2201      	movs	r2, #1
 8000292:	725a      	strb	r2, [r3, #9]
	I2C1Handle.I2C_Config.I2C_DeviceAddr = MY_ADDR;
 8000294:	4b06      	ldr	r3, [pc, #24]	@ (80002b0 <I2C1_Inits+0x2c>)
 8000296:	2261      	movs	r2, #97	@ 0x61
 8000298:	721a      	strb	r2, [r3, #8]
	I2C1Handle.I2C_Config.I2C_FMDutyCycle = I2C_FM_DUTY_2;
 800029a:	4b05      	ldr	r3, [pc, #20]	@ (80002b0 <I2C1_Inits+0x2c>)
 800029c:	2200      	movs	r2, #0
 800029e:	729a      	strb	r2, [r3, #10]
	I2C1Handle.I2C_Config.I2C_SCLSpeed = I2C_SCL_SPEED_SM;
 80002a0:	4b03      	ldr	r3, [pc, #12]	@ (80002b0 <I2C1_Inits+0x2c>)
 80002a2:	4a05      	ldr	r2, [pc, #20]	@ (80002b8 <I2C1_Inits+0x34>)
 80002a4:	605a      	str	r2, [r3, #4]

	I2C_Init(&I2C1Handle);
 80002a6:	4802      	ldr	r0, [pc, #8]	@ (80002b0 <I2C1_Inits+0x2c>)
 80002a8:	f000 fbb8 	bl	8000a1c <I2C_Init>
}
 80002ac:	bf00      	nop
 80002ae:	bd80      	pop	{r7, pc}
 80002b0:	20000034 	.word	0x20000034
 80002b4:	40005400 	.word	0x40005400
 80002b8:	000186a0 	.word	0x000186a0

080002bc <GPIO_ButtonInit>:

void GPIO_ButtonInit(void)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	b084      	sub	sp, #16
 80002c0:	af00      	add	r7, sp, #0
	GPIO_Handle_t GPIOBtn;

	GPIOBtn.pGPIOx = GPIOC;
 80002c2:	4b09      	ldr	r3, [pc, #36]	@ (80002e8 <GPIO_ButtonInit+0x2c>)
 80002c4:	607b      	str	r3, [r7, #4]
	GPIOBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NUM_13;
 80002c6:	230d      	movs	r3, #13
 80002c8:	723b      	strb	r3, [r7, #8]
	GPIOBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 80002ca:	2300      	movs	r3, #0
 80002cc:	727b      	strb	r3, [r7, #9]
	GPIOBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80002ce:	2302      	movs	r3, #2
 80002d0:	72bb      	strb	r3, [r7, #10]
	GPIOBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PD;
 80002d2:	2302      	movs	r3, #2
 80002d4:	72fb      	strb	r3, [r7, #11]

	GPIO_Init(&GPIOBtn);
 80002d6:	1d3b      	adds	r3, r7, #4
 80002d8:	4618      	mov	r0, r3
 80002da:	f000 f935 	bl	8000548 <GPIO_Init>

}
 80002de:	bf00      	nop
 80002e0:	3710      	adds	r7, #16
 80002e2:	46bd      	mov	sp, r7
 80002e4:	bd80      	pop	{r7, pc}
 80002e6:	bf00      	nop
 80002e8:	40020800 	.word	0x40020800

080002ec <main>:

int main(void)
{
 80002ec:	b5b0      	push	{r4, r5, r7, lr}
 80002ee:	b088      	sub	sp, #32
 80002f0:	af00      	add	r7, sp, #0

	uint8_t some_data[] = "We are testing I2C master Tx\n";
 80002f2:	4b14      	ldr	r3, [pc, #80]	@ (8000344 <main+0x58>)
 80002f4:	463c      	mov	r4, r7
 80002f6:	461d      	mov	r5, r3
 80002f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002fc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000300:	c407      	stmia	r4!, {r0, r1, r2}
 8000302:	8023      	strh	r3, [r4, #0]

	GPIO_ButtonInit();
 8000304:	f7ff ffda 	bl	80002bc <GPIO_ButtonInit>
	// I2C Gpio Inits
	I2C1_GPIOInits();
 8000308:	f7ff ff9a 	bl	8000240 <I2C1_GPIOInits>

	// I2C1 Init
	I2C1_Inits();
 800030c:	f7ff ffba 	bl	8000284 <I2C1_Inits>

	// Enable I2C peripheral
	I2C_PeripheralControl(I2C1, ENABLE);
 8000310:	2101      	movs	r1, #1
 8000312:	480d      	ldr	r0, [pc, #52]	@ (8000348 <main+0x5c>)
 8000314:	f000 fc96 	bl	8000c44 <I2C_PeripheralControl>

	while(1)
	{
		//wait till button is pressed
		while( ! GPIO_ReadFromInputPin(GPIOA,GPIO_PIN_NUM_13) );
 8000318:	bf00      	nop
 800031a:	210d      	movs	r1, #13
 800031c:	480b      	ldr	r0, [pc, #44]	@ (800034c <main+0x60>)
 800031e:	f000 faad 	bl	800087c <GPIO_ReadFromInputPin>
 8000322:	4603      	mov	r3, r0
 8000324:	2b00      	cmp	r3, #0
 8000326:	d0f8      	beq.n	800031a <main+0x2e>

		//to avoid button de-bouncing related issues 200ms of delay
		delay();
 8000328:	f7ff ff74 	bl	8000214 <delay>

		// Send some data to the arduino slave
		I2C_MasterSendData(&I2C1Handle, some_data, strlen((char*)some_data), SLAVE_ADDR);
 800032c:	463b      	mov	r3, r7
 800032e:	4618      	mov	r0, r3
 8000330:	f7ff ff68 	bl	8000204 <strlen>
 8000334:	4603      	mov	r3, r0
 8000336:	b2da      	uxtb	r2, r3
 8000338:	4639      	mov	r1, r7
 800033a:	2368      	movs	r3, #104	@ 0x68
 800033c:	4804      	ldr	r0, [pc, #16]	@ (8000350 <main+0x64>)
 800033e:	f000 fc1b 	bl	8000b78 <I2C_MasterSendData>
	{
 8000342:	e7e9      	b.n	8000318 <main+0x2c>
 8000344:	08000dbc 	.word	0x08000dbc
 8000348:	40005400 	.word	0x40005400
 800034c:	40020000 	.word	0x40020000
 8000350:	20000034 	.word	0x20000034

08000354 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000354:	480d      	ldr	r0, [pc, #52]	@ (800038c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000356:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000358:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800035c:	480c      	ldr	r0, [pc, #48]	@ (8000390 <LoopForever+0x6>)
  ldr r1, =_edata
 800035e:	490d      	ldr	r1, [pc, #52]	@ (8000394 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000360:	4a0d      	ldr	r2, [pc, #52]	@ (8000398 <LoopForever+0xe>)
  movs r3, #0
 8000362:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000364:	e002      	b.n	800036c <LoopCopyDataInit>

08000366 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000366:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000368:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800036a:	3304      	adds	r3, #4

0800036c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800036c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800036e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000370:	d3f9      	bcc.n	8000366 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000372:	4a0a      	ldr	r2, [pc, #40]	@ (800039c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000374:	4c0a      	ldr	r4, [pc, #40]	@ (80003a0 <LoopForever+0x16>)
  movs r3, #0
 8000376:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000378:	e001      	b.n	800037e <LoopFillZerobss>

0800037a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800037a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800037c:	3204      	adds	r2, #4

0800037e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800037e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000380:	d3fb      	bcc.n	800037a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000382:	f000 fceb 	bl	8000d5c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000386:	f7ff ffb1 	bl	80002ec <main>

0800038a <LoopForever>:

LoopForever:
  b LoopForever
 800038a:	e7fe      	b.n	800038a <LoopForever>
  ldr   r0, =_estack
 800038c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000390:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000394:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8000398:	08000dec 	.word	0x08000dec
  ldr r2, =_sbss
 800039c:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 80003a0:	20000040 	.word	0x20000040

080003a4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003a4:	e7fe      	b.n	80003a4 <ADC_IRQHandler>
	...

080003a8 <GPIO_PeriClockControl>:
 * @return								- None
 *
 * @note								- None
 *****************************************************************************************************************/
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 80003a8:	b480      	push	{r7}
 80003aa:	b083      	sub	sp, #12
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	6078      	str	r0, [r7, #4]
 80003b0:	460b      	mov	r3, r1
 80003b2:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 80003b4:	78fb      	ldrb	r3, [r7, #3]
 80003b6:	2b01      	cmp	r3, #1
 80003b8:	d157      	bne.n	800046a <GPIO_PeriClockControl+0xc2>
	{
		if(pGPIOx == GPIOA)
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	4a59      	ldr	r2, [pc, #356]	@ (8000524 <GPIO_PeriClockControl+0x17c>)
 80003be:	4293      	cmp	r3, r2
 80003c0:	d106      	bne.n	80003d0 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 80003c2:	4b59      	ldr	r3, [pc, #356]	@ (8000528 <GPIO_PeriClockControl+0x180>)
 80003c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003c6:	4a58      	ldr	r2, [pc, #352]	@ (8000528 <GPIO_PeriClockControl+0x180>)
 80003c8:	f043 0301 	orr.w	r3, r3, #1
 80003cc:	6313      	str	r3, [r2, #48]	@ 0x30
		else if(pGPIOx == GPIOH)
		{
			GPIOH_PCLK_DI();
		}
	}
}
 80003ce:	e0a3      	b.n	8000518 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOB)
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	4a56      	ldr	r2, [pc, #344]	@ (800052c <GPIO_PeriClockControl+0x184>)
 80003d4:	4293      	cmp	r3, r2
 80003d6:	d106      	bne.n	80003e6 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 80003d8:	4b53      	ldr	r3, [pc, #332]	@ (8000528 <GPIO_PeriClockControl+0x180>)
 80003da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003dc:	4a52      	ldr	r2, [pc, #328]	@ (8000528 <GPIO_PeriClockControl+0x180>)
 80003de:	f043 0302 	orr.w	r3, r3, #2
 80003e2:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003e4:	e098      	b.n	8000518 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOC)
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	4a51      	ldr	r2, [pc, #324]	@ (8000530 <GPIO_PeriClockControl+0x188>)
 80003ea:	4293      	cmp	r3, r2
 80003ec:	d106      	bne.n	80003fc <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 80003ee:	4b4e      	ldr	r3, [pc, #312]	@ (8000528 <GPIO_PeriClockControl+0x180>)
 80003f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003f2:	4a4d      	ldr	r2, [pc, #308]	@ (8000528 <GPIO_PeriClockControl+0x180>)
 80003f4:	f043 0304 	orr.w	r3, r3, #4
 80003f8:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003fa:	e08d      	b.n	8000518 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOD)
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	4a4d      	ldr	r2, [pc, #308]	@ (8000534 <GPIO_PeriClockControl+0x18c>)
 8000400:	4293      	cmp	r3, r2
 8000402:	d106      	bne.n	8000412 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000404:	4b48      	ldr	r3, [pc, #288]	@ (8000528 <GPIO_PeriClockControl+0x180>)
 8000406:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000408:	4a47      	ldr	r2, [pc, #284]	@ (8000528 <GPIO_PeriClockControl+0x180>)
 800040a:	f043 0308 	orr.w	r3, r3, #8
 800040e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000410:	e082      	b.n	8000518 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOE)
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	4a48      	ldr	r2, [pc, #288]	@ (8000538 <GPIO_PeriClockControl+0x190>)
 8000416:	4293      	cmp	r3, r2
 8000418:	d106      	bne.n	8000428 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 800041a:	4b43      	ldr	r3, [pc, #268]	@ (8000528 <GPIO_PeriClockControl+0x180>)
 800041c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800041e:	4a42      	ldr	r2, [pc, #264]	@ (8000528 <GPIO_PeriClockControl+0x180>)
 8000420:	f043 0310 	orr.w	r3, r3, #16
 8000424:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000426:	e077      	b.n	8000518 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOF)
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	4a44      	ldr	r2, [pc, #272]	@ (800053c <GPIO_PeriClockControl+0x194>)
 800042c:	4293      	cmp	r3, r2
 800042e:	d106      	bne.n	800043e <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8000430:	4b3d      	ldr	r3, [pc, #244]	@ (8000528 <GPIO_PeriClockControl+0x180>)
 8000432:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000434:	4a3c      	ldr	r2, [pc, #240]	@ (8000528 <GPIO_PeriClockControl+0x180>)
 8000436:	f043 0320 	orr.w	r3, r3, #32
 800043a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800043c:	e06c      	b.n	8000518 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOG)
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	4a3f      	ldr	r2, [pc, #252]	@ (8000540 <GPIO_PeriClockControl+0x198>)
 8000442:	4293      	cmp	r3, r2
 8000444:	d106      	bne.n	8000454 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 8000446:	4b38      	ldr	r3, [pc, #224]	@ (8000528 <GPIO_PeriClockControl+0x180>)
 8000448:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800044a:	4a37      	ldr	r2, [pc, #220]	@ (8000528 <GPIO_PeriClockControl+0x180>)
 800044c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000450:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000452:	e061      	b.n	8000518 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOH)
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	4a3b      	ldr	r2, [pc, #236]	@ (8000544 <GPIO_PeriClockControl+0x19c>)
 8000458:	4293      	cmp	r3, r2
 800045a:	d15d      	bne.n	8000518 <GPIO_PeriClockControl+0x170>
			GPIOH_PCLK_EN();
 800045c:	4b32      	ldr	r3, [pc, #200]	@ (8000528 <GPIO_PeriClockControl+0x180>)
 800045e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000460:	4a31      	ldr	r2, [pc, #196]	@ (8000528 <GPIO_PeriClockControl+0x180>)
 8000462:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000466:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000468:	e056      	b.n	8000518 <GPIO_PeriClockControl+0x170>
		if(pGPIOx == GPIOA)
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	4a2d      	ldr	r2, [pc, #180]	@ (8000524 <GPIO_PeriClockControl+0x17c>)
 800046e:	4293      	cmp	r3, r2
 8000470:	d106      	bne.n	8000480 <GPIO_PeriClockControl+0xd8>
			GPIOA_PCLK_DI();
 8000472:	4b2d      	ldr	r3, [pc, #180]	@ (8000528 <GPIO_PeriClockControl+0x180>)
 8000474:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000476:	4a2c      	ldr	r2, [pc, #176]	@ (8000528 <GPIO_PeriClockControl+0x180>)
 8000478:	f023 0301 	bic.w	r3, r3, #1
 800047c:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800047e:	e04b      	b.n	8000518 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOB)
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	4a2a      	ldr	r2, [pc, #168]	@ (800052c <GPIO_PeriClockControl+0x184>)
 8000484:	4293      	cmp	r3, r2
 8000486:	d106      	bne.n	8000496 <GPIO_PeriClockControl+0xee>
			GPIOB_PCLK_DI();
 8000488:	4b27      	ldr	r3, [pc, #156]	@ (8000528 <GPIO_PeriClockControl+0x180>)
 800048a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800048c:	4a26      	ldr	r2, [pc, #152]	@ (8000528 <GPIO_PeriClockControl+0x180>)
 800048e:	f023 0302 	bic.w	r3, r3, #2
 8000492:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000494:	e040      	b.n	8000518 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOC)
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	4a25      	ldr	r2, [pc, #148]	@ (8000530 <GPIO_PeriClockControl+0x188>)
 800049a:	4293      	cmp	r3, r2
 800049c:	d106      	bne.n	80004ac <GPIO_PeriClockControl+0x104>
			GPIOC_PCLK_DI();
 800049e:	4b22      	ldr	r3, [pc, #136]	@ (8000528 <GPIO_PeriClockControl+0x180>)
 80004a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004a2:	4a21      	ldr	r2, [pc, #132]	@ (8000528 <GPIO_PeriClockControl+0x180>)
 80004a4:	f023 0304 	bic.w	r3, r3, #4
 80004a8:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80004aa:	e035      	b.n	8000518 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOD)
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	4a21      	ldr	r2, [pc, #132]	@ (8000534 <GPIO_PeriClockControl+0x18c>)
 80004b0:	4293      	cmp	r3, r2
 80004b2:	d106      	bne.n	80004c2 <GPIO_PeriClockControl+0x11a>
			GPIOD_PCLK_DI();
 80004b4:	4b1c      	ldr	r3, [pc, #112]	@ (8000528 <GPIO_PeriClockControl+0x180>)
 80004b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004b8:	4a1b      	ldr	r2, [pc, #108]	@ (8000528 <GPIO_PeriClockControl+0x180>)
 80004ba:	f023 0308 	bic.w	r3, r3, #8
 80004be:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80004c0:	e02a      	b.n	8000518 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOE)
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	4a1c      	ldr	r2, [pc, #112]	@ (8000538 <GPIO_PeriClockControl+0x190>)
 80004c6:	4293      	cmp	r3, r2
 80004c8:	d106      	bne.n	80004d8 <GPIO_PeriClockControl+0x130>
			GPIOE_PCLK_DI();
 80004ca:	4b17      	ldr	r3, [pc, #92]	@ (8000528 <GPIO_PeriClockControl+0x180>)
 80004cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004ce:	4a16      	ldr	r2, [pc, #88]	@ (8000528 <GPIO_PeriClockControl+0x180>)
 80004d0:	f023 0310 	bic.w	r3, r3, #16
 80004d4:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80004d6:	e01f      	b.n	8000518 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOF)
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	4a18      	ldr	r2, [pc, #96]	@ (800053c <GPIO_PeriClockControl+0x194>)
 80004dc:	4293      	cmp	r3, r2
 80004de:	d106      	bne.n	80004ee <GPIO_PeriClockControl+0x146>
			GPIOF_PCLK_EN();
 80004e0:	4b11      	ldr	r3, [pc, #68]	@ (8000528 <GPIO_PeriClockControl+0x180>)
 80004e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004e4:	4a10      	ldr	r2, [pc, #64]	@ (8000528 <GPIO_PeriClockControl+0x180>)
 80004e6:	f043 0320 	orr.w	r3, r3, #32
 80004ea:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80004ec:	e014      	b.n	8000518 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOG)
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	4a13      	ldr	r2, [pc, #76]	@ (8000540 <GPIO_PeriClockControl+0x198>)
 80004f2:	4293      	cmp	r3, r2
 80004f4:	d106      	bne.n	8000504 <GPIO_PeriClockControl+0x15c>
			GPIOG_PCLK_DI();
 80004f6:	4b0c      	ldr	r3, [pc, #48]	@ (8000528 <GPIO_PeriClockControl+0x180>)
 80004f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004fa:	4a0b      	ldr	r2, [pc, #44]	@ (8000528 <GPIO_PeriClockControl+0x180>)
 80004fc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000500:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000502:	e009      	b.n	8000518 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOH)
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	4a0f      	ldr	r2, [pc, #60]	@ (8000544 <GPIO_PeriClockControl+0x19c>)
 8000508:	4293      	cmp	r3, r2
 800050a:	d105      	bne.n	8000518 <GPIO_PeriClockControl+0x170>
			GPIOH_PCLK_DI();
 800050c:	4b06      	ldr	r3, [pc, #24]	@ (8000528 <GPIO_PeriClockControl+0x180>)
 800050e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000510:	4a05      	ldr	r2, [pc, #20]	@ (8000528 <GPIO_PeriClockControl+0x180>)
 8000512:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000516:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000518:	bf00      	nop
 800051a:	370c      	adds	r7, #12
 800051c:	46bd      	mov	sp, r7
 800051e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000522:	4770      	bx	lr
 8000524:	40020000 	.word	0x40020000
 8000528:	40023800 	.word	0x40023800
 800052c:	40020400 	.word	0x40020400
 8000530:	40020800 	.word	0x40020800
 8000534:	40020c00 	.word	0x40020c00
 8000538:	40021000 	.word	0x40021000
 800053c:	40021400 	.word	0x40021400
 8000540:	40021800 	.word	0x40021800
 8000544:	40021c00 	.word	0x40021c00

08000548 <GPIO_Init>:
 * @return								- None
 *
 * @note								- None
 *****************************************************************************************************************/
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b086      	sub	sp, #24
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0; // Temp register
 8000550:	2300      	movs	r3, #0
 8000552:	617b      	str	r3, [r7, #20]

	// Enable the peripheral clock
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	2101      	movs	r1, #1
 800055a:	4618      	mov	r0, r3
 800055c:	f7ff ff24 	bl	80003a8 <GPIO_PeriClockControl>

	//1. Configure the mode of GPIO PIN
	if(pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	795b      	ldrb	r3, [r3, #5]
 8000564:	2b03      	cmp	r3, #3
 8000566:	d81f      	bhi.n	80005a8 <GPIO_Init+0x60>
	{
		// Non interrupt mode
		temp = (pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber));
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	795b      	ldrb	r3, [r3, #5]
 800056c:	461a      	mov	r2, r3
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	791b      	ldrb	r3, [r3, #4]
 8000572:	005b      	lsls	r3, r3, #1
 8000574:	fa02 f303 	lsl.w	r3, r2, r3
 8000578:	617b      	str	r3, [r7, #20]
		pGPIOHandle -> pGPIOx -> MODER &= ~(0x3 << pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);	// Clearing
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	681a      	ldr	r2, [r3, #0]
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	791b      	ldrb	r3, [r3, #4]
 8000584:	4619      	mov	r1, r3
 8000586:	2303      	movs	r3, #3
 8000588:	408b      	lsls	r3, r1
 800058a:	43db      	mvns	r3, r3
 800058c:	4619      	mov	r1, r3
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	400a      	ands	r2, r1
 8000594:	601a      	str	r2, [r3, #0]
		pGPIOHandle -> pGPIOx -> MODER |= temp;	// Setting
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	6819      	ldr	r1, [r3, #0]
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	697a      	ldr	r2, [r7, #20]
 80005a2:	430a      	orrs	r2, r1
 80005a4:	601a      	str	r2, [r3, #0]
 80005a6:	e0c2      	b.n	800072e <GPIO_Init+0x1e6>
	}
	else
	{
		// this part will code later (interrupt mode)
		if(pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	795b      	ldrb	r3, [r3, #5]
 80005ac:	2b04      	cmp	r3, #4
 80005ae:	d117      	bne.n	80005e0 <GPIO_Init+0x98>
		{
			//1. Configure the FTSR
			EXTI ->FTSR |= (1 << pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 80005b0:	4b47      	ldr	r3, [pc, #284]	@ (80006d0 <GPIO_Init+0x188>)
 80005b2:	68db      	ldr	r3, [r3, #12]
 80005b4:	687a      	ldr	r2, [r7, #4]
 80005b6:	7912      	ldrb	r2, [r2, #4]
 80005b8:	4611      	mov	r1, r2
 80005ba:	2201      	movs	r2, #1
 80005bc:	408a      	lsls	r2, r1
 80005be:	4611      	mov	r1, r2
 80005c0:	4a43      	ldr	r2, [pc, #268]	@ (80006d0 <GPIO_Init+0x188>)
 80005c2:	430b      	orrs	r3, r1
 80005c4:	60d3      	str	r3, [r2, #12]
			// Clear the corresponding RTSR bit
			EXTI ->RTSR &= ~(1 << pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 80005c6:	4b42      	ldr	r3, [pc, #264]	@ (80006d0 <GPIO_Init+0x188>)
 80005c8:	689b      	ldr	r3, [r3, #8]
 80005ca:	687a      	ldr	r2, [r7, #4]
 80005cc:	7912      	ldrb	r2, [r2, #4]
 80005ce:	4611      	mov	r1, r2
 80005d0:	2201      	movs	r2, #1
 80005d2:	408a      	lsls	r2, r1
 80005d4:	43d2      	mvns	r2, r2
 80005d6:	4611      	mov	r1, r2
 80005d8:	4a3d      	ldr	r2, [pc, #244]	@ (80006d0 <GPIO_Init+0x188>)
 80005da:	400b      	ands	r3, r1
 80005dc:	6093      	str	r3, [r2, #8]
 80005de:	e035      	b.n	800064c <GPIO_Init+0x104>
		}
		else if(pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	795b      	ldrb	r3, [r3, #5]
 80005e4:	2b05      	cmp	r3, #5
 80005e6:	d117      	bne.n	8000618 <GPIO_Init+0xd0>
		{
			//1. Configure the RTSR
			EXTI ->RTSR |= (1 << pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 80005e8:	4b39      	ldr	r3, [pc, #228]	@ (80006d0 <GPIO_Init+0x188>)
 80005ea:	689b      	ldr	r3, [r3, #8]
 80005ec:	687a      	ldr	r2, [r7, #4]
 80005ee:	7912      	ldrb	r2, [r2, #4]
 80005f0:	4611      	mov	r1, r2
 80005f2:	2201      	movs	r2, #1
 80005f4:	408a      	lsls	r2, r1
 80005f6:	4611      	mov	r1, r2
 80005f8:	4a35      	ldr	r2, [pc, #212]	@ (80006d0 <GPIO_Init+0x188>)
 80005fa:	430b      	orrs	r3, r1
 80005fc:	6093      	str	r3, [r2, #8]
			// Clear the corresponding FTSR bit
			EXTI ->FTSR &= ~(1 << pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 80005fe:	4b34      	ldr	r3, [pc, #208]	@ (80006d0 <GPIO_Init+0x188>)
 8000600:	68db      	ldr	r3, [r3, #12]
 8000602:	687a      	ldr	r2, [r7, #4]
 8000604:	7912      	ldrb	r2, [r2, #4]
 8000606:	4611      	mov	r1, r2
 8000608:	2201      	movs	r2, #1
 800060a:	408a      	lsls	r2, r1
 800060c:	43d2      	mvns	r2, r2
 800060e:	4611      	mov	r1, r2
 8000610:	4a2f      	ldr	r2, [pc, #188]	@ (80006d0 <GPIO_Init+0x188>)
 8000612:	400b      	ands	r3, r1
 8000614:	60d3      	str	r3, [r2, #12]
 8000616:	e019      	b.n	800064c <GPIO_Init+0x104>
		}
		else if(pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	795b      	ldrb	r3, [r3, #5]
 800061c:	2b06      	cmp	r3, #6
 800061e:	d115      	bne.n	800064c <GPIO_Init+0x104>
		{
			//1. Configure both FTSR and RTSR
			EXTI ->RTSR |= (1 << pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 8000620:	4b2b      	ldr	r3, [pc, #172]	@ (80006d0 <GPIO_Init+0x188>)
 8000622:	689b      	ldr	r3, [r3, #8]
 8000624:	687a      	ldr	r2, [r7, #4]
 8000626:	7912      	ldrb	r2, [r2, #4]
 8000628:	4611      	mov	r1, r2
 800062a:	2201      	movs	r2, #1
 800062c:	408a      	lsls	r2, r1
 800062e:	4611      	mov	r1, r2
 8000630:	4a27      	ldr	r2, [pc, #156]	@ (80006d0 <GPIO_Init+0x188>)
 8000632:	430b      	orrs	r3, r1
 8000634:	6093      	str	r3, [r2, #8]

			EXTI ->FTSR |= (1 << pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 8000636:	4b26      	ldr	r3, [pc, #152]	@ (80006d0 <GPIO_Init+0x188>)
 8000638:	68db      	ldr	r3, [r3, #12]
 800063a:	687a      	ldr	r2, [r7, #4]
 800063c:	7912      	ldrb	r2, [r2, #4]
 800063e:	4611      	mov	r1, r2
 8000640:	2201      	movs	r2, #1
 8000642:	408a      	lsls	r2, r1
 8000644:	4611      	mov	r1, r2
 8000646:	4a22      	ldr	r2, [pc, #136]	@ (80006d0 <GPIO_Init+0x188>)
 8000648:	430b      	orrs	r3, r1
 800064a:	60d3      	str	r3, [r2, #12]
		}

		//2. Configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber / 4;
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	791b      	ldrb	r3, [r3, #4]
 8000650:	089b      	lsrs	r3, r3, #2
 8000652:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber % 4;
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	791b      	ldrb	r3, [r3, #4]
 8000658:	f003 0303 	and.w	r3, r3, #3
 800065c:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle ->pGPIOx);
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	4a1c      	ldr	r2, [pc, #112]	@ (80006d4 <GPIO_Init+0x18c>)
 8000664:	4293      	cmp	r3, r2
 8000666:	d045      	beq.n	80006f4 <GPIO_Init+0x1ac>
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	4a1a      	ldr	r2, [pc, #104]	@ (80006d8 <GPIO_Init+0x190>)
 800066e:	4293      	cmp	r3, r2
 8000670:	d02b      	beq.n	80006ca <GPIO_Init+0x182>
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	4a19      	ldr	r2, [pc, #100]	@ (80006dc <GPIO_Init+0x194>)
 8000678:	4293      	cmp	r3, r2
 800067a:	d024      	beq.n	80006c6 <GPIO_Init+0x17e>
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	4a17      	ldr	r2, [pc, #92]	@ (80006e0 <GPIO_Init+0x198>)
 8000682:	4293      	cmp	r3, r2
 8000684:	d01d      	beq.n	80006c2 <GPIO_Init+0x17a>
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	4a16      	ldr	r2, [pc, #88]	@ (80006e4 <GPIO_Init+0x19c>)
 800068c:	4293      	cmp	r3, r2
 800068e:	d016      	beq.n	80006be <GPIO_Init+0x176>
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	4a14      	ldr	r2, [pc, #80]	@ (80006e8 <GPIO_Init+0x1a0>)
 8000696:	4293      	cmp	r3, r2
 8000698:	d00f      	beq.n	80006ba <GPIO_Init+0x172>
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	4a13      	ldr	r2, [pc, #76]	@ (80006ec <GPIO_Init+0x1a4>)
 80006a0:	4293      	cmp	r3, r2
 80006a2:	d008      	beq.n	80006b6 <GPIO_Init+0x16e>
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	4a11      	ldr	r2, [pc, #68]	@ (80006f0 <GPIO_Init+0x1a8>)
 80006aa:	4293      	cmp	r3, r2
 80006ac:	d101      	bne.n	80006b2 <GPIO_Init+0x16a>
 80006ae:	2307      	movs	r3, #7
 80006b0:	e021      	b.n	80006f6 <GPIO_Init+0x1ae>
 80006b2:	2300      	movs	r3, #0
 80006b4:	e01f      	b.n	80006f6 <GPIO_Init+0x1ae>
 80006b6:	2306      	movs	r3, #6
 80006b8:	e01d      	b.n	80006f6 <GPIO_Init+0x1ae>
 80006ba:	2305      	movs	r3, #5
 80006bc:	e01b      	b.n	80006f6 <GPIO_Init+0x1ae>
 80006be:	2304      	movs	r3, #4
 80006c0:	e019      	b.n	80006f6 <GPIO_Init+0x1ae>
 80006c2:	2303      	movs	r3, #3
 80006c4:	e017      	b.n	80006f6 <GPIO_Init+0x1ae>
 80006c6:	2302      	movs	r3, #2
 80006c8:	e015      	b.n	80006f6 <GPIO_Init+0x1ae>
 80006ca:	2301      	movs	r3, #1
 80006cc:	e013      	b.n	80006f6 <GPIO_Init+0x1ae>
 80006ce:	bf00      	nop
 80006d0:	40013c00 	.word	0x40013c00
 80006d4:	40020000 	.word	0x40020000
 80006d8:	40020400 	.word	0x40020400
 80006dc:	40020800 	.word	0x40020800
 80006e0:	40020c00 	.word	0x40020c00
 80006e4:	40021000 	.word	0x40021000
 80006e8:	40021400 	.word	0x40021400
 80006ec:	40021800 	.word	0x40021800
 80006f0:	40021c00 	.word	0x40021c00
 80006f4:	2300      	movs	r3, #0
 80006f6:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 80006f8:	4b5d      	ldr	r3, [pc, #372]	@ (8000870 <GPIO_Init+0x328>)
 80006fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006fc:	4a5c      	ldr	r2, [pc, #368]	@ (8000870 <GPIO_Init+0x328>)
 80006fe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000702:	6453      	str	r3, [r2, #68]	@ 0x44
		SYSGFG -> EXTICR[temp1] = portcode << (temp2 * 4);
 8000704:	7c7a      	ldrb	r2, [r7, #17]
 8000706:	7cbb      	ldrb	r3, [r7, #18]
 8000708:	009b      	lsls	r3, r3, #2
 800070a:	fa02 f103 	lsl.w	r1, r2, r3
 800070e:	4a59      	ldr	r2, [pc, #356]	@ (8000874 <GPIO_Init+0x32c>)
 8000710:	7cfb      	ldrb	r3, [r7, #19]
 8000712:	3302      	adds	r3, #2
 8000714:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//3. Enable the EXTI interrupt delivery using IMR
		EXTI->IMR |= (1 << pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 8000718:	4b57      	ldr	r3, [pc, #348]	@ (8000878 <GPIO_Init+0x330>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	687a      	ldr	r2, [r7, #4]
 800071e:	7912      	ldrb	r2, [r2, #4]
 8000720:	4611      	mov	r1, r2
 8000722:	2201      	movs	r2, #1
 8000724:	408a      	lsls	r2, r1
 8000726:	4611      	mov	r1, r2
 8000728:	4a53      	ldr	r2, [pc, #332]	@ (8000878 <GPIO_Init+0x330>)
 800072a:	430b      	orrs	r3, r1
 800072c:	6013      	str	r3, [r2, #0]

	}

	temp = 0;
 800072e:	2300      	movs	r3, #0
 8000730:	617b      	str	r3, [r7, #20]
	//2. Configure the Speed
	temp = (pGPIOHandle -> GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber));
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	799b      	ldrb	r3, [r3, #6]
 8000736:	461a      	mov	r2, r3
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	791b      	ldrb	r3, [r3, #4]
 800073c:	005b      	lsls	r3, r3, #1
 800073e:	fa02 f303 	lsl.w	r3, r2, r3
 8000742:	617b      	str	r3, [r7, #20]
	pGPIOHandle -> pGPIOx -> OSPEEDR &= ~(0x3 << pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);	// clearing
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	689a      	ldr	r2, [r3, #8]
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	791b      	ldrb	r3, [r3, #4]
 800074e:	4619      	mov	r1, r3
 8000750:	2303      	movs	r3, #3
 8000752:	408b      	lsls	r3, r1
 8000754:	43db      	mvns	r3, r3
 8000756:	4619      	mov	r1, r3
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	400a      	ands	r2, r1
 800075e:	609a      	str	r2, [r3, #8]
	pGPIOHandle -> pGPIOx -> OSPEEDR |= temp;	// Setting
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	6899      	ldr	r1, [r3, #8]
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	697a      	ldr	r2, [r7, #20]
 800076c:	430a      	orrs	r2, r1
 800076e:	609a      	str	r2, [r3, #8]

	temp = 0;
 8000770:	2300      	movs	r3, #0
 8000772:	617b      	str	r3, [r7, #20]
	//3. Configure the Push-pull settings
	temp = (pGPIOHandle -> GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber));
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	79db      	ldrb	r3, [r3, #7]
 8000778:	461a      	mov	r2, r3
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	791b      	ldrb	r3, [r3, #4]
 800077e:	005b      	lsls	r3, r3, #1
 8000780:	fa02 f303 	lsl.w	r3, r2, r3
 8000784:	617b      	str	r3, [r7, #20]
	pGPIOHandle -> pGPIOx -> PUPDR &= ~(0x3 << pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	68da      	ldr	r2, [r3, #12]
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	791b      	ldrb	r3, [r3, #4]
 8000790:	4619      	mov	r1, r3
 8000792:	2303      	movs	r3, #3
 8000794:	408b      	lsls	r3, r1
 8000796:	43db      	mvns	r3, r3
 8000798:	4619      	mov	r1, r3
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	400a      	ands	r2, r1
 80007a0:	60da      	str	r2, [r3, #12]
	pGPIOHandle -> pGPIOx -> PUPDR |= temp;
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	68d9      	ldr	r1, [r3, #12]
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	697a      	ldr	r2, [r7, #20]
 80007ae:	430a      	orrs	r2, r1
 80007b0:	60da      	str	r2, [r3, #12]

	temp = 0;
 80007b2:	2300      	movs	r3, #0
 80007b4:	617b      	str	r3, [r7, #20]
	//4. Configure the Output Type
	if(pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_OUT){
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	795b      	ldrb	r3, [r3, #5]
 80007ba:	2b01      	cmp	r3, #1
 80007bc:	d11d      	bne.n	80007fa <GPIO_Init+0x2b2>
		temp = (pGPIOHandle -> GPIO_PinConfig.GPIO_PinOType << pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	7a1b      	ldrb	r3, [r3, #8]
 80007c2:	461a      	mov	r2, r3
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	791b      	ldrb	r3, [r3, #4]
 80007c8:	fa02 f303 	lsl.w	r3, r2, r3
 80007cc:	617b      	str	r3, [r7, #20]
		pGPIOHandle -> pGPIOx -> OTYPER &= ~(0x3 << pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	685a      	ldr	r2, [r3, #4]
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	791b      	ldrb	r3, [r3, #4]
 80007d8:	4619      	mov	r1, r3
 80007da:	2303      	movs	r3, #3
 80007dc:	408b      	lsls	r3, r1
 80007de:	43db      	mvns	r3, r3
 80007e0:	4619      	mov	r1, r3
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	400a      	ands	r2, r1
 80007e8:	605a      	str	r2, [r3, #4]
		pGPIOHandle -> pGPIOx -> OTYPER |= temp;
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	6859      	ldr	r1, [r3, #4]
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	697a      	ldr	r2, [r7, #20]
 80007f6:	430a      	orrs	r2, r1
 80007f8:	605a      	str	r2, [r3, #4]
	}
	//5. Configure the Alternate functionality, if required
	if(pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	795b      	ldrb	r3, [r3, #5]
 80007fe:	2b02      	cmp	r3, #2
 8000800:	d131      	bne.n	8000866 <GPIO_Init+0x31e>
	{
		// Configure the alternate function here
		uint8_t temp1, temp2;

		temp1 = pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber / 8;
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	791b      	ldrb	r3, [r3, #4]
 8000806:	08db      	lsrs	r3, r3, #3
 8000808:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber % 8;
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	791b      	ldrb	r3, [r3, #4]
 800080e:	f003 0307 	and.w	r3, r3, #7
 8000812:	73fb      	strb	r3, [r7, #15]

		pGPIOHandle -> pGPIOx -> AFR[temp1] &= ~(0xF << (4 * temp2));
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	7c3a      	ldrb	r2, [r7, #16]
 800081a:	3208      	adds	r2, #8
 800081c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000820:	7bfb      	ldrb	r3, [r7, #15]
 8000822:	009b      	lsls	r3, r3, #2
 8000824:	220f      	movs	r2, #15
 8000826:	fa02 f303 	lsl.w	r3, r2, r3
 800082a:	43db      	mvns	r3, r3
 800082c:	4618      	mov	r0, r3
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	7c3a      	ldrb	r2, [r7, #16]
 8000834:	4001      	ands	r1, r0
 8000836:	3208      	adds	r2, #8
 8000838:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle -> pGPIOx -> AFR[temp1] |= pGPIOHandle -> GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp2);
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	7c3a      	ldrb	r2, [r7, #16]
 8000842:	3208      	adds	r2, #8
 8000844:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	7a5b      	ldrb	r3, [r3, #9]
 800084c:	461a      	mov	r2, r3
 800084e:	7bfb      	ldrb	r3, [r7, #15]
 8000850:	009b      	lsls	r3, r3, #2
 8000852:	fa02 f303 	lsl.w	r3, r2, r3
 8000856:	4618      	mov	r0, r3
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	7c3a      	ldrb	r2, [r7, #16]
 800085e:	4301      	orrs	r1, r0
 8000860:	3208      	adds	r2, #8
 8000862:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	}
}
 8000866:	bf00      	nop
 8000868:	3718      	adds	r7, #24
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	40023800 	.word	0x40023800
 8000874:	40013800 	.word	0x40013800
 8000878:	40013c00 	.word	0x40013c00

0800087c <GPIO_ReadFromInputPin>:
 * @return								- Integer Either 0 or 1 [8 bit is enough]
 *
 * @note								- None
 *****************************************************************************************************************/
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 800087c:	b480      	push	{r7}
 800087e:	b085      	sub	sp, #20
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
 8000884:	460b      	mov	r3, r1
 8000886:	70fb      	strb	r3, [r7, #3]
	uint8_t value;

	value = (uint8_t)((pGPIOx -> IDR >> PinNumber) & 0x00000001);
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	691a      	ldr	r2, [r3, #16]
 800088c:	78fb      	ldrb	r3, [r7, #3]
 800088e:	fa22 f303 	lsr.w	r3, r2, r3
 8000892:	b2db      	uxtb	r3, r3
 8000894:	f003 0301 	and.w	r3, r3, #1
 8000898:	73fb      	strb	r3, [r7, #15]

	return value;
 800089a:	7bfb      	ldrb	r3, [r7, #15]
}
 800089c:	4618      	mov	r0, r3
 800089e:	3714      	adds	r7, #20
 80008a0:	46bd      	mov	sp, r7
 80008a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a6:	4770      	bx	lr

080008a8 <RCC_GetPLLOutputClk>:
 * @return								- PLL clock value
 *
 * @note								- None
 *****************************************************************************************************************/
uint32_t RCC_GetPLLOutputClk(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
	// will implement in future

	return 0;
 80008ac:	2300      	movs	r3, #0
}
 80008ae:	4618      	mov	r0, r3
 80008b0:	46bd      	mov	sp, r7
 80008b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b6:	4770      	bx	lr

080008b8 <RCC_GetPCLK1Value>:
 * @return								- APB1 clock value
 *
 * @note								- None
 *****************************************************************************************************************/
uint32_t RCC_GetPCLK1Value(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b084      	sub	sp, #16
 80008bc:	af00      	add	r7, sp, #0
	uint32_t pclk1, SystemClk;

	uint8_t clksrc, temp, ahbp,apb1p;

	clksrc = ((RCC->CFRG >> 2) & 0x3);
 80008be:	4b26      	ldr	r3, [pc, #152]	@ (8000958 <RCC_GetPCLK1Value+0xa0>)
 80008c0:	689b      	ldr	r3, [r3, #8]
 80008c2:	089b      	lsrs	r3, r3, #2
 80008c4:	b2db      	uxtb	r3, r3
 80008c6:	f003 0303 	and.w	r3, r3, #3
 80008ca:	727b      	strb	r3, [r7, #9]

	if (clksrc == 0)
 80008cc:	7a7b      	ldrb	r3, [r7, #9]
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d102      	bne.n	80008d8 <RCC_GetPCLK1Value+0x20>
	{	// If clksrc = 0 => which is HSI
		SystemClk = 16000000;
 80008d2:	4b22      	ldr	r3, [pc, #136]	@ (800095c <RCC_GetPCLK1Value+0xa4>)
 80008d4:	60fb      	str	r3, [r7, #12]
 80008d6:	e00b      	b.n	80008f0 <RCC_GetPCLK1Value+0x38>
	}else if (clksrc == 1)
 80008d8:	7a7b      	ldrb	r3, [r7, #9]
 80008da:	2b01      	cmp	r3, #1
 80008dc:	d102      	bne.n	80008e4 <RCC_GetPCLK1Value+0x2c>
	{	// If clksrc = 1 => which is HSE
		SystemClk = 25000000;
 80008de:	4b20      	ldr	r3, [pc, #128]	@ (8000960 <RCC_GetPCLK1Value+0xa8>)
 80008e0:	60fb      	str	r3, [r7, #12]
 80008e2:	e005      	b.n	80008f0 <RCC_GetPCLK1Value+0x38>
	}else if (clksrc == 2)
 80008e4:	7a7b      	ldrb	r3, [r7, #9]
 80008e6:	2b02      	cmp	r3, #2
 80008e8:	d102      	bne.n	80008f0 <RCC_GetPCLK1Value+0x38>
	{
		SystemClk = RCC_GetPLLOutputClk();
 80008ea:	f7ff ffdd 	bl	80008a8 <RCC_GetPLLOutputClk>
 80008ee:	60f8      	str	r0, [r7, #12]
	}

	// For AHB Prescaler find
	temp = ((RCC->CFRG >> 4) & 0xF);
 80008f0:	4b19      	ldr	r3, [pc, #100]	@ (8000958 <RCC_GetPCLK1Value+0xa0>)
 80008f2:	689b      	ldr	r3, [r3, #8]
 80008f4:	091b      	lsrs	r3, r3, #4
 80008f6:	b2db      	uxtb	r3, r3
 80008f8:	f003 030f 	and.w	r3, r3, #15
 80008fc:	723b      	strb	r3, [r7, #8]

	if (temp < 8)
 80008fe:	7a3b      	ldrb	r3, [r7, #8]
 8000900:	2b07      	cmp	r3, #7
 8000902:	d802      	bhi.n	800090a <RCC_GetPCLK1Value+0x52>
	{
		ahbp = 1;
 8000904:	2301      	movs	r3, #1
 8000906:	72fb      	strb	r3, [r7, #11]
 8000908:	e005      	b.n	8000916 <RCC_GetPCLK1Value+0x5e>
	}else
	{
		ahbp = AHB_PreScaler[temp - 8];
 800090a:	7a3b      	ldrb	r3, [r7, #8]
 800090c:	3b08      	subs	r3, #8
 800090e:	4a15      	ldr	r2, [pc, #84]	@ (8000964 <RCC_GetPCLK1Value+0xac>)
 8000910:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000914:	72fb      	strb	r3, [r7, #11]
	}

	// For APB1 Prescaler find
	temp = ((RCC->CFRG >> 10) & 0x7);
 8000916:	4b10      	ldr	r3, [pc, #64]	@ (8000958 <RCC_GetPCLK1Value+0xa0>)
 8000918:	689b      	ldr	r3, [r3, #8]
 800091a:	0a9b      	lsrs	r3, r3, #10
 800091c:	b2db      	uxtb	r3, r3
 800091e:	f003 0307 	and.w	r3, r3, #7
 8000922:	723b      	strb	r3, [r7, #8]

	if (temp < 4)
 8000924:	7a3b      	ldrb	r3, [r7, #8]
 8000926:	2b03      	cmp	r3, #3
 8000928:	d802      	bhi.n	8000930 <RCC_GetPCLK1Value+0x78>
	{
		apb1p = 1;
 800092a:	2301      	movs	r3, #1
 800092c:	72bb      	strb	r3, [r7, #10]
 800092e:	e005      	b.n	800093c <RCC_GetPCLK1Value+0x84>
	}else
	{
		apb1p = APB1_PreScaler[temp - 4];
 8000930:	7a3b      	ldrb	r3, [r7, #8]
 8000932:	3b04      	subs	r3, #4
 8000934:	4a0c      	ldr	r2, [pc, #48]	@ (8000968 <RCC_GetPCLK1Value+0xb0>)
 8000936:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800093a:	72bb      	strb	r3, [r7, #10]
	}

	pclk1 = (SystemClk/ahbp) / apb1p;
 800093c:	7afb      	ldrb	r3, [r7, #11]
 800093e:	68fa      	ldr	r2, [r7, #12]
 8000940:	fbb2 f2f3 	udiv	r2, r2, r3
 8000944:	7abb      	ldrb	r3, [r7, #10]
 8000946:	fbb2 f3f3 	udiv	r3, r2, r3
 800094a:	607b      	str	r3, [r7, #4]

	return pclk1;
 800094c:	687b      	ldr	r3, [r7, #4]
}
 800094e:	4618      	mov	r0, r3
 8000950:	3710      	adds	r7, #16
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	40023800 	.word	0x40023800
 800095c:	00f42400 	.word	0x00f42400
 8000960:	017d7840 	.word	0x017d7840
 8000964:	20000000 	.word	0x20000000
 8000968:	20000010 	.word	0x20000010

0800096c <I2C_PeriClockControl>:
 * @return								- None
 *
 * @note								- None
 *****************************************************************************************************************/
void I2C_PeriClockControl(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
{
 800096c:	b480      	push	{r7}
 800096e:	b083      	sub	sp, #12
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
 8000974:	460b      	mov	r3, r1
 8000976:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000978:	78fb      	ldrb	r3, [r7, #3]
 800097a:	2b01      	cmp	r3, #1
 800097c:	d120      	bne.n	80009c0 <I2C_PeriClockControl+0x54>
	{
		if(pI2Cx == I2C1)
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	4a22      	ldr	r2, [pc, #136]	@ (8000a0c <I2C_PeriClockControl+0xa0>)
 8000982:	4293      	cmp	r3, r2
 8000984:	d106      	bne.n	8000994 <I2C_PeriClockControl+0x28>
		{
			I2C1_PCLK_EN();
 8000986:	4b22      	ldr	r3, [pc, #136]	@ (8000a10 <I2C_PeriClockControl+0xa4>)
 8000988:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800098a:	4a21      	ldr	r2, [pc, #132]	@ (8000a10 <I2C_PeriClockControl+0xa4>)
 800098c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000990:	6413      	str	r3, [r2, #64]	@ 0x40
		}else if(pI2Cx == I2C3)
		{
			I2C3_PCLK_DI();
		}
	}
}
 8000992:	e035      	b.n	8000a00 <I2C_PeriClockControl+0x94>
		}else if(pI2Cx == I2C2)
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	4a1f      	ldr	r2, [pc, #124]	@ (8000a14 <I2C_PeriClockControl+0xa8>)
 8000998:	4293      	cmp	r3, r2
 800099a:	d106      	bne.n	80009aa <I2C_PeriClockControl+0x3e>
			I2C2_PCLK_EN();
 800099c:	4b1c      	ldr	r3, [pc, #112]	@ (8000a10 <I2C_PeriClockControl+0xa4>)
 800099e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009a0:	4a1b      	ldr	r2, [pc, #108]	@ (8000a10 <I2C_PeriClockControl+0xa4>)
 80009a2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80009a6:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80009a8:	e02a      	b.n	8000a00 <I2C_PeriClockControl+0x94>
		}else if(pI2Cx == I2C3)
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	4a1a      	ldr	r2, [pc, #104]	@ (8000a18 <I2C_PeriClockControl+0xac>)
 80009ae:	4293      	cmp	r3, r2
 80009b0:	d126      	bne.n	8000a00 <I2C_PeriClockControl+0x94>
			I2C3_PCLK_EN();
 80009b2:	4b17      	ldr	r3, [pc, #92]	@ (8000a10 <I2C_PeriClockControl+0xa4>)
 80009b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009b6:	4a16      	ldr	r2, [pc, #88]	@ (8000a10 <I2C_PeriClockControl+0xa4>)
 80009b8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80009bc:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80009be:	e01f      	b.n	8000a00 <I2C_PeriClockControl+0x94>
		if(pI2Cx == I2C1)
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	4a12      	ldr	r2, [pc, #72]	@ (8000a0c <I2C_PeriClockControl+0xa0>)
 80009c4:	4293      	cmp	r3, r2
 80009c6:	d106      	bne.n	80009d6 <I2C_PeriClockControl+0x6a>
			I2C1_PCLK_DI();
 80009c8:	4b11      	ldr	r3, [pc, #68]	@ (8000a10 <I2C_PeriClockControl+0xa4>)
 80009ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009cc:	4a10      	ldr	r2, [pc, #64]	@ (8000a10 <I2C_PeriClockControl+0xa4>)
 80009ce:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80009d2:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80009d4:	e014      	b.n	8000a00 <I2C_PeriClockControl+0x94>
		}else if(pI2Cx == I2C2)
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	4a0e      	ldr	r2, [pc, #56]	@ (8000a14 <I2C_PeriClockControl+0xa8>)
 80009da:	4293      	cmp	r3, r2
 80009dc:	d106      	bne.n	80009ec <I2C_PeriClockControl+0x80>
			I2C2_PCLK_DI();
 80009de:	4b0c      	ldr	r3, [pc, #48]	@ (8000a10 <I2C_PeriClockControl+0xa4>)
 80009e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009e2:	4a0b      	ldr	r2, [pc, #44]	@ (8000a10 <I2C_PeriClockControl+0xa4>)
 80009e4:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 80009e8:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80009ea:	e009      	b.n	8000a00 <I2C_PeriClockControl+0x94>
		}else if(pI2Cx == I2C3)
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	4a0a      	ldr	r2, [pc, #40]	@ (8000a18 <I2C_PeriClockControl+0xac>)
 80009f0:	4293      	cmp	r3, r2
 80009f2:	d105      	bne.n	8000a00 <I2C_PeriClockControl+0x94>
			I2C3_PCLK_DI();
 80009f4:	4b06      	ldr	r3, [pc, #24]	@ (8000a10 <I2C_PeriClockControl+0xa4>)
 80009f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009f8:	4a05      	ldr	r2, [pc, #20]	@ (8000a10 <I2C_PeriClockControl+0xa4>)
 80009fa:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80009fe:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000a00:	bf00      	nop
 8000a02:	370c      	adds	r7, #12
 8000a04:	46bd      	mov	sp, r7
 8000a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0a:	4770      	bx	lr
 8000a0c:	40005400 	.word	0x40005400
 8000a10:	40023800 	.word	0x40023800
 8000a14:	40005800 	.word	0x40005800
 8000a18:	40005c00 	.word	0x40005c00

08000a1c <I2C_Init>:
 * @return								- None
 *
 * @note								- None
 *****************************************************************************************************************/
void I2C_Init(I2C_Handle_t *pI2CHandle)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b084      	sub	sp, #16
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
	I2C_PeriClockControl(pI2CHandle->pI2Cx, ENABLE);
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	2101      	movs	r1, #1
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f7ff ff9e 	bl	800096c <I2C_PeriClockControl>

	// Configure the I2C_CR1
	uint32_t tempreg = 0;
 8000a30:	2300      	movs	r3, #0
 8000a32:	60fb      	str	r3, [r7, #12]

	// Acknowledge control bit
	tempreg |= (pI2CHandle->I2C_Config.I2C_AckCtrl << I2C_CR1_ACK);
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	7a5b      	ldrb	r3, [r3, #9]
 8000a38:	029b      	lsls	r3, r3, #10
 8000a3a:	68fa      	ldr	r2, [r7, #12]
 8000a3c:	4313      	orrs	r3, r2
 8000a3e:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->CR1 = tempreg;
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	68fa      	ldr	r2, [r7, #12]
 8000a46:	601a      	str	r2, [r3, #0]

	// Configure the FREQ field in CR2
	tempreg = 0;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	60fb      	str	r3, [r7, #12]
	tempreg |= (RCC_GetPCLK1Value() / 1000000U);
 8000a4c:	f7ff ff34 	bl	80008b8 <RCC_GetPCLK1Value>
 8000a50:	4603      	mov	r3, r0
 8000a52:	4a46      	ldr	r2, [pc, #280]	@ (8000b6c <I2C_Init+0x150>)
 8000a54:	fba2 2303 	umull	r2, r3, r2, r3
 8000a58:	0c9b      	lsrs	r3, r3, #18
 8000a5a:	68fa      	ldr	r2, [r7, #12]
 8000a5c:	4313      	orrs	r3, r2
 8000a5e:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->CR2 = (tempreg & 0x3F);
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	68fa      	ldr	r2, [r7, #12]
 8000a66:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8000a6a:	605a      	str	r2, [r3, #4]

	// Program the device own address
	tempreg |= pI2CHandle->I2C_Config.I2C_DeviceAddr << I2C_OAR1_ADD71;
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	7a1b      	ldrb	r3, [r3, #8]
 8000a70:	005b      	lsls	r3, r3, #1
 8000a72:	68fa      	ldr	r2, [r7, #12]
 8000a74:	4313      	orrs	r3, r2
 8000a76:	60fb      	str	r3, [r7, #12]
	tempreg |= (1 << 14); //Mandatory from RM
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a7e:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->OAR1 = tempreg;
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	68fa      	ldr	r2, [r7, #12]
 8000a86:	609a      	str	r2, [r3, #8]

	// CCR Calculations
	uint16_t ccr_value = 0;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	817b      	strh	r3, [r7, #10]
	tempreg = 0;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	60fb      	str	r3, [r7, #12]
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	685b      	ldr	r3, [r3, #4]
 8000a94:	4a36      	ldr	r2, [pc, #216]	@ (8000b70 <I2C_Init+0x154>)
 8000a96:	4293      	cmp	r3, r2
 8000a98:	d80f      	bhi.n	8000aba <I2C_Init+0x9e>
		 * if Thigh = Tlow in SCL, then
		 * Tscl = 2 * CCR * Tpclk1
		 * CCR = Tscl / 2 * Tpclk1
		 * CCR = Fpclk1 / 2 * Fscl
		 */
		ccr_value = RCC_GetPCLK1Value() / (2 * pI2CHandle->I2C_Config.I2C_SCLSpeed);
 8000a9a:	f7ff ff0d 	bl	80008b8 <RCC_GetPCLK1Value>
 8000a9e:	4602      	mov	r2, r0
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	685b      	ldr	r3, [r3, #4]
 8000aa4:	005b      	lsls	r3, r3, #1
 8000aa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000aaa:	817b      	strh	r3, [r7, #10]
		tempreg |= (ccr_value & 0xFFF);
 8000aac:	897b      	ldrh	r3, [r7, #10]
 8000aae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000ab2:	68fa      	ldr	r2, [r7, #12]
 8000ab4:	4313      	orrs	r3, r2
 8000ab6:	60fb      	str	r3, [r7, #12]
 8000ab8:	e02c      	b.n	8000b14 <I2C_Init+0xf8>
	}else
	{
		// Mode is Fast mode, calculation is below
		tempreg |= (1 << I2C_CCR_F_S);
 8000aba:	68fb      	ldr	r3, [r7, #12]
 8000abc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000ac0:	60fb      	str	r3, [r7, #12]
		tempreg |= (pI2CHandle->I2C_Config.I2C_FMDutyCycle << I2C_CCR_DUTY);
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	7a9b      	ldrb	r3, [r3, #10]
 8000ac6:	039b      	lsls	r3, r3, #14
 8000ac8:	68fa      	ldr	r2, [r7, #12]
 8000aca:	4313      	orrs	r3, r2
 8000acc:	60fb      	str	r3, [r7, #12]
		/*
		 * if Tlow = 2 * Thigh, then Duty = 0
		 * if Tlow = 1.7 * Thigh, then Duty = 1
		 */

		if(pI2CHandle->I2C_Config.I2C_FMDutyCycle == I2C_FM_DUTY_2)
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	7a9b      	ldrb	r3, [r3, #10]
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d10b      	bne.n	8000aee <I2C_Init+0xd2>
		{
			/*
			 * Duty = 0
			 * CCR = Fpclk1 / 3 * Fscl
			 */
			ccr_value = RCC_GetPCLK1Value() / (3 * pI2CHandle->I2C_Config.I2C_SCLSpeed);
 8000ad6:	f7ff feef 	bl	80008b8 <RCC_GetPCLK1Value>
 8000ada:	4601      	mov	r1, r0
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	685a      	ldr	r2, [r3, #4]
 8000ae0:	4613      	mov	r3, r2
 8000ae2:	005b      	lsls	r3, r3, #1
 8000ae4:	4413      	add	r3, r2
 8000ae6:	fbb1 f3f3 	udiv	r3, r1, r3
 8000aea:	817b      	strh	r3, [r7, #10]
 8000aec:	e00c      	b.n	8000b08 <I2C_Init+0xec>
		{
			/*
			 * Duty = 1
			 * CCR = Fpclk1 / 25 * Fscl
			 */
			ccr_value = RCC_GetPCLK1Value() / (25 * pI2CHandle->I2C_Config.I2C_SCLSpeed);
 8000aee:	f7ff fee3 	bl	80008b8 <RCC_GetPCLK1Value>
 8000af2:	4601      	mov	r1, r0
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	685a      	ldr	r2, [r3, #4]
 8000af8:	4613      	mov	r3, r2
 8000afa:	009b      	lsls	r3, r3, #2
 8000afc:	4413      	add	r3, r2
 8000afe:	009a      	lsls	r2, r3, #2
 8000b00:	4413      	add	r3, r2
 8000b02:	fbb1 f3f3 	udiv	r3, r1, r3
 8000b06:	817b      	strh	r3, [r7, #10]
		}

		tempreg |= (ccr_value & 0xFFF);
 8000b08:	897b      	ldrh	r3, [r7, #10]
 8000b0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000b0e:	68fa      	ldr	r2, [r7, #12]
 8000b10:	4313      	orrs	r3, r2
 8000b12:	60fb      	str	r3, [r7, #12]

	}
	pI2CHandle->pI2Cx->CCR = tempreg;
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	68fa      	ldr	r2, [r7, #12]
 8000b1a:	61da      	str	r2, [r3, #28]

	// Trise Configuration
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	685b      	ldr	r3, [r3, #4]
 8000b20:	4a13      	ldr	r2, [pc, #76]	@ (8000b70 <I2C_Init+0x154>)
 8000b22:	4293      	cmp	r3, r2
 8000b24:	d809      	bhi.n	8000b3a <I2C_Init+0x11e>
	{
		// Standard mode
		tempreg = (RCC_GetPCLK1Value() / 1000000U) + 1;
 8000b26:	f7ff fec7 	bl	80008b8 <RCC_GetPCLK1Value>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	4a0f      	ldr	r2, [pc, #60]	@ (8000b6c <I2C_Init+0x150>)
 8000b2e:	fba2 2303 	umull	r2, r3, r2, r3
 8000b32:	0c9b      	lsrs	r3, r3, #18
 8000b34:	3301      	adds	r3, #1
 8000b36:	60fb      	str	r3, [r7, #12]
		tempreg = ((RCC_GetPCLK1Value() * 300) / 1000000000U) + 1;
		pI2CHandle->pI2Cx->TRISE = (tempreg & 0x3F);

	}

}
 8000b38:	e013      	b.n	8000b62 <I2C_Init+0x146>
		tempreg = ((RCC_GetPCLK1Value() * 300) / 1000000000U) + 1;
 8000b3a:	f7ff febd 	bl	80008b8 <RCC_GetPCLK1Value>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8000b44:	fb02 f303 	mul.w	r3, r2, r3
 8000b48:	0a5b      	lsrs	r3, r3, #9
 8000b4a:	4a0a      	ldr	r2, [pc, #40]	@ (8000b74 <I2C_Init+0x158>)
 8000b4c:	fba2 2303 	umull	r2, r3, r2, r3
 8000b50:	09db      	lsrs	r3, r3, #7
 8000b52:	3301      	adds	r3, #1
 8000b54:	60fb      	str	r3, [r7, #12]
		pI2CHandle->pI2Cx->TRISE = (tempreg & 0x3F);
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	68fa      	ldr	r2, [r7, #12]
 8000b5c:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8000b60:	621a      	str	r2, [r3, #32]
}
 8000b62:	bf00      	nop
 8000b64:	3710      	adds	r7, #16
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	431bde83 	.word	0x431bde83
 8000b70:	000186a0 	.word	0x000186a0
 8000b74:	00044b83 	.word	0x00044b83

08000b78 <I2C_MasterSendData>:
 * @return								- None
 *
 * @note								- None
 *****************************************************************************************************************/
void I2C_MasterSendData(I2C_Handle_t *pI2CHandle, uint8_t *pTxBuffer, uint8_t Len, uint8_t SlaveAddr)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b084      	sub	sp, #16
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	60f8      	str	r0, [r7, #12]
 8000b80:	60b9      	str	r1, [r7, #8]
 8000b82:	4611      	mov	r1, r2
 8000b84:	461a      	mov	r2, r3
 8000b86:	460b      	mov	r3, r1
 8000b88:	71fb      	strb	r3, [r7, #7]
 8000b8a:	4613      	mov	r3, r2
 8000b8c:	71bb      	strb	r3, [r7, #6]
	// 1. Generate the start condition
	I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	4618      	mov	r0, r3
 8000b94:	f000 f886 	bl	8000ca4 <I2C_GenerateStartCondition>

	// 2. Confirm that start generation is completed by checking the SB flag in SR1
	// Note*: Until the SB is cleared SCL will be streched (pulled to LOW)
	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_SB));
 8000b98:	bf00      	nop
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	2101      	movs	r1, #1
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f000 f86b 	bl	8000c7c <I2C_GetFlagStatus>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d0f6      	beq.n	8000b9a <I2C_MasterSendData+0x22>

	// 3. Send the address to the slave with r/nw bit set to w(0) (total 8 bits)
	I2C_ExecuteAddressPhase(pI2CHandle->pI2Cx, SlaveAddr, I2C_WRITE);
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	79b9      	ldrb	r1, [r7, #6]
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f000 f885 	bl	8000cc4 <I2C_ExecuteAddressPhase>

	// 4. Confirm the address  phase is completed by checking the ADDR flag in the SR1
	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_ADDR));
 8000bba:	bf00      	nop
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	2102      	movs	r1, #2
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f000 f85a 	bl	8000c7c <I2C_GetFlagStatus>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d0f6      	beq.n	8000bbc <I2C_MasterSendData+0x44>

	// 5. Clear the ADDR flag according to its software sequence
	// Note*: Until ADDR is cleared SCL will be streched (pulled to LOW)
	I2C_ClearADDRFlag(pI2CHandle->pI2Cx);
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f000 f8a1 	bl	8000d1a <I2C_ClearADDRFlag>

	// 6. Send the data until Len becomes 0
	while(Len > 0)
 8000bd8:	e014      	b.n	8000c04 <I2C_MasterSendData+0x8c>
	{
		while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_TXE));  // Wait until the TXE is set
 8000bda:	bf00      	nop
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	2180      	movs	r1, #128	@ 0x80
 8000be2:	4618      	mov	r0, r3
 8000be4:	f000 f84a 	bl	8000c7c <I2C_GetFlagStatus>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d0f6      	beq.n	8000bdc <I2C_MasterSendData+0x64>
		pI2CHandle->pI2Cx->DR = *pTxBuffer;
 8000bee:	68bb      	ldr	r3, [r7, #8]
 8000bf0:	781a      	ldrb	r2, [r3, #0]
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	611a      	str	r2, [r3, #16]
		pTxBuffer++;
 8000bf8:	68bb      	ldr	r3, [r7, #8]
 8000bfa:	3301      	adds	r3, #1
 8000bfc:	60bb      	str	r3, [r7, #8]
		Len--;
 8000bfe:	79fb      	ldrb	r3, [r7, #7]
 8000c00:	3b01      	subs	r3, #1
 8000c02:	71fb      	strb	r3, [r7, #7]
	while(Len > 0)
 8000c04:	79fb      	ldrb	r3, [r7, #7]
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d1e7      	bne.n	8000bda <I2C_MasterSendData+0x62>

	// 7. When Len becomes zero wait for TXE = 1 and BTF = 1 before generating a stop condition
	// Note*: TXE = 1, BTF = 1, means that both SR and DR are empty and next transmission should begin
	// When BTF = 1 SCL will be stretched (pulled to LOW)

	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_TXE));
 8000c0a:	bf00      	nop
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	2180      	movs	r1, #128	@ 0x80
 8000c12:	4618      	mov	r0, r3
 8000c14:	f000 f832 	bl	8000c7c <I2C_GetFlagStatus>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d0f6      	beq.n	8000c0c <I2C_MasterSendData+0x94>

	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_BTF));
 8000c1e:	bf00      	nop
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	2104      	movs	r1, #4
 8000c26:	4618      	mov	r0, r3
 8000c28:	f000 f828 	bl	8000c7c <I2C_GetFlagStatus>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d0f6      	beq.n	8000c20 <I2C_MasterSendData+0xa8>

	// 8. Generate the stop condition and master need not wait for the completion of stop condition
	// Note*: generating STOP, automatically clears BTF
	I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	4618      	mov	r0, r3
 8000c38:	f000 f87f 	bl	8000d3a <I2C_GenerateStopCondition>


}
 8000c3c:	bf00      	nop
 8000c3e:	3710      	adds	r7, #16
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}

08000c44 <I2C_PeripheralControl>:
 * @return								- None
 *
 * @note								- None
 *****************************************************************************************************************/
void I2C_PeripheralControl(I2C_RegDef_t *pI2Cx, uint8_t EnOrDi)
{
 8000c44:	b480      	push	{r7}
 8000c46:	b083      	sub	sp, #12
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
 8000c4c:	460b      	mov	r3, r1
 8000c4e:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 8000c50:	78fb      	ldrb	r3, [r7, #3]
 8000c52:	2b01      	cmp	r3, #1
 8000c54:	d106      	bne.n	8000c64 <I2C_PeripheralControl+0x20>
	{
		pI2Cx->CR1 |= (1 << I2C_CR1_PE);
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	f043 0201 	orr.w	r2, r3, #1
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	601a      	str	r2, [r3, #0]
	else
	{
		pI2Cx->CR1 &= ~(1 << I2C_CR1_PE);
	}

}
 8000c62:	e005      	b.n	8000c70 <I2C_PeripheralControl+0x2c>
		pI2Cx->CR1 &= ~(1 << I2C_CR1_PE);
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	f023 0201 	bic.w	r2, r3, #1
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	601a      	str	r2, [r3, #0]
}
 8000c70:	bf00      	nop
 8000c72:	370c      	adds	r7, #12
 8000c74:	46bd      	mov	sp, r7
 8000c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7a:	4770      	bx	lr

08000c7c <I2C_GetFlagStatus>:
 * @return								- status of the flag either 0 or 1
 *
 * @note								- None
 *****************************************************************************************************************/
uint8_t I2C_GetFlagStatus(I2C_RegDef_t *pI2Cx, uint32_t FlagName)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b083      	sub	sp, #12
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
 8000c84:	6039      	str	r1, [r7, #0]
	if(pI2Cx->SR1 & FlagName)
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	695a      	ldr	r2, [r3, #20]
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	4013      	ands	r3, r2
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d001      	beq.n	8000c96 <I2C_GetFlagStatus+0x1a>
	{
		return FLAG_SET;
 8000c92:	2301      	movs	r3, #1
 8000c94:	e000      	b.n	8000c98 <I2C_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;
 8000c96:	2300      	movs	r3, #0
}
 8000c98:	4618      	mov	r0, r3
 8000c9a:	370c      	adds	r7, #12
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca2:	4770      	bx	lr

08000ca4 <I2C_GenerateStartCondition>:
 * @return								- None
 *
 * @note								- None
 *****************************************************************************************************************/
static void I2C_GenerateStartCondition(I2C_RegDef_t *pI2Cx)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b083      	sub	sp, #12
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= (1 << I2C_CR1_START);
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	601a      	str	r2, [r3, #0]
}
 8000cb8:	bf00      	nop
 8000cba:	370c      	adds	r7, #12
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc2:	4770      	bx	lr

08000cc4 <I2C_ExecuteAddressPhase>:
 * @return								- None
 *
 * @note								- None
 *****************************************************************************************************************/
static void I2C_ExecuteAddressPhase(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr, uint8_t ReadOrWrite)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b083      	sub	sp, #12
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
 8000ccc:	460b      	mov	r3, r1
 8000cce:	70fb      	strb	r3, [r7, #3]
 8000cd0:	4613      	mov	r3, r2
 8000cd2:	70bb      	strb	r3, [r7, #2]
	if(ReadOrWrite == I2C_WRITE)
 8000cd4:	78bb      	ldrb	r3, [r7, #2]
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d10a      	bne.n	8000cf0 <I2C_ExecuteAddressPhase+0x2c>
	{
		SlaveAddr = SlaveAddr << 1;
 8000cda:	78fb      	ldrb	r3, [r7, #3]
 8000cdc:	005b      	lsls	r3, r3, #1
 8000cde:	70fb      	strb	r3, [r7, #3]
		SlaveAddr &= ~(1);			// SlaveAddr is slave address + r/w(0) bit=0
 8000ce0:	78fb      	ldrb	r3, [r7, #3]
 8000ce2:	f023 0301 	bic.w	r3, r3, #1
 8000ce6:	70fb      	strb	r3, [r7, #3]
		pI2Cx->DR = SlaveAddr;
 8000ce8:	78fa      	ldrb	r2, [r7, #3]
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	611a      	str	r2, [r3, #16]
		SlaveAddr |= ~(1);			// SlaveAddr is slave address + r/w(0) bit=0
		pI2Cx->DR = SlaveAddr;
	}


}
 8000cee:	e00e      	b.n	8000d0e <I2C_ExecuteAddressPhase+0x4a>
	else if(ReadOrWrite == I2C_READ)
 8000cf0:	78bb      	ldrb	r3, [r7, #2]
 8000cf2:	2b01      	cmp	r3, #1
 8000cf4:	d10b      	bne.n	8000d0e <I2C_ExecuteAddressPhase+0x4a>
		SlaveAddr = SlaveAddr << 1;
 8000cf6:	78fb      	ldrb	r3, [r7, #3]
 8000cf8:	005b      	lsls	r3, r3, #1
 8000cfa:	70fb      	strb	r3, [r7, #3]
		SlaveAddr |= ~(1);			// SlaveAddr is slave address + r/w(0) bit=0
 8000cfc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000d00:	f063 0301 	orn	r3, r3, #1
 8000d04:	b25b      	sxtb	r3, r3
 8000d06:	70fb      	strb	r3, [r7, #3]
		pI2Cx->DR = SlaveAddr;
 8000d08:	78fa      	ldrb	r2, [r7, #3]
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	611a      	str	r2, [r3, #16]
}
 8000d0e:	bf00      	nop
 8000d10:	370c      	adds	r7, #12
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr

08000d1a <I2C_ClearADDRFlag>:
 * @return								- None
 *
 * @note								- None
 *****************************************************************************************************************/
static void I2C_ClearADDRFlag(I2C_RegDef_t *pI2Cx)
{
 8000d1a:	b480      	push	{r7}
 8000d1c:	b085      	sub	sp, #20
 8000d1e:	af00      	add	r7, sp, #0
 8000d20:	6078      	str	r0, [r7, #4]
	uint32_t dummyRead = pI2Cx->SR1;
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	695b      	ldr	r3, [r3, #20]
 8000d26:	60fb      	str	r3, [r7, #12]
	dummyRead = pI2Cx->SR2;
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	699b      	ldr	r3, [r3, #24]
 8000d2c:	60fb      	str	r3, [r7, #12]
	(void)dummyRead;
}
 8000d2e:	bf00      	nop
 8000d30:	3714      	adds	r7, #20
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr

08000d3a <I2C_GenerateStopCondition>:
 * @return								- None
 *
 * @note								- None
 *****************************************************************************************************************/
static void I2C_GenerateStopCondition(I2C_RegDef_t *pI2Cx)
{
 8000d3a:	b480      	push	{r7}
 8000d3c:	b083      	sub	sp, #12
 8000d3e:	af00      	add	r7, sp, #0
 8000d40:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= (1 << I2C_CR1_STOP);
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	601a      	str	r2, [r3, #0]
}
 8000d4e:	bf00      	nop
 8000d50:	370c      	adds	r7, #12
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr
	...

08000d5c <__libc_init_array>:
 8000d5c:	b570      	push	{r4, r5, r6, lr}
 8000d5e:	4d0d      	ldr	r5, [pc, #52]	@ (8000d94 <__libc_init_array+0x38>)
 8000d60:	4c0d      	ldr	r4, [pc, #52]	@ (8000d98 <__libc_init_array+0x3c>)
 8000d62:	1b64      	subs	r4, r4, r5
 8000d64:	10a4      	asrs	r4, r4, #2
 8000d66:	2600      	movs	r6, #0
 8000d68:	42a6      	cmp	r6, r4
 8000d6a:	d109      	bne.n	8000d80 <__libc_init_array+0x24>
 8000d6c:	4d0b      	ldr	r5, [pc, #44]	@ (8000d9c <__libc_init_array+0x40>)
 8000d6e:	4c0c      	ldr	r4, [pc, #48]	@ (8000da0 <__libc_init_array+0x44>)
 8000d70:	f000 f818 	bl	8000da4 <_init>
 8000d74:	1b64      	subs	r4, r4, r5
 8000d76:	10a4      	asrs	r4, r4, #2
 8000d78:	2600      	movs	r6, #0
 8000d7a:	42a6      	cmp	r6, r4
 8000d7c:	d105      	bne.n	8000d8a <__libc_init_array+0x2e>
 8000d7e:	bd70      	pop	{r4, r5, r6, pc}
 8000d80:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d84:	4798      	blx	r3
 8000d86:	3601      	adds	r6, #1
 8000d88:	e7ee      	b.n	8000d68 <__libc_init_array+0xc>
 8000d8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d8e:	4798      	blx	r3
 8000d90:	3601      	adds	r6, #1
 8000d92:	e7f2      	b.n	8000d7a <__libc_init_array+0x1e>
 8000d94:	08000de4 	.word	0x08000de4
 8000d98:	08000de4 	.word	0x08000de4
 8000d9c:	08000de4 	.word	0x08000de4
 8000da0:	08000de8 	.word	0x08000de8

08000da4 <_init>:
 8000da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000da6:	bf00      	nop
 8000da8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000daa:	bc08      	pop	{r3}
 8000dac:	469e      	mov	lr, r3
 8000dae:	4770      	bx	lr

08000db0 <_fini>:
 8000db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000db2:	bf00      	nop
 8000db4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000db6:	bc08      	pop	{r3}
 8000db8:	469e      	mov	lr, r3
 8000dba:	4770      	bx	lr
