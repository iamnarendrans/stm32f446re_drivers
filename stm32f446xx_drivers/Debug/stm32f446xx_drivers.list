
stm32f446xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000023e0  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  080025b0  080025b0  000035b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002624  08002624  00004074  2**0
                  CONTENTS
  4 .ARM          00000008  08002624  08002624  00003624  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800262c  0800262c  00004074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800262c  0800262c  0000362c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002630  08002630  00003630  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08002634  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000198  20000074  080026a8  00004074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000020c  080026a8  0000420c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00004074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000020f6  00000000  00000000  000040a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000089f  00000000  00000000  0000619a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000002a8  00000000  00000000  00006a40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000001f1  00000000  00000000  00006ce8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003bd3  00000000  00000000  00006ed9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002ff5  00000000  00000000  0000aaac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000e1fa  00000000  00000000  0000daa1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0001bc9b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000011e4  00000000  00000000  0001bce0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  0001cec4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000074 	.word	0x20000074
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08002598 	.word	0x08002598

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000078 	.word	0x20000078
 800020c:	08002598 	.word	0x08002598

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <delay>:

// Global flag
uint8_t rxComplete	= RESET;

void delay(void)
{
 80002b0:	b480      	push	{r7}
 80002b2:	b083      	sub	sp, #12
 80002b4:	af00      	add	r7, sp, #0
	for(uint32_t i = 0; i < 500000/2; i++);
 80002b6:	2300      	movs	r3, #0
 80002b8:	607b      	str	r3, [r7, #4]
 80002ba:	e002      	b.n	80002c2 <delay+0x12>
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	3301      	adds	r3, #1
 80002c0:	607b      	str	r3, [r7, #4]
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	4a04      	ldr	r2, [pc, #16]	@ (80002d8 <delay+0x28>)
 80002c6:	4293      	cmp	r3, r2
 80002c8:	d9f8      	bls.n	80002bc <delay+0xc>
}
 80002ca:	bf00      	nop
 80002cc:	bf00      	nop
 80002ce:	370c      	adds	r7, #12
 80002d0:	46bd      	mov	sp, r7
 80002d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d6:	4770      	bx	lr
 80002d8:	0003d08f 	.word	0x0003d08f

080002dc <I2C1_GPIOInits>:
 */
I2C_Handle_t I2C1Handle;


void I2C1_GPIOInits(void)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	b084      	sub	sp, #16
 80002e0:	af00      	add	r7, sp, #0
	GPIO_Handle_t I2CPins;

	I2CPins.pGPIOx = GPIOB;
 80002e2:	4b0e      	ldr	r3, [pc, #56]	@ (800031c <I2C1_GPIOInits+0x40>)
 80002e4:	607b      	str	r3, [r7, #4]
	I2CPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 80002e6:	2302      	movs	r3, #2
 80002e8:	727b      	strb	r3, [r7, #9]
	I2CPins.GPIO_PinConfig.GPIO_PinOType = GPIO_OP_TYPE_OD;
 80002ea:	2301      	movs	r3, #1
 80002ec:	733b      	strb	r3, [r7, #12]
	I2CPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 80002ee:	2301      	movs	r3, #1
 80002f0:	72fb      	strb	r3, [r7, #11]
	I2CPins.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
 80002f2:	2304      	movs	r3, #4
 80002f4:	737b      	strb	r3, [r7, #13]
	I2CPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80002f6:	2302      	movs	r3, #2
 80002f8:	72bb      	strb	r3, [r7, #10]

	// SCL
	I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NUM_6;
 80002fa:	2306      	movs	r3, #6
 80002fc:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2CPins);
 80002fe:	1d3b      	adds	r3, r7, #4
 8000300:	4618      	mov	r0, r3
 8000302:	f000 facb 	bl	800089c <GPIO_Init>

	// SDA
	I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NUM_9;
 8000306:	2309      	movs	r3, #9
 8000308:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2CPins);
 800030a:	1d3b      	adds	r3, r7, #4
 800030c:	4618      	mov	r0, r3
 800030e:	f000 fac5 	bl	800089c <GPIO_Init>
}
 8000312:	bf00      	nop
 8000314:	3710      	adds	r7, #16
 8000316:	46bd      	mov	sp, r7
 8000318:	bd80      	pop	{r7, pc}
 800031a:	bf00      	nop
 800031c:	40020400 	.word	0x40020400

08000320 <I2C1_Inits>:

void I2C1_Inits(void)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	af00      	add	r7, sp, #0

	I2C1Handle.pI2Cx = I2C1;
 8000324:	4b09      	ldr	r3, [pc, #36]	@ (800034c <I2C1_Inits+0x2c>)
 8000326:	4a0a      	ldr	r2, [pc, #40]	@ (8000350 <I2C1_Inits+0x30>)
 8000328:	601a      	str	r2, [r3, #0]
	I2C1Handle.I2C_Config.I2C_AckCtrl = I2C_ACK_EN;
 800032a:	4b08      	ldr	r3, [pc, #32]	@ (800034c <I2C1_Inits+0x2c>)
 800032c:	2201      	movs	r2, #1
 800032e:	725a      	strb	r2, [r3, #9]
	I2C1Handle.I2C_Config.I2C_DeviceAddr = MY_ADDR;
 8000330:	4b06      	ldr	r3, [pc, #24]	@ (800034c <I2C1_Inits+0x2c>)
 8000332:	2261      	movs	r2, #97	@ 0x61
 8000334:	721a      	strb	r2, [r3, #8]
	I2C1Handle.I2C_Config.I2C_FMDutyCycle = I2C_FM_DUTY_2;
 8000336:	4b05      	ldr	r3, [pc, #20]	@ (800034c <I2C1_Inits+0x2c>)
 8000338:	2200      	movs	r2, #0
 800033a:	729a      	strb	r2, [r3, #10]
	I2C1Handle.I2C_Config.I2C_SCLSpeed = I2C_SCL_SPEED_SM;
 800033c:	4b03      	ldr	r3, [pc, #12]	@ (800034c <I2C1_Inits+0x2c>)
 800033e:	4a05      	ldr	r2, [pc, #20]	@ (8000354 <I2C1_Inits+0x34>)
 8000340:	605a      	str	r2, [r3, #4]

	I2C_Init(&I2C1Handle);
 8000342:	4802      	ldr	r0, [pc, #8]	@ (800034c <I2C1_Inits+0x2c>)
 8000344:	f000 fd14 	bl	8000d70 <I2C_Init>
}
 8000348:	bf00      	nop
 800034a:	bd80      	pop	{r7, pc}
 800034c:	20000094 	.word	0x20000094
 8000350:	40005400 	.word	0x40005400
 8000354:	000186a0 	.word	0x000186a0

08000358 <GPIO_ButtonInit>:

void GPIO_ButtonInit(void)
{
 8000358:	b580      	push	{r7, lr}
 800035a:	b084      	sub	sp, #16
 800035c:	af00      	add	r7, sp, #0
	GPIO_Handle_t GPIOBtn;

	GPIOBtn.pGPIOx = GPIOC;
 800035e:	4b09      	ldr	r3, [pc, #36]	@ (8000384 <GPIO_ButtonInit+0x2c>)
 8000360:	607b      	str	r3, [r7, #4]
	GPIOBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NUM_13;
 8000362:	230d      	movs	r3, #13
 8000364:	723b      	strb	r3, [r7, #8]
	GPIOBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 8000366:	2300      	movs	r3, #0
 8000368:	727b      	strb	r3, [r7, #9]
	GPIOBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 800036a:	2302      	movs	r3, #2
 800036c:	72bb      	strb	r3, [r7, #10]
	GPIOBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PD;
 800036e:	2302      	movs	r3, #2
 8000370:	72fb      	strb	r3, [r7, #11]

	GPIO_Init(&GPIOBtn);
 8000372:	1d3b      	adds	r3, r7, #4
 8000374:	4618      	mov	r0, r3
 8000376:	f000 fa91 	bl	800089c <GPIO_Init>

}
 800037a:	bf00      	nop
 800037c:	3710      	adds	r7, #16
 800037e:	46bd      	mov	sp, r7
 8000380:	bd80      	pop	{r7, pc}
 8000382:	bf00      	nop
 8000384:	40020800 	.word	0x40020800

08000388 <main>:

int main(void)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	b08c      	sub	sp, #48	@ 0x30
 800038c:	af02      	add	r7, sp, #8
	uint8_t length;

	// initialise_monitor_handles();
	// printf("Application is running\n");

	GPIO_ButtonInit();
 800038e:	f7ff ffe3 	bl	8000358 <GPIO_ButtonInit>
	// I2C Gpio Inits
	I2C1_GPIOInits();
 8000392:	f7ff ffa3 	bl	80002dc <I2C1_GPIOInits>

	// I2C1 Init
	I2C1_Inits();
 8000396:	f7ff ffc3 	bl	8000320 <I2C1_Inits>

	// I2C IRQ Configurations
	I2C_IRQInterruptConfig(IRQ_NO_I2C1_EV, ENABLE);
 800039a:	2101      	movs	r1, #1
 800039c:	201f      	movs	r0, #31
 800039e:	f000 fe27 	bl	8000ff0 <I2C_IRQInterruptConfig>
	I2C_IRQInterruptConfig(IRQ_NO_I2C1_ER, ENABLE);
 80003a2:	2101      	movs	r1, #1
 80003a4:	2020      	movs	r0, #32
 80003a6:	f000 fe23 	bl	8000ff0 <I2C_IRQInterruptConfig>

	// Configure IRQ priority number if more number of interrupts

	// Enable I2C peripheral
	I2C_PeripheralControl(I2C1, ENABLE);
 80003aa:	2101      	movs	r1, #1
 80003ac:	482f      	ldr	r0, [pc, #188]	@ (800046c <main+0xe4>)
 80003ae:	f000 ffef 	bl	8001390 <I2C_PeripheralControl>

	// Ack bit is made 1 after PE = 1
	I2C_ManageAcking(I2C1, I2C_ACK_EN);
 80003b2:	2101      	movs	r1, #1
 80003b4:	482d      	ldr	r0, [pc, #180]	@ (800046c <main+0xe4>)
 80003b6:	f001 f8f3 	bl	80015a0 <I2C_ManageAcking>

	while(1)
	{
		//wait till button is pressed
		while( ! GPIO_ReadFromInputPin(GPIOC,GPIO_PIN_NUM_13));
 80003ba:	bf00      	nop
 80003bc:	210d      	movs	r1, #13
 80003be:	482c      	ldr	r0, [pc, #176]	@ (8000470 <main+0xe8>)
 80003c0:	f000 fc06 	bl	8000bd0 <GPIO_ReadFromInputPin>
 80003c4:	4603      	mov	r3, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d0f8      	beq.n	80003bc <main+0x34>

		//to avoid button de-bouncing related issues 200ms of delay
		delay();
 80003ca:	f7ff ff71 	bl	80002b0 <delay>

		// receive the data from arduino slave
		commandcode = 0x51;
 80003ce:	2351      	movs	r3, #81	@ 0x51
 80003d0:	71fb      	strb	r3, [r7, #7]

		while(I2C_MasterSendDataIT(&I2C1Handle, &commandcode, 1, SLAVE_ADDR, I2C_ENABLE_SR) != I2C_READY);
 80003d2:	bf00      	nop
 80003d4:	1df9      	adds	r1, r7, #7
 80003d6:	2301      	movs	r3, #1
 80003d8:	9300      	str	r3, [sp, #0]
 80003da:	2368      	movs	r3, #104	@ 0x68
 80003dc:	2201      	movs	r2, #1
 80003de:	4825      	ldr	r0, [pc, #148]	@ (8000474 <main+0xec>)
 80003e0:	f000 fd74 	bl	8000ecc <I2C_MasterSendDataIT>
 80003e4:	4603      	mov	r3, r0
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	d1f4      	bne.n	80003d4 <main+0x4c>

		while(I2C_MasterReceiveDataIT(&I2C1Handle, &length, 1, SLAVE_ADDR, I2C_ENABLE_SR) != I2C_READY);
 80003ea:	bf00      	nop
 80003ec:	1db9      	adds	r1, r7, #6
 80003ee:	2301      	movs	r3, #1
 80003f0:	9300      	str	r3, [sp, #0]
 80003f2:	2368      	movs	r3, #104	@ 0x68
 80003f4:	2201      	movs	r2, #1
 80003f6:	481f      	ldr	r0, [pc, #124]	@ (8000474 <main+0xec>)
 80003f8:	f000 fdaf 	bl	8000f5a <I2C_MasterReceiveDataIT>
 80003fc:	4603      	mov	r3, r0
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d1f4      	bne.n	80003ec <main+0x64>

		commandcode = 0x52;
 8000402:	2352      	movs	r3, #82	@ 0x52
 8000404:	71fb      	strb	r3, [r7, #7]

		while(I2C_MasterSendDataIT(&I2C1Handle, &commandcode, 1, SLAVE_ADDR, I2C_ENABLE_SR) != I2C_READY);
 8000406:	bf00      	nop
 8000408:	1df9      	adds	r1, r7, #7
 800040a:	2301      	movs	r3, #1
 800040c:	9300      	str	r3, [sp, #0]
 800040e:	2368      	movs	r3, #104	@ 0x68
 8000410:	2201      	movs	r2, #1
 8000412:	4818      	ldr	r0, [pc, #96]	@ (8000474 <main+0xec>)
 8000414:	f000 fd5a 	bl	8000ecc <I2C_MasterSendDataIT>
 8000418:	4603      	mov	r3, r0
 800041a:	2b00      	cmp	r3, #0
 800041c:	d1f4      	bne.n	8000408 <main+0x80>

		while(I2C_MasterReceiveDataIT(&I2C1Handle, recv_buffer, length, SLAVE_ADDR, I2C_ENABLE_SR) != I2C_READY);
 800041e:	bf00      	nop
 8000420:	79ba      	ldrb	r2, [r7, #6]
 8000422:	f107 0108 	add.w	r1, r7, #8
 8000426:	2301      	movs	r3, #1
 8000428:	9300      	str	r3, [sp, #0]
 800042a:	2368      	movs	r3, #104	@ 0x68
 800042c:	4811      	ldr	r0, [pc, #68]	@ (8000474 <main+0xec>)
 800042e:	f000 fd94 	bl	8000f5a <I2C_MasterReceiveDataIT>
 8000432:	4603      	mov	r3, r0
 8000434:	2b00      	cmp	r3, #0
 8000436:	d1f3      	bne.n	8000420 <main+0x98>

		rxComplete = RESET;
 8000438:	4b0f      	ldr	r3, [pc, #60]	@ (8000478 <main+0xf0>)
 800043a:	2200      	movs	r2, #0
 800043c:	701a      	strb	r2, [r3, #0]

		// Wait until the rx completesf
		while(rxComplete != SET);
 800043e:	bf00      	nop
 8000440:	4b0d      	ldr	r3, [pc, #52]	@ (8000478 <main+0xf0>)
 8000442:	781b      	ldrb	r3, [r3, #0]
 8000444:	2b01      	cmp	r3, #1
 8000446:	d1fb      	bne.n	8000440 <main+0xb8>

		recv_buffer[length+1] = '\0';
 8000448:	79bb      	ldrb	r3, [r7, #6]
 800044a:	3301      	adds	r3, #1
 800044c:	3328      	adds	r3, #40	@ 0x28
 800044e:	443b      	add	r3, r7
 8000450:	2200      	movs	r2, #0
 8000452:	f803 2c20 	strb.w	r2, [r3, #-32]

		 printf("DATA: %s", recv_buffer);
 8000456:	f107 0308 	add.w	r3, r7, #8
 800045a:	4619      	mov	r1, r3
 800045c:	4807      	ldr	r0, [pc, #28]	@ (800047c <main+0xf4>)
 800045e:	f001 f9cf 	bl	8001800 <iprintf>

		 rxComplete = RESET;
 8000462:	4b05      	ldr	r3, [pc, #20]	@ (8000478 <main+0xf0>)
 8000464:	2200      	movs	r2, #0
 8000466:	701a      	strb	r2, [r3, #0]
		while( ! GPIO_ReadFromInputPin(GPIOC,GPIO_PIN_NUM_13));
 8000468:	e7a7      	b.n	80003ba <main+0x32>
 800046a:	bf00      	nop
 800046c:	40005400 	.word	0x40005400
 8000470:	40020800 	.word	0x40020800
 8000474:	20000094 	.word	0x20000094
 8000478:	20000090 	.word	0x20000090
 800047c:	080025b0 	.word	0x080025b0

08000480 <I2C1_EV_IRQHandler>:

	return 0;
}

void I2C1_EV_IRQHandler(void)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	af00      	add	r7, sp, #0
	I2C_EV_IRQHandling(&I2C1Handle);
 8000484:	4802      	ldr	r0, [pc, #8]	@ (8000490 <I2C1_EV_IRQHandler+0x10>)
 8000486:	f000 fe39 	bl	80010fc <I2C_EV_IRQHandling>
}
 800048a:	bf00      	nop
 800048c:	bd80      	pop	{r7, pc}
 800048e:	bf00      	nop
 8000490:	20000094 	.word	0x20000094

08000494 <I2C1_ER_IRQHandler>:
void I2C1_ER_IRQHandler(void)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	af00      	add	r7, sp, #0
	I2C_ERR_IRQHandling(&I2C1Handle);
 8000498:	4802      	ldr	r0, [pc, #8]	@ (80004a4 <I2C1_ER_IRQHandler+0x10>)
 800049a:	f000 fef3 	bl	8001284 <I2C_ERR_IRQHandling>
}
 800049e:	bf00      	nop
 80004a0:	bd80      	pop	{r7, pc}
 80004a2:	bf00      	nop
 80004a4:	20000094 	.word	0x20000094

080004a8 <I2C_ApplicationEventCallback>:


void I2C_ApplicationEventCallback(I2C_Handle_t *pI2CHandle, uint8_t AppEvent)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b082      	sub	sp, #8
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	6078      	str	r0, [r7, #4]
 80004b0:	460b      	mov	r3, r1
 80004b2:	70fb      	strb	r3, [r7, #3]
	if(AppEvent == I2C_EV_TX_CMPLT)
 80004b4:	78fb      	ldrb	r3, [r7, #3]
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d103      	bne.n	80004c2 <I2C_ApplicationEventCallback+0x1a>
	{
		printf("Tx is completed\n");
 80004ba:	4810      	ldr	r0, [pc, #64]	@ (80004fc <I2C_ApplicationEventCallback+0x54>)
 80004bc:	f001 fa08 	bl	80018d0 <puts>
		I2C_GenerateStopCondition(I2C1);

		// Hang in infinite loop
		while(1);
	}
}
 80004c0:	e017      	b.n	80004f2 <I2C_ApplicationEventCallback+0x4a>
	else if(AppEvent == I2C_EV_RX_CMPLT)
 80004c2:	78fb      	ldrb	r3, [r7, #3]
 80004c4:	2b01      	cmp	r3, #1
 80004c6:	d106      	bne.n	80004d6 <I2C_ApplicationEventCallback+0x2e>
		printf("Rx is completed\n");
 80004c8:	480d      	ldr	r0, [pc, #52]	@ (8000500 <I2C_ApplicationEventCallback+0x58>)
 80004ca:	f001 fa01 	bl	80018d0 <puts>
		rxComplete = SET;
 80004ce:	4b0d      	ldr	r3, [pc, #52]	@ (8000504 <I2C_ApplicationEventCallback+0x5c>)
 80004d0:	2201      	movs	r2, #1
 80004d2:	701a      	strb	r2, [r3, #0]
}
 80004d4:	e00d      	b.n	80004f2 <I2C_ApplicationEventCallback+0x4a>
	else if(AppEvent == I2C_ERROR_AF)
 80004d6:	78fb      	ldrb	r3, [r7, #3]
 80004d8:	2b05      	cmp	r3, #5
 80004da:	d10a      	bne.n	80004f2 <I2C_ApplicationEventCallback+0x4a>
		printf("Error: ACK Failure");
 80004dc:	480a      	ldr	r0, [pc, #40]	@ (8000508 <I2C_ApplicationEventCallback+0x60>)
 80004de:	f001 f98f 	bl	8001800 <iprintf>
		I2C_CloseSendData(pI2CHandle);
 80004e2:	6878      	ldr	r0, [r7, #4]
 80004e4:	f001 f878 	bl	80015d8 <I2C_CloseSendData>
		I2C_GenerateStopCondition(I2C1);
 80004e8:	4808      	ldr	r0, [pc, #32]	@ (800050c <I2C_ApplicationEventCallback+0x64>)
 80004ea:	f001 f849 	bl	8001580 <I2C_GenerateStopCondition>
		while(1);
 80004ee:	bf00      	nop
 80004f0:	e7fd      	b.n	80004ee <I2C_ApplicationEventCallback+0x46>
}
 80004f2:	bf00      	nop
 80004f4:	3708      	adds	r7, #8
 80004f6:	46bd      	mov	sp, r7
 80004f8:	bd80      	pop	{r7, pc}
 80004fa:	bf00      	nop
 80004fc:	080025bc 	.word	0x080025bc
 8000500:	080025cc 	.word	0x080025cc
 8000504:	20000090 	.word	0x20000090
 8000508:	080025dc 	.word	0x080025dc
 800050c:	40005400 	.word	0x40005400

08000510 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000510:	b480      	push	{r7}
 8000512:	b083      	sub	sp, #12
 8000514:	af00      	add	r7, sp, #0
 8000516:	4603      	mov	r3, r0
 8000518:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 800051a:	4b0f      	ldr	r3, [pc, #60]	@ (8000558 <ITM_SendChar+0x48>)
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	4a0e      	ldr	r2, [pc, #56]	@ (8000558 <ITM_SendChar+0x48>)
 8000520:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000524:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8000526:	4b0d      	ldr	r3, [pc, #52]	@ (800055c <ITM_SendChar+0x4c>)
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	4a0c      	ldr	r2, [pc, #48]	@ (800055c <ITM_SendChar+0x4c>)
 800052c:	f043 0301 	orr.w	r3, r3, #1
 8000530:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8000532:	bf00      	nop
 8000534:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	f003 0301 	and.w	r3, r3, #1
 800053e:	2b00      	cmp	r3, #0
 8000540:	d0f8      	beq.n	8000534 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8000542:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 8000546:	79fb      	ldrb	r3, [r7, #7]
 8000548:	6013      	str	r3, [r2, #0]
}
 800054a:	bf00      	nop
 800054c:	370c      	adds	r7, #12
 800054e:	46bd      	mov	sp, r7
 8000550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000554:	4770      	bx	lr
 8000556:	bf00      	nop
 8000558:	e000edfc 	.word	0xe000edfc
 800055c:	e0000e00 	.word	0xe0000e00

08000560 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b086      	sub	sp, #24
 8000564:	af00      	add	r7, sp, #0
 8000566:	60f8      	str	r0, [r7, #12]
 8000568:	60b9      	str	r1, [r7, #8]
 800056a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800056c:	2300      	movs	r3, #0
 800056e:	617b      	str	r3, [r7, #20]
 8000570:	e00a      	b.n	8000588 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000572:	f3af 8000 	nop.w
 8000576:	4601      	mov	r1, r0
 8000578:	68bb      	ldr	r3, [r7, #8]
 800057a:	1c5a      	adds	r2, r3, #1
 800057c:	60ba      	str	r2, [r7, #8]
 800057e:	b2ca      	uxtb	r2, r1
 8000580:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000582:	697b      	ldr	r3, [r7, #20]
 8000584:	3301      	adds	r3, #1
 8000586:	617b      	str	r3, [r7, #20]
 8000588:	697a      	ldr	r2, [r7, #20]
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	429a      	cmp	r2, r3
 800058e:	dbf0      	blt.n	8000572 <_read+0x12>
  }

  return len;
 8000590:	687b      	ldr	r3, [r7, #4]
}
 8000592:	4618      	mov	r0, r3
 8000594:	3718      	adds	r7, #24
 8000596:	46bd      	mov	sp, r7
 8000598:	bd80      	pop	{r7, pc}

0800059a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800059a:	b580      	push	{r7, lr}
 800059c:	b086      	sub	sp, #24
 800059e:	af00      	add	r7, sp, #0
 80005a0:	60f8      	str	r0, [r7, #12]
 80005a2:	60b9      	str	r1, [r7, #8]
 80005a4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005a6:	2300      	movs	r3, #0
 80005a8:	617b      	str	r3, [r7, #20]
 80005aa:	e009      	b.n	80005c0 <_write+0x26>
  {
    // __io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 80005ac:	68bb      	ldr	r3, [r7, #8]
 80005ae:	1c5a      	adds	r2, r3, #1
 80005b0:	60ba      	str	r2, [r7, #8]
 80005b2:	781b      	ldrb	r3, [r3, #0]
 80005b4:	4618      	mov	r0, r3
 80005b6:	f7ff ffab 	bl	8000510 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005ba:	697b      	ldr	r3, [r7, #20]
 80005bc:	3301      	adds	r3, #1
 80005be:	617b      	str	r3, [r7, #20]
 80005c0:	697a      	ldr	r2, [r7, #20]
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	429a      	cmp	r2, r3
 80005c6:	dbf1      	blt.n	80005ac <_write+0x12>
	  // LCD_SendChar(*ptr++);
	  // UART_SendChar(*ptr++);
  }
  return len;
 80005c8:	687b      	ldr	r3, [r7, #4]
}
 80005ca:	4618      	mov	r0, r3
 80005cc:	3718      	adds	r7, #24
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}

080005d2 <_close>:

int _close(int file)
{
 80005d2:	b480      	push	{r7}
 80005d4:	b083      	sub	sp, #12
 80005d6:	af00      	add	r7, sp, #0
 80005d8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80005da:	f04f 33ff 	mov.w	r3, #4294967295
}
 80005de:	4618      	mov	r0, r3
 80005e0:	370c      	adds	r7, #12
 80005e2:	46bd      	mov	sp, r7
 80005e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e8:	4770      	bx	lr

080005ea <_fstat>:


int _fstat(int file, struct stat *st)
{
 80005ea:	b480      	push	{r7}
 80005ec:	b083      	sub	sp, #12
 80005ee:	af00      	add	r7, sp, #0
 80005f0:	6078      	str	r0, [r7, #4]
 80005f2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80005f4:	683b      	ldr	r3, [r7, #0]
 80005f6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80005fa:	605a      	str	r2, [r3, #4]
  return 0;
 80005fc:	2300      	movs	r3, #0
}
 80005fe:	4618      	mov	r0, r3
 8000600:	370c      	adds	r7, #12
 8000602:	46bd      	mov	sp, r7
 8000604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000608:	4770      	bx	lr

0800060a <_isatty>:

int _isatty(int file)
{
 800060a:	b480      	push	{r7}
 800060c:	b083      	sub	sp, #12
 800060e:	af00      	add	r7, sp, #0
 8000610:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000612:	2301      	movs	r3, #1
}
 8000614:	4618      	mov	r0, r3
 8000616:	370c      	adds	r7, #12
 8000618:	46bd      	mov	sp, r7
 800061a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061e:	4770      	bx	lr

08000620 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000620:	b480      	push	{r7}
 8000622:	b085      	sub	sp, #20
 8000624:	af00      	add	r7, sp, #0
 8000626:	60f8      	str	r0, [r7, #12]
 8000628:	60b9      	str	r1, [r7, #8]
 800062a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800062c:	2300      	movs	r3, #0
}
 800062e:	4618      	mov	r0, r3
 8000630:	3714      	adds	r7, #20
 8000632:	46bd      	mov	sp, r7
 8000634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000638:	4770      	bx	lr
	...

0800063c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b086      	sub	sp, #24
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000644:	4a14      	ldr	r2, [pc, #80]	@ (8000698 <_sbrk+0x5c>)
 8000646:	4b15      	ldr	r3, [pc, #84]	@ (800069c <_sbrk+0x60>)
 8000648:	1ad3      	subs	r3, r2, r3
 800064a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800064c:	697b      	ldr	r3, [r7, #20]
 800064e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000650:	4b13      	ldr	r3, [pc, #76]	@ (80006a0 <_sbrk+0x64>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	2b00      	cmp	r3, #0
 8000656:	d102      	bne.n	800065e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000658:	4b11      	ldr	r3, [pc, #68]	@ (80006a0 <_sbrk+0x64>)
 800065a:	4a12      	ldr	r2, [pc, #72]	@ (80006a4 <_sbrk+0x68>)
 800065c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800065e:	4b10      	ldr	r3, [pc, #64]	@ (80006a0 <_sbrk+0x64>)
 8000660:	681a      	ldr	r2, [r3, #0]
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	4413      	add	r3, r2
 8000666:	693a      	ldr	r2, [r7, #16]
 8000668:	429a      	cmp	r2, r3
 800066a:	d207      	bcs.n	800067c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800066c:	f001 fa5e 	bl	8001b2c <__errno>
 8000670:	4603      	mov	r3, r0
 8000672:	220c      	movs	r2, #12
 8000674:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000676:	f04f 33ff 	mov.w	r3, #4294967295
 800067a:	e009      	b.n	8000690 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800067c:	4b08      	ldr	r3, [pc, #32]	@ (80006a0 <_sbrk+0x64>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000682:	4b07      	ldr	r3, [pc, #28]	@ (80006a0 <_sbrk+0x64>)
 8000684:	681a      	ldr	r2, [r3, #0]
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	4413      	add	r3, r2
 800068a:	4a05      	ldr	r2, [pc, #20]	@ (80006a0 <_sbrk+0x64>)
 800068c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800068e:	68fb      	ldr	r3, [r7, #12]
}
 8000690:	4618      	mov	r0, r3
 8000692:	3718      	adds	r7, #24
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}
 8000698:	20020000 	.word	0x20020000
 800069c:	00000400 	.word	0x00000400
 80006a0:	200000bc 	.word	0x200000bc
 80006a4:	20000210 	.word	0x20000210

080006a8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80006a8:	480d      	ldr	r0, [pc, #52]	@ (80006e0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80006aa:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80006ac:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006b0:	480c      	ldr	r0, [pc, #48]	@ (80006e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80006b2:	490d      	ldr	r1, [pc, #52]	@ (80006e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80006b4:	4a0d      	ldr	r2, [pc, #52]	@ (80006ec <LoopForever+0xe>)
  movs r3, #0
 80006b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006b8:	e002      	b.n	80006c0 <LoopCopyDataInit>

080006ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006be:	3304      	adds	r3, #4

080006c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006c4:	d3f9      	bcc.n	80006ba <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006c6:	4a0a      	ldr	r2, [pc, #40]	@ (80006f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006c8:	4c0a      	ldr	r4, [pc, #40]	@ (80006f4 <LoopForever+0x16>)
  movs r3, #0
 80006ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006cc:	e001      	b.n	80006d2 <LoopFillZerobss>

080006ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006d0:	3204      	adds	r2, #4

080006d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006d4:	d3fb      	bcc.n	80006ce <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80006d6:	f001 fa2f 	bl	8001b38 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006da:	f7ff fe55 	bl	8000388 <main>

080006de <LoopForever>:

LoopForever:
  b LoopForever
 80006de:	e7fe      	b.n	80006de <LoopForever>
  ldr   r0, =_estack
 80006e0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80006e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006e8:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80006ec:	08002634 	.word	0x08002634
  ldr r2, =_sbss
 80006f0:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80006f4:	2000020c 	.word	0x2000020c

080006f8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006f8:	e7fe      	b.n	80006f8 <ADC_IRQHandler>
	...

080006fc <GPIO_PeriClockControl>:
 * @return								- None
 *
 * @note								- None
 *****************************************************************************************************************/
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 80006fc:	b480      	push	{r7}
 80006fe:	b083      	sub	sp, #12
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
 8000704:	460b      	mov	r3, r1
 8000706:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000708:	78fb      	ldrb	r3, [r7, #3]
 800070a:	2b01      	cmp	r3, #1
 800070c:	d157      	bne.n	80007be <GPIO_PeriClockControl+0xc2>
	{
		if(pGPIOx == GPIOA)
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	4a59      	ldr	r2, [pc, #356]	@ (8000878 <GPIO_PeriClockControl+0x17c>)
 8000712:	4293      	cmp	r3, r2
 8000714:	d106      	bne.n	8000724 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 8000716:	4b59      	ldr	r3, [pc, #356]	@ (800087c <GPIO_PeriClockControl+0x180>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800071a:	4a58      	ldr	r2, [pc, #352]	@ (800087c <GPIO_PeriClockControl+0x180>)
 800071c:	f043 0301 	orr.w	r3, r3, #1
 8000720:	6313      	str	r3, [r2, #48]	@ 0x30
		else if(pGPIOx == GPIOH)
		{
			GPIOH_PCLK_DI();
		}
	}
}
 8000722:	e0a3      	b.n	800086c <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOB)
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	4a56      	ldr	r2, [pc, #344]	@ (8000880 <GPIO_PeriClockControl+0x184>)
 8000728:	4293      	cmp	r3, r2
 800072a:	d106      	bne.n	800073a <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 800072c:	4b53      	ldr	r3, [pc, #332]	@ (800087c <GPIO_PeriClockControl+0x180>)
 800072e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000730:	4a52      	ldr	r2, [pc, #328]	@ (800087c <GPIO_PeriClockControl+0x180>)
 8000732:	f043 0302 	orr.w	r3, r3, #2
 8000736:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000738:	e098      	b.n	800086c <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOC)
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	4a51      	ldr	r2, [pc, #324]	@ (8000884 <GPIO_PeriClockControl+0x188>)
 800073e:	4293      	cmp	r3, r2
 8000740:	d106      	bne.n	8000750 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 8000742:	4b4e      	ldr	r3, [pc, #312]	@ (800087c <GPIO_PeriClockControl+0x180>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000746:	4a4d      	ldr	r2, [pc, #308]	@ (800087c <GPIO_PeriClockControl+0x180>)
 8000748:	f043 0304 	orr.w	r3, r3, #4
 800074c:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800074e:	e08d      	b.n	800086c <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOD)
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	4a4d      	ldr	r2, [pc, #308]	@ (8000888 <GPIO_PeriClockControl+0x18c>)
 8000754:	4293      	cmp	r3, r2
 8000756:	d106      	bne.n	8000766 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000758:	4b48      	ldr	r3, [pc, #288]	@ (800087c <GPIO_PeriClockControl+0x180>)
 800075a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800075c:	4a47      	ldr	r2, [pc, #284]	@ (800087c <GPIO_PeriClockControl+0x180>)
 800075e:	f043 0308 	orr.w	r3, r3, #8
 8000762:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000764:	e082      	b.n	800086c <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOE)
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	4a48      	ldr	r2, [pc, #288]	@ (800088c <GPIO_PeriClockControl+0x190>)
 800076a:	4293      	cmp	r3, r2
 800076c:	d106      	bne.n	800077c <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 800076e:	4b43      	ldr	r3, [pc, #268]	@ (800087c <GPIO_PeriClockControl+0x180>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000772:	4a42      	ldr	r2, [pc, #264]	@ (800087c <GPIO_PeriClockControl+0x180>)
 8000774:	f043 0310 	orr.w	r3, r3, #16
 8000778:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800077a:	e077      	b.n	800086c <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOF)
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	4a44      	ldr	r2, [pc, #272]	@ (8000890 <GPIO_PeriClockControl+0x194>)
 8000780:	4293      	cmp	r3, r2
 8000782:	d106      	bne.n	8000792 <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8000784:	4b3d      	ldr	r3, [pc, #244]	@ (800087c <GPIO_PeriClockControl+0x180>)
 8000786:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000788:	4a3c      	ldr	r2, [pc, #240]	@ (800087c <GPIO_PeriClockControl+0x180>)
 800078a:	f043 0320 	orr.w	r3, r3, #32
 800078e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000790:	e06c      	b.n	800086c <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOG)
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	4a3f      	ldr	r2, [pc, #252]	@ (8000894 <GPIO_PeriClockControl+0x198>)
 8000796:	4293      	cmp	r3, r2
 8000798:	d106      	bne.n	80007a8 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 800079a:	4b38      	ldr	r3, [pc, #224]	@ (800087c <GPIO_PeriClockControl+0x180>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800079e:	4a37      	ldr	r2, [pc, #220]	@ (800087c <GPIO_PeriClockControl+0x180>)
 80007a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80007a4:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80007a6:	e061      	b.n	800086c <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOH)
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	4a3b      	ldr	r2, [pc, #236]	@ (8000898 <GPIO_PeriClockControl+0x19c>)
 80007ac:	4293      	cmp	r3, r2
 80007ae:	d15d      	bne.n	800086c <GPIO_PeriClockControl+0x170>
			GPIOH_PCLK_EN();
 80007b0:	4b32      	ldr	r3, [pc, #200]	@ (800087c <GPIO_PeriClockControl+0x180>)
 80007b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007b4:	4a31      	ldr	r2, [pc, #196]	@ (800087c <GPIO_PeriClockControl+0x180>)
 80007b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007ba:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80007bc:	e056      	b.n	800086c <GPIO_PeriClockControl+0x170>
		if(pGPIOx == GPIOA)
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	4a2d      	ldr	r2, [pc, #180]	@ (8000878 <GPIO_PeriClockControl+0x17c>)
 80007c2:	4293      	cmp	r3, r2
 80007c4:	d106      	bne.n	80007d4 <GPIO_PeriClockControl+0xd8>
			GPIOA_PCLK_DI();
 80007c6:	4b2d      	ldr	r3, [pc, #180]	@ (800087c <GPIO_PeriClockControl+0x180>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ca:	4a2c      	ldr	r2, [pc, #176]	@ (800087c <GPIO_PeriClockControl+0x180>)
 80007cc:	f023 0301 	bic.w	r3, r3, #1
 80007d0:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80007d2:	e04b      	b.n	800086c <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOB)
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	4a2a      	ldr	r2, [pc, #168]	@ (8000880 <GPIO_PeriClockControl+0x184>)
 80007d8:	4293      	cmp	r3, r2
 80007da:	d106      	bne.n	80007ea <GPIO_PeriClockControl+0xee>
			GPIOB_PCLK_DI();
 80007dc:	4b27      	ldr	r3, [pc, #156]	@ (800087c <GPIO_PeriClockControl+0x180>)
 80007de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e0:	4a26      	ldr	r2, [pc, #152]	@ (800087c <GPIO_PeriClockControl+0x180>)
 80007e2:	f023 0302 	bic.w	r3, r3, #2
 80007e6:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80007e8:	e040      	b.n	800086c <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOC)
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	4a25      	ldr	r2, [pc, #148]	@ (8000884 <GPIO_PeriClockControl+0x188>)
 80007ee:	4293      	cmp	r3, r2
 80007f0:	d106      	bne.n	8000800 <GPIO_PeriClockControl+0x104>
			GPIOC_PCLK_DI();
 80007f2:	4b22      	ldr	r3, [pc, #136]	@ (800087c <GPIO_PeriClockControl+0x180>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f6:	4a21      	ldr	r2, [pc, #132]	@ (800087c <GPIO_PeriClockControl+0x180>)
 80007f8:	f023 0304 	bic.w	r3, r3, #4
 80007fc:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80007fe:	e035      	b.n	800086c <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOD)
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	4a21      	ldr	r2, [pc, #132]	@ (8000888 <GPIO_PeriClockControl+0x18c>)
 8000804:	4293      	cmp	r3, r2
 8000806:	d106      	bne.n	8000816 <GPIO_PeriClockControl+0x11a>
			GPIOD_PCLK_DI();
 8000808:	4b1c      	ldr	r3, [pc, #112]	@ (800087c <GPIO_PeriClockControl+0x180>)
 800080a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080c:	4a1b      	ldr	r2, [pc, #108]	@ (800087c <GPIO_PeriClockControl+0x180>)
 800080e:	f023 0308 	bic.w	r3, r3, #8
 8000812:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000814:	e02a      	b.n	800086c <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOE)
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	4a1c      	ldr	r2, [pc, #112]	@ (800088c <GPIO_PeriClockControl+0x190>)
 800081a:	4293      	cmp	r3, r2
 800081c:	d106      	bne.n	800082c <GPIO_PeriClockControl+0x130>
			GPIOE_PCLK_DI();
 800081e:	4b17      	ldr	r3, [pc, #92]	@ (800087c <GPIO_PeriClockControl+0x180>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000822:	4a16      	ldr	r2, [pc, #88]	@ (800087c <GPIO_PeriClockControl+0x180>)
 8000824:	f023 0310 	bic.w	r3, r3, #16
 8000828:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800082a:	e01f      	b.n	800086c <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOF)
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	4a18      	ldr	r2, [pc, #96]	@ (8000890 <GPIO_PeriClockControl+0x194>)
 8000830:	4293      	cmp	r3, r2
 8000832:	d106      	bne.n	8000842 <GPIO_PeriClockControl+0x146>
			GPIOF_PCLK_EN();
 8000834:	4b11      	ldr	r3, [pc, #68]	@ (800087c <GPIO_PeriClockControl+0x180>)
 8000836:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000838:	4a10      	ldr	r2, [pc, #64]	@ (800087c <GPIO_PeriClockControl+0x180>)
 800083a:	f043 0320 	orr.w	r3, r3, #32
 800083e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000840:	e014      	b.n	800086c <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOG)
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	4a13      	ldr	r2, [pc, #76]	@ (8000894 <GPIO_PeriClockControl+0x198>)
 8000846:	4293      	cmp	r3, r2
 8000848:	d106      	bne.n	8000858 <GPIO_PeriClockControl+0x15c>
			GPIOG_PCLK_DI();
 800084a:	4b0c      	ldr	r3, [pc, #48]	@ (800087c <GPIO_PeriClockControl+0x180>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084e:	4a0b      	ldr	r2, [pc, #44]	@ (800087c <GPIO_PeriClockControl+0x180>)
 8000850:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000854:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000856:	e009      	b.n	800086c <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOH)
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	4a0f      	ldr	r2, [pc, #60]	@ (8000898 <GPIO_PeriClockControl+0x19c>)
 800085c:	4293      	cmp	r3, r2
 800085e:	d105      	bne.n	800086c <GPIO_PeriClockControl+0x170>
			GPIOH_PCLK_DI();
 8000860:	4b06      	ldr	r3, [pc, #24]	@ (800087c <GPIO_PeriClockControl+0x180>)
 8000862:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000864:	4a05      	ldr	r2, [pc, #20]	@ (800087c <GPIO_PeriClockControl+0x180>)
 8000866:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800086a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800086c:	bf00      	nop
 800086e:	370c      	adds	r7, #12
 8000870:	46bd      	mov	sp, r7
 8000872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000876:	4770      	bx	lr
 8000878:	40020000 	.word	0x40020000
 800087c:	40023800 	.word	0x40023800
 8000880:	40020400 	.word	0x40020400
 8000884:	40020800 	.word	0x40020800
 8000888:	40020c00 	.word	0x40020c00
 800088c:	40021000 	.word	0x40021000
 8000890:	40021400 	.word	0x40021400
 8000894:	40021800 	.word	0x40021800
 8000898:	40021c00 	.word	0x40021c00

0800089c <GPIO_Init>:
 * @return								- None
 *
 * @note								- None
 *****************************************************************************************************************/
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b086      	sub	sp, #24
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0; // Temp register
 80008a4:	2300      	movs	r3, #0
 80008a6:	617b      	str	r3, [r7, #20]

	// Enable the peripheral clock
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	2101      	movs	r1, #1
 80008ae:	4618      	mov	r0, r3
 80008b0:	f7ff ff24 	bl	80006fc <GPIO_PeriClockControl>

	//1. Configure the mode of GPIO PIN
	if(pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	795b      	ldrb	r3, [r3, #5]
 80008b8:	2b03      	cmp	r3, #3
 80008ba:	d81f      	bhi.n	80008fc <GPIO_Init+0x60>
	{
		// Non interrupt mode
		temp = (pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber));
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	795b      	ldrb	r3, [r3, #5]
 80008c0:	461a      	mov	r2, r3
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	791b      	ldrb	r3, [r3, #4]
 80008c6:	005b      	lsls	r3, r3, #1
 80008c8:	fa02 f303 	lsl.w	r3, r2, r3
 80008cc:	617b      	str	r3, [r7, #20]
		pGPIOHandle -> pGPIOx -> MODER &= ~(0x3 << pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);	// Clearing
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	681a      	ldr	r2, [r3, #0]
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	791b      	ldrb	r3, [r3, #4]
 80008d8:	4619      	mov	r1, r3
 80008da:	2303      	movs	r3, #3
 80008dc:	408b      	lsls	r3, r1
 80008de:	43db      	mvns	r3, r3
 80008e0:	4619      	mov	r1, r3
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	400a      	ands	r2, r1
 80008e8:	601a      	str	r2, [r3, #0]
		pGPIOHandle -> pGPIOx -> MODER |= temp;	// Setting
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	6819      	ldr	r1, [r3, #0]
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	697a      	ldr	r2, [r7, #20]
 80008f6:	430a      	orrs	r2, r1
 80008f8:	601a      	str	r2, [r3, #0]
 80008fa:	e0c2      	b.n	8000a82 <GPIO_Init+0x1e6>
	}
	else
	{
		// this part will code later (interrupt mode)
		if(pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	795b      	ldrb	r3, [r3, #5]
 8000900:	2b04      	cmp	r3, #4
 8000902:	d117      	bne.n	8000934 <GPIO_Init+0x98>
		{
			//1. Configure the FTSR
			EXTI ->FTSR |= (1 << pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 8000904:	4b47      	ldr	r3, [pc, #284]	@ (8000a24 <GPIO_Init+0x188>)
 8000906:	68db      	ldr	r3, [r3, #12]
 8000908:	687a      	ldr	r2, [r7, #4]
 800090a:	7912      	ldrb	r2, [r2, #4]
 800090c:	4611      	mov	r1, r2
 800090e:	2201      	movs	r2, #1
 8000910:	408a      	lsls	r2, r1
 8000912:	4611      	mov	r1, r2
 8000914:	4a43      	ldr	r2, [pc, #268]	@ (8000a24 <GPIO_Init+0x188>)
 8000916:	430b      	orrs	r3, r1
 8000918:	60d3      	str	r3, [r2, #12]
			// Clear the corresponding RTSR bit
			EXTI ->RTSR &= ~(1 << pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 800091a:	4b42      	ldr	r3, [pc, #264]	@ (8000a24 <GPIO_Init+0x188>)
 800091c:	689b      	ldr	r3, [r3, #8]
 800091e:	687a      	ldr	r2, [r7, #4]
 8000920:	7912      	ldrb	r2, [r2, #4]
 8000922:	4611      	mov	r1, r2
 8000924:	2201      	movs	r2, #1
 8000926:	408a      	lsls	r2, r1
 8000928:	43d2      	mvns	r2, r2
 800092a:	4611      	mov	r1, r2
 800092c:	4a3d      	ldr	r2, [pc, #244]	@ (8000a24 <GPIO_Init+0x188>)
 800092e:	400b      	ands	r3, r1
 8000930:	6093      	str	r3, [r2, #8]
 8000932:	e035      	b.n	80009a0 <GPIO_Init+0x104>
		}
		else if(pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	795b      	ldrb	r3, [r3, #5]
 8000938:	2b05      	cmp	r3, #5
 800093a:	d117      	bne.n	800096c <GPIO_Init+0xd0>
		{
			//1. Configure the RTSR
			EXTI ->RTSR |= (1 << pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 800093c:	4b39      	ldr	r3, [pc, #228]	@ (8000a24 <GPIO_Init+0x188>)
 800093e:	689b      	ldr	r3, [r3, #8]
 8000940:	687a      	ldr	r2, [r7, #4]
 8000942:	7912      	ldrb	r2, [r2, #4]
 8000944:	4611      	mov	r1, r2
 8000946:	2201      	movs	r2, #1
 8000948:	408a      	lsls	r2, r1
 800094a:	4611      	mov	r1, r2
 800094c:	4a35      	ldr	r2, [pc, #212]	@ (8000a24 <GPIO_Init+0x188>)
 800094e:	430b      	orrs	r3, r1
 8000950:	6093      	str	r3, [r2, #8]
			// Clear the corresponding FTSR bit
			EXTI ->FTSR &= ~(1 << pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 8000952:	4b34      	ldr	r3, [pc, #208]	@ (8000a24 <GPIO_Init+0x188>)
 8000954:	68db      	ldr	r3, [r3, #12]
 8000956:	687a      	ldr	r2, [r7, #4]
 8000958:	7912      	ldrb	r2, [r2, #4]
 800095a:	4611      	mov	r1, r2
 800095c:	2201      	movs	r2, #1
 800095e:	408a      	lsls	r2, r1
 8000960:	43d2      	mvns	r2, r2
 8000962:	4611      	mov	r1, r2
 8000964:	4a2f      	ldr	r2, [pc, #188]	@ (8000a24 <GPIO_Init+0x188>)
 8000966:	400b      	ands	r3, r1
 8000968:	60d3      	str	r3, [r2, #12]
 800096a:	e019      	b.n	80009a0 <GPIO_Init+0x104>
		}
		else if(pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	795b      	ldrb	r3, [r3, #5]
 8000970:	2b06      	cmp	r3, #6
 8000972:	d115      	bne.n	80009a0 <GPIO_Init+0x104>
		{
			//1. Configure both FTSR and RTSR
			EXTI ->RTSR |= (1 << pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 8000974:	4b2b      	ldr	r3, [pc, #172]	@ (8000a24 <GPIO_Init+0x188>)
 8000976:	689b      	ldr	r3, [r3, #8]
 8000978:	687a      	ldr	r2, [r7, #4]
 800097a:	7912      	ldrb	r2, [r2, #4]
 800097c:	4611      	mov	r1, r2
 800097e:	2201      	movs	r2, #1
 8000980:	408a      	lsls	r2, r1
 8000982:	4611      	mov	r1, r2
 8000984:	4a27      	ldr	r2, [pc, #156]	@ (8000a24 <GPIO_Init+0x188>)
 8000986:	430b      	orrs	r3, r1
 8000988:	6093      	str	r3, [r2, #8]

			EXTI ->FTSR |= (1 << pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 800098a:	4b26      	ldr	r3, [pc, #152]	@ (8000a24 <GPIO_Init+0x188>)
 800098c:	68db      	ldr	r3, [r3, #12]
 800098e:	687a      	ldr	r2, [r7, #4]
 8000990:	7912      	ldrb	r2, [r2, #4]
 8000992:	4611      	mov	r1, r2
 8000994:	2201      	movs	r2, #1
 8000996:	408a      	lsls	r2, r1
 8000998:	4611      	mov	r1, r2
 800099a:	4a22      	ldr	r2, [pc, #136]	@ (8000a24 <GPIO_Init+0x188>)
 800099c:	430b      	orrs	r3, r1
 800099e:	60d3      	str	r3, [r2, #12]
		}

		//2. Configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber / 4;
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	791b      	ldrb	r3, [r3, #4]
 80009a4:	089b      	lsrs	r3, r3, #2
 80009a6:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber % 4;
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	791b      	ldrb	r3, [r3, #4]
 80009ac:	f003 0303 	and.w	r3, r3, #3
 80009b0:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle ->pGPIOx);
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	4a1c      	ldr	r2, [pc, #112]	@ (8000a28 <GPIO_Init+0x18c>)
 80009b8:	4293      	cmp	r3, r2
 80009ba:	d045      	beq.n	8000a48 <GPIO_Init+0x1ac>
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	4a1a      	ldr	r2, [pc, #104]	@ (8000a2c <GPIO_Init+0x190>)
 80009c2:	4293      	cmp	r3, r2
 80009c4:	d02b      	beq.n	8000a1e <GPIO_Init+0x182>
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	4a19      	ldr	r2, [pc, #100]	@ (8000a30 <GPIO_Init+0x194>)
 80009cc:	4293      	cmp	r3, r2
 80009ce:	d024      	beq.n	8000a1a <GPIO_Init+0x17e>
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	4a17      	ldr	r2, [pc, #92]	@ (8000a34 <GPIO_Init+0x198>)
 80009d6:	4293      	cmp	r3, r2
 80009d8:	d01d      	beq.n	8000a16 <GPIO_Init+0x17a>
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	4a16      	ldr	r2, [pc, #88]	@ (8000a38 <GPIO_Init+0x19c>)
 80009e0:	4293      	cmp	r3, r2
 80009e2:	d016      	beq.n	8000a12 <GPIO_Init+0x176>
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	4a14      	ldr	r2, [pc, #80]	@ (8000a3c <GPIO_Init+0x1a0>)
 80009ea:	4293      	cmp	r3, r2
 80009ec:	d00f      	beq.n	8000a0e <GPIO_Init+0x172>
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	4a13      	ldr	r2, [pc, #76]	@ (8000a40 <GPIO_Init+0x1a4>)
 80009f4:	4293      	cmp	r3, r2
 80009f6:	d008      	beq.n	8000a0a <GPIO_Init+0x16e>
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	4a11      	ldr	r2, [pc, #68]	@ (8000a44 <GPIO_Init+0x1a8>)
 80009fe:	4293      	cmp	r3, r2
 8000a00:	d101      	bne.n	8000a06 <GPIO_Init+0x16a>
 8000a02:	2307      	movs	r3, #7
 8000a04:	e021      	b.n	8000a4a <GPIO_Init+0x1ae>
 8000a06:	2300      	movs	r3, #0
 8000a08:	e01f      	b.n	8000a4a <GPIO_Init+0x1ae>
 8000a0a:	2306      	movs	r3, #6
 8000a0c:	e01d      	b.n	8000a4a <GPIO_Init+0x1ae>
 8000a0e:	2305      	movs	r3, #5
 8000a10:	e01b      	b.n	8000a4a <GPIO_Init+0x1ae>
 8000a12:	2304      	movs	r3, #4
 8000a14:	e019      	b.n	8000a4a <GPIO_Init+0x1ae>
 8000a16:	2303      	movs	r3, #3
 8000a18:	e017      	b.n	8000a4a <GPIO_Init+0x1ae>
 8000a1a:	2302      	movs	r3, #2
 8000a1c:	e015      	b.n	8000a4a <GPIO_Init+0x1ae>
 8000a1e:	2301      	movs	r3, #1
 8000a20:	e013      	b.n	8000a4a <GPIO_Init+0x1ae>
 8000a22:	bf00      	nop
 8000a24:	40013c00 	.word	0x40013c00
 8000a28:	40020000 	.word	0x40020000
 8000a2c:	40020400 	.word	0x40020400
 8000a30:	40020800 	.word	0x40020800
 8000a34:	40020c00 	.word	0x40020c00
 8000a38:	40021000 	.word	0x40021000
 8000a3c:	40021400 	.word	0x40021400
 8000a40:	40021800 	.word	0x40021800
 8000a44:	40021c00 	.word	0x40021c00
 8000a48:	2300      	movs	r3, #0
 8000a4a:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 8000a4c:	4b5d      	ldr	r3, [pc, #372]	@ (8000bc4 <GPIO_Init+0x328>)
 8000a4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a50:	4a5c      	ldr	r2, [pc, #368]	@ (8000bc4 <GPIO_Init+0x328>)
 8000a52:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a56:	6453      	str	r3, [r2, #68]	@ 0x44
		SYSGFG -> EXTICR[temp1] = portcode << (temp2 * 4);
 8000a58:	7c7a      	ldrb	r2, [r7, #17]
 8000a5a:	7cbb      	ldrb	r3, [r7, #18]
 8000a5c:	009b      	lsls	r3, r3, #2
 8000a5e:	fa02 f103 	lsl.w	r1, r2, r3
 8000a62:	4a59      	ldr	r2, [pc, #356]	@ (8000bc8 <GPIO_Init+0x32c>)
 8000a64:	7cfb      	ldrb	r3, [r7, #19]
 8000a66:	3302      	adds	r3, #2
 8000a68:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//3. Enable the EXTI interrupt delivery using IMR
		EXTI->IMR |= (1 << pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 8000a6c:	4b57      	ldr	r3, [pc, #348]	@ (8000bcc <GPIO_Init+0x330>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	687a      	ldr	r2, [r7, #4]
 8000a72:	7912      	ldrb	r2, [r2, #4]
 8000a74:	4611      	mov	r1, r2
 8000a76:	2201      	movs	r2, #1
 8000a78:	408a      	lsls	r2, r1
 8000a7a:	4611      	mov	r1, r2
 8000a7c:	4a53      	ldr	r2, [pc, #332]	@ (8000bcc <GPIO_Init+0x330>)
 8000a7e:	430b      	orrs	r3, r1
 8000a80:	6013      	str	r3, [r2, #0]

	}

	temp = 0;
 8000a82:	2300      	movs	r3, #0
 8000a84:	617b      	str	r3, [r7, #20]
	//2. Configure the Speed
	temp = (pGPIOHandle -> GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber));
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	799b      	ldrb	r3, [r3, #6]
 8000a8a:	461a      	mov	r2, r3
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	791b      	ldrb	r3, [r3, #4]
 8000a90:	005b      	lsls	r3, r3, #1
 8000a92:	fa02 f303 	lsl.w	r3, r2, r3
 8000a96:	617b      	str	r3, [r7, #20]
	pGPIOHandle -> pGPIOx -> OSPEEDR &= ~(0x3 << pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);	// clearing
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	689a      	ldr	r2, [r3, #8]
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	791b      	ldrb	r3, [r3, #4]
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	2303      	movs	r3, #3
 8000aa6:	408b      	lsls	r3, r1
 8000aa8:	43db      	mvns	r3, r3
 8000aaa:	4619      	mov	r1, r3
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	400a      	ands	r2, r1
 8000ab2:	609a      	str	r2, [r3, #8]
	pGPIOHandle -> pGPIOx -> OSPEEDR |= temp;	// Setting
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	6899      	ldr	r1, [r3, #8]
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	697a      	ldr	r2, [r7, #20]
 8000ac0:	430a      	orrs	r2, r1
 8000ac2:	609a      	str	r2, [r3, #8]

	temp = 0;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	617b      	str	r3, [r7, #20]
	//3. Configure the Push-pull settings
	temp = (pGPIOHandle -> GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber));
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	79db      	ldrb	r3, [r3, #7]
 8000acc:	461a      	mov	r2, r3
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	791b      	ldrb	r3, [r3, #4]
 8000ad2:	005b      	lsls	r3, r3, #1
 8000ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad8:	617b      	str	r3, [r7, #20]
	pGPIOHandle -> pGPIOx -> PUPDR &= ~(0x3 << pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	68da      	ldr	r2, [r3, #12]
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	791b      	ldrb	r3, [r3, #4]
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	2303      	movs	r3, #3
 8000ae8:	408b      	lsls	r3, r1
 8000aea:	43db      	mvns	r3, r3
 8000aec:	4619      	mov	r1, r3
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	400a      	ands	r2, r1
 8000af4:	60da      	str	r2, [r3, #12]
	pGPIOHandle -> pGPIOx -> PUPDR |= temp;
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	68d9      	ldr	r1, [r3, #12]
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	697a      	ldr	r2, [r7, #20]
 8000b02:	430a      	orrs	r2, r1
 8000b04:	60da      	str	r2, [r3, #12]

	temp = 0;
 8000b06:	2300      	movs	r3, #0
 8000b08:	617b      	str	r3, [r7, #20]
	//4. Configure the Output Type
	if(pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_OUT){
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	795b      	ldrb	r3, [r3, #5]
 8000b0e:	2b01      	cmp	r3, #1
 8000b10:	d11d      	bne.n	8000b4e <GPIO_Init+0x2b2>
		temp = (pGPIOHandle -> GPIO_PinConfig.GPIO_PinOType << pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	7a1b      	ldrb	r3, [r3, #8]
 8000b16:	461a      	mov	r2, r3
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	791b      	ldrb	r3, [r3, #4]
 8000b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b20:	617b      	str	r3, [r7, #20]
		pGPIOHandle -> pGPIOx -> OTYPER &= ~(0x3 << pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	685a      	ldr	r2, [r3, #4]
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	791b      	ldrb	r3, [r3, #4]
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	2303      	movs	r3, #3
 8000b30:	408b      	lsls	r3, r1
 8000b32:	43db      	mvns	r3, r3
 8000b34:	4619      	mov	r1, r3
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	400a      	ands	r2, r1
 8000b3c:	605a      	str	r2, [r3, #4]
		pGPIOHandle -> pGPIOx -> OTYPER |= temp;
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	6859      	ldr	r1, [r3, #4]
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	697a      	ldr	r2, [r7, #20]
 8000b4a:	430a      	orrs	r2, r1
 8000b4c:	605a      	str	r2, [r3, #4]
	}
	//5. Configure the Alternate functionality, if required
	if(pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	795b      	ldrb	r3, [r3, #5]
 8000b52:	2b02      	cmp	r3, #2
 8000b54:	d131      	bne.n	8000bba <GPIO_Init+0x31e>
	{
		// Configure the alternate function here
		uint8_t temp1, temp2;

		temp1 = pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber / 8;
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	791b      	ldrb	r3, [r3, #4]
 8000b5a:	08db      	lsrs	r3, r3, #3
 8000b5c:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber % 8;
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	791b      	ldrb	r3, [r3, #4]
 8000b62:	f003 0307 	and.w	r3, r3, #7
 8000b66:	73fb      	strb	r3, [r7, #15]

		pGPIOHandle -> pGPIOx -> AFR[temp1] &= ~(0xF << (4 * temp2));
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	7c3a      	ldrb	r2, [r7, #16]
 8000b6e:	3208      	adds	r2, #8
 8000b70:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000b74:	7bfb      	ldrb	r3, [r7, #15]
 8000b76:	009b      	lsls	r3, r3, #2
 8000b78:	220f      	movs	r2, #15
 8000b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b7e:	43db      	mvns	r3, r3
 8000b80:	4618      	mov	r0, r3
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	7c3a      	ldrb	r2, [r7, #16]
 8000b88:	4001      	ands	r1, r0
 8000b8a:	3208      	adds	r2, #8
 8000b8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle -> pGPIOx -> AFR[temp1] |= pGPIOHandle -> GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp2);
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	7c3a      	ldrb	r2, [r7, #16]
 8000b96:	3208      	adds	r2, #8
 8000b98:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	7a5b      	ldrb	r3, [r3, #9]
 8000ba0:	461a      	mov	r2, r3
 8000ba2:	7bfb      	ldrb	r3, [r7, #15]
 8000ba4:	009b      	lsls	r3, r3, #2
 8000ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8000baa:	4618      	mov	r0, r3
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	7c3a      	ldrb	r2, [r7, #16]
 8000bb2:	4301      	orrs	r1, r0
 8000bb4:	3208      	adds	r2, #8
 8000bb6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	}
}
 8000bba:	bf00      	nop
 8000bbc:	3718      	adds	r7, #24
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	40023800 	.word	0x40023800
 8000bc8:	40013800 	.word	0x40013800
 8000bcc:	40013c00 	.word	0x40013c00

08000bd0 <GPIO_ReadFromInputPin>:
 * @return								- Integer Either 0 or 1 [8 bit is enough]
 *
 * @note								- None
 *****************************************************************************************************************/
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b085      	sub	sp, #20
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
 8000bd8:	460b      	mov	r3, r1
 8000bda:	70fb      	strb	r3, [r7, #3]
	uint8_t value;

	value = (uint8_t)((pGPIOx -> IDR >> PinNumber) & 0x00000001);
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	691a      	ldr	r2, [r3, #16]
 8000be0:	78fb      	ldrb	r3, [r7, #3]
 8000be2:	fa22 f303 	lsr.w	r3, r2, r3
 8000be6:	b2db      	uxtb	r3, r3
 8000be8:	f003 0301 	and.w	r3, r3, #1
 8000bec:	73fb      	strb	r3, [r7, #15]

	return value;
 8000bee:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	3714      	adds	r7, #20
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfa:	4770      	bx	lr

08000bfc <RCC_GetPLLOutputClk>:
 * @return								- PLL clock value
 *
 * @note								- None
 *****************************************************************************************************************/
uint32_t RCC_GetPLLOutputClk(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
	// will implement in future

	return 0;
 8000c00:	2300      	movs	r3, #0
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	46bd      	mov	sp, r7
 8000c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0a:	4770      	bx	lr

08000c0c <RCC_GetPCLK1Value>:
 * @return								- APB1 clock value
 *
 * @note								- None
 *****************************************************************************************************************/
uint32_t RCC_GetPCLK1Value(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b084      	sub	sp, #16
 8000c10:	af00      	add	r7, sp, #0
	uint32_t pclk1, SystemClk;

	uint8_t clksrc, temp, ahbp,apb1p;

	clksrc = ((RCC->CFRG >> 2) & 0x3);
 8000c12:	4b26      	ldr	r3, [pc, #152]	@ (8000cac <RCC_GetPCLK1Value+0xa0>)
 8000c14:	689b      	ldr	r3, [r3, #8]
 8000c16:	089b      	lsrs	r3, r3, #2
 8000c18:	b2db      	uxtb	r3, r3
 8000c1a:	f003 0303 	and.w	r3, r3, #3
 8000c1e:	727b      	strb	r3, [r7, #9]

	if (clksrc == 0)
 8000c20:	7a7b      	ldrb	r3, [r7, #9]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d102      	bne.n	8000c2c <RCC_GetPCLK1Value+0x20>
	{	// If clksrc = 0 => which is HSI
		SystemClk = 16000000;
 8000c26:	4b22      	ldr	r3, [pc, #136]	@ (8000cb0 <RCC_GetPCLK1Value+0xa4>)
 8000c28:	60fb      	str	r3, [r7, #12]
 8000c2a:	e00b      	b.n	8000c44 <RCC_GetPCLK1Value+0x38>
	}else if (clksrc == 1)
 8000c2c:	7a7b      	ldrb	r3, [r7, #9]
 8000c2e:	2b01      	cmp	r3, #1
 8000c30:	d102      	bne.n	8000c38 <RCC_GetPCLK1Value+0x2c>
	{	// If clksrc = 1 => which is HSE
		SystemClk = 25000000;
 8000c32:	4b20      	ldr	r3, [pc, #128]	@ (8000cb4 <RCC_GetPCLK1Value+0xa8>)
 8000c34:	60fb      	str	r3, [r7, #12]
 8000c36:	e005      	b.n	8000c44 <RCC_GetPCLK1Value+0x38>
	}else if (clksrc == 2)
 8000c38:	7a7b      	ldrb	r3, [r7, #9]
 8000c3a:	2b02      	cmp	r3, #2
 8000c3c:	d102      	bne.n	8000c44 <RCC_GetPCLK1Value+0x38>
	{
		SystemClk = RCC_GetPLLOutputClk();
 8000c3e:	f7ff ffdd 	bl	8000bfc <RCC_GetPLLOutputClk>
 8000c42:	60f8      	str	r0, [r7, #12]
	}

	// For AHB Prescaler find
	temp = ((RCC->CFRG >> 4) & 0xF);
 8000c44:	4b19      	ldr	r3, [pc, #100]	@ (8000cac <RCC_GetPCLK1Value+0xa0>)
 8000c46:	689b      	ldr	r3, [r3, #8]
 8000c48:	091b      	lsrs	r3, r3, #4
 8000c4a:	b2db      	uxtb	r3, r3
 8000c4c:	f003 030f 	and.w	r3, r3, #15
 8000c50:	723b      	strb	r3, [r7, #8]

	if (temp < 8)
 8000c52:	7a3b      	ldrb	r3, [r7, #8]
 8000c54:	2b07      	cmp	r3, #7
 8000c56:	d802      	bhi.n	8000c5e <RCC_GetPCLK1Value+0x52>
	{
		ahbp = 1;
 8000c58:	2301      	movs	r3, #1
 8000c5a:	72fb      	strb	r3, [r7, #11]
 8000c5c:	e005      	b.n	8000c6a <RCC_GetPCLK1Value+0x5e>
	}else
	{
		ahbp = AHB_PreScaler[temp - 8];
 8000c5e:	7a3b      	ldrb	r3, [r7, #8]
 8000c60:	3b08      	subs	r3, #8
 8000c62:	4a15      	ldr	r2, [pc, #84]	@ (8000cb8 <RCC_GetPCLK1Value+0xac>)
 8000c64:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c68:	72fb      	strb	r3, [r7, #11]
	}

	// For APB1 Prescaler find
	temp = ((RCC->CFRG >> 10) & 0x7);
 8000c6a:	4b10      	ldr	r3, [pc, #64]	@ (8000cac <RCC_GetPCLK1Value+0xa0>)
 8000c6c:	689b      	ldr	r3, [r3, #8]
 8000c6e:	0a9b      	lsrs	r3, r3, #10
 8000c70:	b2db      	uxtb	r3, r3
 8000c72:	f003 0307 	and.w	r3, r3, #7
 8000c76:	723b      	strb	r3, [r7, #8]

	if (temp < 4)
 8000c78:	7a3b      	ldrb	r3, [r7, #8]
 8000c7a:	2b03      	cmp	r3, #3
 8000c7c:	d802      	bhi.n	8000c84 <RCC_GetPCLK1Value+0x78>
	{
		apb1p = 1;
 8000c7e:	2301      	movs	r3, #1
 8000c80:	72bb      	strb	r3, [r7, #10]
 8000c82:	e005      	b.n	8000c90 <RCC_GetPCLK1Value+0x84>
	}else
	{
		apb1p = APB1_PreScaler[temp - 4];
 8000c84:	7a3b      	ldrb	r3, [r7, #8]
 8000c86:	3b04      	subs	r3, #4
 8000c88:	4a0c      	ldr	r2, [pc, #48]	@ (8000cbc <RCC_GetPCLK1Value+0xb0>)
 8000c8a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c8e:	72bb      	strb	r3, [r7, #10]
	}

	pclk1 = (SystemClk/ahbp) / apb1p;
 8000c90:	7afb      	ldrb	r3, [r7, #11]
 8000c92:	68fa      	ldr	r2, [r7, #12]
 8000c94:	fbb2 f2f3 	udiv	r2, r2, r3
 8000c98:	7abb      	ldrb	r3, [r7, #10]
 8000c9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c9e:	607b      	str	r3, [r7, #4]

	return pclk1;
 8000ca0:	687b      	ldr	r3, [r7, #4]
}
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	3710      	adds	r7, #16
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	40023800 	.word	0x40023800
 8000cb0:	00f42400 	.word	0x00f42400
 8000cb4:	017d7840 	.word	0x017d7840
 8000cb8:	20000000 	.word	0x20000000
 8000cbc:	20000010 	.word	0x20000010

08000cc0 <I2C_PeriClockControl>:
 * @return								- None
 *
 * @note								- None
 *****************************************************************************************************************/
void I2C_PeriClockControl(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b083      	sub	sp, #12
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
 8000cc8:	460b      	mov	r3, r1
 8000cca:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000ccc:	78fb      	ldrb	r3, [r7, #3]
 8000cce:	2b01      	cmp	r3, #1
 8000cd0:	d120      	bne.n	8000d14 <I2C_PeriClockControl+0x54>
	{
		if(pI2Cx == I2C1)
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	4a22      	ldr	r2, [pc, #136]	@ (8000d60 <I2C_PeriClockControl+0xa0>)
 8000cd6:	4293      	cmp	r3, r2
 8000cd8:	d106      	bne.n	8000ce8 <I2C_PeriClockControl+0x28>
		{
			I2C1_PCLK_EN();
 8000cda:	4b22      	ldr	r3, [pc, #136]	@ (8000d64 <I2C_PeriClockControl+0xa4>)
 8000cdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cde:	4a21      	ldr	r2, [pc, #132]	@ (8000d64 <I2C_PeriClockControl+0xa4>)
 8000ce0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000ce4:	6413      	str	r3, [r2, #64]	@ 0x40
		}else if(pI2Cx == I2C3)
		{
			I2C3_PCLK_DI();
		}
	}
}
 8000ce6:	e035      	b.n	8000d54 <I2C_PeriClockControl+0x94>
		}else if(pI2Cx == I2C2)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	4a1f      	ldr	r2, [pc, #124]	@ (8000d68 <I2C_PeriClockControl+0xa8>)
 8000cec:	4293      	cmp	r3, r2
 8000cee:	d106      	bne.n	8000cfe <I2C_PeriClockControl+0x3e>
			I2C2_PCLK_EN();
 8000cf0:	4b1c      	ldr	r3, [pc, #112]	@ (8000d64 <I2C_PeriClockControl+0xa4>)
 8000cf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cf4:	4a1b      	ldr	r2, [pc, #108]	@ (8000d64 <I2C_PeriClockControl+0xa4>)
 8000cf6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000cfa:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000cfc:	e02a      	b.n	8000d54 <I2C_PeriClockControl+0x94>
		}else if(pI2Cx == I2C3)
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	4a1a      	ldr	r2, [pc, #104]	@ (8000d6c <I2C_PeriClockControl+0xac>)
 8000d02:	4293      	cmp	r3, r2
 8000d04:	d126      	bne.n	8000d54 <I2C_PeriClockControl+0x94>
			I2C3_PCLK_EN();
 8000d06:	4b17      	ldr	r3, [pc, #92]	@ (8000d64 <I2C_PeriClockControl+0xa4>)
 8000d08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d0a:	4a16      	ldr	r2, [pc, #88]	@ (8000d64 <I2C_PeriClockControl+0xa4>)
 8000d0c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000d10:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000d12:	e01f      	b.n	8000d54 <I2C_PeriClockControl+0x94>
		if(pI2Cx == I2C1)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	4a12      	ldr	r2, [pc, #72]	@ (8000d60 <I2C_PeriClockControl+0xa0>)
 8000d18:	4293      	cmp	r3, r2
 8000d1a:	d106      	bne.n	8000d2a <I2C_PeriClockControl+0x6a>
			I2C1_PCLK_DI();
 8000d1c:	4b11      	ldr	r3, [pc, #68]	@ (8000d64 <I2C_PeriClockControl+0xa4>)
 8000d1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d20:	4a10      	ldr	r2, [pc, #64]	@ (8000d64 <I2C_PeriClockControl+0xa4>)
 8000d22:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8000d26:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000d28:	e014      	b.n	8000d54 <I2C_PeriClockControl+0x94>
		}else if(pI2Cx == I2C2)
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	4a0e      	ldr	r2, [pc, #56]	@ (8000d68 <I2C_PeriClockControl+0xa8>)
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	d106      	bne.n	8000d40 <I2C_PeriClockControl+0x80>
			I2C2_PCLK_DI();
 8000d32:	4b0c      	ldr	r3, [pc, #48]	@ (8000d64 <I2C_PeriClockControl+0xa4>)
 8000d34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d36:	4a0b      	ldr	r2, [pc, #44]	@ (8000d64 <I2C_PeriClockControl+0xa4>)
 8000d38:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8000d3c:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000d3e:	e009      	b.n	8000d54 <I2C_PeriClockControl+0x94>
		}else if(pI2Cx == I2C3)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	4a0a      	ldr	r2, [pc, #40]	@ (8000d6c <I2C_PeriClockControl+0xac>)
 8000d44:	4293      	cmp	r3, r2
 8000d46:	d105      	bne.n	8000d54 <I2C_PeriClockControl+0x94>
			I2C3_PCLK_DI();
 8000d48:	4b06      	ldr	r3, [pc, #24]	@ (8000d64 <I2C_PeriClockControl+0xa4>)
 8000d4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d4c:	4a05      	ldr	r2, [pc, #20]	@ (8000d64 <I2C_PeriClockControl+0xa4>)
 8000d4e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8000d52:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000d54:	bf00      	nop
 8000d56:	370c      	adds	r7, #12
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5e:	4770      	bx	lr
 8000d60:	40005400 	.word	0x40005400
 8000d64:	40023800 	.word	0x40023800
 8000d68:	40005800 	.word	0x40005800
 8000d6c:	40005c00 	.word	0x40005c00

08000d70 <I2C_Init>:
 * @return								- None
 *
 * @note								- None
 *****************************************************************************************************************/
void I2C_Init(I2C_Handle_t *pI2CHandle)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b084      	sub	sp, #16
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
	I2C_PeriClockControl(pI2CHandle->pI2Cx, ENABLE);
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	2101      	movs	r1, #1
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f7ff ff9e 	bl	8000cc0 <I2C_PeriClockControl>

	// Configure the I2C_CR1
	uint32_t tempreg = 0;
 8000d84:	2300      	movs	r3, #0
 8000d86:	60fb      	str	r3, [r7, #12]

	// Acknowledge control bit
	tempreg |= (pI2CHandle->I2C_Config.I2C_AckCtrl << I2C_CR1_ACK);
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	7a5b      	ldrb	r3, [r3, #9]
 8000d8c:	029b      	lsls	r3, r3, #10
 8000d8e:	68fa      	ldr	r2, [r7, #12]
 8000d90:	4313      	orrs	r3, r2
 8000d92:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->CR1 = tempreg;
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	68fa      	ldr	r2, [r7, #12]
 8000d9a:	601a      	str	r2, [r3, #0]

	// Configure the FREQ field in CR2
	tempreg = 0;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	60fb      	str	r3, [r7, #12]
	tempreg |= (RCC_GetPCLK1Value() / 1000000U);
 8000da0:	f7ff ff34 	bl	8000c0c <RCC_GetPCLK1Value>
 8000da4:	4603      	mov	r3, r0
 8000da6:	4a46      	ldr	r2, [pc, #280]	@ (8000ec0 <I2C_Init+0x150>)
 8000da8:	fba2 2303 	umull	r2, r3, r2, r3
 8000dac:	0c9b      	lsrs	r3, r3, #18
 8000dae:	68fa      	ldr	r2, [r7, #12]
 8000db0:	4313      	orrs	r3, r2
 8000db2:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->CR2 = (tempreg & 0x3F);
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	68fa      	ldr	r2, [r7, #12]
 8000dba:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8000dbe:	605a      	str	r2, [r3, #4]

	// Program the device own address
	tempreg |= pI2CHandle->I2C_Config.I2C_DeviceAddr << I2C_OAR1_ADD71;
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	7a1b      	ldrb	r3, [r3, #8]
 8000dc4:	005b      	lsls	r3, r3, #1
 8000dc6:	68fa      	ldr	r2, [r7, #12]
 8000dc8:	4313      	orrs	r3, r2
 8000dca:	60fb      	str	r3, [r7, #12]
	tempreg |= (1 << 14); //Mandatory from RM
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000dd2:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->OAR1 = tempreg;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	68fa      	ldr	r2, [r7, #12]
 8000dda:	609a      	str	r2, [r3, #8]

	// CCR Calculations
	uint16_t ccr_value = 0;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	817b      	strh	r3, [r7, #10]
	tempreg = 0;
 8000de0:	2300      	movs	r3, #0
 8000de2:	60fb      	str	r3, [r7, #12]
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	685b      	ldr	r3, [r3, #4]
 8000de8:	4a36      	ldr	r2, [pc, #216]	@ (8000ec4 <I2C_Init+0x154>)
 8000dea:	4293      	cmp	r3, r2
 8000dec:	d80f      	bhi.n	8000e0e <I2C_Init+0x9e>
		 * if Thigh = Tlow in SCL, then
		 * Tscl = 2 * CCR * Tpclk1
		 * CCR = Tscl / 2 * Tpclk1
		 * CCR = Fpclk1 / 2 * Fscl
		 */
		ccr_value = RCC_GetPCLK1Value() / (2 * pI2CHandle->I2C_Config.I2C_SCLSpeed);
 8000dee:	f7ff ff0d 	bl	8000c0c <RCC_GetPCLK1Value>
 8000df2:	4602      	mov	r2, r0
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	005b      	lsls	r3, r3, #1
 8000dfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dfe:	817b      	strh	r3, [r7, #10]
		tempreg |= (ccr_value & 0xFFF);
 8000e00:	897b      	ldrh	r3, [r7, #10]
 8000e02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000e06:	68fa      	ldr	r2, [r7, #12]
 8000e08:	4313      	orrs	r3, r2
 8000e0a:	60fb      	str	r3, [r7, #12]
 8000e0c:	e02c      	b.n	8000e68 <I2C_Init+0xf8>
	}else
	{
		// Mode is Fast mode, calculation is below
		tempreg |= (1 << I2C_CCR_F_S);
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000e14:	60fb      	str	r3, [r7, #12]
		tempreg |= (pI2CHandle->I2C_Config.I2C_FMDutyCycle << I2C_CCR_DUTY);
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	7a9b      	ldrb	r3, [r3, #10]
 8000e1a:	039b      	lsls	r3, r3, #14
 8000e1c:	68fa      	ldr	r2, [r7, #12]
 8000e1e:	4313      	orrs	r3, r2
 8000e20:	60fb      	str	r3, [r7, #12]
		/*
		 * if Tlow = 2 * Thigh, then Duty = 0
		 * if Tlow = 1.7 * Thigh, then Duty = 1
		 */

		if(pI2CHandle->I2C_Config.I2C_FMDutyCycle == I2C_FM_DUTY_2)
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	7a9b      	ldrb	r3, [r3, #10]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d10b      	bne.n	8000e42 <I2C_Init+0xd2>
		{
			/*
			 * Duty = 0
			 * CCR = Fpclk1 / 3 * Fscl
			 */
			ccr_value = RCC_GetPCLK1Value() / (3 * pI2CHandle->I2C_Config.I2C_SCLSpeed);
 8000e2a:	f7ff feef 	bl	8000c0c <RCC_GetPCLK1Value>
 8000e2e:	4601      	mov	r1, r0
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	685a      	ldr	r2, [r3, #4]
 8000e34:	4613      	mov	r3, r2
 8000e36:	005b      	lsls	r3, r3, #1
 8000e38:	4413      	add	r3, r2
 8000e3a:	fbb1 f3f3 	udiv	r3, r1, r3
 8000e3e:	817b      	strh	r3, [r7, #10]
 8000e40:	e00c      	b.n	8000e5c <I2C_Init+0xec>
		{
			/*
			 * Duty = 1
			 * CCR = Fpclk1 / 25 * Fscl
			 */
			ccr_value = RCC_GetPCLK1Value() / (25 * pI2CHandle->I2C_Config.I2C_SCLSpeed);
 8000e42:	f7ff fee3 	bl	8000c0c <RCC_GetPCLK1Value>
 8000e46:	4601      	mov	r1, r0
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	685a      	ldr	r2, [r3, #4]
 8000e4c:	4613      	mov	r3, r2
 8000e4e:	009b      	lsls	r3, r3, #2
 8000e50:	4413      	add	r3, r2
 8000e52:	009a      	lsls	r2, r3, #2
 8000e54:	4413      	add	r3, r2
 8000e56:	fbb1 f3f3 	udiv	r3, r1, r3
 8000e5a:	817b      	strh	r3, [r7, #10]
		}

		tempreg |= (ccr_value & 0xFFF);
 8000e5c:	897b      	ldrh	r3, [r7, #10]
 8000e5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000e62:	68fa      	ldr	r2, [r7, #12]
 8000e64:	4313      	orrs	r3, r2
 8000e66:	60fb      	str	r3, [r7, #12]

	}
	pI2CHandle->pI2Cx->CCR = tempreg;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	68fa      	ldr	r2, [r7, #12]
 8000e6e:	61da      	str	r2, [r3, #28]

	// Trise Configuration
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	685b      	ldr	r3, [r3, #4]
 8000e74:	4a13      	ldr	r2, [pc, #76]	@ (8000ec4 <I2C_Init+0x154>)
 8000e76:	4293      	cmp	r3, r2
 8000e78:	d809      	bhi.n	8000e8e <I2C_Init+0x11e>
	{
		// Standard mode
		tempreg = (RCC_GetPCLK1Value() / 1000000U) + 1;
 8000e7a:	f7ff fec7 	bl	8000c0c <RCC_GetPCLK1Value>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	4a0f      	ldr	r2, [pc, #60]	@ (8000ec0 <I2C_Init+0x150>)
 8000e82:	fba2 2303 	umull	r2, r3, r2, r3
 8000e86:	0c9b      	lsrs	r3, r3, #18
 8000e88:	3301      	adds	r3, #1
 8000e8a:	60fb      	str	r3, [r7, #12]
		tempreg = ((RCC_GetPCLK1Value() * 300) / 1000000000U) + 1;
		pI2CHandle->pI2Cx->TRISE = (tempreg & 0x3F);

	}

}
 8000e8c:	e013      	b.n	8000eb6 <I2C_Init+0x146>
		tempreg = ((RCC_GetPCLK1Value() * 300) / 1000000000U) + 1;
 8000e8e:	f7ff febd 	bl	8000c0c <RCC_GetPCLK1Value>
 8000e92:	4603      	mov	r3, r0
 8000e94:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8000e98:	fb02 f303 	mul.w	r3, r2, r3
 8000e9c:	0a5b      	lsrs	r3, r3, #9
 8000e9e:	4a0a      	ldr	r2, [pc, #40]	@ (8000ec8 <I2C_Init+0x158>)
 8000ea0:	fba2 2303 	umull	r2, r3, r2, r3
 8000ea4:	09db      	lsrs	r3, r3, #7
 8000ea6:	3301      	adds	r3, #1
 8000ea8:	60fb      	str	r3, [r7, #12]
		pI2CHandle->pI2Cx->TRISE = (tempreg & 0x3F);
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	68fa      	ldr	r2, [r7, #12]
 8000eb0:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8000eb4:	621a      	str	r2, [r3, #32]
}
 8000eb6:	bf00      	nop
 8000eb8:	3710      	adds	r7, #16
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	431bde83 	.word	0x431bde83
 8000ec4:	000186a0 	.word	0x000186a0
 8000ec8:	00044b83 	.word	0x00044b83

08000ecc <I2C_MasterSendDataIT>:
 * @return								- None
 *
 * @note								- Non-Blocking Method
 *****************************************************************************************************************/
uint8_t I2C_MasterSendDataIT(I2C_Handle_t *pI2CHandle, uint8_t *pTxBuffer, uint8_t Len, uint8_t SlaveAddr, uint8_t Sr)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b086      	sub	sp, #24
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	60f8      	str	r0, [r7, #12]
 8000ed4:	60b9      	str	r1, [r7, #8]
 8000ed6:	4611      	mov	r1, r2
 8000ed8:	461a      	mov	r2, r3
 8000eda:	460b      	mov	r3, r1
 8000edc:	71fb      	strb	r3, [r7, #7]
 8000ede:	4613      	mov	r3, r2
 8000ee0:	71bb      	strb	r3, [r7, #6]
	uint8_t busyState = pI2CHandle->TxRxState;
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	7f1b      	ldrb	r3, [r3, #28]
 8000ee6:	75fb      	strb	r3, [r7, #23]

	if( (busyState != I2C_BUSY_IN_TX) && (busyState != I2C_BUSY_IN_RX))
 8000ee8:	7dfb      	ldrb	r3, [r7, #23]
 8000eea:	2b02      	cmp	r3, #2
 8000eec:	d030      	beq.n	8000f50 <I2C_MasterSendDataIT+0x84>
 8000eee:	7dfb      	ldrb	r3, [r7, #23]
 8000ef0:	2b01      	cmp	r3, #1
 8000ef2:	d02d      	beq.n	8000f50 <I2C_MasterSendDataIT+0x84>
	{
		pI2CHandle->pTxBuffer = pTxBuffer;
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	68ba      	ldr	r2, [r7, #8]
 8000ef8:	60da      	str	r2, [r3, #12]
		pI2CHandle->TxLen = Len;
 8000efa:	79fa      	ldrb	r2, [r7, #7]
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	615a      	str	r2, [r3, #20]
		pI2CHandle->TxRxState = I2C_BUSY_IN_TX;
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	2202      	movs	r2, #2
 8000f04:	771a      	strb	r2, [r3, #28]
		pI2CHandle->DevAddr = SlaveAddr;
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	79ba      	ldrb	r2, [r7, #6]
 8000f0a:	775a      	strb	r2, [r3, #29]
		pI2CHandle->Sr = Sr;
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000f12:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

		//Implement code to Generate START Condition
		I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f000 fabe 	bl	800149c <I2C_GenerateStartCondition>

		//Implement the code to enable ITBUFEN Control Bit
		pI2CHandle->pI2Cx->CR2 |= ( 1 << I2C_CR2_ITBUFEN);
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	685a      	ldr	r2, [r3, #4]
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8000f2e:	605a      	str	r2, [r3, #4]

		//Implement the code to enable ITEVTEN Control Bit
		pI2CHandle->pI2Cx->CR2 |= (1 << I2C_CR2_ITEVTEN);
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	685a      	ldr	r2, [r3, #4]
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000f3e:	605a      	str	r2, [r3, #4]

		//Implement the code to enable ITERREN Control Bit
		pI2CHandle->pI2Cx->CR2 |= (1 << I2C_CR2_ITERREN);
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	685a      	ldr	r2, [r3, #4]
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8000f4e:	605a      	str	r2, [r3, #4]

	}

	return busyState;
 8000f50:	7dfb      	ldrb	r3, [r7, #23]

}
 8000f52:	4618      	mov	r0, r3
 8000f54:	3718      	adds	r7, #24
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}

08000f5a <I2C_MasterReceiveDataIT>:
 * @return								- None
 *
 * @note								- Non-Blocking Method
 *****************************************************************************************************************/
uint8_t I2C_MasterReceiveDataIT(I2C_Handle_t *pI2CHandle, uint8_t *pRxBuffer, uint8_t Len, uint8_t SlaveAddr, uint8_t Sr)
{
 8000f5a:	b580      	push	{r7, lr}
 8000f5c:	b086      	sub	sp, #24
 8000f5e:	af00      	add	r7, sp, #0
 8000f60:	60f8      	str	r0, [r7, #12]
 8000f62:	60b9      	str	r1, [r7, #8]
 8000f64:	4611      	mov	r1, r2
 8000f66:	461a      	mov	r2, r3
 8000f68:	460b      	mov	r3, r1
 8000f6a:	71fb      	strb	r3, [r7, #7]
 8000f6c:	4613      	mov	r3, r2
 8000f6e:	71bb      	strb	r3, [r7, #6]
	uint8_t busyState = pI2CHandle->TxRxState;
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	7f1b      	ldrb	r3, [r3, #28]
 8000f74:	75fb      	strb	r3, [r7, #23]

	if((busyState != I2C_BUSY_IN_TX) && (busyState != I2C_BUSY_IN_RX))
 8000f76:	7dfb      	ldrb	r3, [r7, #23]
 8000f78:	2b02      	cmp	r3, #2
 8000f7a:	d033      	beq.n	8000fe4 <I2C_MasterReceiveDataIT+0x8a>
 8000f7c:	7dfb      	ldrb	r3, [r7, #23]
 8000f7e:	2b01      	cmp	r3, #1
 8000f80:	d030      	beq.n	8000fe4 <I2C_MasterReceiveDataIT+0x8a>
	{
		pI2CHandle->pRxBuffer = pRxBuffer;
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	68ba      	ldr	r2, [r7, #8]
 8000f86:	611a      	str	r2, [r3, #16]
		pI2CHandle->RxLen = Len;
 8000f88:	79fa      	ldrb	r2, [r7, #7]
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	619a      	str	r2, [r3, #24]
		pI2CHandle->TxRxState = I2C_BUSY_IN_RX;
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	2201      	movs	r2, #1
 8000f92:	771a      	strb	r2, [r3, #28]
		pI2CHandle->RxSize = Len;
 8000f94:	79fa      	ldrb	r2, [r7, #7]
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	621a      	str	r2, [r3, #32]
		pI2CHandle->DevAddr = SlaveAddr;
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	79ba      	ldrb	r2, [r7, #6]
 8000f9e:	775a      	strb	r2, [r3, #29]
		pI2CHandle->Sr = Sr;
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000fa6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

		//Implement code to Generate START Condition
		I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f000 fa74 	bl	800149c <I2C_GenerateStartCondition>

		//Implement the code to enable ITBUFEN Control Bit
		pI2CHandle->pI2Cx->CR2 |= ( 1 << I2C_CR2_ITBUFEN);
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	685a      	ldr	r2, [r3, #4]
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8000fc2:	605a      	str	r2, [r3, #4]

		//Implement the code to enable ITEVTEN Control Bit
		pI2CHandle->pI2Cx->CR2 |= (1 << I2C_CR2_ITEVTEN);
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	685a      	ldr	r2, [r3, #4]
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000fd2:	605a      	str	r2, [r3, #4]

		//Implement the code to enable ITERREN Control Bit
		pI2CHandle->pI2Cx->CR2 |= (1 << I2C_CR2_ITERREN);
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	685a      	ldr	r2, [r3, #4]
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8000fe2:	605a      	str	r2, [r3, #4]

	}

	return busyState;
 8000fe4:	7dfb      	ldrb	r3, [r7, #23]
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	3718      	adds	r7, #24
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
	...

08000ff0 <I2C_IRQInterruptConfig>:
 * @return								- None
 *
 * @note								- None
 *****************************************************************************************************************/
void I2C_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnorDi)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	460a      	mov	r2, r1
 8000ffa:	71fb      	strb	r3, [r7, #7]
 8000ffc:	4613      	mov	r3, r2
 8000ffe:	71bb      	strb	r3, [r7, #6]
	if(EnorDi == ENABLE){
 8001000:	79bb      	ldrb	r3, [r7, #6]
 8001002:	2b01      	cmp	r3, #1
 8001004:	d133      	bne.n	800106e <I2C_IRQInterruptConfig+0x7e>
		if(IRQNumber <= 31)
 8001006:	79fb      	ldrb	r3, [r7, #7]
 8001008:	2b1f      	cmp	r3, #31
 800100a:	d80a      	bhi.n	8001022 <I2C_IRQInterruptConfig+0x32>
		{
			// Program ISER Register (bewteen 0 - 31)
			*NVIC_ISER0 |= (1 << IRQNumber);
 800100c:	4b35      	ldr	r3, [pc, #212]	@ (80010e4 <I2C_IRQInterruptConfig+0xf4>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	79fa      	ldrb	r2, [r7, #7]
 8001012:	2101      	movs	r1, #1
 8001014:	fa01 f202 	lsl.w	r2, r1, r2
 8001018:	4611      	mov	r1, r2
 800101a:	4a32      	ldr	r2, [pc, #200]	@ (80010e4 <I2C_IRQInterruptConfig+0xf4>)
 800101c:	430b      	orrs	r3, r1
 800101e:	6013      	str	r3, [r2, #0]
		{
			// Program ISER2 Register (bewteen 64 - 95)
			 * NVIC_ICER2 |= (1 << (IRQNumber % 64));
		}
	}
}
 8001020:	e059      	b.n	80010d6 <I2C_IRQInterruptConfig+0xe6>
		else if(IRQNumber >= 31 && IRQNumber < 64)
 8001022:	79fb      	ldrb	r3, [r7, #7]
 8001024:	2b1e      	cmp	r3, #30
 8001026:	d90f      	bls.n	8001048 <I2C_IRQInterruptConfig+0x58>
 8001028:	79fb      	ldrb	r3, [r7, #7]
 800102a:	2b3f      	cmp	r3, #63	@ 0x3f
 800102c:	d80c      	bhi.n	8001048 <I2C_IRQInterruptConfig+0x58>
			 * NVIC_ISER1 |= (1 << (IRQNumber % 32));
 800102e:	4b2e      	ldr	r3, [pc, #184]	@ (80010e8 <I2C_IRQInterruptConfig+0xf8>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	79fa      	ldrb	r2, [r7, #7]
 8001034:	f002 021f 	and.w	r2, r2, #31
 8001038:	2101      	movs	r1, #1
 800103a:	fa01 f202 	lsl.w	r2, r1, r2
 800103e:	4611      	mov	r1, r2
 8001040:	4a29      	ldr	r2, [pc, #164]	@ (80010e8 <I2C_IRQInterruptConfig+0xf8>)
 8001042:	430b      	orrs	r3, r1
 8001044:	6013      	str	r3, [r2, #0]
 8001046:	e046      	b.n	80010d6 <I2C_IRQInterruptConfig+0xe6>
		else if(IRQNumber >= 64 && IRQNumber < 96)
 8001048:	79fb      	ldrb	r3, [r7, #7]
 800104a:	2b3f      	cmp	r3, #63	@ 0x3f
 800104c:	d943      	bls.n	80010d6 <I2C_IRQInterruptConfig+0xe6>
 800104e:	79fb      	ldrb	r3, [r7, #7]
 8001050:	2b5f      	cmp	r3, #95	@ 0x5f
 8001052:	d840      	bhi.n	80010d6 <I2C_IRQInterruptConfig+0xe6>
			 * NVIC_ISER2 |= (1 << (IRQNumber % 64));
 8001054:	4b25      	ldr	r3, [pc, #148]	@ (80010ec <I2C_IRQInterruptConfig+0xfc>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	79fa      	ldrb	r2, [r7, #7]
 800105a:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800105e:	2101      	movs	r1, #1
 8001060:	fa01 f202 	lsl.w	r2, r1, r2
 8001064:	4611      	mov	r1, r2
 8001066:	4a21      	ldr	r2, [pc, #132]	@ (80010ec <I2C_IRQInterruptConfig+0xfc>)
 8001068:	430b      	orrs	r3, r1
 800106a:	6013      	str	r3, [r2, #0]
}
 800106c:	e033      	b.n	80010d6 <I2C_IRQInterruptConfig+0xe6>
		if(IRQNumber <= 31)
 800106e:	79fb      	ldrb	r3, [r7, #7]
 8001070:	2b1f      	cmp	r3, #31
 8001072:	d80a      	bhi.n	800108a <I2C_IRQInterruptConfig+0x9a>
			*NVIC_ICER0 |= (1 << IRQNumber);
 8001074:	4b1e      	ldr	r3, [pc, #120]	@ (80010f0 <I2C_IRQInterruptConfig+0x100>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	79fa      	ldrb	r2, [r7, #7]
 800107a:	2101      	movs	r1, #1
 800107c:	fa01 f202 	lsl.w	r2, r1, r2
 8001080:	4611      	mov	r1, r2
 8001082:	4a1b      	ldr	r2, [pc, #108]	@ (80010f0 <I2C_IRQInterruptConfig+0x100>)
 8001084:	430b      	orrs	r3, r1
 8001086:	6013      	str	r3, [r2, #0]
}
 8001088:	e025      	b.n	80010d6 <I2C_IRQInterruptConfig+0xe6>
		else if(IRQNumber >= 31 && IRQNumber < 64)
 800108a:	79fb      	ldrb	r3, [r7, #7]
 800108c:	2b1e      	cmp	r3, #30
 800108e:	d90f      	bls.n	80010b0 <I2C_IRQInterruptConfig+0xc0>
 8001090:	79fb      	ldrb	r3, [r7, #7]
 8001092:	2b3f      	cmp	r3, #63	@ 0x3f
 8001094:	d80c      	bhi.n	80010b0 <I2C_IRQInterruptConfig+0xc0>
			 * NVIC_ICER1 |= (1 << (IRQNumber % 32));
 8001096:	4b17      	ldr	r3, [pc, #92]	@ (80010f4 <I2C_IRQInterruptConfig+0x104>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	79fa      	ldrb	r2, [r7, #7]
 800109c:	f002 021f 	and.w	r2, r2, #31
 80010a0:	2101      	movs	r1, #1
 80010a2:	fa01 f202 	lsl.w	r2, r1, r2
 80010a6:	4611      	mov	r1, r2
 80010a8:	4a12      	ldr	r2, [pc, #72]	@ (80010f4 <I2C_IRQInterruptConfig+0x104>)
 80010aa:	430b      	orrs	r3, r1
 80010ac:	6013      	str	r3, [r2, #0]
 80010ae:	e012      	b.n	80010d6 <I2C_IRQInterruptConfig+0xe6>
		else if(IRQNumber >= 64 && IRQNumber < 96)
 80010b0:	79fb      	ldrb	r3, [r7, #7]
 80010b2:	2b3f      	cmp	r3, #63	@ 0x3f
 80010b4:	d90f      	bls.n	80010d6 <I2C_IRQInterruptConfig+0xe6>
 80010b6:	79fb      	ldrb	r3, [r7, #7]
 80010b8:	2b5f      	cmp	r3, #95	@ 0x5f
 80010ba:	d80c      	bhi.n	80010d6 <I2C_IRQInterruptConfig+0xe6>
			 * NVIC_ICER2 |= (1 << (IRQNumber % 64));
 80010bc:	4b0e      	ldr	r3, [pc, #56]	@ (80010f8 <I2C_IRQInterruptConfig+0x108>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	79fa      	ldrb	r2, [r7, #7]
 80010c2:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80010c6:	2101      	movs	r1, #1
 80010c8:	fa01 f202 	lsl.w	r2, r1, r2
 80010cc:	4611      	mov	r1, r2
 80010ce:	4a0a      	ldr	r2, [pc, #40]	@ (80010f8 <I2C_IRQInterruptConfig+0x108>)
 80010d0:	430b      	orrs	r3, r1
 80010d2:	6013      	str	r3, [r2, #0]
}
 80010d4:	e7ff      	b.n	80010d6 <I2C_IRQInterruptConfig+0xe6>
 80010d6:	bf00      	nop
 80010d8:	370c      	adds	r7, #12
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop
 80010e4:	e000e100 	.word	0xe000e100
 80010e8:	e000e104 	.word	0xe000e104
 80010ec:	e000e108 	.word	0xe000e108
 80010f0:	e000e180 	.word	0xe000e180
 80010f4:	e000e184 	.word	0xe000e184
 80010f8:	e000e188 	.word	0xe000e188

080010fc <I2C_EV_IRQHandling>:
 * @return								- None
 *
 * @note								- None
 *****************************************************************************************************************/
void I2C_EV_IRQHandling(I2C_Handle_t *pI2CHandle)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b086      	sub	sp, #24
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
	// Interrupt handling for both master and slave mode of a device
	uint32_t temp1, temp2, temp3;

	temp1 = pI2CHandle->pI2Cx->CR2 & (1 << I2C_CR2_ITEVTEN);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800110e:	617b      	str	r3, [r7, #20]
	temp2 = pI2CHandle->pI2Cx->CR2 & (1 << I2C_CR2_ITBUFEN);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800111a:	613b      	str	r3, [r7, #16]

	temp3 = pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_SB);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	695b      	ldr	r3, [r3, #20]
 8001122:	f003 0301 	and.w	r3, r3, #1
 8001126:	60fb      	str	r3, [r7, #12]
/***********************Check for start bit event handling************************************/
	// 1. Handle for an event generated by SB event
	// Note*: Start bit flag is only applicant in master mode
	if(temp1 && temp3)
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d01b      	beq.n	8001166 <I2C_EV_IRQHandling+0x6a>
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d018      	beq.n	8001166 <I2C_EV_IRQHandling+0x6a>
	{
		// The interrupt is generated because of SB event
		// This block will not be executed in slave mode, because for slave SB is always zero
		// In this block lets executed the address phase
		if(pI2CHandle->TxRxState == I2C_BUSY_IN_TX)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	7f1b      	ldrb	r3, [r3, #28]
 8001138:	2b02      	cmp	r3, #2
 800113a:	d108      	bne.n	800114e <I2C_EV_IRQHandling+0x52>
		{
			I2C_ExecuteAddressPhase(pI2CHandle->pI2Cx, pI2CHandle->DevAddr, I2C_WRITE);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	6818      	ldr	r0, [r3, #0]
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	7f5b      	ldrb	r3, [r3, #29]
 8001144:	2200      	movs	r2, #0
 8001146:	4619      	mov	r1, r3
 8001148:	f000 f9b8 	bl	80014bc <I2C_ExecuteAddressPhase>
 800114c:	e00b      	b.n	8001166 <I2C_EV_IRQHandling+0x6a>
		}
		else if(pI2CHandle->TxRxState == I2C_BUSY_IN_RX)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	7f1b      	ldrb	r3, [r3, #28]
 8001152:	2b01      	cmp	r3, #1
 8001154:	d107      	bne.n	8001166 <I2C_EV_IRQHandling+0x6a>
		{
			I2C_ExecuteAddressPhase(pI2CHandle->pI2Cx, pI2CHandle->DevAddr, I2C_READ);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	6818      	ldr	r0, [r3, #0]
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	7f5b      	ldrb	r3, [r3, #29]
 800115e:	2201      	movs	r2, #1
 8001160:	4619      	mov	r1, r3
 8001162:	f000 f9ab 	bl	80014bc <I2C_ExecuteAddressPhase>
		}
	}

	temp3 = pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_ADDR);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	695b      	ldr	r3, [r3, #20]
 800116c:	f003 0302 	and.w	r3, r3, #2
 8001170:	60fb      	str	r3, [r7, #12]
/***********************Check for Address bit event handling************************************/
	// 2. Handle for interrupt generated by ADDR Event
	// Note*: When master mode - Address is sent
	// 		  When slave mode  - Address matched with own address
	if(temp1 && temp3)
 8001172:	697b      	ldr	r3, [r7, #20]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d005      	beq.n	8001184 <I2C_EV_IRQHandling+0x88>
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d002      	beq.n	8001184 <I2C_EV_IRQHandling+0x88>
	{
		// The interrupt is generated because of ADDR event flag
		I2C_ClearADDRFlag(pI2CHandle);
 800117e:	6878      	ldr	r0, [r7, #4]
 8001180:	f000 f9c7 	bl	8001512 <I2C_ClearADDRFlag>
	}

	temp3 = pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_BTF);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	695b      	ldr	r3, [r3, #20]
 800118a:	f003 0304 	and.w	r3, r3, #4
 800118e:	60fb      	str	r3, [r7, #12]
/***********************Check for Byte transfer finished event handling************************************/
	// 3. Handle for interrupt generated by BTF(Byte transfer finished) event
	if(temp1 && temp3)
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d022      	beq.n	80011dc <I2C_EV_IRQHandling+0xe0>
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d01f      	beq.n	80011dc <I2C_EV_IRQHandling+0xe0>
	{
		// The interrupt is generated because of BTF Event [Byte transfer finished]
		if(pI2CHandle->TxRxState == I2C_BUSY_IN_TX)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	7f1b      	ldrb	r3, [r3, #28]
 80011a0:	2b02      	cmp	r3, #2
 80011a2:	d11b      	bne.n	80011dc <I2C_EV_IRQHandling+0xe0>
		{
			// Make sure that TXE is also set
			if(pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_TxE))
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	695b      	ldr	r3, [r3, #20]
 80011aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d014      	beq.n	80011dc <I2C_EV_IRQHandling+0xe0>
			{
				// BTF, TXE = 1
				if(pI2CHandle->TxLen == 0)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	695b      	ldr	r3, [r3, #20]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d110      	bne.n	80011dc <I2C_EV_IRQHandling+0xe0>
				{
					// 1. Generate the stop condition
					if(pI2CHandle->Sr == I2C_DISABLE_SR)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d104      	bne.n	80011ce <I2C_EV_IRQHandling+0xd2>
					{
						I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4618      	mov	r0, r3
 80011ca:	f000 f9d9 	bl	8001580 <I2C_GenerateStopCondition>
					}

					// 2. Reset all the member elements of the handle structure
					I2C_CloseSendData(pI2CHandle);
 80011ce:	6878      	ldr	r0, [r7, #4]
 80011d0:	f000 fa02 	bl	80015d8 <I2C_CloseSendData>

					// 3. Notify the application about transmission complete
					I2C_ApplicationEventCallback(pI2CHandle, I2C_EV_TX_CMPLT);
 80011d4:	2100      	movs	r1, #0
 80011d6:	6878      	ldr	r0, [r7, #4]
 80011d8:	f7ff f966 	bl	80004a8 <I2C_ApplicationEventCallback>
			;
		}

	}

	temp3 = pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_STOPF);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	695b      	ldr	r3, [r3, #20]
 80011e2:	f003 0310 	and.w	r3, r3, #16
 80011e6:	60fb      	str	r3, [r7, #12]
/***********************Check for STOPF bit event handling************************************/
	// 4. Handle for interrupt generated by STOPF event
	// Note*: stop detection flag is only applicable in slave mode. For master this flag will
	if(temp1 && temp3)
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d00c      	beq.n	8001208 <I2C_EV_IRQHandling+0x10c>
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d009      	beq.n	8001208 <I2C_EV_IRQHandling+0x10c>
	{
		// STOPF flag is set
		// Clear the STOPF (i.e 1) Read SR1 & Write to CR1
		pI2CHandle->pI2Cx->CR1 |= 0x0000;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681a      	ldr	r2, [r3, #0]
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	6812      	ldr	r2, [r2, #0]
 80011fe:	601a      	str	r2, [r3, #0]

		// Notify the application that STOP is detected
		I2C_ApplicationEventCallback(pI2CHandle, I2C_EV_STOP);
 8001200:	2102      	movs	r1, #2
 8001202:	6878      	ldr	r0, [r7, #4]
 8001204:	f7ff f950 	bl	80004a8 <I2C_ApplicationEventCallback>
	}

	temp3 = pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_TxE);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	695b      	ldr	r3, [r3, #20]
 800120e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001212:	60fb      	str	r3, [r7, #12]
/***********************Check for Transmit bit event handling************************************/
	// 5. Handle for interrupt generated by TXE event
	if(temp1 && temp2 && temp3)
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d013      	beq.n	8001242 <I2C_EV_IRQHandling+0x146>
 800121a:	693b      	ldr	r3, [r7, #16]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d010      	beq.n	8001242 <I2C_EV_IRQHandling+0x146>
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d00d      	beq.n	8001242 <I2C_EV_IRQHandling+0x146>
	{
		// Check for device mode, if master only do the below logic
		if(pI2CHandle->pI2Cx->SR2 & (1 << I2C_SR2_MSL))
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	699b      	ldr	r3, [r3, #24]
 800122c:	f003 0301 	and.w	r3, r3, #1
 8001230:	2b00      	cmp	r3, #0
 8001232:	d006      	beq.n	8001242 <I2C_EV_IRQHandling+0x146>
		{
			// TXE flag is set
			// We have to do the data transmission
			if(pI2CHandle->TxRxState == I2C_BUSY_IN_TX)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	7f1b      	ldrb	r3, [r3, #28]
 8001238:	2b02      	cmp	r3, #2
 800123a:	d102      	bne.n	8001242 <I2C_EV_IRQHandling+0x146>
			{
				I2C_MasterHandleTXEInterrupt(pI2CHandle);
 800123c:	6878      	ldr	r0, [r7, #4]
 800123e:	f000 f8c3 	bl	80013c8 <I2C_MasterHandleTXEInterrupt>
			}
		}
	}

	temp3 = pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_RxNE);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	695b      	ldr	r3, [r3, #20]
 8001248:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800124c:	60fb      	str	r3, [r7, #12]
/***********************Check for Receive bit event handling************************************/
	if(temp1 && temp2 && temp3)
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d013      	beq.n	800127c <I2C_EV_IRQHandling+0x180>
 8001254:	693b      	ldr	r3, [r7, #16]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d010      	beq.n	800127c <I2C_EV_IRQHandling+0x180>
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d00d      	beq.n	800127c <I2C_EV_IRQHandling+0x180>
	{
		if(pI2CHandle->pI2Cx->SR2 & (1 << I2C_SR2_MSL))
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	699b      	ldr	r3, [r3, #24]
 8001266:	f003 0301 	and.w	r3, r3, #1
 800126a:	2b00      	cmp	r3, #0
 800126c:	d006      	beq.n	800127c <I2C_EV_IRQHandling+0x180>
		{
			// The device is master
			// RXNE flag is set
			if(pI2CHandle->TxRxState == I2C_BUSY_IN_RX)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	7f1b      	ldrb	r3, [r3, #28]
 8001272:	2b01      	cmp	r3, #1
 8001274:	d102      	bne.n	800127c <I2C_EV_IRQHandling+0x180>
			{
				I2C_MasterHandleRXNEInterrupt(pI2CHandle);
 8001276:	6878      	ldr	r0, [r7, #4]
 8001278:	f000 f8c4 	bl	8001404 <I2C_MasterHandleRXNEInterrupt>
			}
		}
	}
}
 800127c:	bf00      	nop
 800127e:	3718      	adds	r7, #24
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}

08001284 <I2C_ERR_IRQHandling>:
 * @return								- None
 *
 * @note								- None
 *****************************************************************************************************************/
void I2C_ERR_IRQHandling(I2C_Handle_t *pI2CHandle)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b084      	sub	sp, #16
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]

	uint32_t temp1,temp2;

    //Know the status of  ITERREN control bit in the CR2
	temp2 = (pI2CHandle->pI2Cx->CR2) & ( 1 << I2C_CR2_ITERREN);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001296:	60fb      	str	r3, [r7, #12]


/***********************Check for Bus error************************************/
	temp1 = (pI2CHandle->pI2Cx->SR1) & ( 1<< I2C_SR1_BERR);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	695b      	ldr	r3, [r3, #20]
 800129e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80012a2:	60bb      	str	r3, [r7, #8]
	if(temp1  && temp2 )
 80012a4:	68bb      	ldr	r3, [r7, #8]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d00e      	beq.n	80012c8 <I2C_ERR_IRQHandling+0x44>
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d00b      	beq.n	80012c8 <I2C_ERR_IRQHandling+0x44>
	{
		//This is Bus error

		//Implement the code to clear the buss error flag
		pI2CHandle->pI2Cx->SR1 &= ~( 1 << I2C_SR1_BERR);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	695a      	ldr	r2, [r3, #20]
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80012be:	615a      	str	r2, [r3, #20]

		//Implement the code to notify the application about the error
	   I2C_ApplicationEventCallback(pI2CHandle,I2C_ERROR_BERR);
 80012c0:	2103      	movs	r1, #3
 80012c2:	6878      	ldr	r0, [r7, #4]
 80012c4:	f7ff f8f0 	bl	80004a8 <I2C_ApplicationEventCallback>
	}

/***********************Check for arbitration lost error************************************/
	temp1 = (pI2CHandle->pI2Cx->SR1) & ( 1 << I2C_SR1_ARLO );
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	695b      	ldr	r3, [r3, #20]
 80012ce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80012d2:	60bb      	str	r3, [r7, #8]
	if(temp1  && temp2)
 80012d4:	68bb      	ldr	r3, [r7, #8]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d00e      	beq.n	80012f8 <I2C_ERR_IRQHandling+0x74>
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d00b      	beq.n	80012f8 <I2C_ERR_IRQHandling+0x74>
	{
		//This is arbitration lost error

		//Implement the code to clear the arbitration lost error flag
		pI2CHandle->pI2Cx->SR1 &= ~( 1 << I2C_SR1_ARLO);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	695a      	ldr	r2, [r3, #20]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80012ee:	615a      	str	r2, [r3, #20]

		//Implement the code to notify the application about the error
		I2C_ApplicationEventCallback(pI2CHandle,I2C_ERROR_ARLO);
 80012f0:	2104      	movs	r1, #4
 80012f2:	6878      	ldr	r0, [r7, #4]
 80012f4:	f7ff f8d8 	bl	80004a8 <I2C_ApplicationEventCallback>

	}

/***********************Check for ACK failure  error************************************/

	temp1 = (pI2CHandle->pI2Cx->SR1) & ( 1 << I2C_SR1_AF);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	695b      	ldr	r3, [r3, #20]
 80012fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001302:	60bb      	str	r3, [r7, #8]
	if(temp1  && temp2)
 8001304:	68bb      	ldr	r3, [r7, #8]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d00e      	beq.n	8001328 <I2C_ERR_IRQHandling+0xa4>
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d00b      	beq.n	8001328 <I2C_ERR_IRQHandling+0xa4>
	{
		//This is ACK failure error

	    //Implement the code to clear the ACK failure error flag
		pI2CHandle->pI2Cx->SR1 &= ~( 1 << I2C_SR1_AF);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	695a      	ldr	r2, [r3, #20]
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800131e:	615a      	str	r2, [r3, #20]

		//Implement the code to notify the application about the error
		I2C_ApplicationEventCallback(pI2CHandle,I2C_ERROR_AF);
 8001320:	2105      	movs	r1, #5
 8001322:	6878      	ldr	r0, [r7, #4]
 8001324:	f7ff f8c0 	bl	80004a8 <I2C_ApplicationEventCallback>
	}

/***********************Check for Overrun/underrun error************************************/
	temp1 = (pI2CHandle->pI2Cx->SR1) & ( 1 << I2C_SR1_OVR);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	695b      	ldr	r3, [r3, #20]
 800132e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001332:	60bb      	str	r3, [r7, #8]
	if(temp1  && temp2)
 8001334:	68bb      	ldr	r3, [r7, #8]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d00e      	beq.n	8001358 <I2C_ERR_IRQHandling+0xd4>
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d00b      	beq.n	8001358 <I2C_ERR_IRQHandling+0xd4>
	{
		//This is Overrun/underrun

	    //Implement the code to clear the Overrun/underrun error flag
		pI2CHandle->pI2Cx->SR1 &= ~( 1 << I2C_SR1_OVR);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	695a      	ldr	r2, [r3, #20]
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800134e:	615a      	str	r2, [r3, #20]

		//Implement the code to notify the application about the error
		I2C_ApplicationEventCallback(pI2CHandle,I2C_ERROR_OVR);
 8001350:	2106      	movs	r1, #6
 8001352:	6878      	ldr	r0, [r7, #4]
 8001354:	f7ff f8a8 	bl	80004a8 <I2C_ApplicationEventCallback>
	}

/***********************Check for Time out error************************************/
	temp1 = (pI2CHandle->pI2Cx->SR1) & ( 1 << I2C_SR1_TIMEOUT);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	695b      	ldr	r3, [r3, #20]
 800135e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001362:	60bb      	str	r3, [r7, #8]
	if(temp1  && temp2)
 8001364:	68bb      	ldr	r3, [r7, #8]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d00e      	beq.n	8001388 <I2C_ERR_IRQHandling+0x104>
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d00b      	beq.n	8001388 <I2C_ERR_IRQHandling+0x104>
	{
		//This is Time out error

	    //Implement the code to clear the Time out error flag
		pI2CHandle->pI2Cx->SR1 &= ~( 1 << I2C_SR1_TIMEOUT);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	695a      	ldr	r2, [r3, #20]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800137e:	615a      	str	r2, [r3, #20]

		//Implement the code to notify the application about the error
		I2C_ApplicationEventCallback(pI2CHandle,I2C_ERROR_TIMEOUT);
 8001380:	2107      	movs	r1, #7
 8001382:	6878      	ldr	r0, [r7, #4]
 8001384:	f7ff f890 	bl	80004a8 <I2C_ApplicationEventCallback>
	}

}
 8001388:	bf00      	nop
 800138a:	3710      	adds	r7, #16
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}

08001390 <I2C_PeripheralControl>:
 * @return								- None
 *
 * @note								- None
 *****************************************************************************************************************/
void I2C_PeripheralControl(I2C_RegDef_t *pI2Cx, uint8_t EnOrDi)
{
 8001390:	b480      	push	{r7}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
 8001398:	460b      	mov	r3, r1
 800139a:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 800139c:	78fb      	ldrb	r3, [r7, #3]
 800139e:	2b01      	cmp	r3, #1
 80013a0:	d106      	bne.n	80013b0 <I2C_PeripheralControl+0x20>
	{
		pI2Cx->CR1 |= (1 << I2C_CR1_PE);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f043 0201 	orr.w	r2, r3, #1
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	601a      	str	r2, [r3, #0]
	else
	{
		pI2Cx->CR1 &= ~(1 << I2C_CR1_PE);
	}

}
 80013ae:	e005      	b.n	80013bc <I2C_PeripheralControl+0x2c>
		pI2Cx->CR1 &= ~(1 << I2C_CR1_PE);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f023 0201 	bic.w	r2, r3, #1
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	601a      	str	r2, [r3, #0]
}
 80013bc:	bf00      	nop
 80013be:	370c      	adds	r7, #12
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr

080013c8 <I2C_MasterHandleTXEInterrupt>:
 * @return								- None
 *
 * @note								- None
 *****************************************************************************************************************/
static void I2C_MasterHandleTXEInterrupt(I2C_Handle_t *pI2CHandle)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b083      	sub	sp, #12
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
	if(pI2CHandle->TxLen > 0)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	695b      	ldr	r3, [r3, #20]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d00f      	beq.n	80013f8 <I2C_MasterHandleTXEInterrupt+0x30>
	{
		// 1. Load the data into DR
		pI2CHandle->pI2Cx->DR = *(pI2CHandle->pTxBuffer);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	68db      	ldr	r3, [r3, #12]
 80013dc:	781a      	ldrb	r2, [r3, #0]
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	611a      	str	r2, [r3, #16]

		// 2. Decrement the TxLen
		pI2CHandle->TxLen--;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	695b      	ldr	r3, [r3, #20]
 80013e8:	1e5a      	subs	r2, r3, #1
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	615a      	str	r2, [r3, #20]

		// 3. Increment the buffer address
		pI2CHandle->pTxBuffer++;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	68db      	ldr	r3, [r3, #12]
 80013f2:	1c5a      	adds	r2, r3, #1
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	60da      	str	r2, [r3, #12]
	}
}
 80013f8:	bf00      	nop
 80013fa:	370c      	adds	r7, #12
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr

08001404 <I2C_MasterHandleRXNEInterrupt>:
 * @return								- None
 *
 * @note								- None
 *****************************************************************************************************************/
static void I2C_MasterHandleRXNEInterrupt(I2C_Handle_t *pI2CHandle)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
	// We have to do the data reception
	if(pI2CHandle->RxSize == 1)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6a1b      	ldr	r3, [r3, #32]
 8001410:	2b01      	cmp	r3, #1
 8001412:	d10b      	bne.n	800142c <I2C_MasterHandleRXNEInterrupt+0x28>
	{
		*pI2CHandle->pRxBuffer = pI2CHandle->pI2Cx->DR;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	691a      	ldr	r2, [r3, #16]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	691b      	ldr	r3, [r3, #16]
 800141e:	b2d2      	uxtb	r2, r2
 8001420:	701a      	strb	r2, [r3, #0]

		pI2CHandle->RxLen--;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	699b      	ldr	r3, [r3, #24]
 8001426:	1e5a      	subs	r2, r3, #1
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	619a      	str	r2, [r3, #24]
	}

	if(pI2CHandle->RxSize > 1)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6a1b      	ldr	r3, [r3, #32]
 8001430:	2b01      	cmp	r3, #1
 8001432:	d91a      	bls.n	800146a <I2C_MasterHandleRXNEInterrupt+0x66>
	{
		if(pI2CHandle->RxLen == 2)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	699b      	ldr	r3, [r3, #24]
 8001438:	2b02      	cmp	r3, #2
 800143a:	d105      	bne.n	8001448 <I2C_MasterHandleRXNEInterrupt+0x44>
		{
			// clear the ACK bit
			I2C_ManageAcking(pI2CHandle->pI2Cx, DISABLE);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	2100      	movs	r1, #0
 8001442:	4618      	mov	r0, r3
 8001444:	f000 f8ac 	bl	80015a0 <I2C_ManageAcking>
		}

		*pI2CHandle->pRxBuffer = pI2CHandle->pI2Cx->DR;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	691a      	ldr	r2, [r3, #16]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	691b      	ldr	r3, [r3, #16]
 8001452:	b2d2      	uxtb	r2, r2
 8001454:	701a      	strb	r2, [r3, #0]
		pI2CHandle->pRxBuffer++;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	691b      	ldr	r3, [r3, #16]
 800145a:	1c5a      	adds	r2, r3, #1
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	611a      	str	r2, [r3, #16]
		pI2CHandle->RxLen--;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	699b      	ldr	r3, [r3, #24]
 8001464:	1e5a      	subs	r2, r3, #1
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	619a      	str	r2, [r3, #24]
	}

	if(pI2CHandle->RxLen == 0)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	699b      	ldr	r3, [r3, #24]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d110      	bne.n	8001494 <I2C_MasterHandleRXNEInterrupt+0x90>
	{
		// Close the I2C data reception and notify the application

		// 1. Generatet the stop condition
		if(pI2CHandle->Sr == I2C_DISABLE_SR)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001478:	2b00      	cmp	r3, #0
 800147a:	d104      	bne.n	8001486 <I2C_MasterHandleRXNEInterrupt+0x82>
		{
			I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4618      	mov	r0, r3
 8001482:	f000 f87d 	bl	8001580 <I2C_GenerateStopCondition>
		}

		// 2. Close the I2C Rx
		I2C_CloseReceiveData(pI2CHandle);
 8001486:	6878      	ldr	r0, [r7, #4]
 8001488:	f000 f8c9 	bl	800161e <I2C_CloseReceiveData>

		// 3. Notify the application
		I2C_ApplicationEventCallback(pI2CHandle, I2C_EV_RX_CMPLT);
 800148c:	2101      	movs	r1, #1
 800148e:	6878      	ldr	r0, [r7, #4]
 8001490:	f7ff f80a 	bl	80004a8 <I2C_ApplicationEventCallback>
	}
}
 8001494:	bf00      	nop
 8001496:	3708      	adds	r7, #8
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}

0800149c <I2C_GenerateStartCondition>:
 * @return								- None
 *
 * @note								- None
 *****************************************************************************************************************/
static void I2C_GenerateStartCondition(I2C_RegDef_t *pI2Cx)
{
 800149c:	b480      	push	{r7}
 800149e:	b083      	sub	sp, #12
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= (1 << I2C_CR1_START);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	601a      	str	r2, [r3, #0]
}
 80014b0:	bf00      	nop
 80014b2:	370c      	adds	r7, #12
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr

080014bc <I2C_ExecuteAddressPhase>:
 * @return								- None
 *
 * @note								- None
 *****************************************************************************************************************/
static void I2C_ExecuteAddressPhase(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr, uint8_t ReadOrWrite)
{
 80014bc:	b480      	push	{r7}
 80014be:	b083      	sub	sp, #12
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
 80014c4:	460b      	mov	r3, r1
 80014c6:	70fb      	strb	r3, [r7, #3]
 80014c8:	4613      	mov	r3, r2
 80014ca:	70bb      	strb	r3, [r7, #2]
	if(ReadOrWrite == I2C_WRITE)
 80014cc:	78bb      	ldrb	r3, [r7, #2]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d10a      	bne.n	80014e8 <I2C_ExecuteAddressPhase+0x2c>
	{
		SlaveAddr = SlaveAddr << 1;
 80014d2:	78fb      	ldrb	r3, [r7, #3]
 80014d4:	005b      	lsls	r3, r3, #1
 80014d6:	70fb      	strb	r3, [r7, #3]
		SlaveAddr &= ~(1);			// SlaveAddr is slave address + r/w(0) bit=0
 80014d8:	78fb      	ldrb	r3, [r7, #3]
 80014da:	f023 0301 	bic.w	r3, r3, #1
 80014de:	70fb      	strb	r3, [r7, #3]
		pI2Cx->DR = SlaveAddr;
 80014e0:	78fa      	ldrb	r2, [r7, #3]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	611a      	str	r2, [r3, #16]
	{
		SlaveAddr = SlaveAddr << 1;
		SlaveAddr |= ~(1);			// SlaveAddr is slave address + r/w(1) bit=1
		pI2Cx->DR = SlaveAddr;
	}
}
 80014e6:	e00e      	b.n	8001506 <I2C_ExecuteAddressPhase+0x4a>
	else if(ReadOrWrite == I2C_READ)
 80014e8:	78bb      	ldrb	r3, [r7, #2]
 80014ea:	2b01      	cmp	r3, #1
 80014ec:	d10b      	bne.n	8001506 <I2C_ExecuteAddressPhase+0x4a>
		SlaveAddr = SlaveAddr << 1;
 80014ee:	78fb      	ldrb	r3, [r7, #3]
 80014f0:	005b      	lsls	r3, r3, #1
 80014f2:	70fb      	strb	r3, [r7, #3]
		SlaveAddr |= ~(1);			// SlaveAddr is slave address + r/w(1) bit=1
 80014f4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80014f8:	f063 0301 	orn	r3, r3, #1
 80014fc:	b25b      	sxtb	r3, r3
 80014fe:	70fb      	strb	r3, [r7, #3]
		pI2Cx->DR = SlaveAddr;
 8001500:	78fa      	ldrb	r2, [r7, #3]
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	611a      	str	r2, [r3, #16]
}
 8001506:	bf00      	nop
 8001508:	370c      	adds	r7, #12
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr

08001512 <I2C_ClearADDRFlag>:
 * @return								- None
 *
 * @note								- None
 *****************************************************************************************************************/
static void I2C_ClearADDRFlag(I2C_Handle_t *pI2CHandle)
{
 8001512:	b580      	push	{r7, lr}
 8001514:	b084      	sub	sp, #16
 8001516:	af00      	add	r7, sp, #0
 8001518:	6078      	str	r0, [r7, #4]
	uint32_t dummy_read;
	// Check for device mode
	if(pI2CHandle->pI2Cx->SR2 & (1 << I2C_SR2_MSL))
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	699b      	ldr	r3, [r3, #24]
 8001520:	f003 0301 	and.w	r3, r3, #1
 8001524:	2b00      	cmp	r3, #0
 8001526:	d01f      	beq.n	8001568 <I2C_ClearADDRFlag+0x56>
	{
		// Device is in master mode
		if(pI2CHandle->TxRxState == I2C_BUSY_IN_RX)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	7f1b      	ldrb	r3, [r3, #28]
 800152c:	2b01      	cmp	r3, #1
 800152e:	d112      	bne.n	8001556 <I2C_ClearADDRFlag+0x44>
		{
			if(pI2CHandle->RxSize == 1)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	6a1b      	ldr	r3, [r3, #32]
 8001534:	2b01      	cmp	r3, #1
 8001536:	d11f      	bne.n	8001578 <I2C_ClearADDRFlag+0x66>
			{
				// First Disable the ack
				I2C_ManageAcking(pI2CHandle->pI2Cx, DISABLE);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	2100      	movs	r1, #0
 800153e:	4618      	mov	r0, r3
 8001540:	f000 f82e 	bl	80015a0 <I2C_ManageAcking>

				// clear the ADDR flag (Read SR1, Read SR2)
				dummy_read = pI2CHandle->pI2Cx->SR1;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	695b      	ldr	r3, [r3, #20]
 800154a:	60fb      	str	r3, [r7, #12]
				dummy_read = pI2CHandle->pI2Cx->SR2;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	699b      	ldr	r3, [r3, #24]
 8001552:	60fb      	str	r3, [r7, #12]
		// clear the ADDR flag (Read SR1, Read SR2)
		dummy_read = pI2CHandle->pI2Cx->SR1;
		dummy_read = pI2CHandle->pI2Cx->SR2;
		(void)dummy_read;
	}
}
 8001554:	e010      	b.n	8001578 <I2C_ClearADDRFlag+0x66>
			dummy_read = pI2CHandle->pI2Cx->SR1;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	695b      	ldr	r3, [r3, #20]
 800155c:	60fb      	str	r3, [r7, #12]
			dummy_read = pI2CHandle->pI2Cx->SR2;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	699b      	ldr	r3, [r3, #24]
 8001564:	60fb      	str	r3, [r7, #12]
}
 8001566:	e007      	b.n	8001578 <I2C_ClearADDRFlag+0x66>
		dummy_read = pI2CHandle->pI2Cx->SR1;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	695b      	ldr	r3, [r3, #20]
 800156e:	60fb      	str	r3, [r7, #12]
		dummy_read = pI2CHandle->pI2Cx->SR2;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	699b      	ldr	r3, [r3, #24]
 8001576:	60fb      	str	r3, [r7, #12]
}
 8001578:	bf00      	nop
 800157a:	3710      	adds	r7, #16
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}

08001580 <I2C_GenerateStopCondition>:
 * @return								- None
 *
 * @note								- None
 *****************************************************************************************************************/
void I2C_GenerateStopCondition(I2C_RegDef_t *pI2Cx)
{
 8001580:	b480      	push	{r7}
 8001582:	b083      	sub	sp, #12
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= (1 << I2C_CR1_STOP);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	601a      	str	r2, [r3, #0]
}
 8001594:	bf00      	nop
 8001596:	370c      	adds	r7, #12
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr

080015a0 <I2C_ManageAcking>:
 * @return								- None
 *
 * @note								- None
 *****************************************************************************************************************/
void I2C_ManageAcking(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
 80015a8:	460b      	mov	r3, r1
 80015aa:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == I2C_ACK_EN)
 80015ac:	78fb      	ldrb	r3, [r7, #3]
 80015ae:	2b01      	cmp	r3, #1
 80015b0:	d106      	bne.n	80015c0 <I2C_ManageAcking+0x20>
	{
		// Enable Acknowledgement
		pI2Cx->CR1 |= (1 << I2C_CR1_ACK);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	601a      	str	r2, [r3, #0]
	else
	{
		// Disable Acknowledgement
		pI2Cx->CR1 &= ~(1 << I2C_CR1_ACK);
	}
}
 80015be:	e005      	b.n	80015cc <I2C_ManageAcking+0x2c>
		pI2Cx->CR1 &= ~(1 << I2C_CR1_ACK);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	601a      	str	r2, [r3, #0]
}
 80015cc:	bf00      	nop
 80015ce:	370c      	adds	r7, #12
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr

080015d8 <I2C_CloseSendData>:
 * @return								- None
 *
 * @note								- None
 *****************************************************************************************************************/
void I2C_CloseSendData(I2C_Handle_t *pI2CHandle)
{
 80015d8:	b480      	push	{r7}
 80015da:	b083      	sub	sp, #12
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
	// Implement the code to disable the ITBUFEN Control bit
	pI2CHandle->pI2Cx->CR2 &= ~(1 << I2C_CR2_ITBUFEN);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	685a      	ldr	r2, [r3, #4]
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80015ee:	605a      	str	r2, [r3, #4]

	// Implement the code to diable the ITEVTFN Control bit
	pI2CHandle->pI2Cx->CR2 &= ~(1 << I2C_CR2_ITEVTEN);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	685a      	ldr	r2, [r3, #4]
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80015fe:	605a      	str	r2, [r3, #4]

	pI2CHandle->TxRxState = I2C_READY;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2200      	movs	r2, #0
 8001604:	771a      	strb	r2, [r3, #28]
	pI2CHandle->pTxBuffer = NULL;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2200      	movs	r2, #0
 800160a:	60da      	str	r2, [r3, #12]
	pI2CHandle->TxLen = 0;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2200      	movs	r2, #0
 8001610:	615a      	str	r2, [r3, #20]
}
 8001612:	bf00      	nop
 8001614:	370c      	adds	r7, #12
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr

0800161e <I2C_CloseReceiveData>:
 * @return								- None
 *
 * @note								- None
 *****************************************************************************************************************/
void I2C_CloseReceiveData(I2C_Handle_t *pI2CHandle)
{
 800161e:	b580      	push	{r7, lr}
 8001620:	b082      	sub	sp, #8
 8001622:	af00      	add	r7, sp, #0
 8001624:	6078      	str	r0, [r7, #4]
	// Implement the code to disable the ITBUFEN Control bit
	pI2CHandle->pI2Cx->CR2 &= ~(1 << I2C_CR2_ITBUFEN);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	685a      	ldr	r2, [r3, #4]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001634:	605a      	str	r2, [r3, #4]

	// Implement the code to diable the ITEVTFN Control bit
	pI2CHandle->pI2Cx->CR2 &= ~(1 << I2C_CR2_ITEVTEN);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	685a      	ldr	r2, [r3, #4]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001644:	605a      	str	r2, [r3, #4]

	pI2CHandle->TxRxState = I2C_READY;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2200      	movs	r2, #0
 800164a:	771a      	strb	r2, [r3, #28]
	pI2CHandle->pRxBuffer = NULL;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2200      	movs	r2, #0
 8001650:	611a      	str	r2, [r3, #16]
	pI2CHandle->RxLen = 0;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2200      	movs	r2, #0
 8001656:	619a      	str	r2, [r3, #24]
	pI2CHandle->RxSize = 0;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2200      	movs	r2, #0
 800165c:	621a      	str	r2, [r3, #32]

	if(pI2CHandle->I2C_Config.I2C_AckCtrl == I2C_ACK_EN)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	7a5b      	ldrb	r3, [r3, #9]
 8001662:	2b01      	cmp	r3, #1
 8001664:	d105      	bne.n	8001672 <I2C_CloseReceiveData+0x54>
	{
		I2C_ManageAcking(pI2CHandle->pI2Cx, ENABLE);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	2101      	movs	r1, #1
 800166c:	4618      	mov	r0, r3
 800166e:	f7ff ff97 	bl	80015a0 <I2C_ManageAcking>
	}


}
 8001672:	bf00      	nop
 8001674:	3708      	adds	r7, #8
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
	...

0800167c <std>:
 800167c:	2300      	movs	r3, #0
 800167e:	b510      	push	{r4, lr}
 8001680:	4604      	mov	r4, r0
 8001682:	e9c0 3300 	strd	r3, r3, [r0]
 8001686:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800168a:	6083      	str	r3, [r0, #8]
 800168c:	8181      	strh	r1, [r0, #12]
 800168e:	6643      	str	r3, [r0, #100]	@ 0x64
 8001690:	81c2      	strh	r2, [r0, #14]
 8001692:	6183      	str	r3, [r0, #24]
 8001694:	4619      	mov	r1, r3
 8001696:	2208      	movs	r2, #8
 8001698:	305c      	adds	r0, #92	@ 0x5c
 800169a:	f000 f9f9 	bl	8001a90 <memset>
 800169e:	4b0d      	ldr	r3, [pc, #52]	@ (80016d4 <std+0x58>)
 80016a0:	6263      	str	r3, [r4, #36]	@ 0x24
 80016a2:	4b0d      	ldr	r3, [pc, #52]	@ (80016d8 <std+0x5c>)
 80016a4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80016a6:	4b0d      	ldr	r3, [pc, #52]	@ (80016dc <std+0x60>)
 80016a8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80016aa:	4b0d      	ldr	r3, [pc, #52]	@ (80016e0 <std+0x64>)
 80016ac:	6323      	str	r3, [r4, #48]	@ 0x30
 80016ae:	4b0d      	ldr	r3, [pc, #52]	@ (80016e4 <std+0x68>)
 80016b0:	6224      	str	r4, [r4, #32]
 80016b2:	429c      	cmp	r4, r3
 80016b4:	d006      	beq.n	80016c4 <std+0x48>
 80016b6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80016ba:	4294      	cmp	r4, r2
 80016bc:	d002      	beq.n	80016c4 <std+0x48>
 80016be:	33d0      	adds	r3, #208	@ 0xd0
 80016c0:	429c      	cmp	r4, r3
 80016c2:	d105      	bne.n	80016d0 <std+0x54>
 80016c4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80016c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80016cc:	f000 ba58 	b.w	8001b80 <__retarget_lock_init_recursive>
 80016d0:	bd10      	pop	{r4, pc}
 80016d2:	bf00      	nop
 80016d4:	080018e1 	.word	0x080018e1
 80016d8:	08001903 	.word	0x08001903
 80016dc:	0800193b 	.word	0x0800193b
 80016e0:	0800195f 	.word	0x0800195f
 80016e4:	200000c0 	.word	0x200000c0

080016e8 <stdio_exit_handler>:
 80016e8:	4a02      	ldr	r2, [pc, #8]	@ (80016f4 <stdio_exit_handler+0xc>)
 80016ea:	4903      	ldr	r1, [pc, #12]	@ (80016f8 <stdio_exit_handler+0x10>)
 80016ec:	4803      	ldr	r0, [pc, #12]	@ (80016fc <stdio_exit_handler+0x14>)
 80016ee:	f000 b869 	b.w	80017c4 <_fwalk_sglue>
 80016f2:	bf00      	nop
 80016f4:	20000018 	.word	0x20000018
 80016f8:	08002421 	.word	0x08002421
 80016fc:	20000028 	.word	0x20000028

08001700 <cleanup_stdio>:
 8001700:	6841      	ldr	r1, [r0, #4]
 8001702:	4b0c      	ldr	r3, [pc, #48]	@ (8001734 <cleanup_stdio+0x34>)
 8001704:	4299      	cmp	r1, r3
 8001706:	b510      	push	{r4, lr}
 8001708:	4604      	mov	r4, r0
 800170a:	d001      	beq.n	8001710 <cleanup_stdio+0x10>
 800170c:	f000 fe88 	bl	8002420 <_fflush_r>
 8001710:	68a1      	ldr	r1, [r4, #8]
 8001712:	4b09      	ldr	r3, [pc, #36]	@ (8001738 <cleanup_stdio+0x38>)
 8001714:	4299      	cmp	r1, r3
 8001716:	d002      	beq.n	800171e <cleanup_stdio+0x1e>
 8001718:	4620      	mov	r0, r4
 800171a:	f000 fe81 	bl	8002420 <_fflush_r>
 800171e:	68e1      	ldr	r1, [r4, #12]
 8001720:	4b06      	ldr	r3, [pc, #24]	@ (800173c <cleanup_stdio+0x3c>)
 8001722:	4299      	cmp	r1, r3
 8001724:	d004      	beq.n	8001730 <cleanup_stdio+0x30>
 8001726:	4620      	mov	r0, r4
 8001728:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800172c:	f000 be78 	b.w	8002420 <_fflush_r>
 8001730:	bd10      	pop	{r4, pc}
 8001732:	bf00      	nop
 8001734:	200000c0 	.word	0x200000c0
 8001738:	20000128 	.word	0x20000128
 800173c:	20000190 	.word	0x20000190

08001740 <global_stdio_init.part.0>:
 8001740:	b510      	push	{r4, lr}
 8001742:	4b0b      	ldr	r3, [pc, #44]	@ (8001770 <global_stdio_init.part.0+0x30>)
 8001744:	4c0b      	ldr	r4, [pc, #44]	@ (8001774 <global_stdio_init.part.0+0x34>)
 8001746:	4a0c      	ldr	r2, [pc, #48]	@ (8001778 <global_stdio_init.part.0+0x38>)
 8001748:	601a      	str	r2, [r3, #0]
 800174a:	4620      	mov	r0, r4
 800174c:	2200      	movs	r2, #0
 800174e:	2104      	movs	r1, #4
 8001750:	f7ff ff94 	bl	800167c <std>
 8001754:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8001758:	2201      	movs	r2, #1
 800175a:	2109      	movs	r1, #9
 800175c:	f7ff ff8e 	bl	800167c <std>
 8001760:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8001764:	2202      	movs	r2, #2
 8001766:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800176a:	2112      	movs	r1, #18
 800176c:	f7ff bf86 	b.w	800167c <std>
 8001770:	200001f8 	.word	0x200001f8
 8001774:	200000c0 	.word	0x200000c0
 8001778:	080016e9 	.word	0x080016e9

0800177c <__sfp_lock_acquire>:
 800177c:	4801      	ldr	r0, [pc, #4]	@ (8001784 <__sfp_lock_acquire+0x8>)
 800177e:	f000 ba00 	b.w	8001b82 <__retarget_lock_acquire_recursive>
 8001782:	bf00      	nop
 8001784:	20000201 	.word	0x20000201

08001788 <__sfp_lock_release>:
 8001788:	4801      	ldr	r0, [pc, #4]	@ (8001790 <__sfp_lock_release+0x8>)
 800178a:	f000 b9fb 	b.w	8001b84 <__retarget_lock_release_recursive>
 800178e:	bf00      	nop
 8001790:	20000201 	.word	0x20000201

08001794 <__sinit>:
 8001794:	b510      	push	{r4, lr}
 8001796:	4604      	mov	r4, r0
 8001798:	f7ff fff0 	bl	800177c <__sfp_lock_acquire>
 800179c:	6a23      	ldr	r3, [r4, #32]
 800179e:	b11b      	cbz	r3, 80017a8 <__sinit+0x14>
 80017a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80017a4:	f7ff bff0 	b.w	8001788 <__sfp_lock_release>
 80017a8:	4b04      	ldr	r3, [pc, #16]	@ (80017bc <__sinit+0x28>)
 80017aa:	6223      	str	r3, [r4, #32]
 80017ac:	4b04      	ldr	r3, [pc, #16]	@ (80017c0 <__sinit+0x2c>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d1f5      	bne.n	80017a0 <__sinit+0xc>
 80017b4:	f7ff ffc4 	bl	8001740 <global_stdio_init.part.0>
 80017b8:	e7f2      	b.n	80017a0 <__sinit+0xc>
 80017ba:	bf00      	nop
 80017bc:	08001701 	.word	0x08001701
 80017c0:	200001f8 	.word	0x200001f8

080017c4 <_fwalk_sglue>:
 80017c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80017c8:	4607      	mov	r7, r0
 80017ca:	4688      	mov	r8, r1
 80017cc:	4614      	mov	r4, r2
 80017ce:	2600      	movs	r6, #0
 80017d0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80017d4:	f1b9 0901 	subs.w	r9, r9, #1
 80017d8:	d505      	bpl.n	80017e6 <_fwalk_sglue+0x22>
 80017da:	6824      	ldr	r4, [r4, #0]
 80017dc:	2c00      	cmp	r4, #0
 80017de:	d1f7      	bne.n	80017d0 <_fwalk_sglue+0xc>
 80017e0:	4630      	mov	r0, r6
 80017e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80017e6:	89ab      	ldrh	r3, [r5, #12]
 80017e8:	2b01      	cmp	r3, #1
 80017ea:	d907      	bls.n	80017fc <_fwalk_sglue+0x38>
 80017ec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80017f0:	3301      	adds	r3, #1
 80017f2:	d003      	beq.n	80017fc <_fwalk_sglue+0x38>
 80017f4:	4629      	mov	r1, r5
 80017f6:	4638      	mov	r0, r7
 80017f8:	47c0      	blx	r8
 80017fa:	4306      	orrs	r6, r0
 80017fc:	3568      	adds	r5, #104	@ 0x68
 80017fe:	e7e9      	b.n	80017d4 <_fwalk_sglue+0x10>

08001800 <iprintf>:
 8001800:	b40f      	push	{r0, r1, r2, r3}
 8001802:	b507      	push	{r0, r1, r2, lr}
 8001804:	4906      	ldr	r1, [pc, #24]	@ (8001820 <iprintf+0x20>)
 8001806:	ab04      	add	r3, sp, #16
 8001808:	6808      	ldr	r0, [r1, #0]
 800180a:	f853 2b04 	ldr.w	r2, [r3], #4
 800180e:	6881      	ldr	r1, [r0, #8]
 8001810:	9301      	str	r3, [sp, #4]
 8001812:	f000 fadb 	bl	8001dcc <_vfiprintf_r>
 8001816:	b003      	add	sp, #12
 8001818:	f85d eb04 	ldr.w	lr, [sp], #4
 800181c:	b004      	add	sp, #16
 800181e:	4770      	bx	lr
 8001820:	20000024 	.word	0x20000024

08001824 <_puts_r>:
 8001824:	6a03      	ldr	r3, [r0, #32]
 8001826:	b570      	push	{r4, r5, r6, lr}
 8001828:	6884      	ldr	r4, [r0, #8]
 800182a:	4605      	mov	r5, r0
 800182c:	460e      	mov	r6, r1
 800182e:	b90b      	cbnz	r3, 8001834 <_puts_r+0x10>
 8001830:	f7ff ffb0 	bl	8001794 <__sinit>
 8001834:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001836:	07db      	lsls	r3, r3, #31
 8001838:	d405      	bmi.n	8001846 <_puts_r+0x22>
 800183a:	89a3      	ldrh	r3, [r4, #12]
 800183c:	0598      	lsls	r0, r3, #22
 800183e:	d402      	bmi.n	8001846 <_puts_r+0x22>
 8001840:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001842:	f000 f99e 	bl	8001b82 <__retarget_lock_acquire_recursive>
 8001846:	89a3      	ldrh	r3, [r4, #12]
 8001848:	0719      	lsls	r1, r3, #28
 800184a:	d502      	bpl.n	8001852 <_puts_r+0x2e>
 800184c:	6923      	ldr	r3, [r4, #16]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d135      	bne.n	80018be <_puts_r+0x9a>
 8001852:	4621      	mov	r1, r4
 8001854:	4628      	mov	r0, r5
 8001856:	f000 f8c5 	bl	80019e4 <__swsetup_r>
 800185a:	b380      	cbz	r0, 80018be <_puts_r+0x9a>
 800185c:	f04f 35ff 	mov.w	r5, #4294967295
 8001860:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001862:	07da      	lsls	r2, r3, #31
 8001864:	d405      	bmi.n	8001872 <_puts_r+0x4e>
 8001866:	89a3      	ldrh	r3, [r4, #12]
 8001868:	059b      	lsls	r3, r3, #22
 800186a:	d402      	bmi.n	8001872 <_puts_r+0x4e>
 800186c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800186e:	f000 f989 	bl	8001b84 <__retarget_lock_release_recursive>
 8001872:	4628      	mov	r0, r5
 8001874:	bd70      	pop	{r4, r5, r6, pc}
 8001876:	2b00      	cmp	r3, #0
 8001878:	da04      	bge.n	8001884 <_puts_r+0x60>
 800187a:	69a2      	ldr	r2, [r4, #24]
 800187c:	429a      	cmp	r2, r3
 800187e:	dc17      	bgt.n	80018b0 <_puts_r+0x8c>
 8001880:	290a      	cmp	r1, #10
 8001882:	d015      	beq.n	80018b0 <_puts_r+0x8c>
 8001884:	6823      	ldr	r3, [r4, #0]
 8001886:	1c5a      	adds	r2, r3, #1
 8001888:	6022      	str	r2, [r4, #0]
 800188a:	7019      	strb	r1, [r3, #0]
 800188c:	68a3      	ldr	r3, [r4, #8]
 800188e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8001892:	3b01      	subs	r3, #1
 8001894:	60a3      	str	r3, [r4, #8]
 8001896:	2900      	cmp	r1, #0
 8001898:	d1ed      	bne.n	8001876 <_puts_r+0x52>
 800189a:	2b00      	cmp	r3, #0
 800189c:	da11      	bge.n	80018c2 <_puts_r+0x9e>
 800189e:	4622      	mov	r2, r4
 80018a0:	210a      	movs	r1, #10
 80018a2:	4628      	mov	r0, r5
 80018a4:	f000 f85f 	bl	8001966 <__swbuf_r>
 80018a8:	3001      	adds	r0, #1
 80018aa:	d0d7      	beq.n	800185c <_puts_r+0x38>
 80018ac:	250a      	movs	r5, #10
 80018ae:	e7d7      	b.n	8001860 <_puts_r+0x3c>
 80018b0:	4622      	mov	r2, r4
 80018b2:	4628      	mov	r0, r5
 80018b4:	f000 f857 	bl	8001966 <__swbuf_r>
 80018b8:	3001      	adds	r0, #1
 80018ba:	d1e7      	bne.n	800188c <_puts_r+0x68>
 80018bc:	e7ce      	b.n	800185c <_puts_r+0x38>
 80018be:	3e01      	subs	r6, #1
 80018c0:	e7e4      	b.n	800188c <_puts_r+0x68>
 80018c2:	6823      	ldr	r3, [r4, #0]
 80018c4:	1c5a      	adds	r2, r3, #1
 80018c6:	6022      	str	r2, [r4, #0]
 80018c8:	220a      	movs	r2, #10
 80018ca:	701a      	strb	r2, [r3, #0]
 80018cc:	e7ee      	b.n	80018ac <_puts_r+0x88>
	...

080018d0 <puts>:
 80018d0:	4b02      	ldr	r3, [pc, #8]	@ (80018dc <puts+0xc>)
 80018d2:	4601      	mov	r1, r0
 80018d4:	6818      	ldr	r0, [r3, #0]
 80018d6:	f7ff bfa5 	b.w	8001824 <_puts_r>
 80018da:	bf00      	nop
 80018dc:	20000024 	.word	0x20000024

080018e0 <__sread>:
 80018e0:	b510      	push	{r4, lr}
 80018e2:	460c      	mov	r4, r1
 80018e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80018e8:	f000 f8fc 	bl	8001ae4 <_read_r>
 80018ec:	2800      	cmp	r0, #0
 80018ee:	bfab      	itete	ge
 80018f0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80018f2:	89a3      	ldrhlt	r3, [r4, #12]
 80018f4:	181b      	addge	r3, r3, r0
 80018f6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80018fa:	bfac      	ite	ge
 80018fc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80018fe:	81a3      	strhlt	r3, [r4, #12]
 8001900:	bd10      	pop	{r4, pc}

08001902 <__swrite>:
 8001902:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001906:	461f      	mov	r7, r3
 8001908:	898b      	ldrh	r3, [r1, #12]
 800190a:	05db      	lsls	r3, r3, #23
 800190c:	4605      	mov	r5, r0
 800190e:	460c      	mov	r4, r1
 8001910:	4616      	mov	r6, r2
 8001912:	d505      	bpl.n	8001920 <__swrite+0x1e>
 8001914:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001918:	2302      	movs	r3, #2
 800191a:	2200      	movs	r2, #0
 800191c:	f000 f8d0 	bl	8001ac0 <_lseek_r>
 8001920:	89a3      	ldrh	r3, [r4, #12]
 8001922:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001926:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800192a:	81a3      	strh	r3, [r4, #12]
 800192c:	4632      	mov	r2, r6
 800192e:	463b      	mov	r3, r7
 8001930:	4628      	mov	r0, r5
 8001932:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001936:	f000 b8e7 	b.w	8001b08 <_write_r>

0800193a <__sseek>:
 800193a:	b510      	push	{r4, lr}
 800193c:	460c      	mov	r4, r1
 800193e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001942:	f000 f8bd 	bl	8001ac0 <_lseek_r>
 8001946:	1c43      	adds	r3, r0, #1
 8001948:	89a3      	ldrh	r3, [r4, #12]
 800194a:	bf15      	itete	ne
 800194c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800194e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8001952:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8001956:	81a3      	strheq	r3, [r4, #12]
 8001958:	bf18      	it	ne
 800195a:	81a3      	strhne	r3, [r4, #12]
 800195c:	bd10      	pop	{r4, pc}

0800195e <__sclose>:
 800195e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001962:	f000 b89d 	b.w	8001aa0 <_close_r>

08001966 <__swbuf_r>:
 8001966:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001968:	460e      	mov	r6, r1
 800196a:	4614      	mov	r4, r2
 800196c:	4605      	mov	r5, r0
 800196e:	b118      	cbz	r0, 8001978 <__swbuf_r+0x12>
 8001970:	6a03      	ldr	r3, [r0, #32]
 8001972:	b90b      	cbnz	r3, 8001978 <__swbuf_r+0x12>
 8001974:	f7ff ff0e 	bl	8001794 <__sinit>
 8001978:	69a3      	ldr	r3, [r4, #24]
 800197a:	60a3      	str	r3, [r4, #8]
 800197c:	89a3      	ldrh	r3, [r4, #12]
 800197e:	071a      	lsls	r2, r3, #28
 8001980:	d501      	bpl.n	8001986 <__swbuf_r+0x20>
 8001982:	6923      	ldr	r3, [r4, #16]
 8001984:	b943      	cbnz	r3, 8001998 <__swbuf_r+0x32>
 8001986:	4621      	mov	r1, r4
 8001988:	4628      	mov	r0, r5
 800198a:	f000 f82b 	bl	80019e4 <__swsetup_r>
 800198e:	b118      	cbz	r0, 8001998 <__swbuf_r+0x32>
 8001990:	f04f 37ff 	mov.w	r7, #4294967295
 8001994:	4638      	mov	r0, r7
 8001996:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001998:	6823      	ldr	r3, [r4, #0]
 800199a:	6922      	ldr	r2, [r4, #16]
 800199c:	1a98      	subs	r0, r3, r2
 800199e:	6963      	ldr	r3, [r4, #20]
 80019a0:	b2f6      	uxtb	r6, r6
 80019a2:	4283      	cmp	r3, r0
 80019a4:	4637      	mov	r7, r6
 80019a6:	dc05      	bgt.n	80019b4 <__swbuf_r+0x4e>
 80019a8:	4621      	mov	r1, r4
 80019aa:	4628      	mov	r0, r5
 80019ac:	f000 fd38 	bl	8002420 <_fflush_r>
 80019b0:	2800      	cmp	r0, #0
 80019b2:	d1ed      	bne.n	8001990 <__swbuf_r+0x2a>
 80019b4:	68a3      	ldr	r3, [r4, #8]
 80019b6:	3b01      	subs	r3, #1
 80019b8:	60a3      	str	r3, [r4, #8]
 80019ba:	6823      	ldr	r3, [r4, #0]
 80019bc:	1c5a      	adds	r2, r3, #1
 80019be:	6022      	str	r2, [r4, #0]
 80019c0:	701e      	strb	r6, [r3, #0]
 80019c2:	6962      	ldr	r2, [r4, #20]
 80019c4:	1c43      	adds	r3, r0, #1
 80019c6:	429a      	cmp	r2, r3
 80019c8:	d004      	beq.n	80019d4 <__swbuf_r+0x6e>
 80019ca:	89a3      	ldrh	r3, [r4, #12]
 80019cc:	07db      	lsls	r3, r3, #31
 80019ce:	d5e1      	bpl.n	8001994 <__swbuf_r+0x2e>
 80019d0:	2e0a      	cmp	r6, #10
 80019d2:	d1df      	bne.n	8001994 <__swbuf_r+0x2e>
 80019d4:	4621      	mov	r1, r4
 80019d6:	4628      	mov	r0, r5
 80019d8:	f000 fd22 	bl	8002420 <_fflush_r>
 80019dc:	2800      	cmp	r0, #0
 80019de:	d0d9      	beq.n	8001994 <__swbuf_r+0x2e>
 80019e0:	e7d6      	b.n	8001990 <__swbuf_r+0x2a>
	...

080019e4 <__swsetup_r>:
 80019e4:	b538      	push	{r3, r4, r5, lr}
 80019e6:	4b29      	ldr	r3, [pc, #164]	@ (8001a8c <__swsetup_r+0xa8>)
 80019e8:	4605      	mov	r5, r0
 80019ea:	6818      	ldr	r0, [r3, #0]
 80019ec:	460c      	mov	r4, r1
 80019ee:	b118      	cbz	r0, 80019f8 <__swsetup_r+0x14>
 80019f0:	6a03      	ldr	r3, [r0, #32]
 80019f2:	b90b      	cbnz	r3, 80019f8 <__swsetup_r+0x14>
 80019f4:	f7ff fece 	bl	8001794 <__sinit>
 80019f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80019fc:	0719      	lsls	r1, r3, #28
 80019fe:	d422      	bmi.n	8001a46 <__swsetup_r+0x62>
 8001a00:	06da      	lsls	r2, r3, #27
 8001a02:	d407      	bmi.n	8001a14 <__swsetup_r+0x30>
 8001a04:	2209      	movs	r2, #9
 8001a06:	602a      	str	r2, [r5, #0]
 8001a08:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001a0c:	81a3      	strh	r3, [r4, #12]
 8001a0e:	f04f 30ff 	mov.w	r0, #4294967295
 8001a12:	e033      	b.n	8001a7c <__swsetup_r+0x98>
 8001a14:	0758      	lsls	r0, r3, #29
 8001a16:	d512      	bpl.n	8001a3e <__swsetup_r+0x5a>
 8001a18:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001a1a:	b141      	cbz	r1, 8001a2e <__swsetup_r+0x4a>
 8001a1c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001a20:	4299      	cmp	r1, r3
 8001a22:	d002      	beq.n	8001a2a <__swsetup_r+0x46>
 8001a24:	4628      	mov	r0, r5
 8001a26:	f000 f8af 	bl	8001b88 <_free_r>
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	6363      	str	r3, [r4, #52]	@ 0x34
 8001a2e:	89a3      	ldrh	r3, [r4, #12]
 8001a30:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8001a34:	81a3      	strh	r3, [r4, #12]
 8001a36:	2300      	movs	r3, #0
 8001a38:	6063      	str	r3, [r4, #4]
 8001a3a:	6923      	ldr	r3, [r4, #16]
 8001a3c:	6023      	str	r3, [r4, #0]
 8001a3e:	89a3      	ldrh	r3, [r4, #12]
 8001a40:	f043 0308 	orr.w	r3, r3, #8
 8001a44:	81a3      	strh	r3, [r4, #12]
 8001a46:	6923      	ldr	r3, [r4, #16]
 8001a48:	b94b      	cbnz	r3, 8001a5e <__swsetup_r+0x7a>
 8001a4a:	89a3      	ldrh	r3, [r4, #12]
 8001a4c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8001a50:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001a54:	d003      	beq.n	8001a5e <__swsetup_r+0x7a>
 8001a56:	4621      	mov	r1, r4
 8001a58:	4628      	mov	r0, r5
 8001a5a:	f000 fd2f 	bl	80024bc <__smakebuf_r>
 8001a5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001a62:	f013 0201 	ands.w	r2, r3, #1
 8001a66:	d00a      	beq.n	8001a7e <__swsetup_r+0x9a>
 8001a68:	2200      	movs	r2, #0
 8001a6a:	60a2      	str	r2, [r4, #8]
 8001a6c:	6962      	ldr	r2, [r4, #20]
 8001a6e:	4252      	negs	r2, r2
 8001a70:	61a2      	str	r2, [r4, #24]
 8001a72:	6922      	ldr	r2, [r4, #16]
 8001a74:	b942      	cbnz	r2, 8001a88 <__swsetup_r+0xa4>
 8001a76:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8001a7a:	d1c5      	bne.n	8001a08 <__swsetup_r+0x24>
 8001a7c:	bd38      	pop	{r3, r4, r5, pc}
 8001a7e:	0799      	lsls	r1, r3, #30
 8001a80:	bf58      	it	pl
 8001a82:	6962      	ldrpl	r2, [r4, #20]
 8001a84:	60a2      	str	r2, [r4, #8]
 8001a86:	e7f4      	b.n	8001a72 <__swsetup_r+0x8e>
 8001a88:	2000      	movs	r0, #0
 8001a8a:	e7f7      	b.n	8001a7c <__swsetup_r+0x98>
 8001a8c:	20000024 	.word	0x20000024

08001a90 <memset>:
 8001a90:	4402      	add	r2, r0
 8001a92:	4603      	mov	r3, r0
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d100      	bne.n	8001a9a <memset+0xa>
 8001a98:	4770      	bx	lr
 8001a9a:	f803 1b01 	strb.w	r1, [r3], #1
 8001a9e:	e7f9      	b.n	8001a94 <memset+0x4>

08001aa0 <_close_r>:
 8001aa0:	b538      	push	{r3, r4, r5, lr}
 8001aa2:	4d06      	ldr	r5, [pc, #24]	@ (8001abc <_close_r+0x1c>)
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	4604      	mov	r4, r0
 8001aa8:	4608      	mov	r0, r1
 8001aaa:	602b      	str	r3, [r5, #0]
 8001aac:	f7fe fd91 	bl	80005d2 <_close>
 8001ab0:	1c43      	adds	r3, r0, #1
 8001ab2:	d102      	bne.n	8001aba <_close_r+0x1a>
 8001ab4:	682b      	ldr	r3, [r5, #0]
 8001ab6:	b103      	cbz	r3, 8001aba <_close_r+0x1a>
 8001ab8:	6023      	str	r3, [r4, #0]
 8001aba:	bd38      	pop	{r3, r4, r5, pc}
 8001abc:	200001fc 	.word	0x200001fc

08001ac0 <_lseek_r>:
 8001ac0:	b538      	push	{r3, r4, r5, lr}
 8001ac2:	4d07      	ldr	r5, [pc, #28]	@ (8001ae0 <_lseek_r+0x20>)
 8001ac4:	4604      	mov	r4, r0
 8001ac6:	4608      	mov	r0, r1
 8001ac8:	4611      	mov	r1, r2
 8001aca:	2200      	movs	r2, #0
 8001acc:	602a      	str	r2, [r5, #0]
 8001ace:	461a      	mov	r2, r3
 8001ad0:	f7fe fda6 	bl	8000620 <_lseek>
 8001ad4:	1c43      	adds	r3, r0, #1
 8001ad6:	d102      	bne.n	8001ade <_lseek_r+0x1e>
 8001ad8:	682b      	ldr	r3, [r5, #0]
 8001ada:	b103      	cbz	r3, 8001ade <_lseek_r+0x1e>
 8001adc:	6023      	str	r3, [r4, #0]
 8001ade:	bd38      	pop	{r3, r4, r5, pc}
 8001ae0:	200001fc 	.word	0x200001fc

08001ae4 <_read_r>:
 8001ae4:	b538      	push	{r3, r4, r5, lr}
 8001ae6:	4d07      	ldr	r5, [pc, #28]	@ (8001b04 <_read_r+0x20>)
 8001ae8:	4604      	mov	r4, r0
 8001aea:	4608      	mov	r0, r1
 8001aec:	4611      	mov	r1, r2
 8001aee:	2200      	movs	r2, #0
 8001af0:	602a      	str	r2, [r5, #0]
 8001af2:	461a      	mov	r2, r3
 8001af4:	f7fe fd34 	bl	8000560 <_read>
 8001af8:	1c43      	adds	r3, r0, #1
 8001afa:	d102      	bne.n	8001b02 <_read_r+0x1e>
 8001afc:	682b      	ldr	r3, [r5, #0]
 8001afe:	b103      	cbz	r3, 8001b02 <_read_r+0x1e>
 8001b00:	6023      	str	r3, [r4, #0]
 8001b02:	bd38      	pop	{r3, r4, r5, pc}
 8001b04:	200001fc 	.word	0x200001fc

08001b08 <_write_r>:
 8001b08:	b538      	push	{r3, r4, r5, lr}
 8001b0a:	4d07      	ldr	r5, [pc, #28]	@ (8001b28 <_write_r+0x20>)
 8001b0c:	4604      	mov	r4, r0
 8001b0e:	4608      	mov	r0, r1
 8001b10:	4611      	mov	r1, r2
 8001b12:	2200      	movs	r2, #0
 8001b14:	602a      	str	r2, [r5, #0]
 8001b16:	461a      	mov	r2, r3
 8001b18:	f7fe fd3f 	bl	800059a <_write>
 8001b1c:	1c43      	adds	r3, r0, #1
 8001b1e:	d102      	bne.n	8001b26 <_write_r+0x1e>
 8001b20:	682b      	ldr	r3, [r5, #0]
 8001b22:	b103      	cbz	r3, 8001b26 <_write_r+0x1e>
 8001b24:	6023      	str	r3, [r4, #0]
 8001b26:	bd38      	pop	{r3, r4, r5, pc}
 8001b28:	200001fc 	.word	0x200001fc

08001b2c <__errno>:
 8001b2c:	4b01      	ldr	r3, [pc, #4]	@ (8001b34 <__errno+0x8>)
 8001b2e:	6818      	ldr	r0, [r3, #0]
 8001b30:	4770      	bx	lr
 8001b32:	bf00      	nop
 8001b34:	20000024 	.word	0x20000024

08001b38 <__libc_init_array>:
 8001b38:	b570      	push	{r4, r5, r6, lr}
 8001b3a:	4d0d      	ldr	r5, [pc, #52]	@ (8001b70 <__libc_init_array+0x38>)
 8001b3c:	4c0d      	ldr	r4, [pc, #52]	@ (8001b74 <__libc_init_array+0x3c>)
 8001b3e:	1b64      	subs	r4, r4, r5
 8001b40:	10a4      	asrs	r4, r4, #2
 8001b42:	2600      	movs	r6, #0
 8001b44:	42a6      	cmp	r6, r4
 8001b46:	d109      	bne.n	8001b5c <__libc_init_array+0x24>
 8001b48:	4d0b      	ldr	r5, [pc, #44]	@ (8001b78 <__libc_init_array+0x40>)
 8001b4a:	4c0c      	ldr	r4, [pc, #48]	@ (8001b7c <__libc_init_array+0x44>)
 8001b4c:	f000 fd24 	bl	8002598 <_init>
 8001b50:	1b64      	subs	r4, r4, r5
 8001b52:	10a4      	asrs	r4, r4, #2
 8001b54:	2600      	movs	r6, #0
 8001b56:	42a6      	cmp	r6, r4
 8001b58:	d105      	bne.n	8001b66 <__libc_init_array+0x2e>
 8001b5a:	bd70      	pop	{r4, r5, r6, pc}
 8001b5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001b60:	4798      	blx	r3
 8001b62:	3601      	adds	r6, #1
 8001b64:	e7ee      	b.n	8001b44 <__libc_init_array+0xc>
 8001b66:	f855 3b04 	ldr.w	r3, [r5], #4
 8001b6a:	4798      	blx	r3
 8001b6c:	3601      	adds	r6, #1
 8001b6e:	e7f2      	b.n	8001b56 <__libc_init_array+0x1e>
 8001b70:	0800262c 	.word	0x0800262c
 8001b74:	0800262c 	.word	0x0800262c
 8001b78:	0800262c 	.word	0x0800262c
 8001b7c:	08002630 	.word	0x08002630

08001b80 <__retarget_lock_init_recursive>:
 8001b80:	4770      	bx	lr

08001b82 <__retarget_lock_acquire_recursive>:
 8001b82:	4770      	bx	lr

08001b84 <__retarget_lock_release_recursive>:
 8001b84:	4770      	bx	lr
	...

08001b88 <_free_r>:
 8001b88:	b538      	push	{r3, r4, r5, lr}
 8001b8a:	4605      	mov	r5, r0
 8001b8c:	2900      	cmp	r1, #0
 8001b8e:	d041      	beq.n	8001c14 <_free_r+0x8c>
 8001b90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001b94:	1f0c      	subs	r4, r1, #4
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	bfb8      	it	lt
 8001b9a:	18e4      	addlt	r4, r4, r3
 8001b9c:	f000 f8e0 	bl	8001d60 <__malloc_lock>
 8001ba0:	4a1d      	ldr	r2, [pc, #116]	@ (8001c18 <_free_r+0x90>)
 8001ba2:	6813      	ldr	r3, [r2, #0]
 8001ba4:	b933      	cbnz	r3, 8001bb4 <_free_r+0x2c>
 8001ba6:	6063      	str	r3, [r4, #4]
 8001ba8:	6014      	str	r4, [r2, #0]
 8001baa:	4628      	mov	r0, r5
 8001bac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001bb0:	f000 b8dc 	b.w	8001d6c <__malloc_unlock>
 8001bb4:	42a3      	cmp	r3, r4
 8001bb6:	d908      	bls.n	8001bca <_free_r+0x42>
 8001bb8:	6820      	ldr	r0, [r4, #0]
 8001bba:	1821      	adds	r1, r4, r0
 8001bbc:	428b      	cmp	r3, r1
 8001bbe:	bf01      	itttt	eq
 8001bc0:	6819      	ldreq	r1, [r3, #0]
 8001bc2:	685b      	ldreq	r3, [r3, #4]
 8001bc4:	1809      	addeq	r1, r1, r0
 8001bc6:	6021      	streq	r1, [r4, #0]
 8001bc8:	e7ed      	b.n	8001ba6 <_free_r+0x1e>
 8001bca:	461a      	mov	r2, r3
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	b10b      	cbz	r3, 8001bd4 <_free_r+0x4c>
 8001bd0:	42a3      	cmp	r3, r4
 8001bd2:	d9fa      	bls.n	8001bca <_free_r+0x42>
 8001bd4:	6811      	ldr	r1, [r2, #0]
 8001bd6:	1850      	adds	r0, r2, r1
 8001bd8:	42a0      	cmp	r0, r4
 8001bda:	d10b      	bne.n	8001bf4 <_free_r+0x6c>
 8001bdc:	6820      	ldr	r0, [r4, #0]
 8001bde:	4401      	add	r1, r0
 8001be0:	1850      	adds	r0, r2, r1
 8001be2:	4283      	cmp	r3, r0
 8001be4:	6011      	str	r1, [r2, #0]
 8001be6:	d1e0      	bne.n	8001baa <_free_r+0x22>
 8001be8:	6818      	ldr	r0, [r3, #0]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	6053      	str	r3, [r2, #4]
 8001bee:	4408      	add	r0, r1
 8001bf0:	6010      	str	r0, [r2, #0]
 8001bf2:	e7da      	b.n	8001baa <_free_r+0x22>
 8001bf4:	d902      	bls.n	8001bfc <_free_r+0x74>
 8001bf6:	230c      	movs	r3, #12
 8001bf8:	602b      	str	r3, [r5, #0]
 8001bfa:	e7d6      	b.n	8001baa <_free_r+0x22>
 8001bfc:	6820      	ldr	r0, [r4, #0]
 8001bfe:	1821      	adds	r1, r4, r0
 8001c00:	428b      	cmp	r3, r1
 8001c02:	bf04      	itt	eq
 8001c04:	6819      	ldreq	r1, [r3, #0]
 8001c06:	685b      	ldreq	r3, [r3, #4]
 8001c08:	6063      	str	r3, [r4, #4]
 8001c0a:	bf04      	itt	eq
 8001c0c:	1809      	addeq	r1, r1, r0
 8001c0e:	6021      	streq	r1, [r4, #0]
 8001c10:	6054      	str	r4, [r2, #4]
 8001c12:	e7ca      	b.n	8001baa <_free_r+0x22>
 8001c14:	bd38      	pop	{r3, r4, r5, pc}
 8001c16:	bf00      	nop
 8001c18:	20000208 	.word	0x20000208

08001c1c <sbrk_aligned>:
 8001c1c:	b570      	push	{r4, r5, r6, lr}
 8001c1e:	4e0f      	ldr	r6, [pc, #60]	@ (8001c5c <sbrk_aligned+0x40>)
 8001c20:	460c      	mov	r4, r1
 8001c22:	6831      	ldr	r1, [r6, #0]
 8001c24:	4605      	mov	r5, r0
 8001c26:	b911      	cbnz	r1, 8001c2e <sbrk_aligned+0x12>
 8001c28:	f000 fca6 	bl	8002578 <_sbrk_r>
 8001c2c:	6030      	str	r0, [r6, #0]
 8001c2e:	4621      	mov	r1, r4
 8001c30:	4628      	mov	r0, r5
 8001c32:	f000 fca1 	bl	8002578 <_sbrk_r>
 8001c36:	1c43      	adds	r3, r0, #1
 8001c38:	d103      	bne.n	8001c42 <sbrk_aligned+0x26>
 8001c3a:	f04f 34ff 	mov.w	r4, #4294967295
 8001c3e:	4620      	mov	r0, r4
 8001c40:	bd70      	pop	{r4, r5, r6, pc}
 8001c42:	1cc4      	adds	r4, r0, #3
 8001c44:	f024 0403 	bic.w	r4, r4, #3
 8001c48:	42a0      	cmp	r0, r4
 8001c4a:	d0f8      	beq.n	8001c3e <sbrk_aligned+0x22>
 8001c4c:	1a21      	subs	r1, r4, r0
 8001c4e:	4628      	mov	r0, r5
 8001c50:	f000 fc92 	bl	8002578 <_sbrk_r>
 8001c54:	3001      	adds	r0, #1
 8001c56:	d1f2      	bne.n	8001c3e <sbrk_aligned+0x22>
 8001c58:	e7ef      	b.n	8001c3a <sbrk_aligned+0x1e>
 8001c5a:	bf00      	nop
 8001c5c:	20000204 	.word	0x20000204

08001c60 <_malloc_r>:
 8001c60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001c64:	1ccd      	adds	r5, r1, #3
 8001c66:	f025 0503 	bic.w	r5, r5, #3
 8001c6a:	3508      	adds	r5, #8
 8001c6c:	2d0c      	cmp	r5, #12
 8001c6e:	bf38      	it	cc
 8001c70:	250c      	movcc	r5, #12
 8001c72:	2d00      	cmp	r5, #0
 8001c74:	4606      	mov	r6, r0
 8001c76:	db01      	blt.n	8001c7c <_malloc_r+0x1c>
 8001c78:	42a9      	cmp	r1, r5
 8001c7a:	d904      	bls.n	8001c86 <_malloc_r+0x26>
 8001c7c:	230c      	movs	r3, #12
 8001c7e:	6033      	str	r3, [r6, #0]
 8001c80:	2000      	movs	r0, #0
 8001c82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001c86:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8001d5c <_malloc_r+0xfc>
 8001c8a:	f000 f869 	bl	8001d60 <__malloc_lock>
 8001c8e:	f8d8 3000 	ldr.w	r3, [r8]
 8001c92:	461c      	mov	r4, r3
 8001c94:	bb44      	cbnz	r4, 8001ce8 <_malloc_r+0x88>
 8001c96:	4629      	mov	r1, r5
 8001c98:	4630      	mov	r0, r6
 8001c9a:	f7ff ffbf 	bl	8001c1c <sbrk_aligned>
 8001c9e:	1c43      	adds	r3, r0, #1
 8001ca0:	4604      	mov	r4, r0
 8001ca2:	d158      	bne.n	8001d56 <_malloc_r+0xf6>
 8001ca4:	f8d8 4000 	ldr.w	r4, [r8]
 8001ca8:	4627      	mov	r7, r4
 8001caa:	2f00      	cmp	r7, #0
 8001cac:	d143      	bne.n	8001d36 <_malloc_r+0xd6>
 8001cae:	2c00      	cmp	r4, #0
 8001cb0:	d04b      	beq.n	8001d4a <_malloc_r+0xea>
 8001cb2:	6823      	ldr	r3, [r4, #0]
 8001cb4:	4639      	mov	r1, r7
 8001cb6:	4630      	mov	r0, r6
 8001cb8:	eb04 0903 	add.w	r9, r4, r3
 8001cbc:	f000 fc5c 	bl	8002578 <_sbrk_r>
 8001cc0:	4581      	cmp	r9, r0
 8001cc2:	d142      	bne.n	8001d4a <_malloc_r+0xea>
 8001cc4:	6821      	ldr	r1, [r4, #0]
 8001cc6:	1a6d      	subs	r5, r5, r1
 8001cc8:	4629      	mov	r1, r5
 8001cca:	4630      	mov	r0, r6
 8001ccc:	f7ff ffa6 	bl	8001c1c <sbrk_aligned>
 8001cd0:	3001      	adds	r0, #1
 8001cd2:	d03a      	beq.n	8001d4a <_malloc_r+0xea>
 8001cd4:	6823      	ldr	r3, [r4, #0]
 8001cd6:	442b      	add	r3, r5
 8001cd8:	6023      	str	r3, [r4, #0]
 8001cda:	f8d8 3000 	ldr.w	r3, [r8]
 8001cde:	685a      	ldr	r2, [r3, #4]
 8001ce0:	bb62      	cbnz	r2, 8001d3c <_malloc_r+0xdc>
 8001ce2:	f8c8 7000 	str.w	r7, [r8]
 8001ce6:	e00f      	b.n	8001d08 <_malloc_r+0xa8>
 8001ce8:	6822      	ldr	r2, [r4, #0]
 8001cea:	1b52      	subs	r2, r2, r5
 8001cec:	d420      	bmi.n	8001d30 <_malloc_r+0xd0>
 8001cee:	2a0b      	cmp	r2, #11
 8001cf0:	d917      	bls.n	8001d22 <_malloc_r+0xc2>
 8001cf2:	1961      	adds	r1, r4, r5
 8001cf4:	42a3      	cmp	r3, r4
 8001cf6:	6025      	str	r5, [r4, #0]
 8001cf8:	bf18      	it	ne
 8001cfa:	6059      	strne	r1, [r3, #4]
 8001cfc:	6863      	ldr	r3, [r4, #4]
 8001cfe:	bf08      	it	eq
 8001d00:	f8c8 1000 	streq.w	r1, [r8]
 8001d04:	5162      	str	r2, [r4, r5]
 8001d06:	604b      	str	r3, [r1, #4]
 8001d08:	4630      	mov	r0, r6
 8001d0a:	f000 f82f 	bl	8001d6c <__malloc_unlock>
 8001d0e:	f104 000b 	add.w	r0, r4, #11
 8001d12:	1d23      	adds	r3, r4, #4
 8001d14:	f020 0007 	bic.w	r0, r0, #7
 8001d18:	1ac2      	subs	r2, r0, r3
 8001d1a:	bf1c      	itt	ne
 8001d1c:	1a1b      	subne	r3, r3, r0
 8001d1e:	50a3      	strne	r3, [r4, r2]
 8001d20:	e7af      	b.n	8001c82 <_malloc_r+0x22>
 8001d22:	6862      	ldr	r2, [r4, #4]
 8001d24:	42a3      	cmp	r3, r4
 8001d26:	bf0c      	ite	eq
 8001d28:	f8c8 2000 	streq.w	r2, [r8]
 8001d2c:	605a      	strne	r2, [r3, #4]
 8001d2e:	e7eb      	b.n	8001d08 <_malloc_r+0xa8>
 8001d30:	4623      	mov	r3, r4
 8001d32:	6864      	ldr	r4, [r4, #4]
 8001d34:	e7ae      	b.n	8001c94 <_malloc_r+0x34>
 8001d36:	463c      	mov	r4, r7
 8001d38:	687f      	ldr	r7, [r7, #4]
 8001d3a:	e7b6      	b.n	8001caa <_malloc_r+0x4a>
 8001d3c:	461a      	mov	r2, r3
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	42a3      	cmp	r3, r4
 8001d42:	d1fb      	bne.n	8001d3c <_malloc_r+0xdc>
 8001d44:	2300      	movs	r3, #0
 8001d46:	6053      	str	r3, [r2, #4]
 8001d48:	e7de      	b.n	8001d08 <_malloc_r+0xa8>
 8001d4a:	230c      	movs	r3, #12
 8001d4c:	6033      	str	r3, [r6, #0]
 8001d4e:	4630      	mov	r0, r6
 8001d50:	f000 f80c 	bl	8001d6c <__malloc_unlock>
 8001d54:	e794      	b.n	8001c80 <_malloc_r+0x20>
 8001d56:	6005      	str	r5, [r0, #0]
 8001d58:	e7d6      	b.n	8001d08 <_malloc_r+0xa8>
 8001d5a:	bf00      	nop
 8001d5c:	20000208 	.word	0x20000208

08001d60 <__malloc_lock>:
 8001d60:	4801      	ldr	r0, [pc, #4]	@ (8001d68 <__malloc_lock+0x8>)
 8001d62:	f7ff bf0e 	b.w	8001b82 <__retarget_lock_acquire_recursive>
 8001d66:	bf00      	nop
 8001d68:	20000200 	.word	0x20000200

08001d6c <__malloc_unlock>:
 8001d6c:	4801      	ldr	r0, [pc, #4]	@ (8001d74 <__malloc_unlock+0x8>)
 8001d6e:	f7ff bf09 	b.w	8001b84 <__retarget_lock_release_recursive>
 8001d72:	bf00      	nop
 8001d74:	20000200 	.word	0x20000200

08001d78 <__sfputc_r>:
 8001d78:	6893      	ldr	r3, [r2, #8]
 8001d7a:	3b01      	subs	r3, #1
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	b410      	push	{r4}
 8001d80:	6093      	str	r3, [r2, #8]
 8001d82:	da08      	bge.n	8001d96 <__sfputc_r+0x1e>
 8001d84:	6994      	ldr	r4, [r2, #24]
 8001d86:	42a3      	cmp	r3, r4
 8001d88:	db01      	blt.n	8001d8e <__sfputc_r+0x16>
 8001d8a:	290a      	cmp	r1, #10
 8001d8c:	d103      	bne.n	8001d96 <__sfputc_r+0x1e>
 8001d8e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001d92:	f7ff bde8 	b.w	8001966 <__swbuf_r>
 8001d96:	6813      	ldr	r3, [r2, #0]
 8001d98:	1c58      	adds	r0, r3, #1
 8001d9a:	6010      	str	r0, [r2, #0]
 8001d9c:	7019      	strb	r1, [r3, #0]
 8001d9e:	4608      	mov	r0, r1
 8001da0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001da4:	4770      	bx	lr

08001da6 <__sfputs_r>:
 8001da6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001da8:	4606      	mov	r6, r0
 8001daa:	460f      	mov	r7, r1
 8001dac:	4614      	mov	r4, r2
 8001dae:	18d5      	adds	r5, r2, r3
 8001db0:	42ac      	cmp	r4, r5
 8001db2:	d101      	bne.n	8001db8 <__sfputs_r+0x12>
 8001db4:	2000      	movs	r0, #0
 8001db6:	e007      	b.n	8001dc8 <__sfputs_r+0x22>
 8001db8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001dbc:	463a      	mov	r2, r7
 8001dbe:	4630      	mov	r0, r6
 8001dc0:	f7ff ffda 	bl	8001d78 <__sfputc_r>
 8001dc4:	1c43      	adds	r3, r0, #1
 8001dc6:	d1f3      	bne.n	8001db0 <__sfputs_r+0xa>
 8001dc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001dcc <_vfiprintf_r>:
 8001dcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001dd0:	460d      	mov	r5, r1
 8001dd2:	b09d      	sub	sp, #116	@ 0x74
 8001dd4:	4614      	mov	r4, r2
 8001dd6:	4698      	mov	r8, r3
 8001dd8:	4606      	mov	r6, r0
 8001dda:	b118      	cbz	r0, 8001de4 <_vfiprintf_r+0x18>
 8001ddc:	6a03      	ldr	r3, [r0, #32]
 8001dde:	b90b      	cbnz	r3, 8001de4 <_vfiprintf_r+0x18>
 8001de0:	f7ff fcd8 	bl	8001794 <__sinit>
 8001de4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001de6:	07d9      	lsls	r1, r3, #31
 8001de8:	d405      	bmi.n	8001df6 <_vfiprintf_r+0x2a>
 8001dea:	89ab      	ldrh	r3, [r5, #12]
 8001dec:	059a      	lsls	r2, r3, #22
 8001dee:	d402      	bmi.n	8001df6 <_vfiprintf_r+0x2a>
 8001df0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001df2:	f7ff fec6 	bl	8001b82 <__retarget_lock_acquire_recursive>
 8001df6:	89ab      	ldrh	r3, [r5, #12]
 8001df8:	071b      	lsls	r3, r3, #28
 8001dfa:	d501      	bpl.n	8001e00 <_vfiprintf_r+0x34>
 8001dfc:	692b      	ldr	r3, [r5, #16]
 8001dfe:	b99b      	cbnz	r3, 8001e28 <_vfiprintf_r+0x5c>
 8001e00:	4629      	mov	r1, r5
 8001e02:	4630      	mov	r0, r6
 8001e04:	f7ff fdee 	bl	80019e4 <__swsetup_r>
 8001e08:	b170      	cbz	r0, 8001e28 <_vfiprintf_r+0x5c>
 8001e0a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001e0c:	07dc      	lsls	r4, r3, #31
 8001e0e:	d504      	bpl.n	8001e1a <_vfiprintf_r+0x4e>
 8001e10:	f04f 30ff 	mov.w	r0, #4294967295
 8001e14:	b01d      	add	sp, #116	@ 0x74
 8001e16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001e1a:	89ab      	ldrh	r3, [r5, #12]
 8001e1c:	0598      	lsls	r0, r3, #22
 8001e1e:	d4f7      	bmi.n	8001e10 <_vfiprintf_r+0x44>
 8001e20:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001e22:	f7ff feaf 	bl	8001b84 <__retarget_lock_release_recursive>
 8001e26:	e7f3      	b.n	8001e10 <_vfiprintf_r+0x44>
 8001e28:	2300      	movs	r3, #0
 8001e2a:	9309      	str	r3, [sp, #36]	@ 0x24
 8001e2c:	2320      	movs	r3, #32
 8001e2e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8001e32:	f8cd 800c 	str.w	r8, [sp, #12]
 8001e36:	2330      	movs	r3, #48	@ 0x30
 8001e38:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8001fe8 <_vfiprintf_r+0x21c>
 8001e3c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8001e40:	f04f 0901 	mov.w	r9, #1
 8001e44:	4623      	mov	r3, r4
 8001e46:	469a      	mov	sl, r3
 8001e48:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001e4c:	b10a      	cbz	r2, 8001e52 <_vfiprintf_r+0x86>
 8001e4e:	2a25      	cmp	r2, #37	@ 0x25
 8001e50:	d1f9      	bne.n	8001e46 <_vfiprintf_r+0x7a>
 8001e52:	ebba 0b04 	subs.w	fp, sl, r4
 8001e56:	d00b      	beq.n	8001e70 <_vfiprintf_r+0xa4>
 8001e58:	465b      	mov	r3, fp
 8001e5a:	4622      	mov	r2, r4
 8001e5c:	4629      	mov	r1, r5
 8001e5e:	4630      	mov	r0, r6
 8001e60:	f7ff ffa1 	bl	8001da6 <__sfputs_r>
 8001e64:	3001      	adds	r0, #1
 8001e66:	f000 80a7 	beq.w	8001fb8 <_vfiprintf_r+0x1ec>
 8001e6a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8001e6c:	445a      	add	r2, fp
 8001e6e:	9209      	str	r2, [sp, #36]	@ 0x24
 8001e70:	f89a 3000 	ldrb.w	r3, [sl]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	f000 809f 	beq.w	8001fb8 <_vfiprintf_r+0x1ec>
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	f04f 32ff 	mov.w	r2, #4294967295
 8001e80:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001e84:	f10a 0a01 	add.w	sl, sl, #1
 8001e88:	9304      	str	r3, [sp, #16]
 8001e8a:	9307      	str	r3, [sp, #28]
 8001e8c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8001e90:	931a      	str	r3, [sp, #104]	@ 0x68
 8001e92:	4654      	mov	r4, sl
 8001e94:	2205      	movs	r2, #5
 8001e96:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001e9a:	4853      	ldr	r0, [pc, #332]	@ (8001fe8 <_vfiprintf_r+0x21c>)
 8001e9c:	f7fe f9b8 	bl	8000210 <memchr>
 8001ea0:	9a04      	ldr	r2, [sp, #16]
 8001ea2:	b9d8      	cbnz	r0, 8001edc <_vfiprintf_r+0x110>
 8001ea4:	06d1      	lsls	r1, r2, #27
 8001ea6:	bf44      	itt	mi
 8001ea8:	2320      	movmi	r3, #32
 8001eaa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001eae:	0713      	lsls	r3, r2, #28
 8001eb0:	bf44      	itt	mi
 8001eb2:	232b      	movmi	r3, #43	@ 0x2b
 8001eb4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001eb8:	f89a 3000 	ldrb.w	r3, [sl]
 8001ebc:	2b2a      	cmp	r3, #42	@ 0x2a
 8001ebe:	d015      	beq.n	8001eec <_vfiprintf_r+0x120>
 8001ec0:	9a07      	ldr	r2, [sp, #28]
 8001ec2:	4654      	mov	r4, sl
 8001ec4:	2000      	movs	r0, #0
 8001ec6:	f04f 0c0a 	mov.w	ip, #10
 8001eca:	4621      	mov	r1, r4
 8001ecc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001ed0:	3b30      	subs	r3, #48	@ 0x30
 8001ed2:	2b09      	cmp	r3, #9
 8001ed4:	d94b      	bls.n	8001f6e <_vfiprintf_r+0x1a2>
 8001ed6:	b1b0      	cbz	r0, 8001f06 <_vfiprintf_r+0x13a>
 8001ed8:	9207      	str	r2, [sp, #28]
 8001eda:	e014      	b.n	8001f06 <_vfiprintf_r+0x13a>
 8001edc:	eba0 0308 	sub.w	r3, r0, r8
 8001ee0:	fa09 f303 	lsl.w	r3, r9, r3
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	9304      	str	r3, [sp, #16]
 8001ee8:	46a2      	mov	sl, r4
 8001eea:	e7d2      	b.n	8001e92 <_vfiprintf_r+0xc6>
 8001eec:	9b03      	ldr	r3, [sp, #12]
 8001eee:	1d19      	adds	r1, r3, #4
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	9103      	str	r1, [sp, #12]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	bfbb      	ittet	lt
 8001ef8:	425b      	neglt	r3, r3
 8001efa:	f042 0202 	orrlt.w	r2, r2, #2
 8001efe:	9307      	strge	r3, [sp, #28]
 8001f00:	9307      	strlt	r3, [sp, #28]
 8001f02:	bfb8      	it	lt
 8001f04:	9204      	strlt	r2, [sp, #16]
 8001f06:	7823      	ldrb	r3, [r4, #0]
 8001f08:	2b2e      	cmp	r3, #46	@ 0x2e
 8001f0a:	d10a      	bne.n	8001f22 <_vfiprintf_r+0x156>
 8001f0c:	7863      	ldrb	r3, [r4, #1]
 8001f0e:	2b2a      	cmp	r3, #42	@ 0x2a
 8001f10:	d132      	bne.n	8001f78 <_vfiprintf_r+0x1ac>
 8001f12:	9b03      	ldr	r3, [sp, #12]
 8001f14:	1d1a      	adds	r2, r3, #4
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	9203      	str	r2, [sp, #12]
 8001f1a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8001f1e:	3402      	adds	r4, #2
 8001f20:	9305      	str	r3, [sp, #20]
 8001f22:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8001ff8 <_vfiprintf_r+0x22c>
 8001f26:	7821      	ldrb	r1, [r4, #0]
 8001f28:	2203      	movs	r2, #3
 8001f2a:	4650      	mov	r0, sl
 8001f2c:	f7fe f970 	bl	8000210 <memchr>
 8001f30:	b138      	cbz	r0, 8001f42 <_vfiprintf_r+0x176>
 8001f32:	9b04      	ldr	r3, [sp, #16]
 8001f34:	eba0 000a 	sub.w	r0, r0, sl
 8001f38:	2240      	movs	r2, #64	@ 0x40
 8001f3a:	4082      	lsls	r2, r0
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	3401      	adds	r4, #1
 8001f40:	9304      	str	r3, [sp, #16]
 8001f42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001f46:	4829      	ldr	r0, [pc, #164]	@ (8001fec <_vfiprintf_r+0x220>)
 8001f48:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8001f4c:	2206      	movs	r2, #6
 8001f4e:	f7fe f95f 	bl	8000210 <memchr>
 8001f52:	2800      	cmp	r0, #0
 8001f54:	d03f      	beq.n	8001fd6 <_vfiprintf_r+0x20a>
 8001f56:	4b26      	ldr	r3, [pc, #152]	@ (8001ff0 <_vfiprintf_r+0x224>)
 8001f58:	bb1b      	cbnz	r3, 8001fa2 <_vfiprintf_r+0x1d6>
 8001f5a:	9b03      	ldr	r3, [sp, #12]
 8001f5c:	3307      	adds	r3, #7
 8001f5e:	f023 0307 	bic.w	r3, r3, #7
 8001f62:	3308      	adds	r3, #8
 8001f64:	9303      	str	r3, [sp, #12]
 8001f66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001f68:	443b      	add	r3, r7
 8001f6a:	9309      	str	r3, [sp, #36]	@ 0x24
 8001f6c:	e76a      	b.n	8001e44 <_vfiprintf_r+0x78>
 8001f6e:	fb0c 3202 	mla	r2, ip, r2, r3
 8001f72:	460c      	mov	r4, r1
 8001f74:	2001      	movs	r0, #1
 8001f76:	e7a8      	b.n	8001eca <_vfiprintf_r+0xfe>
 8001f78:	2300      	movs	r3, #0
 8001f7a:	3401      	adds	r4, #1
 8001f7c:	9305      	str	r3, [sp, #20]
 8001f7e:	4619      	mov	r1, r3
 8001f80:	f04f 0c0a 	mov.w	ip, #10
 8001f84:	4620      	mov	r0, r4
 8001f86:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001f8a:	3a30      	subs	r2, #48	@ 0x30
 8001f8c:	2a09      	cmp	r2, #9
 8001f8e:	d903      	bls.n	8001f98 <_vfiprintf_r+0x1cc>
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d0c6      	beq.n	8001f22 <_vfiprintf_r+0x156>
 8001f94:	9105      	str	r1, [sp, #20]
 8001f96:	e7c4      	b.n	8001f22 <_vfiprintf_r+0x156>
 8001f98:	fb0c 2101 	mla	r1, ip, r1, r2
 8001f9c:	4604      	mov	r4, r0
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e7f0      	b.n	8001f84 <_vfiprintf_r+0x1b8>
 8001fa2:	ab03      	add	r3, sp, #12
 8001fa4:	9300      	str	r3, [sp, #0]
 8001fa6:	462a      	mov	r2, r5
 8001fa8:	4b12      	ldr	r3, [pc, #72]	@ (8001ff4 <_vfiprintf_r+0x228>)
 8001faa:	a904      	add	r1, sp, #16
 8001fac:	4630      	mov	r0, r6
 8001fae:	f3af 8000 	nop.w
 8001fb2:	4607      	mov	r7, r0
 8001fb4:	1c78      	adds	r0, r7, #1
 8001fb6:	d1d6      	bne.n	8001f66 <_vfiprintf_r+0x19a>
 8001fb8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001fba:	07d9      	lsls	r1, r3, #31
 8001fbc:	d405      	bmi.n	8001fca <_vfiprintf_r+0x1fe>
 8001fbe:	89ab      	ldrh	r3, [r5, #12]
 8001fc0:	059a      	lsls	r2, r3, #22
 8001fc2:	d402      	bmi.n	8001fca <_vfiprintf_r+0x1fe>
 8001fc4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001fc6:	f7ff fddd 	bl	8001b84 <__retarget_lock_release_recursive>
 8001fca:	89ab      	ldrh	r3, [r5, #12]
 8001fcc:	065b      	lsls	r3, r3, #25
 8001fce:	f53f af1f 	bmi.w	8001e10 <_vfiprintf_r+0x44>
 8001fd2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8001fd4:	e71e      	b.n	8001e14 <_vfiprintf_r+0x48>
 8001fd6:	ab03      	add	r3, sp, #12
 8001fd8:	9300      	str	r3, [sp, #0]
 8001fda:	462a      	mov	r2, r5
 8001fdc:	4b05      	ldr	r3, [pc, #20]	@ (8001ff4 <_vfiprintf_r+0x228>)
 8001fde:	a904      	add	r1, sp, #16
 8001fe0:	4630      	mov	r0, r6
 8001fe2:	f000 f879 	bl	80020d8 <_printf_i>
 8001fe6:	e7e4      	b.n	8001fb2 <_vfiprintf_r+0x1e6>
 8001fe8:	080025ef 	.word	0x080025ef
 8001fec:	080025f9 	.word	0x080025f9
 8001ff0:	00000000 	.word	0x00000000
 8001ff4:	08001da7 	.word	0x08001da7
 8001ff8:	080025f5 	.word	0x080025f5

08001ffc <_printf_common>:
 8001ffc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002000:	4616      	mov	r6, r2
 8002002:	4698      	mov	r8, r3
 8002004:	688a      	ldr	r2, [r1, #8]
 8002006:	690b      	ldr	r3, [r1, #16]
 8002008:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800200c:	4293      	cmp	r3, r2
 800200e:	bfb8      	it	lt
 8002010:	4613      	movlt	r3, r2
 8002012:	6033      	str	r3, [r6, #0]
 8002014:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002018:	4607      	mov	r7, r0
 800201a:	460c      	mov	r4, r1
 800201c:	b10a      	cbz	r2, 8002022 <_printf_common+0x26>
 800201e:	3301      	adds	r3, #1
 8002020:	6033      	str	r3, [r6, #0]
 8002022:	6823      	ldr	r3, [r4, #0]
 8002024:	0699      	lsls	r1, r3, #26
 8002026:	bf42      	ittt	mi
 8002028:	6833      	ldrmi	r3, [r6, #0]
 800202a:	3302      	addmi	r3, #2
 800202c:	6033      	strmi	r3, [r6, #0]
 800202e:	6825      	ldr	r5, [r4, #0]
 8002030:	f015 0506 	ands.w	r5, r5, #6
 8002034:	d106      	bne.n	8002044 <_printf_common+0x48>
 8002036:	f104 0a19 	add.w	sl, r4, #25
 800203a:	68e3      	ldr	r3, [r4, #12]
 800203c:	6832      	ldr	r2, [r6, #0]
 800203e:	1a9b      	subs	r3, r3, r2
 8002040:	42ab      	cmp	r3, r5
 8002042:	dc26      	bgt.n	8002092 <_printf_common+0x96>
 8002044:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002048:	6822      	ldr	r2, [r4, #0]
 800204a:	3b00      	subs	r3, #0
 800204c:	bf18      	it	ne
 800204e:	2301      	movne	r3, #1
 8002050:	0692      	lsls	r2, r2, #26
 8002052:	d42b      	bmi.n	80020ac <_printf_common+0xb0>
 8002054:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002058:	4641      	mov	r1, r8
 800205a:	4638      	mov	r0, r7
 800205c:	47c8      	blx	r9
 800205e:	3001      	adds	r0, #1
 8002060:	d01e      	beq.n	80020a0 <_printf_common+0xa4>
 8002062:	6823      	ldr	r3, [r4, #0]
 8002064:	6922      	ldr	r2, [r4, #16]
 8002066:	f003 0306 	and.w	r3, r3, #6
 800206a:	2b04      	cmp	r3, #4
 800206c:	bf02      	ittt	eq
 800206e:	68e5      	ldreq	r5, [r4, #12]
 8002070:	6833      	ldreq	r3, [r6, #0]
 8002072:	1aed      	subeq	r5, r5, r3
 8002074:	68a3      	ldr	r3, [r4, #8]
 8002076:	bf0c      	ite	eq
 8002078:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800207c:	2500      	movne	r5, #0
 800207e:	4293      	cmp	r3, r2
 8002080:	bfc4      	itt	gt
 8002082:	1a9b      	subgt	r3, r3, r2
 8002084:	18ed      	addgt	r5, r5, r3
 8002086:	2600      	movs	r6, #0
 8002088:	341a      	adds	r4, #26
 800208a:	42b5      	cmp	r5, r6
 800208c:	d11a      	bne.n	80020c4 <_printf_common+0xc8>
 800208e:	2000      	movs	r0, #0
 8002090:	e008      	b.n	80020a4 <_printf_common+0xa8>
 8002092:	2301      	movs	r3, #1
 8002094:	4652      	mov	r2, sl
 8002096:	4641      	mov	r1, r8
 8002098:	4638      	mov	r0, r7
 800209a:	47c8      	blx	r9
 800209c:	3001      	adds	r0, #1
 800209e:	d103      	bne.n	80020a8 <_printf_common+0xac>
 80020a0:	f04f 30ff 	mov.w	r0, #4294967295
 80020a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80020a8:	3501      	adds	r5, #1
 80020aa:	e7c6      	b.n	800203a <_printf_common+0x3e>
 80020ac:	18e1      	adds	r1, r4, r3
 80020ae:	1c5a      	adds	r2, r3, #1
 80020b0:	2030      	movs	r0, #48	@ 0x30
 80020b2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80020b6:	4422      	add	r2, r4
 80020b8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80020bc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80020c0:	3302      	adds	r3, #2
 80020c2:	e7c7      	b.n	8002054 <_printf_common+0x58>
 80020c4:	2301      	movs	r3, #1
 80020c6:	4622      	mov	r2, r4
 80020c8:	4641      	mov	r1, r8
 80020ca:	4638      	mov	r0, r7
 80020cc:	47c8      	blx	r9
 80020ce:	3001      	adds	r0, #1
 80020d0:	d0e6      	beq.n	80020a0 <_printf_common+0xa4>
 80020d2:	3601      	adds	r6, #1
 80020d4:	e7d9      	b.n	800208a <_printf_common+0x8e>
	...

080020d8 <_printf_i>:
 80020d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80020dc:	7e0f      	ldrb	r7, [r1, #24]
 80020de:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80020e0:	2f78      	cmp	r7, #120	@ 0x78
 80020e2:	4691      	mov	r9, r2
 80020e4:	4680      	mov	r8, r0
 80020e6:	460c      	mov	r4, r1
 80020e8:	469a      	mov	sl, r3
 80020ea:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80020ee:	d807      	bhi.n	8002100 <_printf_i+0x28>
 80020f0:	2f62      	cmp	r7, #98	@ 0x62
 80020f2:	d80a      	bhi.n	800210a <_printf_i+0x32>
 80020f4:	2f00      	cmp	r7, #0
 80020f6:	f000 80d2 	beq.w	800229e <_printf_i+0x1c6>
 80020fa:	2f58      	cmp	r7, #88	@ 0x58
 80020fc:	f000 80b9 	beq.w	8002272 <_printf_i+0x19a>
 8002100:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002104:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002108:	e03a      	b.n	8002180 <_printf_i+0xa8>
 800210a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800210e:	2b15      	cmp	r3, #21
 8002110:	d8f6      	bhi.n	8002100 <_printf_i+0x28>
 8002112:	a101      	add	r1, pc, #4	@ (adr r1, 8002118 <_printf_i+0x40>)
 8002114:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002118:	08002171 	.word	0x08002171
 800211c:	08002185 	.word	0x08002185
 8002120:	08002101 	.word	0x08002101
 8002124:	08002101 	.word	0x08002101
 8002128:	08002101 	.word	0x08002101
 800212c:	08002101 	.word	0x08002101
 8002130:	08002185 	.word	0x08002185
 8002134:	08002101 	.word	0x08002101
 8002138:	08002101 	.word	0x08002101
 800213c:	08002101 	.word	0x08002101
 8002140:	08002101 	.word	0x08002101
 8002144:	08002285 	.word	0x08002285
 8002148:	080021af 	.word	0x080021af
 800214c:	0800223f 	.word	0x0800223f
 8002150:	08002101 	.word	0x08002101
 8002154:	08002101 	.word	0x08002101
 8002158:	080022a7 	.word	0x080022a7
 800215c:	08002101 	.word	0x08002101
 8002160:	080021af 	.word	0x080021af
 8002164:	08002101 	.word	0x08002101
 8002168:	08002101 	.word	0x08002101
 800216c:	08002247 	.word	0x08002247
 8002170:	6833      	ldr	r3, [r6, #0]
 8002172:	1d1a      	adds	r2, r3, #4
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	6032      	str	r2, [r6, #0]
 8002178:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800217c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002180:	2301      	movs	r3, #1
 8002182:	e09d      	b.n	80022c0 <_printf_i+0x1e8>
 8002184:	6833      	ldr	r3, [r6, #0]
 8002186:	6820      	ldr	r0, [r4, #0]
 8002188:	1d19      	adds	r1, r3, #4
 800218a:	6031      	str	r1, [r6, #0]
 800218c:	0606      	lsls	r6, r0, #24
 800218e:	d501      	bpl.n	8002194 <_printf_i+0xbc>
 8002190:	681d      	ldr	r5, [r3, #0]
 8002192:	e003      	b.n	800219c <_printf_i+0xc4>
 8002194:	0645      	lsls	r5, r0, #25
 8002196:	d5fb      	bpl.n	8002190 <_printf_i+0xb8>
 8002198:	f9b3 5000 	ldrsh.w	r5, [r3]
 800219c:	2d00      	cmp	r5, #0
 800219e:	da03      	bge.n	80021a8 <_printf_i+0xd0>
 80021a0:	232d      	movs	r3, #45	@ 0x2d
 80021a2:	426d      	negs	r5, r5
 80021a4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80021a8:	4859      	ldr	r0, [pc, #356]	@ (8002310 <_printf_i+0x238>)
 80021aa:	230a      	movs	r3, #10
 80021ac:	e011      	b.n	80021d2 <_printf_i+0xfa>
 80021ae:	6821      	ldr	r1, [r4, #0]
 80021b0:	6833      	ldr	r3, [r6, #0]
 80021b2:	0608      	lsls	r0, r1, #24
 80021b4:	f853 5b04 	ldr.w	r5, [r3], #4
 80021b8:	d402      	bmi.n	80021c0 <_printf_i+0xe8>
 80021ba:	0649      	lsls	r1, r1, #25
 80021bc:	bf48      	it	mi
 80021be:	b2ad      	uxthmi	r5, r5
 80021c0:	2f6f      	cmp	r7, #111	@ 0x6f
 80021c2:	4853      	ldr	r0, [pc, #332]	@ (8002310 <_printf_i+0x238>)
 80021c4:	6033      	str	r3, [r6, #0]
 80021c6:	bf14      	ite	ne
 80021c8:	230a      	movne	r3, #10
 80021ca:	2308      	moveq	r3, #8
 80021cc:	2100      	movs	r1, #0
 80021ce:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80021d2:	6866      	ldr	r6, [r4, #4]
 80021d4:	60a6      	str	r6, [r4, #8]
 80021d6:	2e00      	cmp	r6, #0
 80021d8:	bfa2      	ittt	ge
 80021da:	6821      	ldrge	r1, [r4, #0]
 80021dc:	f021 0104 	bicge.w	r1, r1, #4
 80021e0:	6021      	strge	r1, [r4, #0]
 80021e2:	b90d      	cbnz	r5, 80021e8 <_printf_i+0x110>
 80021e4:	2e00      	cmp	r6, #0
 80021e6:	d04b      	beq.n	8002280 <_printf_i+0x1a8>
 80021e8:	4616      	mov	r6, r2
 80021ea:	fbb5 f1f3 	udiv	r1, r5, r3
 80021ee:	fb03 5711 	mls	r7, r3, r1, r5
 80021f2:	5dc7      	ldrb	r7, [r0, r7]
 80021f4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80021f8:	462f      	mov	r7, r5
 80021fa:	42bb      	cmp	r3, r7
 80021fc:	460d      	mov	r5, r1
 80021fe:	d9f4      	bls.n	80021ea <_printf_i+0x112>
 8002200:	2b08      	cmp	r3, #8
 8002202:	d10b      	bne.n	800221c <_printf_i+0x144>
 8002204:	6823      	ldr	r3, [r4, #0]
 8002206:	07df      	lsls	r7, r3, #31
 8002208:	d508      	bpl.n	800221c <_printf_i+0x144>
 800220a:	6923      	ldr	r3, [r4, #16]
 800220c:	6861      	ldr	r1, [r4, #4]
 800220e:	4299      	cmp	r1, r3
 8002210:	bfde      	ittt	le
 8002212:	2330      	movle	r3, #48	@ 0x30
 8002214:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002218:	f106 36ff 	addle.w	r6, r6, #4294967295
 800221c:	1b92      	subs	r2, r2, r6
 800221e:	6122      	str	r2, [r4, #16]
 8002220:	f8cd a000 	str.w	sl, [sp]
 8002224:	464b      	mov	r3, r9
 8002226:	aa03      	add	r2, sp, #12
 8002228:	4621      	mov	r1, r4
 800222a:	4640      	mov	r0, r8
 800222c:	f7ff fee6 	bl	8001ffc <_printf_common>
 8002230:	3001      	adds	r0, #1
 8002232:	d14a      	bne.n	80022ca <_printf_i+0x1f2>
 8002234:	f04f 30ff 	mov.w	r0, #4294967295
 8002238:	b004      	add	sp, #16
 800223a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800223e:	6823      	ldr	r3, [r4, #0]
 8002240:	f043 0320 	orr.w	r3, r3, #32
 8002244:	6023      	str	r3, [r4, #0]
 8002246:	4833      	ldr	r0, [pc, #204]	@ (8002314 <_printf_i+0x23c>)
 8002248:	2778      	movs	r7, #120	@ 0x78
 800224a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800224e:	6823      	ldr	r3, [r4, #0]
 8002250:	6831      	ldr	r1, [r6, #0]
 8002252:	061f      	lsls	r7, r3, #24
 8002254:	f851 5b04 	ldr.w	r5, [r1], #4
 8002258:	d402      	bmi.n	8002260 <_printf_i+0x188>
 800225a:	065f      	lsls	r7, r3, #25
 800225c:	bf48      	it	mi
 800225e:	b2ad      	uxthmi	r5, r5
 8002260:	6031      	str	r1, [r6, #0]
 8002262:	07d9      	lsls	r1, r3, #31
 8002264:	bf44      	itt	mi
 8002266:	f043 0320 	orrmi.w	r3, r3, #32
 800226a:	6023      	strmi	r3, [r4, #0]
 800226c:	b11d      	cbz	r5, 8002276 <_printf_i+0x19e>
 800226e:	2310      	movs	r3, #16
 8002270:	e7ac      	b.n	80021cc <_printf_i+0xf4>
 8002272:	4827      	ldr	r0, [pc, #156]	@ (8002310 <_printf_i+0x238>)
 8002274:	e7e9      	b.n	800224a <_printf_i+0x172>
 8002276:	6823      	ldr	r3, [r4, #0]
 8002278:	f023 0320 	bic.w	r3, r3, #32
 800227c:	6023      	str	r3, [r4, #0]
 800227e:	e7f6      	b.n	800226e <_printf_i+0x196>
 8002280:	4616      	mov	r6, r2
 8002282:	e7bd      	b.n	8002200 <_printf_i+0x128>
 8002284:	6833      	ldr	r3, [r6, #0]
 8002286:	6825      	ldr	r5, [r4, #0]
 8002288:	6961      	ldr	r1, [r4, #20]
 800228a:	1d18      	adds	r0, r3, #4
 800228c:	6030      	str	r0, [r6, #0]
 800228e:	062e      	lsls	r6, r5, #24
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	d501      	bpl.n	8002298 <_printf_i+0x1c0>
 8002294:	6019      	str	r1, [r3, #0]
 8002296:	e002      	b.n	800229e <_printf_i+0x1c6>
 8002298:	0668      	lsls	r0, r5, #25
 800229a:	d5fb      	bpl.n	8002294 <_printf_i+0x1bc>
 800229c:	8019      	strh	r1, [r3, #0]
 800229e:	2300      	movs	r3, #0
 80022a0:	6123      	str	r3, [r4, #16]
 80022a2:	4616      	mov	r6, r2
 80022a4:	e7bc      	b.n	8002220 <_printf_i+0x148>
 80022a6:	6833      	ldr	r3, [r6, #0]
 80022a8:	1d1a      	adds	r2, r3, #4
 80022aa:	6032      	str	r2, [r6, #0]
 80022ac:	681e      	ldr	r6, [r3, #0]
 80022ae:	6862      	ldr	r2, [r4, #4]
 80022b0:	2100      	movs	r1, #0
 80022b2:	4630      	mov	r0, r6
 80022b4:	f7fd ffac 	bl	8000210 <memchr>
 80022b8:	b108      	cbz	r0, 80022be <_printf_i+0x1e6>
 80022ba:	1b80      	subs	r0, r0, r6
 80022bc:	6060      	str	r0, [r4, #4]
 80022be:	6863      	ldr	r3, [r4, #4]
 80022c0:	6123      	str	r3, [r4, #16]
 80022c2:	2300      	movs	r3, #0
 80022c4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80022c8:	e7aa      	b.n	8002220 <_printf_i+0x148>
 80022ca:	6923      	ldr	r3, [r4, #16]
 80022cc:	4632      	mov	r2, r6
 80022ce:	4649      	mov	r1, r9
 80022d0:	4640      	mov	r0, r8
 80022d2:	47d0      	blx	sl
 80022d4:	3001      	adds	r0, #1
 80022d6:	d0ad      	beq.n	8002234 <_printf_i+0x15c>
 80022d8:	6823      	ldr	r3, [r4, #0]
 80022da:	079b      	lsls	r3, r3, #30
 80022dc:	d413      	bmi.n	8002306 <_printf_i+0x22e>
 80022de:	68e0      	ldr	r0, [r4, #12]
 80022e0:	9b03      	ldr	r3, [sp, #12]
 80022e2:	4298      	cmp	r0, r3
 80022e4:	bfb8      	it	lt
 80022e6:	4618      	movlt	r0, r3
 80022e8:	e7a6      	b.n	8002238 <_printf_i+0x160>
 80022ea:	2301      	movs	r3, #1
 80022ec:	4632      	mov	r2, r6
 80022ee:	4649      	mov	r1, r9
 80022f0:	4640      	mov	r0, r8
 80022f2:	47d0      	blx	sl
 80022f4:	3001      	adds	r0, #1
 80022f6:	d09d      	beq.n	8002234 <_printf_i+0x15c>
 80022f8:	3501      	adds	r5, #1
 80022fa:	68e3      	ldr	r3, [r4, #12]
 80022fc:	9903      	ldr	r1, [sp, #12]
 80022fe:	1a5b      	subs	r3, r3, r1
 8002300:	42ab      	cmp	r3, r5
 8002302:	dcf2      	bgt.n	80022ea <_printf_i+0x212>
 8002304:	e7eb      	b.n	80022de <_printf_i+0x206>
 8002306:	2500      	movs	r5, #0
 8002308:	f104 0619 	add.w	r6, r4, #25
 800230c:	e7f5      	b.n	80022fa <_printf_i+0x222>
 800230e:	bf00      	nop
 8002310:	08002600 	.word	0x08002600
 8002314:	08002611 	.word	0x08002611

08002318 <__sflush_r>:
 8002318:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800231c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002320:	0716      	lsls	r6, r2, #28
 8002322:	4605      	mov	r5, r0
 8002324:	460c      	mov	r4, r1
 8002326:	d454      	bmi.n	80023d2 <__sflush_r+0xba>
 8002328:	684b      	ldr	r3, [r1, #4]
 800232a:	2b00      	cmp	r3, #0
 800232c:	dc02      	bgt.n	8002334 <__sflush_r+0x1c>
 800232e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8002330:	2b00      	cmp	r3, #0
 8002332:	dd48      	ble.n	80023c6 <__sflush_r+0xae>
 8002334:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002336:	2e00      	cmp	r6, #0
 8002338:	d045      	beq.n	80023c6 <__sflush_r+0xae>
 800233a:	2300      	movs	r3, #0
 800233c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8002340:	682f      	ldr	r7, [r5, #0]
 8002342:	6a21      	ldr	r1, [r4, #32]
 8002344:	602b      	str	r3, [r5, #0]
 8002346:	d030      	beq.n	80023aa <__sflush_r+0x92>
 8002348:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800234a:	89a3      	ldrh	r3, [r4, #12]
 800234c:	0759      	lsls	r1, r3, #29
 800234e:	d505      	bpl.n	800235c <__sflush_r+0x44>
 8002350:	6863      	ldr	r3, [r4, #4]
 8002352:	1ad2      	subs	r2, r2, r3
 8002354:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8002356:	b10b      	cbz	r3, 800235c <__sflush_r+0x44>
 8002358:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800235a:	1ad2      	subs	r2, r2, r3
 800235c:	2300      	movs	r3, #0
 800235e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002360:	6a21      	ldr	r1, [r4, #32]
 8002362:	4628      	mov	r0, r5
 8002364:	47b0      	blx	r6
 8002366:	1c43      	adds	r3, r0, #1
 8002368:	89a3      	ldrh	r3, [r4, #12]
 800236a:	d106      	bne.n	800237a <__sflush_r+0x62>
 800236c:	6829      	ldr	r1, [r5, #0]
 800236e:	291d      	cmp	r1, #29
 8002370:	d82b      	bhi.n	80023ca <__sflush_r+0xb2>
 8002372:	4a2a      	ldr	r2, [pc, #168]	@ (800241c <__sflush_r+0x104>)
 8002374:	410a      	asrs	r2, r1
 8002376:	07d6      	lsls	r6, r2, #31
 8002378:	d427      	bmi.n	80023ca <__sflush_r+0xb2>
 800237a:	2200      	movs	r2, #0
 800237c:	6062      	str	r2, [r4, #4]
 800237e:	04d9      	lsls	r1, r3, #19
 8002380:	6922      	ldr	r2, [r4, #16]
 8002382:	6022      	str	r2, [r4, #0]
 8002384:	d504      	bpl.n	8002390 <__sflush_r+0x78>
 8002386:	1c42      	adds	r2, r0, #1
 8002388:	d101      	bne.n	800238e <__sflush_r+0x76>
 800238a:	682b      	ldr	r3, [r5, #0]
 800238c:	b903      	cbnz	r3, 8002390 <__sflush_r+0x78>
 800238e:	6560      	str	r0, [r4, #84]	@ 0x54
 8002390:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002392:	602f      	str	r7, [r5, #0]
 8002394:	b1b9      	cbz	r1, 80023c6 <__sflush_r+0xae>
 8002396:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800239a:	4299      	cmp	r1, r3
 800239c:	d002      	beq.n	80023a4 <__sflush_r+0x8c>
 800239e:	4628      	mov	r0, r5
 80023a0:	f7ff fbf2 	bl	8001b88 <_free_r>
 80023a4:	2300      	movs	r3, #0
 80023a6:	6363      	str	r3, [r4, #52]	@ 0x34
 80023a8:	e00d      	b.n	80023c6 <__sflush_r+0xae>
 80023aa:	2301      	movs	r3, #1
 80023ac:	4628      	mov	r0, r5
 80023ae:	47b0      	blx	r6
 80023b0:	4602      	mov	r2, r0
 80023b2:	1c50      	adds	r0, r2, #1
 80023b4:	d1c9      	bne.n	800234a <__sflush_r+0x32>
 80023b6:	682b      	ldr	r3, [r5, #0]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d0c6      	beq.n	800234a <__sflush_r+0x32>
 80023bc:	2b1d      	cmp	r3, #29
 80023be:	d001      	beq.n	80023c4 <__sflush_r+0xac>
 80023c0:	2b16      	cmp	r3, #22
 80023c2:	d11e      	bne.n	8002402 <__sflush_r+0xea>
 80023c4:	602f      	str	r7, [r5, #0]
 80023c6:	2000      	movs	r0, #0
 80023c8:	e022      	b.n	8002410 <__sflush_r+0xf8>
 80023ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80023ce:	b21b      	sxth	r3, r3
 80023d0:	e01b      	b.n	800240a <__sflush_r+0xf2>
 80023d2:	690f      	ldr	r7, [r1, #16]
 80023d4:	2f00      	cmp	r7, #0
 80023d6:	d0f6      	beq.n	80023c6 <__sflush_r+0xae>
 80023d8:	0793      	lsls	r3, r2, #30
 80023da:	680e      	ldr	r6, [r1, #0]
 80023dc:	bf08      	it	eq
 80023de:	694b      	ldreq	r3, [r1, #20]
 80023e0:	600f      	str	r7, [r1, #0]
 80023e2:	bf18      	it	ne
 80023e4:	2300      	movne	r3, #0
 80023e6:	eba6 0807 	sub.w	r8, r6, r7
 80023ea:	608b      	str	r3, [r1, #8]
 80023ec:	f1b8 0f00 	cmp.w	r8, #0
 80023f0:	dde9      	ble.n	80023c6 <__sflush_r+0xae>
 80023f2:	6a21      	ldr	r1, [r4, #32]
 80023f4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80023f6:	4643      	mov	r3, r8
 80023f8:	463a      	mov	r2, r7
 80023fa:	4628      	mov	r0, r5
 80023fc:	47b0      	blx	r6
 80023fe:	2800      	cmp	r0, #0
 8002400:	dc08      	bgt.n	8002414 <__sflush_r+0xfc>
 8002402:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002406:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800240a:	81a3      	strh	r3, [r4, #12]
 800240c:	f04f 30ff 	mov.w	r0, #4294967295
 8002410:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002414:	4407      	add	r7, r0
 8002416:	eba8 0800 	sub.w	r8, r8, r0
 800241a:	e7e7      	b.n	80023ec <__sflush_r+0xd4>
 800241c:	dfbffffe 	.word	0xdfbffffe

08002420 <_fflush_r>:
 8002420:	b538      	push	{r3, r4, r5, lr}
 8002422:	690b      	ldr	r3, [r1, #16]
 8002424:	4605      	mov	r5, r0
 8002426:	460c      	mov	r4, r1
 8002428:	b913      	cbnz	r3, 8002430 <_fflush_r+0x10>
 800242a:	2500      	movs	r5, #0
 800242c:	4628      	mov	r0, r5
 800242e:	bd38      	pop	{r3, r4, r5, pc}
 8002430:	b118      	cbz	r0, 800243a <_fflush_r+0x1a>
 8002432:	6a03      	ldr	r3, [r0, #32]
 8002434:	b90b      	cbnz	r3, 800243a <_fflush_r+0x1a>
 8002436:	f7ff f9ad 	bl	8001794 <__sinit>
 800243a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d0f3      	beq.n	800242a <_fflush_r+0xa>
 8002442:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8002444:	07d0      	lsls	r0, r2, #31
 8002446:	d404      	bmi.n	8002452 <_fflush_r+0x32>
 8002448:	0599      	lsls	r1, r3, #22
 800244a:	d402      	bmi.n	8002452 <_fflush_r+0x32>
 800244c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800244e:	f7ff fb98 	bl	8001b82 <__retarget_lock_acquire_recursive>
 8002452:	4628      	mov	r0, r5
 8002454:	4621      	mov	r1, r4
 8002456:	f7ff ff5f 	bl	8002318 <__sflush_r>
 800245a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800245c:	07da      	lsls	r2, r3, #31
 800245e:	4605      	mov	r5, r0
 8002460:	d4e4      	bmi.n	800242c <_fflush_r+0xc>
 8002462:	89a3      	ldrh	r3, [r4, #12]
 8002464:	059b      	lsls	r3, r3, #22
 8002466:	d4e1      	bmi.n	800242c <_fflush_r+0xc>
 8002468:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800246a:	f7ff fb8b 	bl	8001b84 <__retarget_lock_release_recursive>
 800246e:	e7dd      	b.n	800242c <_fflush_r+0xc>

08002470 <__swhatbuf_r>:
 8002470:	b570      	push	{r4, r5, r6, lr}
 8002472:	460c      	mov	r4, r1
 8002474:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002478:	2900      	cmp	r1, #0
 800247a:	b096      	sub	sp, #88	@ 0x58
 800247c:	4615      	mov	r5, r2
 800247e:	461e      	mov	r6, r3
 8002480:	da0d      	bge.n	800249e <__swhatbuf_r+0x2e>
 8002482:	89a3      	ldrh	r3, [r4, #12]
 8002484:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8002488:	f04f 0100 	mov.w	r1, #0
 800248c:	bf14      	ite	ne
 800248e:	2340      	movne	r3, #64	@ 0x40
 8002490:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8002494:	2000      	movs	r0, #0
 8002496:	6031      	str	r1, [r6, #0]
 8002498:	602b      	str	r3, [r5, #0]
 800249a:	b016      	add	sp, #88	@ 0x58
 800249c:	bd70      	pop	{r4, r5, r6, pc}
 800249e:	466a      	mov	r2, sp
 80024a0:	f000 f848 	bl	8002534 <_fstat_r>
 80024a4:	2800      	cmp	r0, #0
 80024a6:	dbec      	blt.n	8002482 <__swhatbuf_r+0x12>
 80024a8:	9901      	ldr	r1, [sp, #4]
 80024aa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80024ae:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80024b2:	4259      	negs	r1, r3
 80024b4:	4159      	adcs	r1, r3
 80024b6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80024ba:	e7eb      	b.n	8002494 <__swhatbuf_r+0x24>

080024bc <__smakebuf_r>:
 80024bc:	898b      	ldrh	r3, [r1, #12]
 80024be:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80024c0:	079d      	lsls	r5, r3, #30
 80024c2:	4606      	mov	r6, r0
 80024c4:	460c      	mov	r4, r1
 80024c6:	d507      	bpl.n	80024d8 <__smakebuf_r+0x1c>
 80024c8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80024cc:	6023      	str	r3, [r4, #0]
 80024ce:	6123      	str	r3, [r4, #16]
 80024d0:	2301      	movs	r3, #1
 80024d2:	6163      	str	r3, [r4, #20]
 80024d4:	b003      	add	sp, #12
 80024d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80024d8:	ab01      	add	r3, sp, #4
 80024da:	466a      	mov	r2, sp
 80024dc:	f7ff ffc8 	bl	8002470 <__swhatbuf_r>
 80024e0:	9f00      	ldr	r7, [sp, #0]
 80024e2:	4605      	mov	r5, r0
 80024e4:	4639      	mov	r1, r7
 80024e6:	4630      	mov	r0, r6
 80024e8:	f7ff fbba 	bl	8001c60 <_malloc_r>
 80024ec:	b948      	cbnz	r0, 8002502 <__smakebuf_r+0x46>
 80024ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80024f2:	059a      	lsls	r2, r3, #22
 80024f4:	d4ee      	bmi.n	80024d4 <__smakebuf_r+0x18>
 80024f6:	f023 0303 	bic.w	r3, r3, #3
 80024fa:	f043 0302 	orr.w	r3, r3, #2
 80024fe:	81a3      	strh	r3, [r4, #12]
 8002500:	e7e2      	b.n	80024c8 <__smakebuf_r+0xc>
 8002502:	89a3      	ldrh	r3, [r4, #12]
 8002504:	6020      	str	r0, [r4, #0]
 8002506:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800250a:	81a3      	strh	r3, [r4, #12]
 800250c:	9b01      	ldr	r3, [sp, #4]
 800250e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8002512:	b15b      	cbz	r3, 800252c <__smakebuf_r+0x70>
 8002514:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002518:	4630      	mov	r0, r6
 800251a:	f000 f81d 	bl	8002558 <_isatty_r>
 800251e:	b128      	cbz	r0, 800252c <__smakebuf_r+0x70>
 8002520:	89a3      	ldrh	r3, [r4, #12]
 8002522:	f023 0303 	bic.w	r3, r3, #3
 8002526:	f043 0301 	orr.w	r3, r3, #1
 800252a:	81a3      	strh	r3, [r4, #12]
 800252c:	89a3      	ldrh	r3, [r4, #12]
 800252e:	431d      	orrs	r5, r3
 8002530:	81a5      	strh	r5, [r4, #12]
 8002532:	e7cf      	b.n	80024d4 <__smakebuf_r+0x18>

08002534 <_fstat_r>:
 8002534:	b538      	push	{r3, r4, r5, lr}
 8002536:	4d07      	ldr	r5, [pc, #28]	@ (8002554 <_fstat_r+0x20>)
 8002538:	2300      	movs	r3, #0
 800253a:	4604      	mov	r4, r0
 800253c:	4608      	mov	r0, r1
 800253e:	4611      	mov	r1, r2
 8002540:	602b      	str	r3, [r5, #0]
 8002542:	f7fe f852 	bl	80005ea <_fstat>
 8002546:	1c43      	adds	r3, r0, #1
 8002548:	d102      	bne.n	8002550 <_fstat_r+0x1c>
 800254a:	682b      	ldr	r3, [r5, #0]
 800254c:	b103      	cbz	r3, 8002550 <_fstat_r+0x1c>
 800254e:	6023      	str	r3, [r4, #0]
 8002550:	bd38      	pop	{r3, r4, r5, pc}
 8002552:	bf00      	nop
 8002554:	200001fc 	.word	0x200001fc

08002558 <_isatty_r>:
 8002558:	b538      	push	{r3, r4, r5, lr}
 800255a:	4d06      	ldr	r5, [pc, #24]	@ (8002574 <_isatty_r+0x1c>)
 800255c:	2300      	movs	r3, #0
 800255e:	4604      	mov	r4, r0
 8002560:	4608      	mov	r0, r1
 8002562:	602b      	str	r3, [r5, #0]
 8002564:	f7fe f851 	bl	800060a <_isatty>
 8002568:	1c43      	adds	r3, r0, #1
 800256a:	d102      	bne.n	8002572 <_isatty_r+0x1a>
 800256c:	682b      	ldr	r3, [r5, #0]
 800256e:	b103      	cbz	r3, 8002572 <_isatty_r+0x1a>
 8002570:	6023      	str	r3, [r4, #0]
 8002572:	bd38      	pop	{r3, r4, r5, pc}
 8002574:	200001fc 	.word	0x200001fc

08002578 <_sbrk_r>:
 8002578:	b538      	push	{r3, r4, r5, lr}
 800257a:	4d06      	ldr	r5, [pc, #24]	@ (8002594 <_sbrk_r+0x1c>)
 800257c:	2300      	movs	r3, #0
 800257e:	4604      	mov	r4, r0
 8002580:	4608      	mov	r0, r1
 8002582:	602b      	str	r3, [r5, #0]
 8002584:	f7fe f85a 	bl	800063c <_sbrk>
 8002588:	1c43      	adds	r3, r0, #1
 800258a:	d102      	bne.n	8002592 <_sbrk_r+0x1a>
 800258c:	682b      	ldr	r3, [r5, #0]
 800258e:	b103      	cbz	r3, 8002592 <_sbrk_r+0x1a>
 8002590:	6023      	str	r3, [r4, #0]
 8002592:	bd38      	pop	{r3, r4, r5, pc}
 8002594:	200001fc 	.word	0x200001fc

08002598 <_init>:
 8002598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800259a:	bf00      	nop
 800259c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800259e:	bc08      	pop	{r3}
 80025a0:	469e      	mov	lr, r3
 80025a2:	4770      	bx	lr

080025a4 <_fini>:
 80025a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025a6:	bf00      	nop
 80025a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025aa:	bc08      	pop	{r3}
 80025ac:	469e      	mov	lr, r3
 80025ae:	4770      	bx	lr
