
stm32f446xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002348  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08002518  08002518  00003518  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080025c4  080025c4  0000407c  2**0
                  CONTENTS
  4 .ARM          00000008  080025c4  080025c4  000035c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080025cc  080025cc  0000407c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080025cc  080025cc  000035cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080025d0  080025d0  000035d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  080025d4  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000598  2000007c  08002650  0000407c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000614  08002650  00004614  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000407c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000022ac  00000000  00000000  000040ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000980  00000000  00000000  00006358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000298  00000000  00000000  00006cd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000001de  00000000  00000000  00006f70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000041e2  00000000  00000000  0000714e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000350c  00000000  00000000  0000b330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000ee44  00000000  00000000  0000e83c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0001d680  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000113c  00000000  00000000  0001d6c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  0001e800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000007c 	.word	0x2000007c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08002500 	.word	0x08002500

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000080 	.word	0x20000080
 800020c:	08002500 	.word	0x08002500

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <USART2_Init>:
uint8_t g_data = 0;

extern void initialise_monitor_handles();

void USART2_Init(void)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	af00      	add	r7, sp, #0
	usart2_handle.pUSARTx = USART2;
 80002c4:	4b0d      	ldr	r3, [pc, #52]	@ (80002fc <USART2_Init+0x3c>)
 80002c6:	4a0e      	ldr	r2, [pc, #56]	@ (8000300 <USART2_Init+0x40>)
 80002c8:	601a      	str	r2, [r3, #0]
	usart2_handle.USART_Config.USART_Baud = USART_STD_BAUD_115200;
 80002ca:	4b0c      	ldr	r3, [pc, #48]	@ (80002fc <USART2_Init+0x3c>)
 80002cc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80002d0:	609a      	str	r2, [r3, #8]
	usart2_handle.USART_Config.USART_HWFlowControl = USART_HW_FLOW_CTRL_NONE;
 80002d2:	4b0a      	ldr	r3, [pc, #40]	@ (80002fc <USART2_Init+0x3c>)
 80002d4:	2200      	movs	r2, #0
 80002d6:	749a      	strb	r2, [r3, #18]
	usart2_handle.USART_Config.USART_Mode = USART_MODE_ONLY_TX;
 80002d8:	4b08      	ldr	r3, [pc, #32]	@ (80002fc <USART2_Init+0x3c>)
 80002da:	2200      	movs	r2, #0
 80002dc:	711a      	strb	r2, [r3, #4]
	usart2_handle.USART_Config.USART_NoOfStopBits = USART_STOPBITS_1;
 80002de:	4b07      	ldr	r3, [pc, #28]	@ (80002fc <USART2_Init+0x3c>)
 80002e0:	2200      	movs	r2, #0
 80002e2:	60da      	str	r2, [r3, #12]
	usart2_handle.USART_Config.USART_ParityControl = USART_PARITY_DISABLE;
 80002e4:	4b05      	ldr	r3, [pc, #20]	@ (80002fc <USART2_Init+0x3c>)
 80002e6:	2200      	movs	r2, #0
 80002e8:	745a      	strb	r2, [r3, #17]
	usart2_handle.USART_Config.USART_WordLength = USART_WORDLEN_8BITS;
 80002ea:	4b04      	ldr	r3, [pc, #16]	@ (80002fc <USART2_Init+0x3c>)
 80002ec:	2200      	movs	r2, #0
 80002ee:	741a      	strb	r2, [r3, #16]
	USART_Init(&usart2_handle);
 80002f0:	4802      	ldr	r0, [pc, #8]	@ (80002fc <USART2_Init+0x3c>)
 80002f2:	f000 fe1f 	bl	8000f34 <USART_Init>
}
 80002f6:	bf00      	nop
 80002f8:	bd80      	pop	{r7, pc}
 80002fa:	bf00      	nop
 80002fc:	20000498 	.word	0x20000498
 8000300:	40004400 	.word	0x40004400

08000304 <USART2_GPIOInit>:

void USART2_GPIOInit(void)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	b084      	sub	sp, #16
 8000308:	af00      	add	r7, sp, #0
	GPIO_Handle_t usart_gpios;

	usart_gpios.pGPIOx = GPIOA;
 800030a:	4b0e      	ldr	r3, [pc, #56]	@ (8000344 <USART2_GPIOInit+0x40>)
 800030c:	607b      	str	r3, [r7, #4]
	usart_gpios.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 800030e:	2302      	movs	r3, #2
 8000310:	727b      	strb	r3, [r7, #9]
	usart_gpios.GPIO_PinConfig.GPIO_PinOType = GPIO_OP_TYPE_PP;
 8000312:	2300      	movs	r3, #0
 8000314:	733b      	strb	r3, [r7, #12]
	usart_gpios.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 8000316:	2301      	movs	r3, #1
 8000318:	72fb      	strb	r3, [r7, #11]
	usart_gpios.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 800031a:	2302      	movs	r3, #2
 800031c:	72bb      	strb	r3, [r7, #10]
	usart_gpios.GPIO_PinConfig.GPIO_PinAltFunMode = GPIO_AF_MODE_7;
 800031e:	2307      	movs	r3, #7
 8000320:	737b      	strb	r3, [r7, #13]

	//USART2 Tx
	usart_gpios.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NUM_2;
 8000322:	2302      	movs	r3, #2
 8000324:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&usart_gpios);
 8000326:	1d3b      	adds	r3, r7, #4
 8000328:	4618      	mov	r0, r3
 800032a:	f000 fb41 	bl	80009b0 <GPIO_Init>

	//USART2 Rx
	usart_gpios.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NUM_3;
 800032e:	2303      	movs	r3, #3
 8000330:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&usart_gpios);
 8000332:	1d3b      	adds	r3, r7, #4
 8000334:	4618      	mov	r0, r3
 8000336:	f000 fb3b 	bl	80009b0 <GPIO_Init>

}
 800033a:	bf00      	nop
 800033c:	3710      	adds	r7, #16
 800033e:	46bd      	mov	sp, r7
 8000340:	bd80      	pop	{r7, pc}
 8000342:	bf00      	nop
 8000344:	40020000 	.word	0x40020000

08000348 <delay>:
	GPIO_Init(&GPIOBtn);
}


void delay(void)
{
 8000348:	b480      	push	{r7}
 800034a:	b083      	sub	sp, #12
 800034c:	af00      	add	r7, sp, #0
	for(uint32_t i = 0 ; i < 500000/2 ; i ++);
 800034e:	2300      	movs	r3, #0
 8000350:	607b      	str	r3, [r7, #4]
 8000352:	e002      	b.n	800035a <delay+0x12>
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	3301      	adds	r3, #1
 8000358:	607b      	str	r3, [r7, #4]
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	4a04      	ldr	r2, [pc, #16]	@ (8000370 <delay+0x28>)
 800035e:	4293      	cmp	r3, r2
 8000360:	d9f8      	bls.n	8000354 <delay+0xc>
}
 8000362:	bf00      	nop
 8000364:	bf00      	nop
 8000366:	370c      	adds	r7, #12
 8000368:	46bd      	mov	sp, r7
 800036a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800036e:	4770      	bx	lr
 8000370:	0003d08f 	.word	0x0003d08f

08000374 <main>:

int main(void)
{
 8000374:	b590      	push	{r4, r7, lr}
 8000376:	b083      	sub	sp, #12
 8000378:	af00      	add	r7, sp, #0
	uint32_t cnt = 0;
 800037a:	2300      	movs	r3, #0
 800037c:	607b      	str	r3, [r7, #4]


	initialise_monitor_handles();
 800037e:	f000 f8c3 	bl	8000508 <initialise_monitor_handles>

	USART2_GPIOInit();
 8000382:	f7ff ffbf 	bl	8000304 <USART2_GPIOInit>
    USART2_Init();
 8000386:	f7ff ff9b 	bl	80002c0 <USART2_Init>

    USART_IRQInterruptConfig(IRQ_NO_USART2,ENABLE);
 800038a:	2101      	movs	r1, #1
 800038c:	2026      	movs	r0, #38	@ 0x26
 800038e:	f000 fedd 	bl	800114c <USART_IRQInterruptConfig>

    USART_PeripheralControl(USART2,ENABLE);
 8000392:	2101      	movs	r1, #1
 8000394:	482f      	ldr	r0, [pc, #188]	@ (8000454 <main+0xe0>)
 8000396:	f001 f909 	bl	80015ac <USART_PeripheralControl>

    printf("Application is running\n");
 800039a:	482f      	ldr	r0, [pc, #188]	@ (8000458 <main+0xe4>)
 800039c:	f001 fa4c 	bl	8001838 <puts>

    //do forever
    while(1)
    {
		//wait till button is pressed
		while( ! GPIO_ReadFromInputPin(GPIOC,GPIO_PIN_NUM_13));
 80003a0:	bf00      	nop
 80003a2:	210d      	movs	r1, #13
 80003a4:	482d      	ldr	r0, [pc, #180]	@ (800045c <main+0xe8>)
 80003a6:	f000 fc9d 	bl	8000ce4 <GPIO_ReadFromInputPin>
 80003aa:	4603      	mov	r3, r0
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d0f8      	beq.n	80003a2 <main+0x2e>

		//to avoid button de-bouncing related issues 200ms of delay
		delay();
 80003b0:	f7ff ffca 	bl	8000348 <delay>

		// Next message index ; make sure that cnt value doesn't cross 2
		cnt = cnt % 3;
 80003b4:	687a      	ldr	r2, [r7, #4]
 80003b6:	4b2a      	ldr	r3, [pc, #168]	@ (8000460 <main+0xec>)
 80003b8:	fba3 1302 	umull	r1, r3, r3, r2
 80003bc:	0859      	lsrs	r1, r3, #1
 80003be:	460b      	mov	r3, r1
 80003c0:	005b      	lsls	r3, r3, #1
 80003c2:	440b      	add	r3, r1
 80003c4:	1ad3      	subs	r3, r2, r3
 80003c6:	607b      	str	r3, [r7, #4]

		//First lets enable the reception in interrupt mode
		//this code enables the receive interrupt
		while ( USART_ReceiveDataIT(&usart2_handle,(uint8_t*)rx_buf,strlen(msg[cnt])) != USART_READY );
 80003c8:	bf00      	nop
 80003ca:	4a26      	ldr	r2, [pc, #152]	@ (8000464 <main+0xf0>)
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80003d2:	4618      	mov	r0, r3
 80003d4:	f7ff ff1c 	bl	8000210 <strlen>
 80003d8:	4603      	mov	r3, r0
 80003da:	461a      	mov	r2, r3
 80003dc:	4922      	ldr	r1, [pc, #136]	@ (8000468 <main+0xf4>)
 80003de:	4823      	ldr	r0, [pc, #140]	@ (800046c <main+0xf8>)
 80003e0:	f000 fe8b 	bl	80010fa <USART_ReceiveDataIT>
 80003e4:	4603      	mov	r3, r0
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	d1ef      	bne.n	80003ca <main+0x56>

		//Send the msg indexed by cnt in blocking mode
    	USART_SendData(&usart2_handle,(uint8_t*)msg[cnt],strlen(msg[cnt]));
 80003ea:	4a1e      	ldr	r2, [pc, #120]	@ (8000464 <main+0xf0>)
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80003f2:	4a1c      	ldr	r2, [pc, #112]	@ (8000464 <main+0xf0>)
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80003fa:	4618      	mov	r0, r3
 80003fc:	f7ff ff08 	bl	8000210 <strlen>
 8000400:	4603      	mov	r3, r0
 8000402:	461a      	mov	r2, r3
 8000404:	4621      	mov	r1, r4
 8000406:	4819      	ldr	r0, [pc, #100]	@ (800046c <main+0xf8>)
 8000408:	f000 fe29 	bl	800105e <USART_SendData>

    	printf("Transmitted : %s\n",msg[cnt]);
 800040c:	4a15      	ldr	r2, [pc, #84]	@ (8000464 <main+0xf0>)
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000414:	4619      	mov	r1, r3
 8000416:	4816      	ldr	r0, [pc, #88]	@ (8000470 <main+0xfc>)
 8000418:	f001 f9a6 	bl	8001768 <iprintf>


    	//Now lets wait until all the bytes are received from the arduino .
    	//When all the bytes are received rxCmplt will be SET in application callback
    	while(rxCmplt != SET);
 800041c:	bf00      	nop
 800041e:	4b15      	ldr	r3, [pc, #84]	@ (8000474 <main+0x100>)
 8000420:	781b      	ldrb	r3, [r3, #0]
 8000422:	2b01      	cmp	r3, #1
 8000424:	d1fb      	bne.n	800041e <main+0xaa>

    	//just make sure that last byte should be null otherwise %s fails while printing
    	rx_buf[strlen(msg[cnt])+ 1] = '\0';
 8000426:	4a0f      	ldr	r2, [pc, #60]	@ (8000464 <main+0xf0>)
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800042e:	4618      	mov	r0, r3
 8000430:	f7ff feee 	bl	8000210 <strlen>
 8000434:	4603      	mov	r3, r0
 8000436:	3301      	adds	r3, #1
 8000438:	4a0b      	ldr	r2, [pc, #44]	@ (8000468 <main+0xf4>)
 800043a:	2100      	movs	r1, #0
 800043c:	54d1      	strb	r1, [r2, r3]

    	//Print what we received from the arduino
    	printf("Received    : %s\n",rx_buf);
 800043e:	490a      	ldr	r1, [pc, #40]	@ (8000468 <main+0xf4>)
 8000440:	480d      	ldr	r0, [pc, #52]	@ (8000478 <main+0x104>)
 8000442:	f001 f991 	bl	8001768 <iprintf>

    	//invalidate the flag
    	rxCmplt = RESET;
 8000446:	4b0b      	ldr	r3, [pc, #44]	@ (8000474 <main+0x100>)
 8000448:	2200      	movs	r2, #0
 800044a:	701a      	strb	r2, [r3, #0]

    	//move on to next message indexed in msg[]
    	cnt ++;
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	3301      	adds	r3, #1
 8000450:	607b      	str	r3, [r7, #4]
		while( ! GPIO_ReadFromInputPin(GPIOC,GPIO_PIN_NUM_13));
 8000452:	e7a5      	b.n	80003a0 <main+0x2c>
 8000454:	40004400 	.word	0x40004400
 8000458:	08002550 	.word	0x08002550
 800045c:	40020800 	.word	0x40020800
 8000460:	aaaaaaab 	.word	0xaaaaaaab
 8000464:	20000000 	.word	0x20000000
 8000468:	20000098 	.word	0x20000098
 800046c:	20000498 	.word	0x20000498
 8000470:	08002568 	.word	0x08002568
 8000474:	200004c0 	.word	0x200004c0
 8000478:	0800257c 	.word	0x0800257c

0800047c <USART2_IRQHandler>:
	return 0;
}


void USART2_IRQHandler(void)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	af00      	add	r7, sp, #0
	USART_IRQHandling(&usart2_handle);
 8000480:	4802      	ldr	r0, [pc, #8]	@ (800048c <USART2_IRQHandler+0x10>)
 8000482:	f000 fee9 	bl	8001258 <USART_IRQHandling>
}
 8000486:	bf00      	nop
 8000488:	bd80      	pop	{r7, pc}
 800048a:	bf00      	nop
 800048c:	20000498 	.word	0x20000498

08000490 <USART_ApplicationEventCallback>:




void USART_ApplicationEventCallback( USART_Handle_t *pUSARTHandle,uint8_t AppEv)
{
 8000490:	b480      	push	{r7}
 8000492:	b083      	sub	sp, #12
 8000494:	af00      	add	r7, sp, #0
 8000496:	6078      	str	r0, [r7, #4]
 8000498:	460b      	mov	r3, r1
 800049a:	70fb      	strb	r3, [r7, #3]
   if(AppEv == USART_EVENT_RX_CMPLT)
 800049c:	78fb      	ldrb	r3, [r7, #3]
 800049e:	2b01      	cmp	r3, #1
 80004a0:	d102      	bne.n	80004a8 <USART_ApplicationEventCallback+0x18>
   {
			rxCmplt = SET;
 80004a2:	4b04      	ldr	r3, [pc, #16]	@ (80004b4 <USART_ApplicationEventCallback+0x24>)
 80004a4:	2201      	movs	r2, #1
 80004a6:	701a      	strb	r2, [r3, #0]

   }else if (AppEv == USART_EVENT_TX_CMPLT)
   {
	   ;
   }
}
 80004a8:	bf00      	nop
 80004aa:	370c      	adds	r7, #12
 80004ac:	46bd      	mov	sp, r7
 80004ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b2:	4770      	bx	lr
 80004b4:	200004c0 	.word	0x200004c0

080004b8 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 80004b8:	b480      	push	{r7}
 80004ba:	b083      	sub	sp, #12
 80004bc:	af00      	add	r7, sp, #0
 80004be:	4603      	mov	r3, r0
 80004c0:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 80004c2:	4b0f      	ldr	r3, [pc, #60]	@ (8000500 <ITM_SendChar+0x48>)
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	4a0e      	ldr	r2, [pc, #56]	@ (8000500 <ITM_SendChar+0x48>)
 80004c8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80004cc:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 80004ce:	4b0d      	ldr	r3, [pc, #52]	@ (8000504 <ITM_SendChar+0x4c>)
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	4a0c      	ldr	r2, [pc, #48]	@ (8000504 <ITM_SendChar+0x4c>)
 80004d4:	f043 0301 	orr.w	r3, r3, #1
 80004d8:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80004da:	bf00      	nop
 80004dc:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	f003 0301 	and.w	r3, r3, #1
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d0f8      	beq.n	80004dc <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 80004ea:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 80004ee:	79fb      	ldrb	r3, [r7, #7]
 80004f0:	6013      	str	r3, [r2, #0]
}
 80004f2:	bf00      	nop
 80004f4:	370c      	adds	r7, #12
 80004f6:	46bd      	mov	sp, r7
 80004f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop
 8000500:	e000edfc 	.word	0xe000edfc
 8000504:	e0000e00 	.word	0xe0000e00

08000508 <initialise_monitor_handles>:
char **environ = __env;


/* Functions */
void initialise_monitor_handles()
{
 8000508:	b480      	push	{r7}
 800050a:	af00      	add	r7, sp, #0
}
 800050c:	bf00      	nop
 800050e:	46bd      	mov	sp, r7
 8000510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000514:	4770      	bx	lr

08000516 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000516:	b580      	push	{r7, lr}
 8000518:	b086      	sub	sp, #24
 800051a:	af00      	add	r7, sp, #0
 800051c:	60f8      	str	r0, [r7, #12]
 800051e:	60b9      	str	r1, [r7, #8]
 8000520:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000522:	2300      	movs	r3, #0
 8000524:	617b      	str	r3, [r7, #20]
 8000526:	e00a      	b.n	800053e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000528:	f3af 8000 	nop.w
 800052c:	4601      	mov	r1, r0
 800052e:	68bb      	ldr	r3, [r7, #8]
 8000530:	1c5a      	adds	r2, r3, #1
 8000532:	60ba      	str	r2, [r7, #8]
 8000534:	b2ca      	uxtb	r2, r1
 8000536:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000538:	697b      	ldr	r3, [r7, #20]
 800053a:	3301      	adds	r3, #1
 800053c:	617b      	str	r3, [r7, #20]
 800053e:	697a      	ldr	r2, [r7, #20]
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	429a      	cmp	r2, r3
 8000544:	dbf0      	blt.n	8000528 <_read+0x12>
  }

  return len;
 8000546:	687b      	ldr	r3, [r7, #4]
}
 8000548:	4618      	mov	r0, r3
 800054a:	3718      	adds	r7, #24
 800054c:	46bd      	mov	sp, r7
 800054e:	bd80      	pop	{r7, pc}

08000550 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b086      	sub	sp, #24
 8000554:	af00      	add	r7, sp, #0
 8000556:	60f8      	str	r0, [r7, #12]
 8000558:	60b9      	str	r1, [r7, #8]
 800055a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800055c:	2300      	movs	r3, #0
 800055e:	617b      	str	r3, [r7, #20]
 8000560:	e009      	b.n	8000576 <_write+0x26>
  {
    // __io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 8000562:	68bb      	ldr	r3, [r7, #8]
 8000564:	1c5a      	adds	r2, r3, #1
 8000566:	60ba      	str	r2, [r7, #8]
 8000568:	781b      	ldrb	r3, [r3, #0]
 800056a:	4618      	mov	r0, r3
 800056c:	f7ff ffa4 	bl	80004b8 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000570:	697b      	ldr	r3, [r7, #20]
 8000572:	3301      	adds	r3, #1
 8000574:	617b      	str	r3, [r7, #20]
 8000576:	697a      	ldr	r2, [r7, #20]
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	429a      	cmp	r2, r3
 800057c:	dbf1      	blt.n	8000562 <_write+0x12>
	  // LCD_SendChar(*ptr++);
	  // UART_SendChar(*ptr++);
  }
  return len;
 800057e:	687b      	ldr	r3, [r7, #4]
}
 8000580:	4618      	mov	r0, r3
 8000582:	3718      	adds	r7, #24
 8000584:	46bd      	mov	sp, r7
 8000586:	bd80      	pop	{r7, pc}

08000588 <_close>:

int _close(int file)
{
 8000588:	b480      	push	{r7}
 800058a:	b083      	sub	sp, #12
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000590:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000594:	4618      	mov	r0, r3
 8000596:	370c      	adds	r7, #12
 8000598:	46bd      	mov	sp, r7
 800059a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059e:	4770      	bx	lr

080005a0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80005a0:	b480      	push	{r7}
 80005a2:	b083      	sub	sp, #12
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
 80005a8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80005aa:	683b      	ldr	r3, [r7, #0]
 80005ac:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80005b0:	605a      	str	r2, [r3, #4]
  return 0;
 80005b2:	2300      	movs	r3, #0
}
 80005b4:	4618      	mov	r0, r3
 80005b6:	370c      	adds	r7, #12
 80005b8:	46bd      	mov	sp, r7
 80005ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005be:	4770      	bx	lr

080005c0 <_isatty>:

int _isatty(int file)
{
 80005c0:	b480      	push	{r7}
 80005c2:	b083      	sub	sp, #12
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80005c8:	2301      	movs	r3, #1
}
 80005ca:	4618      	mov	r0, r3
 80005cc:	370c      	adds	r7, #12
 80005ce:	46bd      	mov	sp, r7
 80005d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d4:	4770      	bx	lr

080005d6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80005d6:	b480      	push	{r7}
 80005d8:	b085      	sub	sp, #20
 80005da:	af00      	add	r7, sp, #0
 80005dc:	60f8      	str	r0, [r7, #12]
 80005de:	60b9      	str	r1, [r7, #8]
 80005e0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80005e2:	2300      	movs	r3, #0
}
 80005e4:	4618      	mov	r0, r3
 80005e6:	3714      	adds	r7, #20
 80005e8:	46bd      	mov	sp, r7
 80005ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ee:	4770      	bx	lr

080005f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b086      	sub	sp, #24
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80005f8:	4a14      	ldr	r2, [pc, #80]	@ (800064c <_sbrk+0x5c>)
 80005fa:	4b15      	ldr	r3, [pc, #84]	@ (8000650 <_sbrk+0x60>)
 80005fc:	1ad3      	subs	r3, r2, r3
 80005fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000600:	697b      	ldr	r3, [r7, #20]
 8000602:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000604:	4b13      	ldr	r3, [pc, #76]	@ (8000654 <_sbrk+0x64>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	2b00      	cmp	r3, #0
 800060a:	d102      	bne.n	8000612 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800060c:	4b11      	ldr	r3, [pc, #68]	@ (8000654 <_sbrk+0x64>)
 800060e:	4a12      	ldr	r2, [pc, #72]	@ (8000658 <_sbrk+0x68>)
 8000610:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000612:	4b10      	ldr	r3, [pc, #64]	@ (8000654 <_sbrk+0x64>)
 8000614:	681a      	ldr	r2, [r3, #0]
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	4413      	add	r3, r2
 800061a:	693a      	ldr	r2, [r7, #16]
 800061c:	429a      	cmp	r2, r3
 800061e:	d207      	bcs.n	8000630 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000620:	f001 fa38 	bl	8001a94 <__errno>
 8000624:	4603      	mov	r3, r0
 8000626:	220c      	movs	r2, #12
 8000628:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800062a:	f04f 33ff 	mov.w	r3, #4294967295
 800062e:	e009      	b.n	8000644 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000630:	4b08      	ldr	r3, [pc, #32]	@ (8000654 <_sbrk+0x64>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000636:	4b07      	ldr	r3, [pc, #28]	@ (8000654 <_sbrk+0x64>)
 8000638:	681a      	ldr	r2, [r3, #0]
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	4413      	add	r3, r2
 800063e:	4a05      	ldr	r2, [pc, #20]	@ (8000654 <_sbrk+0x64>)
 8000640:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000642:	68fb      	ldr	r3, [r7, #12]
}
 8000644:	4618      	mov	r0, r3
 8000646:	3718      	adds	r7, #24
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}
 800064c:	20020000 	.word	0x20020000
 8000650:	00000400 	.word	0x00000400
 8000654:	200004c4 	.word	0x200004c4
 8000658:	20000618 	.word	0x20000618

0800065c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800065c:	480d      	ldr	r0, [pc, #52]	@ (8000694 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800065e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000660:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000664:	480c      	ldr	r0, [pc, #48]	@ (8000698 <LoopForever+0x6>)
  ldr r1, =_edata
 8000666:	490d      	ldr	r1, [pc, #52]	@ (800069c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000668:	4a0d      	ldr	r2, [pc, #52]	@ (80006a0 <LoopForever+0xe>)
  movs r3, #0
 800066a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800066c:	e002      	b.n	8000674 <LoopCopyDataInit>

0800066e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800066e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000670:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000672:	3304      	adds	r3, #4

08000674 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000674:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000676:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000678:	d3f9      	bcc.n	800066e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800067a:	4a0a      	ldr	r2, [pc, #40]	@ (80006a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800067c:	4c0a      	ldr	r4, [pc, #40]	@ (80006a8 <LoopForever+0x16>)
  movs r3, #0
 800067e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000680:	e001      	b.n	8000686 <LoopFillZerobss>

08000682 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000682:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000684:	3204      	adds	r2, #4

08000686 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000686:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000688:	d3fb      	bcc.n	8000682 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800068a:	f001 fa09 	bl	8001aa0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800068e:	f7ff fe71 	bl	8000374 <main>

08000692 <LoopForever>:

LoopForever:
  b LoopForever
 8000692:	e7fe      	b.n	8000692 <LoopForever>
  ldr   r0, =_estack
 8000694:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000698:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800069c:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 80006a0:	080025d4 	.word	0x080025d4
  ldr r2, =_sbss
 80006a4:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 80006a8:	20000614 	.word	0x20000614

080006ac <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006ac:	e7fe      	b.n	80006ac <ADC_IRQHandler>

080006ae <RCC_GetPLLOutputClk>:
 * @return								- PLL clock value
 *
 * @note								- None
 *****************************************************************************************************************/
uint32_t RCC_GetPLLOutputClk(void)
{
 80006ae:	b480      	push	{r7}
 80006b0:	af00      	add	r7, sp, #0
	// will implement in future

	return 0;
 80006b2:	2300      	movs	r3, #0
}
 80006b4:	4618      	mov	r0, r3
 80006b6:	46bd      	mov	sp, r7
 80006b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006bc:	4770      	bx	lr
	...

080006c0 <RCC_GetPCLK1Value>:
 * @return								- APB1 clock value
 *
 * @note								- None
 *****************************************************************************************************************/
uint32_t RCC_GetPCLK1Value(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b084      	sub	sp, #16
 80006c4:	af00      	add	r7, sp, #0
	uint32_t pclk1, SystemClk;

	uint8_t clksrc, temp, ahbp,apb1p;

	clksrc = ((RCC->CFRG >> 2) & 0x3);
 80006c6:	4b25      	ldr	r3, [pc, #148]	@ (800075c <RCC_GetPCLK1Value+0x9c>)
 80006c8:	689b      	ldr	r3, [r3, #8]
 80006ca:	089b      	lsrs	r3, r3, #2
 80006cc:	b2db      	uxtb	r3, r3
 80006ce:	f003 0303 	and.w	r3, r3, #3
 80006d2:	727b      	strb	r3, [r7, #9]

	if (clksrc == 0)
 80006d4:	7a7b      	ldrb	r3, [r7, #9]
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d102      	bne.n	80006e0 <RCC_GetPCLK1Value+0x20>
	{	// If clksrc = 0 => which is HSI
		SystemClk = 16000000;
 80006da:	4b21      	ldr	r3, [pc, #132]	@ (8000760 <RCC_GetPCLK1Value+0xa0>)
 80006dc:	60fb      	str	r3, [r7, #12]
 80006de:	e00b      	b.n	80006f8 <RCC_GetPCLK1Value+0x38>
	}else if (clksrc == 1)
 80006e0:	7a7b      	ldrb	r3, [r7, #9]
 80006e2:	2b01      	cmp	r3, #1
 80006e4:	d102      	bne.n	80006ec <RCC_GetPCLK1Value+0x2c>
	{	// If clksrc = 1 => which is HSE
		SystemClk = 25000000;
 80006e6:	4b1f      	ldr	r3, [pc, #124]	@ (8000764 <RCC_GetPCLK1Value+0xa4>)
 80006e8:	60fb      	str	r3, [r7, #12]
 80006ea:	e005      	b.n	80006f8 <RCC_GetPCLK1Value+0x38>
	}else if (clksrc == 2)
 80006ec:	7a7b      	ldrb	r3, [r7, #9]
 80006ee:	2b02      	cmp	r3, #2
 80006f0:	d102      	bne.n	80006f8 <RCC_GetPCLK1Value+0x38>
	{
		SystemClk = RCC_GetPLLOutputClk();
 80006f2:	f7ff ffdc 	bl	80006ae <RCC_GetPLLOutputClk>
 80006f6:	60f8      	str	r0, [r7, #12]
	}

	// For AHB Prescaler find
	temp = ((RCC->CFRG >> 4) & 0xF);
 80006f8:	4b18      	ldr	r3, [pc, #96]	@ (800075c <RCC_GetPCLK1Value+0x9c>)
 80006fa:	689b      	ldr	r3, [r3, #8]
 80006fc:	091b      	lsrs	r3, r3, #4
 80006fe:	b2db      	uxtb	r3, r3
 8000700:	f003 030f 	and.w	r3, r3, #15
 8000704:	723b      	strb	r3, [r7, #8]

	if (temp < 8)
 8000706:	7a3b      	ldrb	r3, [r7, #8]
 8000708:	2b07      	cmp	r3, #7
 800070a:	d802      	bhi.n	8000712 <RCC_GetPCLK1Value+0x52>
	{
		ahbp = 1;
 800070c:	2301      	movs	r3, #1
 800070e:	72fb      	strb	r3, [r7, #11]
 8000710:	e005      	b.n	800071e <RCC_GetPCLK1Value+0x5e>
	}else
	{
		ahbp = AHB_PreScaler[temp - 8];
 8000712:	7a3b      	ldrb	r3, [r7, #8]
 8000714:	3b08      	subs	r3, #8
 8000716:	4a14      	ldr	r2, [pc, #80]	@ (8000768 <RCC_GetPCLK1Value+0xa8>)
 8000718:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800071c:	72fb      	strb	r3, [r7, #11]
	}

	// For APB1 Prescaler find
	temp = ((RCC->CFRG >> 10) & 0x7);
 800071e:	4b0f      	ldr	r3, [pc, #60]	@ (800075c <RCC_GetPCLK1Value+0x9c>)
 8000720:	689b      	ldr	r3, [r3, #8]
 8000722:	0a9b      	lsrs	r3, r3, #10
 8000724:	b2db      	uxtb	r3, r3
 8000726:	f003 0307 	and.w	r3, r3, #7
 800072a:	723b      	strb	r3, [r7, #8]

	if (temp < 4)
 800072c:	7a3b      	ldrb	r3, [r7, #8]
 800072e:	2b03      	cmp	r3, #3
 8000730:	d802      	bhi.n	8000738 <RCC_GetPCLK1Value+0x78>
	{
		apb1p = 1;
 8000732:	2301      	movs	r3, #1
 8000734:	72bb      	strb	r3, [r7, #10]
 8000736:	e004      	b.n	8000742 <RCC_GetPCLK1Value+0x82>
	}else
	{
		apb1p = APB1_PreScaler[temp - 4];
 8000738:	7a3b      	ldrb	r3, [r7, #8]
 800073a:	3b04      	subs	r3, #4
 800073c:	4a0b      	ldr	r2, [pc, #44]	@ (800076c <RCC_GetPCLK1Value+0xac>)
 800073e:	5cd3      	ldrb	r3, [r2, r3]
 8000740:	72bb      	strb	r3, [r7, #10]
	}

	pclk1 = (SystemClk/ahbp) / apb1p;
 8000742:	7afb      	ldrb	r3, [r7, #11]
 8000744:	68fa      	ldr	r2, [r7, #12]
 8000746:	fbb2 f2f3 	udiv	r2, r2, r3
 800074a:	7abb      	ldrb	r3, [r7, #10]
 800074c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000750:	607b      	str	r3, [r7, #4]

	return pclk1;
 8000752:	687b      	ldr	r3, [r7, #4]
}
 8000754:	4618      	mov	r0, r3
 8000756:	3710      	adds	r7, #16
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}
 800075c:	40023800 	.word	0x40023800
 8000760:	00f42400 	.word	0x00f42400
 8000764:	017d7840 	.word	0x017d7840
 8000768:	2000000c 	.word	0x2000000c
 800076c:	2000001c 	.word	0x2000001c

08000770 <RCC_GetPCLK2Value>:
 *
 * @note								- None
 *****************************************************************************************************************/

uint32_t RCC_GetPCLK2Value(void)
{
 8000770:	b480      	push	{r7}
 8000772:	b085      	sub	sp, #20
 8000774:	af00      	add	r7, sp, #0
	uint32_t SystemClock=0,tmp,pclk2;
 8000776:	2300      	movs	r3, #0
 8000778:	60fb      	str	r3, [r7, #12]
	uint8_t clk_src = ( RCC->CFRG >> 2) & 0X3;
 800077a:	4b20      	ldr	r3, [pc, #128]	@ (80007fc <RCC_GetPCLK2Value+0x8c>)
 800077c:	689b      	ldr	r3, [r3, #8]
 800077e:	089b      	lsrs	r3, r3, #2
 8000780:	b2db      	uxtb	r3, r3
 8000782:	f003 0303 	and.w	r3, r3, #3
 8000786:	727b      	strb	r3, [r7, #9]

	uint8_t ahbp,apb2p;

	if(clk_src == 0)
 8000788:	7a7b      	ldrb	r3, [r7, #9]
 800078a:	2b00      	cmp	r3, #0
 800078c:	d102      	bne.n	8000794 <RCC_GetPCLK2Value+0x24>
	{
		SystemClock = 16000000;
 800078e:	4b1c      	ldr	r3, [pc, #112]	@ (8000800 <RCC_GetPCLK2Value+0x90>)
 8000790:	60fb      	str	r3, [r7, #12]
 8000792:	e001      	b.n	8000798 <RCC_GetPCLK2Value+0x28>
	}else
	{
		SystemClock = 8000000;
 8000794:	4b1b      	ldr	r3, [pc, #108]	@ (8000804 <RCC_GetPCLK2Value+0x94>)
 8000796:	60fb      	str	r3, [r7, #12]
	}
	tmp = (RCC->CFRG >> 4 ) & 0xF;
 8000798:	4b18      	ldr	r3, [pc, #96]	@ (80007fc <RCC_GetPCLK2Value+0x8c>)
 800079a:	689b      	ldr	r3, [r3, #8]
 800079c:	091b      	lsrs	r3, r3, #4
 800079e:	f003 030f 	and.w	r3, r3, #15
 80007a2:	607b      	str	r3, [r7, #4]

	if(tmp < 0x08)
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	2b07      	cmp	r3, #7
 80007a8:	d802      	bhi.n	80007b0 <RCC_GetPCLK2Value+0x40>
	{
		ahbp = 1;
 80007aa:	2301      	movs	r3, #1
 80007ac:	72fb      	strb	r3, [r7, #11]
 80007ae:	e005      	b.n	80007bc <RCC_GetPCLK2Value+0x4c>
	}else
	{
       ahbp = AHB_PreScaler[tmp-8];
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	3b08      	subs	r3, #8
 80007b4:	4a14      	ldr	r2, [pc, #80]	@ (8000808 <RCC_GetPCLK2Value+0x98>)
 80007b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80007ba:	72fb      	strb	r3, [r7, #11]
	}

	tmp = (RCC->CFRG >> 13 ) & 0x7;
 80007bc:	4b0f      	ldr	r3, [pc, #60]	@ (80007fc <RCC_GetPCLK2Value+0x8c>)
 80007be:	689b      	ldr	r3, [r3, #8]
 80007c0:	0b5b      	lsrs	r3, r3, #13
 80007c2:	f003 0307 	and.w	r3, r3, #7
 80007c6:	607b      	str	r3, [r7, #4]
	if(tmp < 0x04)
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	2b03      	cmp	r3, #3
 80007cc:	d802      	bhi.n	80007d4 <RCC_GetPCLK2Value+0x64>
	{
		apb2p = 1;
 80007ce:	2301      	movs	r3, #1
 80007d0:	72bb      	strb	r3, [r7, #10]
 80007d2:	e004      	b.n	80007de <RCC_GetPCLK2Value+0x6e>
	}else
	{
		apb2p = APB1_PreScaler[tmp-4];
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	3b04      	subs	r3, #4
 80007d8:	4a0c      	ldr	r2, [pc, #48]	@ (800080c <RCC_GetPCLK2Value+0x9c>)
 80007da:	5cd3      	ldrb	r3, [r2, r3]
 80007dc:	72bb      	strb	r3, [r7, #10]
	}

	pclk2 = (SystemClock / ahbp )/ apb2p;
 80007de:	7afb      	ldrb	r3, [r7, #11]
 80007e0:	68fa      	ldr	r2, [r7, #12]
 80007e2:	fbb2 f2f3 	udiv	r2, r2, r3
 80007e6:	7abb      	ldrb	r3, [r7, #10]
 80007e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80007ec:	603b      	str	r3, [r7, #0]

	return pclk2;
 80007ee:	683b      	ldr	r3, [r7, #0]
}
 80007f0:	4618      	mov	r0, r3
 80007f2:	3714      	adds	r7, #20
 80007f4:	46bd      	mov	sp, r7
 80007f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fa:	4770      	bx	lr
 80007fc:	40023800 	.word	0x40023800
 8000800:	00f42400 	.word	0x00f42400
 8000804:	007a1200 	.word	0x007a1200
 8000808:	2000000c 	.word	0x2000000c
 800080c:	2000001c 	.word	0x2000001c

08000810 <GPIO_PeriClockControl>:
 * @return								- None
 *
 * @note								- None
 *****************************************************************************************************************/
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 8000810:	b480      	push	{r7}
 8000812:	b083      	sub	sp, #12
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
 8000818:	460b      	mov	r3, r1
 800081a:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 800081c:	78fb      	ldrb	r3, [r7, #3]
 800081e:	2b01      	cmp	r3, #1
 8000820:	d157      	bne.n	80008d2 <GPIO_PeriClockControl+0xc2>
	{
		if(pGPIOx == GPIOA)
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	4a59      	ldr	r2, [pc, #356]	@ (800098c <GPIO_PeriClockControl+0x17c>)
 8000826:	4293      	cmp	r3, r2
 8000828:	d106      	bne.n	8000838 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 800082a:	4b59      	ldr	r3, [pc, #356]	@ (8000990 <GPIO_PeriClockControl+0x180>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082e:	4a58      	ldr	r2, [pc, #352]	@ (8000990 <GPIO_PeriClockControl+0x180>)
 8000830:	f043 0301 	orr.w	r3, r3, #1
 8000834:	6313      	str	r3, [r2, #48]	@ 0x30
		else if(pGPIOx == GPIOH)
		{
			GPIOH_PCLK_DI();
		}
	}
}
 8000836:	e0a3      	b.n	8000980 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOB)
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	4a56      	ldr	r2, [pc, #344]	@ (8000994 <GPIO_PeriClockControl+0x184>)
 800083c:	4293      	cmp	r3, r2
 800083e:	d106      	bne.n	800084e <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000840:	4b53      	ldr	r3, [pc, #332]	@ (8000990 <GPIO_PeriClockControl+0x180>)
 8000842:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000844:	4a52      	ldr	r2, [pc, #328]	@ (8000990 <GPIO_PeriClockControl+0x180>)
 8000846:	f043 0302 	orr.w	r3, r3, #2
 800084a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800084c:	e098      	b.n	8000980 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOC)
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	4a51      	ldr	r2, [pc, #324]	@ (8000998 <GPIO_PeriClockControl+0x188>)
 8000852:	4293      	cmp	r3, r2
 8000854:	d106      	bne.n	8000864 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 8000856:	4b4e      	ldr	r3, [pc, #312]	@ (8000990 <GPIO_PeriClockControl+0x180>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085a:	4a4d      	ldr	r2, [pc, #308]	@ (8000990 <GPIO_PeriClockControl+0x180>)
 800085c:	f043 0304 	orr.w	r3, r3, #4
 8000860:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000862:	e08d      	b.n	8000980 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOD)
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	4a4d      	ldr	r2, [pc, #308]	@ (800099c <GPIO_PeriClockControl+0x18c>)
 8000868:	4293      	cmp	r3, r2
 800086a:	d106      	bne.n	800087a <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 800086c:	4b48      	ldr	r3, [pc, #288]	@ (8000990 <GPIO_PeriClockControl+0x180>)
 800086e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000870:	4a47      	ldr	r2, [pc, #284]	@ (8000990 <GPIO_PeriClockControl+0x180>)
 8000872:	f043 0308 	orr.w	r3, r3, #8
 8000876:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000878:	e082      	b.n	8000980 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOE)
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	4a48      	ldr	r2, [pc, #288]	@ (80009a0 <GPIO_PeriClockControl+0x190>)
 800087e:	4293      	cmp	r3, r2
 8000880:	d106      	bne.n	8000890 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 8000882:	4b43      	ldr	r3, [pc, #268]	@ (8000990 <GPIO_PeriClockControl+0x180>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000886:	4a42      	ldr	r2, [pc, #264]	@ (8000990 <GPIO_PeriClockControl+0x180>)
 8000888:	f043 0310 	orr.w	r3, r3, #16
 800088c:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800088e:	e077      	b.n	8000980 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOF)
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	4a44      	ldr	r2, [pc, #272]	@ (80009a4 <GPIO_PeriClockControl+0x194>)
 8000894:	4293      	cmp	r3, r2
 8000896:	d106      	bne.n	80008a6 <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8000898:	4b3d      	ldr	r3, [pc, #244]	@ (8000990 <GPIO_PeriClockControl+0x180>)
 800089a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800089c:	4a3c      	ldr	r2, [pc, #240]	@ (8000990 <GPIO_PeriClockControl+0x180>)
 800089e:	f043 0320 	orr.w	r3, r3, #32
 80008a2:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80008a4:	e06c      	b.n	8000980 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOG)
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	4a3f      	ldr	r2, [pc, #252]	@ (80009a8 <GPIO_PeriClockControl+0x198>)
 80008aa:	4293      	cmp	r3, r2
 80008ac:	d106      	bne.n	80008bc <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 80008ae:	4b38      	ldr	r3, [pc, #224]	@ (8000990 <GPIO_PeriClockControl+0x180>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008b2:	4a37      	ldr	r2, [pc, #220]	@ (8000990 <GPIO_PeriClockControl+0x180>)
 80008b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80008b8:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80008ba:	e061      	b.n	8000980 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOH)
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	4a3b      	ldr	r2, [pc, #236]	@ (80009ac <GPIO_PeriClockControl+0x19c>)
 80008c0:	4293      	cmp	r3, r2
 80008c2:	d15d      	bne.n	8000980 <GPIO_PeriClockControl+0x170>
			GPIOH_PCLK_EN();
 80008c4:	4b32      	ldr	r3, [pc, #200]	@ (8000990 <GPIO_PeriClockControl+0x180>)
 80008c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008c8:	4a31      	ldr	r2, [pc, #196]	@ (8000990 <GPIO_PeriClockControl+0x180>)
 80008ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008ce:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80008d0:	e056      	b.n	8000980 <GPIO_PeriClockControl+0x170>
		if(pGPIOx == GPIOA)
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	4a2d      	ldr	r2, [pc, #180]	@ (800098c <GPIO_PeriClockControl+0x17c>)
 80008d6:	4293      	cmp	r3, r2
 80008d8:	d106      	bne.n	80008e8 <GPIO_PeriClockControl+0xd8>
			GPIOA_PCLK_DI();
 80008da:	4b2d      	ldr	r3, [pc, #180]	@ (8000990 <GPIO_PeriClockControl+0x180>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008de:	4a2c      	ldr	r2, [pc, #176]	@ (8000990 <GPIO_PeriClockControl+0x180>)
 80008e0:	f023 0301 	bic.w	r3, r3, #1
 80008e4:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80008e6:	e04b      	b.n	8000980 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOB)
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	4a2a      	ldr	r2, [pc, #168]	@ (8000994 <GPIO_PeriClockControl+0x184>)
 80008ec:	4293      	cmp	r3, r2
 80008ee:	d106      	bne.n	80008fe <GPIO_PeriClockControl+0xee>
			GPIOB_PCLK_DI();
 80008f0:	4b27      	ldr	r3, [pc, #156]	@ (8000990 <GPIO_PeriClockControl+0x180>)
 80008f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008f4:	4a26      	ldr	r2, [pc, #152]	@ (8000990 <GPIO_PeriClockControl+0x180>)
 80008f6:	f023 0302 	bic.w	r3, r3, #2
 80008fa:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80008fc:	e040      	b.n	8000980 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOC)
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	4a25      	ldr	r2, [pc, #148]	@ (8000998 <GPIO_PeriClockControl+0x188>)
 8000902:	4293      	cmp	r3, r2
 8000904:	d106      	bne.n	8000914 <GPIO_PeriClockControl+0x104>
			GPIOC_PCLK_DI();
 8000906:	4b22      	ldr	r3, [pc, #136]	@ (8000990 <GPIO_PeriClockControl+0x180>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800090a:	4a21      	ldr	r2, [pc, #132]	@ (8000990 <GPIO_PeriClockControl+0x180>)
 800090c:	f023 0304 	bic.w	r3, r3, #4
 8000910:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000912:	e035      	b.n	8000980 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOD)
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	4a21      	ldr	r2, [pc, #132]	@ (800099c <GPIO_PeriClockControl+0x18c>)
 8000918:	4293      	cmp	r3, r2
 800091a:	d106      	bne.n	800092a <GPIO_PeriClockControl+0x11a>
			GPIOD_PCLK_DI();
 800091c:	4b1c      	ldr	r3, [pc, #112]	@ (8000990 <GPIO_PeriClockControl+0x180>)
 800091e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000920:	4a1b      	ldr	r2, [pc, #108]	@ (8000990 <GPIO_PeriClockControl+0x180>)
 8000922:	f023 0308 	bic.w	r3, r3, #8
 8000926:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000928:	e02a      	b.n	8000980 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOE)
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	4a1c      	ldr	r2, [pc, #112]	@ (80009a0 <GPIO_PeriClockControl+0x190>)
 800092e:	4293      	cmp	r3, r2
 8000930:	d106      	bne.n	8000940 <GPIO_PeriClockControl+0x130>
			GPIOE_PCLK_DI();
 8000932:	4b17      	ldr	r3, [pc, #92]	@ (8000990 <GPIO_PeriClockControl+0x180>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000936:	4a16      	ldr	r2, [pc, #88]	@ (8000990 <GPIO_PeriClockControl+0x180>)
 8000938:	f023 0310 	bic.w	r3, r3, #16
 800093c:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800093e:	e01f      	b.n	8000980 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOF)
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	4a18      	ldr	r2, [pc, #96]	@ (80009a4 <GPIO_PeriClockControl+0x194>)
 8000944:	4293      	cmp	r3, r2
 8000946:	d106      	bne.n	8000956 <GPIO_PeriClockControl+0x146>
			GPIOF_PCLK_EN();
 8000948:	4b11      	ldr	r3, [pc, #68]	@ (8000990 <GPIO_PeriClockControl+0x180>)
 800094a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800094c:	4a10      	ldr	r2, [pc, #64]	@ (8000990 <GPIO_PeriClockControl+0x180>)
 800094e:	f043 0320 	orr.w	r3, r3, #32
 8000952:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000954:	e014      	b.n	8000980 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOG)
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	4a13      	ldr	r2, [pc, #76]	@ (80009a8 <GPIO_PeriClockControl+0x198>)
 800095a:	4293      	cmp	r3, r2
 800095c:	d106      	bne.n	800096c <GPIO_PeriClockControl+0x15c>
			GPIOG_PCLK_DI();
 800095e:	4b0c      	ldr	r3, [pc, #48]	@ (8000990 <GPIO_PeriClockControl+0x180>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000962:	4a0b      	ldr	r2, [pc, #44]	@ (8000990 <GPIO_PeriClockControl+0x180>)
 8000964:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000968:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800096a:	e009      	b.n	8000980 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOH)
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	4a0f      	ldr	r2, [pc, #60]	@ (80009ac <GPIO_PeriClockControl+0x19c>)
 8000970:	4293      	cmp	r3, r2
 8000972:	d105      	bne.n	8000980 <GPIO_PeriClockControl+0x170>
			GPIOH_PCLK_DI();
 8000974:	4b06      	ldr	r3, [pc, #24]	@ (8000990 <GPIO_PeriClockControl+0x180>)
 8000976:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000978:	4a05      	ldr	r2, [pc, #20]	@ (8000990 <GPIO_PeriClockControl+0x180>)
 800097a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800097e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000980:	bf00      	nop
 8000982:	370c      	adds	r7, #12
 8000984:	46bd      	mov	sp, r7
 8000986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098a:	4770      	bx	lr
 800098c:	40020000 	.word	0x40020000
 8000990:	40023800 	.word	0x40023800
 8000994:	40020400 	.word	0x40020400
 8000998:	40020800 	.word	0x40020800
 800099c:	40020c00 	.word	0x40020c00
 80009a0:	40021000 	.word	0x40021000
 80009a4:	40021400 	.word	0x40021400
 80009a8:	40021800 	.word	0x40021800
 80009ac:	40021c00 	.word	0x40021c00

080009b0 <GPIO_Init>:
 * @return								- None
 *
 * @note								- None
 *****************************************************************************************************************/
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b086      	sub	sp, #24
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0; // Temp register
 80009b8:	2300      	movs	r3, #0
 80009ba:	617b      	str	r3, [r7, #20]

	// Enable the peripheral clock
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	2101      	movs	r1, #1
 80009c2:	4618      	mov	r0, r3
 80009c4:	f7ff ff24 	bl	8000810 <GPIO_PeriClockControl>

	//1. Configure the mode of GPIO PIN
	if(pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	795b      	ldrb	r3, [r3, #5]
 80009cc:	2b03      	cmp	r3, #3
 80009ce:	d81f      	bhi.n	8000a10 <GPIO_Init+0x60>
	{
		// Non interrupt mode
		temp = (pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber));
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	795b      	ldrb	r3, [r3, #5]
 80009d4:	461a      	mov	r2, r3
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	791b      	ldrb	r3, [r3, #4]
 80009da:	005b      	lsls	r3, r3, #1
 80009dc:	fa02 f303 	lsl.w	r3, r2, r3
 80009e0:	617b      	str	r3, [r7, #20]
		pGPIOHandle -> pGPIOx -> MODER &= ~(0x3 << pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);	// Clearing
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	681a      	ldr	r2, [r3, #0]
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	791b      	ldrb	r3, [r3, #4]
 80009ec:	4619      	mov	r1, r3
 80009ee:	2303      	movs	r3, #3
 80009f0:	408b      	lsls	r3, r1
 80009f2:	43db      	mvns	r3, r3
 80009f4:	4619      	mov	r1, r3
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	400a      	ands	r2, r1
 80009fc:	601a      	str	r2, [r3, #0]
		pGPIOHandle -> pGPIOx -> MODER |= temp;	// Setting
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	6819      	ldr	r1, [r3, #0]
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	697a      	ldr	r2, [r7, #20]
 8000a0a:	430a      	orrs	r2, r1
 8000a0c:	601a      	str	r2, [r3, #0]
 8000a0e:	e0c2      	b.n	8000b96 <GPIO_Init+0x1e6>
	}
	else
	{
		// this part will code later (interrupt mode)
		if(pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	795b      	ldrb	r3, [r3, #5]
 8000a14:	2b04      	cmp	r3, #4
 8000a16:	d117      	bne.n	8000a48 <GPIO_Init+0x98>
		{
			//1. Configure the FTSR
			EXTI ->FTSR |= (1 << pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 8000a18:	4b47      	ldr	r3, [pc, #284]	@ (8000b38 <GPIO_Init+0x188>)
 8000a1a:	68db      	ldr	r3, [r3, #12]
 8000a1c:	687a      	ldr	r2, [r7, #4]
 8000a1e:	7912      	ldrb	r2, [r2, #4]
 8000a20:	4611      	mov	r1, r2
 8000a22:	2201      	movs	r2, #1
 8000a24:	408a      	lsls	r2, r1
 8000a26:	4611      	mov	r1, r2
 8000a28:	4a43      	ldr	r2, [pc, #268]	@ (8000b38 <GPIO_Init+0x188>)
 8000a2a:	430b      	orrs	r3, r1
 8000a2c:	60d3      	str	r3, [r2, #12]
			// Clear the corresponding RTSR bit
			EXTI ->RTSR &= ~(1 << pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 8000a2e:	4b42      	ldr	r3, [pc, #264]	@ (8000b38 <GPIO_Init+0x188>)
 8000a30:	689b      	ldr	r3, [r3, #8]
 8000a32:	687a      	ldr	r2, [r7, #4]
 8000a34:	7912      	ldrb	r2, [r2, #4]
 8000a36:	4611      	mov	r1, r2
 8000a38:	2201      	movs	r2, #1
 8000a3a:	408a      	lsls	r2, r1
 8000a3c:	43d2      	mvns	r2, r2
 8000a3e:	4611      	mov	r1, r2
 8000a40:	4a3d      	ldr	r2, [pc, #244]	@ (8000b38 <GPIO_Init+0x188>)
 8000a42:	400b      	ands	r3, r1
 8000a44:	6093      	str	r3, [r2, #8]
 8000a46:	e035      	b.n	8000ab4 <GPIO_Init+0x104>
		}
		else if(pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	795b      	ldrb	r3, [r3, #5]
 8000a4c:	2b05      	cmp	r3, #5
 8000a4e:	d117      	bne.n	8000a80 <GPIO_Init+0xd0>
		{
			//1. Configure the RTSR
			EXTI ->RTSR |= (1 << pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 8000a50:	4b39      	ldr	r3, [pc, #228]	@ (8000b38 <GPIO_Init+0x188>)
 8000a52:	689b      	ldr	r3, [r3, #8]
 8000a54:	687a      	ldr	r2, [r7, #4]
 8000a56:	7912      	ldrb	r2, [r2, #4]
 8000a58:	4611      	mov	r1, r2
 8000a5a:	2201      	movs	r2, #1
 8000a5c:	408a      	lsls	r2, r1
 8000a5e:	4611      	mov	r1, r2
 8000a60:	4a35      	ldr	r2, [pc, #212]	@ (8000b38 <GPIO_Init+0x188>)
 8000a62:	430b      	orrs	r3, r1
 8000a64:	6093      	str	r3, [r2, #8]
			// Clear the corresponding FTSR bit
			EXTI ->FTSR &= ~(1 << pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 8000a66:	4b34      	ldr	r3, [pc, #208]	@ (8000b38 <GPIO_Init+0x188>)
 8000a68:	68db      	ldr	r3, [r3, #12]
 8000a6a:	687a      	ldr	r2, [r7, #4]
 8000a6c:	7912      	ldrb	r2, [r2, #4]
 8000a6e:	4611      	mov	r1, r2
 8000a70:	2201      	movs	r2, #1
 8000a72:	408a      	lsls	r2, r1
 8000a74:	43d2      	mvns	r2, r2
 8000a76:	4611      	mov	r1, r2
 8000a78:	4a2f      	ldr	r2, [pc, #188]	@ (8000b38 <GPIO_Init+0x188>)
 8000a7a:	400b      	ands	r3, r1
 8000a7c:	60d3      	str	r3, [r2, #12]
 8000a7e:	e019      	b.n	8000ab4 <GPIO_Init+0x104>
		}
		else if(pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	795b      	ldrb	r3, [r3, #5]
 8000a84:	2b06      	cmp	r3, #6
 8000a86:	d115      	bne.n	8000ab4 <GPIO_Init+0x104>
		{
			//1. Configure both FTSR and RTSR
			EXTI ->RTSR |= (1 << pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 8000a88:	4b2b      	ldr	r3, [pc, #172]	@ (8000b38 <GPIO_Init+0x188>)
 8000a8a:	689b      	ldr	r3, [r3, #8]
 8000a8c:	687a      	ldr	r2, [r7, #4]
 8000a8e:	7912      	ldrb	r2, [r2, #4]
 8000a90:	4611      	mov	r1, r2
 8000a92:	2201      	movs	r2, #1
 8000a94:	408a      	lsls	r2, r1
 8000a96:	4611      	mov	r1, r2
 8000a98:	4a27      	ldr	r2, [pc, #156]	@ (8000b38 <GPIO_Init+0x188>)
 8000a9a:	430b      	orrs	r3, r1
 8000a9c:	6093      	str	r3, [r2, #8]

			EXTI ->FTSR |= (1 << pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 8000a9e:	4b26      	ldr	r3, [pc, #152]	@ (8000b38 <GPIO_Init+0x188>)
 8000aa0:	68db      	ldr	r3, [r3, #12]
 8000aa2:	687a      	ldr	r2, [r7, #4]
 8000aa4:	7912      	ldrb	r2, [r2, #4]
 8000aa6:	4611      	mov	r1, r2
 8000aa8:	2201      	movs	r2, #1
 8000aaa:	408a      	lsls	r2, r1
 8000aac:	4611      	mov	r1, r2
 8000aae:	4a22      	ldr	r2, [pc, #136]	@ (8000b38 <GPIO_Init+0x188>)
 8000ab0:	430b      	orrs	r3, r1
 8000ab2:	60d3      	str	r3, [r2, #12]
		}

		//2. Configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber / 4;
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	791b      	ldrb	r3, [r3, #4]
 8000ab8:	089b      	lsrs	r3, r3, #2
 8000aba:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber % 4;
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	791b      	ldrb	r3, [r3, #4]
 8000ac0:	f003 0303 	and.w	r3, r3, #3
 8000ac4:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle ->pGPIOx);
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	4a1c      	ldr	r2, [pc, #112]	@ (8000b3c <GPIO_Init+0x18c>)
 8000acc:	4293      	cmp	r3, r2
 8000ace:	d045      	beq.n	8000b5c <GPIO_Init+0x1ac>
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	4a1a      	ldr	r2, [pc, #104]	@ (8000b40 <GPIO_Init+0x190>)
 8000ad6:	4293      	cmp	r3, r2
 8000ad8:	d02b      	beq.n	8000b32 <GPIO_Init+0x182>
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	4a19      	ldr	r2, [pc, #100]	@ (8000b44 <GPIO_Init+0x194>)
 8000ae0:	4293      	cmp	r3, r2
 8000ae2:	d024      	beq.n	8000b2e <GPIO_Init+0x17e>
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	4a17      	ldr	r2, [pc, #92]	@ (8000b48 <GPIO_Init+0x198>)
 8000aea:	4293      	cmp	r3, r2
 8000aec:	d01d      	beq.n	8000b2a <GPIO_Init+0x17a>
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	4a16      	ldr	r2, [pc, #88]	@ (8000b4c <GPIO_Init+0x19c>)
 8000af4:	4293      	cmp	r3, r2
 8000af6:	d016      	beq.n	8000b26 <GPIO_Init+0x176>
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	4a14      	ldr	r2, [pc, #80]	@ (8000b50 <GPIO_Init+0x1a0>)
 8000afe:	4293      	cmp	r3, r2
 8000b00:	d00f      	beq.n	8000b22 <GPIO_Init+0x172>
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	4a13      	ldr	r2, [pc, #76]	@ (8000b54 <GPIO_Init+0x1a4>)
 8000b08:	4293      	cmp	r3, r2
 8000b0a:	d008      	beq.n	8000b1e <GPIO_Init+0x16e>
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	4a11      	ldr	r2, [pc, #68]	@ (8000b58 <GPIO_Init+0x1a8>)
 8000b12:	4293      	cmp	r3, r2
 8000b14:	d101      	bne.n	8000b1a <GPIO_Init+0x16a>
 8000b16:	2307      	movs	r3, #7
 8000b18:	e021      	b.n	8000b5e <GPIO_Init+0x1ae>
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	e01f      	b.n	8000b5e <GPIO_Init+0x1ae>
 8000b1e:	2306      	movs	r3, #6
 8000b20:	e01d      	b.n	8000b5e <GPIO_Init+0x1ae>
 8000b22:	2305      	movs	r3, #5
 8000b24:	e01b      	b.n	8000b5e <GPIO_Init+0x1ae>
 8000b26:	2304      	movs	r3, #4
 8000b28:	e019      	b.n	8000b5e <GPIO_Init+0x1ae>
 8000b2a:	2303      	movs	r3, #3
 8000b2c:	e017      	b.n	8000b5e <GPIO_Init+0x1ae>
 8000b2e:	2302      	movs	r3, #2
 8000b30:	e015      	b.n	8000b5e <GPIO_Init+0x1ae>
 8000b32:	2301      	movs	r3, #1
 8000b34:	e013      	b.n	8000b5e <GPIO_Init+0x1ae>
 8000b36:	bf00      	nop
 8000b38:	40013c00 	.word	0x40013c00
 8000b3c:	40020000 	.word	0x40020000
 8000b40:	40020400 	.word	0x40020400
 8000b44:	40020800 	.word	0x40020800
 8000b48:	40020c00 	.word	0x40020c00
 8000b4c:	40021000 	.word	0x40021000
 8000b50:	40021400 	.word	0x40021400
 8000b54:	40021800 	.word	0x40021800
 8000b58:	40021c00 	.word	0x40021c00
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 8000b60:	4b5d      	ldr	r3, [pc, #372]	@ (8000cd8 <GPIO_Init+0x328>)
 8000b62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b64:	4a5c      	ldr	r2, [pc, #368]	@ (8000cd8 <GPIO_Init+0x328>)
 8000b66:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b6a:	6453      	str	r3, [r2, #68]	@ 0x44
		SYSGFG -> EXTICR[temp1] = portcode << (temp2 * 4);
 8000b6c:	7c7a      	ldrb	r2, [r7, #17]
 8000b6e:	7cbb      	ldrb	r3, [r7, #18]
 8000b70:	009b      	lsls	r3, r3, #2
 8000b72:	fa02 f103 	lsl.w	r1, r2, r3
 8000b76:	4a59      	ldr	r2, [pc, #356]	@ (8000cdc <GPIO_Init+0x32c>)
 8000b78:	7cfb      	ldrb	r3, [r7, #19]
 8000b7a:	3302      	adds	r3, #2
 8000b7c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//3. Enable the EXTI interrupt delivery using IMR
		EXTI->IMR |= (1 << pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 8000b80:	4b57      	ldr	r3, [pc, #348]	@ (8000ce0 <GPIO_Init+0x330>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	687a      	ldr	r2, [r7, #4]
 8000b86:	7912      	ldrb	r2, [r2, #4]
 8000b88:	4611      	mov	r1, r2
 8000b8a:	2201      	movs	r2, #1
 8000b8c:	408a      	lsls	r2, r1
 8000b8e:	4611      	mov	r1, r2
 8000b90:	4a53      	ldr	r2, [pc, #332]	@ (8000ce0 <GPIO_Init+0x330>)
 8000b92:	430b      	orrs	r3, r1
 8000b94:	6013      	str	r3, [r2, #0]

	}

	temp = 0;
 8000b96:	2300      	movs	r3, #0
 8000b98:	617b      	str	r3, [r7, #20]
	//2. Configure the Speed
	temp = (pGPIOHandle -> GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber));
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	799b      	ldrb	r3, [r3, #6]
 8000b9e:	461a      	mov	r2, r3
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	791b      	ldrb	r3, [r3, #4]
 8000ba4:	005b      	lsls	r3, r3, #1
 8000ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8000baa:	617b      	str	r3, [r7, #20]
	pGPIOHandle -> pGPIOx -> OSPEEDR &= ~(0x3 << pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);	// clearing
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	689a      	ldr	r2, [r3, #8]
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	791b      	ldrb	r3, [r3, #4]
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	2303      	movs	r3, #3
 8000bba:	408b      	lsls	r3, r1
 8000bbc:	43db      	mvns	r3, r3
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	400a      	ands	r2, r1
 8000bc6:	609a      	str	r2, [r3, #8]
	pGPIOHandle -> pGPIOx -> OSPEEDR |= temp;	// Setting
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	6899      	ldr	r1, [r3, #8]
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	697a      	ldr	r2, [r7, #20]
 8000bd4:	430a      	orrs	r2, r1
 8000bd6:	609a      	str	r2, [r3, #8]

	temp = 0;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	617b      	str	r3, [r7, #20]
	//3. Configure the Push-pull settings
	temp = (pGPIOHandle -> GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber));
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	79db      	ldrb	r3, [r3, #7]
 8000be0:	461a      	mov	r2, r3
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	791b      	ldrb	r3, [r3, #4]
 8000be6:	005b      	lsls	r3, r3, #1
 8000be8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bec:	617b      	str	r3, [r7, #20]
	pGPIOHandle -> pGPIOx -> PUPDR &= ~(0x3 << pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	68da      	ldr	r2, [r3, #12]
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	791b      	ldrb	r3, [r3, #4]
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	2303      	movs	r3, #3
 8000bfc:	408b      	lsls	r3, r1
 8000bfe:	43db      	mvns	r3, r3
 8000c00:	4619      	mov	r1, r3
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	400a      	ands	r2, r1
 8000c08:	60da      	str	r2, [r3, #12]
	pGPIOHandle -> pGPIOx -> PUPDR |= temp;
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	68d9      	ldr	r1, [r3, #12]
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	697a      	ldr	r2, [r7, #20]
 8000c16:	430a      	orrs	r2, r1
 8000c18:	60da      	str	r2, [r3, #12]

	temp = 0;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	617b      	str	r3, [r7, #20]
	//4. Configure the Output Type
	if(pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_OUT){
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	795b      	ldrb	r3, [r3, #5]
 8000c22:	2b01      	cmp	r3, #1
 8000c24:	d11d      	bne.n	8000c62 <GPIO_Init+0x2b2>
		temp = (pGPIOHandle -> GPIO_PinConfig.GPIO_PinOType << pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	7a1b      	ldrb	r3, [r3, #8]
 8000c2a:	461a      	mov	r2, r3
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	791b      	ldrb	r3, [r3, #4]
 8000c30:	fa02 f303 	lsl.w	r3, r2, r3
 8000c34:	617b      	str	r3, [r7, #20]
		pGPIOHandle -> pGPIOx -> OTYPER &= ~(0x3 << pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	685a      	ldr	r2, [r3, #4]
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	791b      	ldrb	r3, [r3, #4]
 8000c40:	4619      	mov	r1, r3
 8000c42:	2303      	movs	r3, #3
 8000c44:	408b      	lsls	r3, r1
 8000c46:	43db      	mvns	r3, r3
 8000c48:	4619      	mov	r1, r3
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	400a      	ands	r2, r1
 8000c50:	605a      	str	r2, [r3, #4]
		pGPIOHandle -> pGPIOx -> OTYPER |= temp;
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	6859      	ldr	r1, [r3, #4]
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	697a      	ldr	r2, [r7, #20]
 8000c5e:	430a      	orrs	r2, r1
 8000c60:	605a      	str	r2, [r3, #4]
	}
	//5. Configure the Alternate functionality, if required
	if(pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	795b      	ldrb	r3, [r3, #5]
 8000c66:	2b02      	cmp	r3, #2
 8000c68:	d131      	bne.n	8000cce <GPIO_Init+0x31e>
	{
		// Configure the alternate function here
		uint8_t temp1, temp2;

		temp1 = pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber / 8;
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	791b      	ldrb	r3, [r3, #4]
 8000c6e:	08db      	lsrs	r3, r3, #3
 8000c70:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber % 8;
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	791b      	ldrb	r3, [r3, #4]
 8000c76:	f003 0307 	and.w	r3, r3, #7
 8000c7a:	73fb      	strb	r3, [r7, #15]

		pGPIOHandle -> pGPIOx -> AFR[temp1] &= ~(0xF << (4 * temp2));
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	7c3a      	ldrb	r2, [r7, #16]
 8000c82:	3208      	adds	r2, #8
 8000c84:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000c88:	7bfb      	ldrb	r3, [r7, #15]
 8000c8a:	009b      	lsls	r3, r3, #2
 8000c8c:	220f      	movs	r2, #15
 8000c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c92:	43db      	mvns	r3, r3
 8000c94:	4618      	mov	r0, r3
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	7c3a      	ldrb	r2, [r7, #16]
 8000c9c:	4001      	ands	r1, r0
 8000c9e:	3208      	adds	r2, #8
 8000ca0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle -> pGPIOx -> AFR[temp1] |= pGPIOHandle -> GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp2);
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	7c3a      	ldrb	r2, [r7, #16]
 8000caa:	3208      	adds	r2, #8
 8000cac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	7a5b      	ldrb	r3, [r3, #9]
 8000cb4:	461a      	mov	r2, r3
 8000cb6:	7bfb      	ldrb	r3, [r7, #15]
 8000cb8:	009b      	lsls	r3, r3, #2
 8000cba:	fa02 f303 	lsl.w	r3, r2, r3
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	7c3a      	ldrb	r2, [r7, #16]
 8000cc6:	4301      	orrs	r1, r0
 8000cc8:	3208      	adds	r2, #8
 8000cca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	}
}
 8000cce:	bf00      	nop
 8000cd0:	3718      	adds	r7, #24
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	40023800 	.word	0x40023800
 8000cdc:	40013800 	.word	0x40013800
 8000ce0:	40013c00 	.word	0x40013c00

08000ce4 <GPIO_ReadFromInputPin>:
 * @return								- Integer Either 0 or 1 [8 bit is enough]
 *
 * @note								- None
 *****************************************************************************************************************/
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b085      	sub	sp, #20
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
 8000cec:	460b      	mov	r3, r1
 8000cee:	70fb      	strb	r3, [r7, #3]
	uint8_t value;

	value = (uint8_t)((pGPIOx -> IDR >> PinNumber) & 0x00000001);
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	691a      	ldr	r2, [r3, #16]
 8000cf4:	78fb      	ldrb	r3, [r7, #3]
 8000cf6:	fa22 f303 	lsr.w	r3, r2, r3
 8000cfa:	b2db      	uxtb	r3, r3
 8000cfc:	f003 0301 	and.w	r3, r3, #1
 8000d00:	73fb      	strb	r3, [r7, #15]

	return value;
 8000d02:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d04:	4618      	mov	r0, r3
 8000d06:	3714      	adds	r7, #20
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0e:	4770      	bx	lr

08000d10 <USART_SetBaudRate>:
 * @return								- None
 *
 * @note								- None
 *****************************************************************************************************************/
void USART_SetBaudRate(USART_RegDef_t *pUSARTx, uint32_t BaudRate)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b088      	sub	sp, #32
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
 8000d18:	6039      	str	r1, [r7, #0]
	uint32_t usartdiv;

	//variables to hold Mantissa and Fraction values
	uint32_t M_part,F_part;

	uint32_t tempreg=0;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	613b      	str	r3, [r7, #16]

	//Get the value of APB bus clock in to the variable PCLKx
	if(pUSARTx == USART1 || pUSARTx == USART6)
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	4a31      	ldr	r2, [pc, #196]	@ (8000de8 <USART_SetBaudRate+0xd8>)
 8000d22:	4293      	cmp	r3, r2
 8000d24:	d003      	beq.n	8000d2e <USART_SetBaudRate+0x1e>
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	4a30      	ldr	r2, [pc, #192]	@ (8000dec <USART_SetBaudRate+0xdc>)
 8000d2a:	4293      	cmp	r3, r2
 8000d2c:	d103      	bne.n	8000d36 <USART_SetBaudRate+0x26>
	{
		//USART1 and USART6 are hanging on APB2 bus
		PCLKx = RCC_GetPCLK2Value();
 8000d2e:	f7ff fd1f 	bl	8000770 <RCC_GetPCLK2Value>
 8000d32:	61f8      	str	r0, [r7, #28]
 8000d34:	e002      	b.n	8000d3c <USART_SetBaudRate+0x2c>
	}else
	{
		PCLKx = RCC_GetPCLK1Value();
 8000d36:	f7ff fcc3 	bl	80006c0 <RCC_GetPCLK1Value>
 8000d3a:	61f8      	str	r0, [r7, #28]
	}

	//Check for OVER8 configuration bit
	if(pUSARTx->CR1 & (1 << USART_CR1_OVER8))
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	68db      	ldr	r3, [r3, #12]
 8000d40:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d00b      	beq.n	8000d60 <USART_SetBaudRate+0x50>
	{
		//OVER8 = 1 , over sampling by 8
		usartdiv = ((25 * PCLKx) / (2 *BaudRate));
 8000d48:	69fa      	ldr	r2, [r7, #28]
 8000d4a:	4613      	mov	r3, r2
 8000d4c:	009b      	lsls	r3, r3, #2
 8000d4e:	4413      	add	r3, r2
 8000d50:	009a      	lsls	r2, r3, #2
 8000d52:	441a      	add	r2, r3
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	005b      	lsls	r3, r3, #1
 8000d58:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d5c:	61bb      	str	r3, [r7, #24]
 8000d5e:	e00a      	b.n	8000d76 <USART_SetBaudRate+0x66>
	}else
	{
		//over sampling by 16
		usartdiv = ((25 * PCLKx) / (4 *BaudRate));
 8000d60:	69fa      	ldr	r2, [r7, #28]
 8000d62:	4613      	mov	r3, r2
 8000d64:	009b      	lsls	r3, r3, #2
 8000d66:	4413      	add	r3, r2
 8000d68:	009a      	lsls	r2, r3, #2
 8000d6a:	441a      	add	r2, r3
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	009b      	lsls	r3, r3, #2
 8000d70:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d74:	61bb      	str	r3, [r7, #24]
	}

	//Calculate the Mantissa part
	M_part = usartdiv/100;
 8000d76:	69bb      	ldr	r3, [r7, #24]
 8000d78:	4a1d      	ldr	r2, [pc, #116]	@ (8000df0 <USART_SetBaudRate+0xe0>)
 8000d7a:	fba2 2303 	umull	r2, r3, r2, r3
 8000d7e:	095b      	lsrs	r3, r3, #5
 8000d80:	60fb      	str	r3, [r7, #12]

	//Place the Mantissa part in appropriate bit position . refer USART_BRR
	tempreg |= M_part << USART_BRR_DIVM11_0;
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	011b      	lsls	r3, r3, #4
 8000d86:	693a      	ldr	r2, [r7, #16]
 8000d88:	4313      	orrs	r3, r2
 8000d8a:	613b      	str	r3, [r7, #16]

	//Extract the fraction part
	F_part = (usartdiv - (M_part * 100));
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	2264      	movs	r2, #100	@ 0x64
 8000d90:	fb02 f303 	mul.w	r3, r2, r3
 8000d94:	69ba      	ldr	r2, [r7, #24]
 8000d96:	1ad3      	subs	r3, r2, r3
 8000d98:	617b      	str	r3, [r7, #20]

	//Calculate the final fractional
	if(pUSARTx->CR1 & ( 1 << USART_CR1_OVER8))
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	68db      	ldr	r3, [r3, #12]
 8000d9e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d00a      	beq.n	8000dbc <USART_SetBaudRate+0xac>
	{
		//OVER8 = 1 , over sampling by 8
		F_part = ((( F_part * 8)+ 50) / 100)& ((uint8_t)0x07);
 8000da6:	697b      	ldr	r3, [r7, #20]
 8000da8:	00db      	lsls	r3, r3, #3
 8000daa:	3332      	adds	r3, #50	@ 0x32
 8000dac:	4a10      	ldr	r2, [pc, #64]	@ (8000df0 <USART_SetBaudRate+0xe0>)
 8000dae:	fba2 2303 	umull	r2, r3, r2, r3
 8000db2:	095b      	lsrs	r3, r3, #5
 8000db4:	f003 0307 	and.w	r3, r3, #7
 8000db8:	617b      	str	r3, [r7, #20]
 8000dba:	e009      	b.n	8000dd0 <USART_SetBaudRate+0xc0>

	}else
	{
		//over sampling by 16
		F_part = ((( F_part * 16)+ 50) / 100) & ((uint8_t)0x0F);
 8000dbc:	697b      	ldr	r3, [r7, #20]
 8000dbe:	011b      	lsls	r3, r3, #4
 8000dc0:	3332      	adds	r3, #50	@ 0x32
 8000dc2:	4a0b      	ldr	r2, [pc, #44]	@ (8000df0 <USART_SetBaudRate+0xe0>)
 8000dc4:	fba2 2303 	umull	r2, r3, r2, r3
 8000dc8:	095b      	lsrs	r3, r3, #5
 8000dca:	f003 030f 	and.w	r3, r3, #15
 8000dce:	617b      	str	r3, [r7, #20]

	}

	//Place the fractional part in appropriate bit position . refer USART_BRR
	tempreg |= F_part;
 8000dd0:	693a      	ldr	r2, [r7, #16]
 8000dd2:	697b      	ldr	r3, [r7, #20]
 8000dd4:	4313      	orrs	r3, r2
 8000dd6:	613b      	str	r3, [r7, #16]

	//copy the value of tempreg in to BRR register
	pUSARTx->BRR = tempreg;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	693a      	ldr	r2, [r7, #16]
 8000ddc:	609a      	str	r2, [r3, #8]
}
 8000dde:	bf00      	nop
 8000de0:	3720      	adds	r7, #32
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	40011000 	.word	0x40011000
 8000dec:	40011400 	.word	0x40011400
 8000df0:	51eb851f 	.word	0x51eb851f

08000df4 <USART_PeriClockControl>:
 * @return								- None
 *
 * @note								- None
 *****************************************************************************************************************/
void USART_PeriClockControl(USART_RegDef_t *pUSARTx, uint8_t EnorDi)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b083      	sub	sp, #12
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
 8000dfc:	460b      	mov	r3, r1
 8000dfe:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000e00:	78fb      	ldrb	r3, [r7, #3]
 8000e02:	2b01      	cmp	r3, #1
 8000e04:	d141      	bne.n	8000e8a <USART_PeriClockControl+0x96>
	{
		if(pUSARTx == USART1)
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	4a43      	ldr	r2, [pc, #268]	@ (8000f18 <USART_PeriClockControl+0x124>)
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	d106      	bne.n	8000e1c <USART_PeriClockControl+0x28>
		{
			USART1_PCLK_EN();
 8000e0e:	4b43      	ldr	r3, [pc, #268]	@ (8000f1c <USART_PeriClockControl+0x128>)
 8000e10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e12:	4a42      	ldr	r2, [pc, #264]	@ (8000f1c <USART_PeriClockControl+0x128>)
 8000e14:	f043 0310 	orr.w	r3, r3, #16
 8000e18:	6453      	str	r3, [r2, #68]	@ 0x44
		}else if(pUSARTx == USART6)
		{
			USART6_PCLK_DI();
		}
	}
}
 8000e1a:	e077      	b.n	8000f0c <USART_PeriClockControl+0x118>
		}else if(pUSARTx == USART2)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	4a40      	ldr	r2, [pc, #256]	@ (8000f20 <USART_PeriClockControl+0x12c>)
 8000e20:	4293      	cmp	r3, r2
 8000e22:	d106      	bne.n	8000e32 <USART_PeriClockControl+0x3e>
			USART2_PCLK_EN();
 8000e24:	4b3d      	ldr	r3, [pc, #244]	@ (8000f1c <USART_PeriClockControl+0x128>)
 8000e26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e28:	4a3c      	ldr	r2, [pc, #240]	@ (8000f1c <USART_PeriClockControl+0x128>)
 8000e2a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e2e:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000e30:	e06c      	b.n	8000f0c <USART_PeriClockControl+0x118>
		}else if(pUSARTx == USART3)
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	4a3b      	ldr	r2, [pc, #236]	@ (8000f24 <USART_PeriClockControl+0x130>)
 8000e36:	4293      	cmp	r3, r2
 8000e38:	d106      	bne.n	8000e48 <USART_PeriClockControl+0x54>
			USART3_PCLK_EN();
 8000e3a:	4b38      	ldr	r3, [pc, #224]	@ (8000f1c <USART_PeriClockControl+0x128>)
 8000e3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e3e:	4a37      	ldr	r2, [pc, #220]	@ (8000f1c <USART_PeriClockControl+0x128>)
 8000e40:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000e44:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000e46:	e061      	b.n	8000f0c <USART_PeriClockControl+0x118>
		}else if(pUSARTx == UART4)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	4a37      	ldr	r2, [pc, #220]	@ (8000f28 <USART_PeriClockControl+0x134>)
 8000e4c:	4293      	cmp	r3, r2
 8000e4e:	d106      	bne.n	8000e5e <USART_PeriClockControl+0x6a>
			UART4_PCLK_EN();
 8000e50:	4b32      	ldr	r3, [pc, #200]	@ (8000f1c <USART_PeriClockControl+0x128>)
 8000e52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e54:	4a31      	ldr	r2, [pc, #196]	@ (8000f1c <USART_PeriClockControl+0x128>)
 8000e56:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000e5a:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000e5c:	e056      	b.n	8000f0c <USART_PeriClockControl+0x118>
		}else if(pUSARTx == UART5)
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	4a32      	ldr	r2, [pc, #200]	@ (8000f2c <USART_PeriClockControl+0x138>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d106      	bne.n	8000e74 <USART_PeriClockControl+0x80>
			UART5_PCLK_EN();
 8000e66:	4b2d      	ldr	r3, [pc, #180]	@ (8000f1c <USART_PeriClockControl+0x128>)
 8000e68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e6a:	4a2c      	ldr	r2, [pc, #176]	@ (8000f1c <USART_PeriClockControl+0x128>)
 8000e6c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000e70:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000e72:	e04b      	b.n	8000f0c <USART_PeriClockControl+0x118>
		}else if(pUSARTx == USART6)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	4a2e      	ldr	r2, [pc, #184]	@ (8000f30 <USART_PeriClockControl+0x13c>)
 8000e78:	4293      	cmp	r3, r2
 8000e7a:	d147      	bne.n	8000f0c <USART_PeriClockControl+0x118>
			USART6_PCLK_EN();
 8000e7c:	4b27      	ldr	r3, [pc, #156]	@ (8000f1c <USART_PeriClockControl+0x128>)
 8000e7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e80:	4a26      	ldr	r2, [pc, #152]	@ (8000f1c <USART_PeriClockControl+0x128>)
 8000e82:	f043 0320 	orr.w	r3, r3, #32
 8000e86:	6453      	str	r3, [r2, #68]	@ 0x44
}
 8000e88:	e040      	b.n	8000f0c <USART_PeriClockControl+0x118>
		if(pUSARTx == USART1)
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	4a22      	ldr	r2, [pc, #136]	@ (8000f18 <USART_PeriClockControl+0x124>)
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	d106      	bne.n	8000ea0 <USART_PeriClockControl+0xac>
			USART1_PCLK_DI();
 8000e92:	4b22      	ldr	r3, [pc, #136]	@ (8000f1c <USART_PeriClockControl+0x128>)
 8000e94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e96:	4a21      	ldr	r2, [pc, #132]	@ (8000f1c <USART_PeriClockControl+0x128>)
 8000e98:	f023 0310 	bic.w	r3, r3, #16
 8000e9c:	6453      	str	r3, [r2, #68]	@ 0x44
}
 8000e9e:	e035      	b.n	8000f0c <USART_PeriClockControl+0x118>
		}else if(pUSARTx == USART2)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	4a1f      	ldr	r2, [pc, #124]	@ (8000f20 <USART_PeriClockControl+0x12c>)
 8000ea4:	4293      	cmp	r3, r2
 8000ea6:	d106      	bne.n	8000eb6 <USART_PeriClockControl+0xc2>
			USART2_PCLK_DI();
 8000ea8:	4b1c      	ldr	r3, [pc, #112]	@ (8000f1c <USART_PeriClockControl+0x128>)
 8000eaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eac:	4a1b      	ldr	r2, [pc, #108]	@ (8000f1c <USART_PeriClockControl+0x128>)
 8000eae:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8000eb2:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000eb4:	e02a      	b.n	8000f0c <USART_PeriClockControl+0x118>
		}else if(pUSARTx == USART3)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	4a1a      	ldr	r2, [pc, #104]	@ (8000f24 <USART_PeriClockControl+0x130>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d106      	bne.n	8000ecc <USART_PeriClockControl+0xd8>
			USART3_PCLK_DI();
 8000ebe:	4b17      	ldr	r3, [pc, #92]	@ (8000f1c <USART_PeriClockControl+0x128>)
 8000ec0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ec2:	4a16      	ldr	r2, [pc, #88]	@ (8000f1c <USART_PeriClockControl+0x128>)
 8000ec4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000ec8:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000eca:	e01f      	b.n	8000f0c <USART_PeriClockControl+0x118>
		}else if(pUSARTx == UART4)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	4a16      	ldr	r2, [pc, #88]	@ (8000f28 <USART_PeriClockControl+0x134>)
 8000ed0:	4293      	cmp	r3, r2
 8000ed2:	d106      	bne.n	8000ee2 <USART_PeriClockControl+0xee>
			UART4_PCLK_DI();
 8000ed4:	4b11      	ldr	r3, [pc, #68]	@ (8000f1c <USART_PeriClockControl+0x128>)
 8000ed6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ed8:	4a10      	ldr	r2, [pc, #64]	@ (8000f1c <USART_PeriClockControl+0x128>)
 8000eda:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8000ede:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000ee0:	e014      	b.n	8000f0c <USART_PeriClockControl+0x118>
		}else if(pUSARTx == UART5)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	4a11      	ldr	r2, [pc, #68]	@ (8000f2c <USART_PeriClockControl+0x138>)
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d106      	bne.n	8000ef8 <USART_PeriClockControl+0x104>
			UART5_PCLK_DI();
 8000eea:	4b0c      	ldr	r3, [pc, #48]	@ (8000f1c <USART_PeriClockControl+0x128>)
 8000eec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eee:	4a0b      	ldr	r2, [pc, #44]	@ (8000f1c <USART_PeriClockControl+0x128>)
 8000ef0:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8000ef4:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000ef6:	e009      	b.n	8000f0c <USART_PeriClockControl+0x118>
		}else if(pUSARTx == USART6)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	4a0d      	ldr	r2, [pc, #52]	@ (8000f30 <USART_PeriClockControl+0x13c>)
 8000efc:	4293      	cmp	r3, r2
 8000efe:	d105      	bne.n	8000f0c <USART_PeriClockControl+0x118>
			USART6_PCLK_DI();
 8000f00:	4b06      	ldr	r3, [pc, #24]	@ (8000f1c <USART_PeriClockControl+0x128>)
 8000f02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f04:	4a05      	ldr	r2, [pc, #20]	@ (8000f1c <USART_PeriClockControl+0x128>)
 8000f06:	f023 0320 	bic.w	r3, r3, #32
 8000f0a:	6453      	str	r3, [r2, #68]	@ 0x44
}
 8000f0c:	bf00      	nop
 8000f0e:	370c      	adds	r7, #12
 8000f10:	46bd      	mov	sp, r7
 8000f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f16:	4770      	bx	lr
 8000f18:	40011000 	.word	0x40011000
 8000f1c:	40023800 	.word	0x40023800
 8000f20:	40004400 	.word	0x40004400
 8000f24:	40004800 	.word	0x40004800
 8000f28:	40004c00 	.word	0x40004c00
 8000f2c:	40005000 	.word	0x40005000
 8000f30:	40011400 	.word	0x40011400

08000f34 <USART_Init>:
 * @return								- None
 *
 * @note								- None
 *****************************************************************************************************************/
void USART_Init(USART_Handle_t *pUSARTHandle)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b084      	sub	sp, #16
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]

	//Temporary variable
	uint32_t tempreg=0;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	60fb      	str	r3, [r7, #12]

	/******************************** Configuration of CR1******************************************/

	//Implement the code to enable the Clock for given USART peripheral
	USART_PeriClockControl(pUSARTHandle->pUSARTx, ENABLE);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	2101      	movs	r1, #1
 8000f46:	4618      	mov	r0, r3
 8000f48:	f7ff ff54 	bl	8000df4 <USART_PeriClockControl>

	//Enable USART Tx and Rx engines according to the USART_Mode configuration item
	if ( pUSARTHandle->USART_Config.USART_Mode == USART_MODE_ONLY_RX)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	791b      	ldrb	r3, [r3, #4]
 8000f50:	2b01      	cmp	r3, #1
 8000f52:	d104      	bne.n	8000f5e <USART_Init+0x2a>
	{
		//Implement the code to enable the Receiver bit field
		tempreg|= (1 << USART_CR1_RE);
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	f043 0304 	orr.w	r3, r3, #4
 8000f5a:	60fb      	str	r3, [r7, #12]
 8000f5c:	e010      	b.n	8000f80 <USART_Init+0x4c>
	}else if (pUSARTHandle->USART_Config.USART_Mode == USART_MODE_ONLY_TX)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	791b      	ldrb	r3, [r3, #4]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d104      	bne.n	8000f70 <USART_Init+0x3c>
	{
		//Implement the code to enable the Transmitter bit field
		tempreg |= ( 1 << USART_CR1_TE );
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	f043 0308 	orr.w	r3, r3, #8
 8000f6c:	60fb      	str	r3, [r7, #12]
 8000f6e:	e007      	b.n	8000f80 <USART_Init+0x4c>

	}else if (pUSARTHandle->USART_Config.USART_Mode == USART_MODE_TXRX)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	791b      	ldrb	r3, [r3, #4]
 8000f74:	2b02      	cmp	r3, #2
 8000f76:	d103      	bne.n	8000f80 <USART_Init+0x4c>
	{
		//Implement the code to enable the both Transmitter and Receiver bit fields
		tempreg |= ( ( 1 << USART_CR1_RE) | ( 1 << USART_CR1_TE) );
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	f043 030c 	orr.w	r3, r3, #12
 8000f7e:	60fb      	str	r3, [r7, #12]
	}

	//Implement the code to configure the Word length configuration item
	tempreg |= pUSARTHandle->USART_Config.USART_WordLength << USART_CR1_M ;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	7c1b      	ldrb	r3, [r3, #16]
 8000f84:	031b      	lsls	r3, r3, #12
 8000f86:	68fa      	ldr	r2, [r7, #12]
 8000f88:	4313      	orrs	r3, r2
 8000f8a:	60fb      	str	r3, [r7, #12]


	//Configuration of parity control bit fields
	if ( pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_EN_EVEN)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	7c5b      	ldrb	r3, [r3, #17]
 8000f90:	2b01      	cmp	r3, #1
 8000f92:	d104      	bne.n	8000f9e <USART_Init+0x6a>
	{
		//Implement the code to enale the parity control
		tempreg |= ( 1 << USART_CR1_PCE);
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000f9a:	60fb      	str	r3, [r7, #12]
 8000f9c:	e00b      	b.n	8000fb6 <USART_Init+0x82>

		//Implement the code to enable EVEN parity
		//Not required because by default EVEN parity will be selected once you enable the parity control

	}else if (pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_EN_ODD )
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	7c5b      	ldrb	r3, [r3, #17]
 8000fa2:	2b02      	cmp	r3, #2
 8000fa4:	d107      	bne.n	8000fb6 <USART_Init+0x82>
	{
		//Implement the code to enable the parity control
		tempreg |= ( 1 << USART_CR1_PCE);
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000fac:	60fb      	str	r3, [r7, #12]

		//Implement the code to enable ODD parity
		tempreg |= ( 1 << USART_CR1_PS);
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000fb4:	60fb      	str	r3, [r7, #12]

	}

	//Program the CR1 register
	pUSARTHandle->pUSARTx->CR1 = tempreg;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	68fa      	ldr	r2, [r7, #12]
 8000fbc:	60da      	str	r2, [r3, #12]

	/******************************** Configuration of CR2******************************************/

	tempreg=0;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	60fb      	str	r3, [r7, #12]

	//Implement the code to configure the number of stop bits inserted during USART frame transmission
	tempreg |= pUSARTHandle->USART_Config.USART_NoOfStopBits << USART_CR2_STOP;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	68db      	ldr	r3, [r3, #12]
 8000fc6:	031b      	lsls	r3, r3, #12
 8000fc8:	68fa      	ldr	r2, [r7, #12]
 8000fca:	4313      	orrs	r3, r2
 8000fcc:	60fb      	str	r3, [r7, #12]

	//Program the CR2 register
	pUSARTHandle->pUSARTx->CR2 = tempreg;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	68fa      	ldr	r2, [r7, #12]
 8000fd4:	611a      	str	r2, [r3, #16]

	/******************************** Configuration of CR3******************************************/

	tempreg=0;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	60fb      	str	r3, [r7, #12]

	//Configuration of USART hardware flow control
	if ( pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_CTS)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	7c9b      	ldrb	r3, [r3, #18]
 8000fde:	2b01      	cmp	r3, #1
 8000fe0:	d104      	bne.n	8000fec <USART_Init+0xb8>
	{
		//Implement the code to enable CTS flow control
		tempreg |= ( 1 << USART_CR3_CTSE);
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000fe8:	60fb      	str	r3, [r7, #12]
 8000fea:	e014      	b.n	8001016 <USART_Init+0xe2>


	}else if (pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_RTS)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	7c9b      	ldrb	r3, [r3, #18]
 8000ff0:	2b02      	cmp	r3, #2
 8000ff2:	d104      	bne.n	8000ffe <USART_Init+0xca>
	{
		//Implement the code to enable RTS flow control
		tempreg |= ( 1 << USART_CR3_RTSE);
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ffa:	60fb      	str	r3, [r7, #12]
 8000ffc:	e00b      	b.n	8001016 <USART_Init+0xe2>

	}else if (pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_CTS_RTS)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	7c9b      	ldrb	r3, [r3, #18]
 8001002:	2b03      	cmp	r3, #3
 8001004:	d107      	bne.n	8001016 <USART_Init+0xe2>
	{
		//Implement the code to enable both CTS and RTS Flow control
		tempreg |= ( 1 << USART_CR3_CTSE);
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800100c:	60fb      	str	r3, [r7, #12]
		tempreg |= ( 1 << USART_CR3_RTSE);
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001014:	60fb      	str	r3, [r7, #12]
	}


	pUSARTHandle->pUSARTx->CR3 = tempreg;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	68fa      	ldr	r2, [r7, #12]
 800101c:	615a      	str	r2, [r3, #20]

	/******************************** Configuration of BRR(Baudrate register)******************************************/

	//Implement the code to configure the baud rate
	USART_SetBaudRate(pUSARTHandle->pUSARTx, pUSARTHandle->USART_Config.USART_Baud);
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681a      	ldr	r2, [r3, #0]
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	689b      	ldr	r3, [r3, #8]
 8001026:	4619      	mov	r1, r3
 8001028:	4610      	mov	r0, r2
 800102a:	f7ff fe71 	bl	8000d10 <USART_SetBaudRate>

}
 800102e:	bf00      	nop
 8001030:	3710      	adds	r7, #16
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}

08001036 <USART_GetFlagStatus>:
 * @return								- status of the flag either 0 or 1
 *
 * @note								- None
 *****************************************************************************************************************/
uint8_t USART_GetFlagStatus(USART_RegDef_t *pUSARTx , uint32_t FlagName)
{
 8001036:	b480      	push	{r7}
 8001038:	b083      	sub	sp, #12
 800103a:	af00      	add	r7, sp, #0
 800103c:	6078      	str	r0, [r7, #4]
 800103e:	6039      	str	r1, [r7, #0]
	if(pUSARTx->SR & FlagName)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681a      	ldr	r2, [r3, #0]
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	4013      	ands	r3, r2
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <USART_GetFlagStatus+0x1a>
	{
		return FLAG_SET;
 800104c:	2301      	movs	r3, #1
 800104e:	e000      	b.n	8001052 <USART_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;
 8001050:	2300      	movs	r3, #0
}
 8001052:	4618      	mov	r0, r3
 8001054:	370c      	adds	r7, #12
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr

0800105e <USART_SendData>:
 * @return								- None
 *
 * @note								- This is a blocking call / Polling type
 *****************************************************************************************************************/
void USART_SendData(USART_Handle_t *pUSARTHandle, uint8_t *pTxBuffer, uint32_t Len)
{
 800105e:	b580      	push	{r7, lr}
 8001060:	b086      	sub	sp, #24
 8001062:	af00      	add	r7, sp, #0
 8001064:	60f8      	str	r0, [r7, #12]
 8001066:	60b9      	str	r1, [r7, #8]
 8001068:	607a      	str	r2, [r7, #4]

	uint16_t *pdata;
	//Loop over until "Len" number of bytes are transferred
	for(uint32_t i = 0 ; i < Len; i++)
 800106a:	2300      	movs	r3, #0
 800106c:	617b      	str	r3, [r7, #20]
 800106e:	e031      	b.n	80010d4 <USART_SendData+0x76>
	{
		//Implement the code to wait until TXE flag is set in the SR
		while(! USART_GetFlagStatus(pUSARTHandle->pUSARTx,USART_FLAG_TXE));
 8001070:	bf00      	nop
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	2180      	movs	r1, #128	@ 0x80
 8001078:	4618      	mov	r0, r3
 800107a:	f7ff ffdc 	bl	8001036 <USART_GetFlagStatus>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d0f6      	beq.n	8001072 <USART_SendData+0x14>

		//Check the USART_WordLength item for 9BIT or 8BIT in a frame
		if(pUSARTHandle->USART_Config.USART_WordLength == USART_WORDLEN_9BITS)
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	7c1b      	ldrb	r3, [r3, #16]
 8001088:	2b01      	cmp	r3, #1
 800108a:	d118      	bne.n	80010be <USART_SendData+0x60>
		{
			//if 9BIT, load the DR with 2bytes masking the bits other than first 9 bits
			pdata = (uint16_t*) pTxBuffer;
 800108c:	68bb      	ldr	r3, [r7, #8]
 800108e:	613b      	str	r3, [r7, #16]
			pUSARTHandle->pUSARTx->DR = (*pdata & (uint16_t)0x01FF);
 8001090:	693b      	ldr	r3, [r7, #16]
 8001092:	881b      	ldrh	r3, [r3, #0]
 8001094:	461a      	mov	r2, r3
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800109e:	605a      	str	r2, [r3, #4]

			//check for USART_ParityControl
			if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	7c5b      	ldrb	r3, [r3, #17]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d106      	bne.n	80010b6 <USART_SendData+0x58>
			{
				//No parity is used in this transfer. so, 9bits of user data will be sent
				//Implement the code to increment pTxBuffer twice
				pTxBuffer++;
 80010a8:	68bb      	ldr	r3, [r7, #8]
 80010aa:	3301      	adds	r3, #1
 80010ac:	60bb      	str	r3, [r7, #8]
				pTxBuffer++;
 80010ae:	68bb      	ldr	r3, [r7, #8]
 80010b0:	3301      	adds	r3, #1
 80010b2:	60bb      	str	r3, [r7, #8]
 80010b4:	e00b      	b.n	80010ce <USART_SendData+0x70>
			}
			else
			{
				//Parity bit is used in this transfer . so , 8bits of user data will be sent
				//The 9th bit will be replaced by parity bit by the hardware
				pTxBuffer++;
 80010b6:	68bb      	ldr	r3, [r7, #8]
 80010b8:	3301      	adds	r3, #1
 80010ba:	60bb      	str	r3, [r7, #8]
 80010bc:	e007      	b.n	80010ce <USART_SendData+0x70>
			}
		}
		else
		{
			//This is 8bit data transfer
			pUSARTHandle->pUSARTx->DR = (*pTxBuffer  & (uint8_t)0xFF);
 80010be:	68bb      	ldr	r3, [r7, #8]
 80010c0:	781a      	ldrb	r2, [r3, #0]
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	605a      	str	r2, [r3, #4]

			//Implement the code to increment the buffer address
			pTxBuffer++;
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	3301      	adds	r3, #1
 80010cc:	60bb      	str	r3, [r7, #8]
	for(uint32_t i = 0 ; i < Len; i++)
 80010ce:	697b      	ldr	r3, [r7, #20]
 80010d0:	3301      	adds	r3, #1
 80010d2:	617b      	str	r3, [r7, #20]
 80010d4:	697a      	ldr	r2, [r7, #20]
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	429a      	cmp	r2, r3
 80010da:	d3c9      	bcc.n	8001070 <USART_SendData+0x12>
		}
	}

	//Implement the code to wait till TC flag is set in the SR
	while( ! USART_GetFlagStatus(pUSARTHandle->pUSARTx,USART_FLAG_TC));
 80010dc:	bf00      	nop
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	2140      	movs	r1, #64	@ 0x40
 80010e4:	4618      	mov	r0, r3
 80010e6:	f7ff ffa6 	bl	8001036 <USART_GetFlagStatus>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d0f6      	beq.n	80010de <USART_SendData+0x80>
}
 80010f0:	bf00      	nop
 80010f2:	bf00      	nop
 80010f4:	3718      	adds	r7, #24
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}

080010fa <USART_ReceiveDataIT>:
 * @return								- None
 *
 * @note								- Interrupt / Non blocking mode
 *****************************************************************************************************************/
uint8_t USART_ReceiveDataIT(USART_Handle_t *pUSARTHandle,uint8_t *pRxBuffer, uint32_t Len)
{
 80010fa:	b480      	push	{r7}
 80010fc:	b087      	sub	sp, #28
 80010fe:	af00      	add	r7, sp, #0
 8001100:	60f8      	str	r0, [r7, #12]
 8001102:	60b9      	str	r1, [r7, #8]
 8001104:	607a      	str	r2, [r7, #4]
	uint8_t rxstate = pUSARTHandle->RxBusyState	;
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800110c:	75fb      	strb	r3, [r7, #23]

	if(rxstate != USART_BUSY_IN_RX)
 800110e:	7dfb      	ldrb	r3, [r7, #23]
 8001110:	2b01      	cmp	r3, #1
 8001112:	d014      	beq.n	800113e <USART_ReceiveDataIT+0x44>
	{
		pUSARTHandle->RxLen = Len;
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	687a      	ldr	r2, [r7, #4]
 8001118:	621a      	str	r2, [r3, #32]
		pUSARTHandle->pRxBuffer = pRxBuffer;
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	68ba      	ldr	r2, [r7, #8]
 800111e:	619a      	str	r2, [r3, #24]
		pUSARTHandle->RxBusyState = USART_BUSY_IN_RX;
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	2201      	movs	r2, #1
 8001124:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

		(void)pUSARTHandle->pUSARTx->DR;
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	685b      	ldr	r3, [r3, #4]

		//Implement the code to enable interrupt for RXNE
		pUSARTHandle->pUSARTx->CR1 |= ( 1 << USART_CR1_RXNEIE);
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	68da      	ldr	r2, [r3, #12]
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f042 0220 	orr.w	r2, r2, #32
 800113c:	60da      	str	r2, [r3, #12]

	}

	return rxstate;
 800113e:	7dfb      	ldrb	r3, [r7, #23]

}
 8001140:	4618      	mov	r0, r3
 8001142:	371c      	adds	r7, #28
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr

0800114c <USART_IRQInterruptConfig>:
 * @return								- None
 *
 * @note								- None
 *****************************************************************************************************************/
void USART_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnorDi)
{
 800114c:	b480      	push	{r7}
 800114e:	b083      	sub	sp, #12
 8001150:	af00      	add	r7, sp, #0
 8001152:	4603      	mov	r3, r0
 8001154:	460a      	mov	r2, r1
 8001156:	71fb      	strb	r3, [r7, #7]
 8001158:	4613      	mov	r3, r2
 800115a:	71bb      	strb	r3, [r7, #6]
	if(EnorDi == ENABLE){
 800115c:	79bb      	ldrb	r3, [r7, #6]
 800115e:	2b01      	cmp	r3, #1
 8001160:	d133      	bne.n	80011ca <USART_IRQInterruptConfig+0x7e>
		if(IRQNumber <= 31)
 8001162:	79fb      	ldrb	r3, [r7, #7]
 8001164:	2b1f      	cmp	r3, #31
 8001166:	d80a      	bhi.n	800117e <USART_IRQInterruptConfig+0x32>
		{
			// Program ISER Register (bewteen 0 - 31)
			*NVIC_ISER0 |= (1 << IRQNumber);
 8001168:	4b35      	ldr	r3, [pc, #212]	@ (8001240 <USART_IRQInterruptConfig+0xf4>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	79fa      	ldrb	r2, [r7, #7]
 800116e:	2101      	movs	r1, #1
 8001170:	fa01 f202 	lsl.w	r2, r1, r2
 8001174:	4611      	mov	r1, r2
 8001176:	4a32      	ldr	r2, [pc, #200]	@ (8001240 <USART_IRQInterruptConfig+0xf4>)
 8001178:	430b      	orrs	r3, r1
 800117a:	6013      	str	r3, [r2, #0]
		{
			// Program ISER2 Register (bewteen 64 - 95)
			* NVIC_ICER2 |= (1 << (IRQNumber % 64));
		}
	}
}
 800117c:	e059      	b.n	8001232 <USART_IRQInterruptConfig+0xe6>
		else if(IRQNumber >= 31 && IRQNumber < 64)
 800117e:	79fb      	ldrb	r3, [r7, #7]
 8001180:	2b1e      	cmp	r3, #30
 8001182:	d90f      	bls.n	80011a4 <USART_IRQInterruptConfig+0x58>
 8001184:	79fb      	ldrb	r3, [r7, #7]
 8001186:	2b3f      	cmp	r3, #63	@ 0x3f
 8001188:	d80c      	bhi.n	80011a4 <USART_IRQInterruptConfig+0x58>
			* NVIC_ISER1 |= (1 << (IRQNumber % 32));
 800118a:	4b2e      	ldr	r3, [pc, #184]	@ (8001244 <USART_IRQInterruptConfig+0xf8>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	79fa      	ldrb	r2, [r7, #7]
 8001190:	f002 021f 	and.w	r2, r2, #31
 8001194:	2101      	movs	r1, #1
 8001196:	fa01 f202 	lsl.w	r2, r1, r2
 800119a:	4611      	mov	r1, r2
 800119c:	4a29      	ldr	r2, [pc, #164]	@ (8001244 <USART_IRQInterruptConfig+0xf8>)
 800119e:	430b      	orrs	r3, r1
 80011a0:	6013      	str	r3, [r2, #0]
 80011a2:	e046      	b.n	8001232 <USART_IRQInterruptConfig+0xe6>
		else if(IRQNumber >= 64 && IRQNumber < 96)
 80011a4:	79fb      	ldrb	r3, [r7, #7]
 80011a6:	2b3f      	cmp	r3, #63	@ 0x3f
 80011a8:	d943      	bls.n	8001232 <USART_IRQInterruptConfig+0xe6>
 80011aa:	79fb      	ldrb	r3, [r7, #7]
 80011ac:	2b5f      	cmp	r3, #95	@ 0x5f
 80011ae:	d840      	bhi.n	8001232 <USART_IRQInterruptConfig+0xe6>
			* NVIC_ISER2 |= (1 << (IRQNumber % 64));
 80011b0:	4b25      	ldr	r3, [pc, #148]	@ (8001248 <USART_IRQInterruptConfig+0xfc>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	79fa      	ldrb	r2, [r7, #7]
 80011b6:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80011ba:	2101      	movs	r1, #1
 80011bc:	fa01 f202 	lsl.w	r2, r1, r2
 80011c0:	4611      	mov	r1, r2
 80011c2:	4a21      	ldr	r2, [pc, #132]	@ (8001248 <USART_IRQInterruptConfig+0xfc>)
 80011c4:	430b      	orrs	r3, r1
 80011c6:	6013      	str	r3, [r2, #0]
}
 80011c8:	e033      	b.n	8001232 <USART_IRQInterruptConfig+0xe6>
		if(IRQNumber <= 31)
 80011ca:	79fb      	ldrb	r3, [r7, #7]
 80011cc:	2b1f      	cmp	r3, #31
 80011ce:	d80a      	bhi.n	80011e6 <USART_IRQInterruptConfig+0x9a>
			*NVIC_ICER0 |= (1 << IRQNumber);
 80011d0:	4b1e      	ldr	r3, [pc, #120]	@ (800124c <USART_IRQInterruptConfig+0x100>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	79fa      	ldrb	r2, [r7, #7]
 80011d6:	2101      	movs	r1, #1
 80011d8:	fa01 f202 	lsl.w	r2, r1, r2
 80011dc:	4611      	mov	r1, r2
 80011de:	4a1b      	ldr	r2, [pc, #108]	@ (800124c <USART_IRQInterruptConfig+0x100>)
 80011e0:	430b      	orrs	r3, r1
 80011e2:	6013      	str	r3, [r2, #0]
}
 80011e4:	e025      	b.n	8001232 <USART_IRQInterruptConfig+0xe6>
		else if(IRQNumber >= 31 && IRQNumber < 64)
 80011e6:	79fb      	ldrb	r3, [r7, #7]
 80011e8:	2b1e      	cmp	r3, #30
 80011ea:	d90f      	bls.n	800120c <USART_IRQInterruptConfig+0xc0>
 80011ec:	79fb      	ldrb	r3, [r7, #7]
 80011ee:	2b3f      	cmp	r3, #63	@ 0x3f
 80011f0:	d80c      	bhi.n	800120c <USART_IRQInterruptConfig+0xc0>
			* NVIC_ICER1 |= (1 << (IRQNumber % 32));
 80011f2:	4b17      	ldr	r3, [pc, #92]	@ (8001250 <USART_IRQInterruptConfig+0x104>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	79fa      	ldrb	r2, [r7, #7]
 80011f8:	f002 021f 	and.w	r2, r2, #31
 80011fc:	2101      	movs	r1, #1
 80011fe:	fa01 f202 	lsl.w	r2, r1, r2
 8001202:	4611      	mov	r1, r2
 8001204:	4a12      	ldr	r2, [pc, #72]	@ (8001250 <USART_IRQInterruptConfig+0x104>)
 8001206:	430b      	orrs	r3, r1
 8001208:	6013      	str	r3, [r2, #0]
 800120a:	e012      	b.n	8001232 <USART_IRQInterruptConfig+0xe6>
		else if(IRQNumber >= 64 && IRQNumber < 96)
 800120c:	79fb      	ldrb	r3, [r7, #7]
 800120e:	2b3f      	cmp	r3, #63	@ 0x3f
 8001210:	d90f      	bls.n	8001232 <USART_IRQInterruptConfig+0xe6>
 8001212:	79fb      	ldrb	r3, [r7, #7]
 8001214:	2b5f      	cmp	r3, #95	@ 0x5f
 8001216:	d80c      	bhi.n	8001232 <USART_IRQInterruptConfig+0xe6>
			* NVIC_ICER2 |= (1 << (IRQNumber % 64));
 8001218:	4b0e      	ldr	r3, [pc, #56]	@ (8001254 <USART_IRQInterruptConfig+0x108>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	79fa      	ldrb	r2, [r7, #7]
 800121e:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8001222:	2101      	movs	r1, #1
 8001224:	fa01 f202 	lsl.w	r2, r1, r2
 8001228:	4611      	mov	r1, r2
 800122a:	4a0a      	ldr	r2, [pc, #40]	@ (8001254 <USART_IRQInterruptConfig+0x108>)
 800122c:	430b      	orrs	r3, r1
 800122e:	6013      	str	r3, [r2, #0]
}
 8001230:	e7ff      	b.n	8001232 <USART_IRQInterruptConfig+0xe6>
 8001232:	bf00      	nop
 8001234:	370c      	adds	r7, #12
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop
 8001240:	e000e100 	.word	0xe000e100
 8001244:	e000e104 	.word	0xe000e104
 8001248:	e000e108 	.word	0xe000e108
 800124c:	e000e180 	.word	0xe000e180
 8001250:	e000e184 	.word	0xe000e184
 8001254:	e000e188 	.word	0xe000e188

08001258 <USART_IRQHandling>:
 * @return								- None
 *
 * @note								- None
 *****************************************************************************************************************/
void USART_IRQHandling(USART_Handle_t *pUSARTHandle)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b086      	sub	sp, #24
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
	uint16_t *pdata;

/*************************Check for TC flag ********************************************/

    //Implement the code to check the state of TC bit in the SR
	temp1 = pUSARTHandle->pUSARTx->SR & ( 1 << USART_SR_TC);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800126a:	617b      	str	r3, [r7, #20]

	 //Implement the code to check the state of TCEIE bit
	temp2 = pUSARTHandle->pUSARTx->CR1 & ( 1 << USART_CR1_TCIE);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	68db      	ldr	r3, [r3, #12]
 8001272:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001276:	613b      	str	r3, [r7, #16]

	if(temp1 && temp2 )
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d029      	beq.n	80012d2 <USART_IRQHandling+0x7a>
 800127e:	693b      	ldr	r3, [r7, #16]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d026      	beq.n	80012d2 <USART_IRQHandling+0x7a>
	{
		//this interrupt is because of TC

		//close transmission and call application callback if TxLen is zero
		if ( pUSARTHandle->TxBusyState == USART_BUSY_IN_TX)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800128a:	2b02      	cmp	r3, #2
 800128c:	d121      	bne.n	80012d2 <USART_IRQHandling+0x7a>
		{
			//Check the TxLen . If it is zero then close the data transmission
			if(! pUSARTHandle->TxLen )
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	69db      	ldr	r3, [r3, #28]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d11d      	bne.n	80012d2 <USART_IRQHandling+0x7a>
			{
				//Implement the code to clear the TC flag
				pUSARTHandle->pUSARTx->SR &= ~( 1 << USART_SR_TC);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	681a      	ldr	r2, [r3, #0]
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80012a4:	601a      	str	r2, [r3, #0]

				//Implement the code to clear the TCIE control bit
				pUSARTHandle->pUSARTx->CR1 &= ~( 1 << USART_CR1_TCIE);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	68da      	ldr	r2, [r3, #12]
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80012b4:	60da      	str	r2, [r3, #12]

				//Reset the application state
				pUSARTHandle->TxBusyState = USART_READY;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	2200      	movs	r2, #0
 80012ba:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

				//Reset Buffer address to NULL
				pUSARTHandle->pTxBuffer = NULL;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	2200      	movs	r2, #0
 80012c2:	615a      	str	r2, [r3, #20]

				//Reset the length to zero
				pUSARTHandle->TxLen = 0;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	2200      	movs	r2, #0
 80012c8:	61da      	str	r2, [r3, #28]

				//Call the applicaton call back with event USART_EVENT_TX_CMPLT
				USART_ApplicationEventCallback(pUSARTHandle,USART_EVENT_TX_CMPLT);
 80012ca:	2100      	movs	r1, #0
 80012cc:	6878      	ldr	r0, [r7, #4]
 80012ce:	f7ff f8df 	bl	8000490 <USART_ApplicationEventCallback>
	}

/*************************Check for TXE flag ********************************************/

	//Implement the code to check the state of TXE bit in the SR
	temp1 = pUSARTHandle->pUSARTx->SR & ( 1 << USART_SR_TXE);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80012dc:	617b      	str	r3, [r7, #20]

	//Implement the code to check the state of TXEIE bit in CR1
	temp2 = pUSARTHandle->pUSARTx->CR1 & ( 1 << USART_CR1_TXEIE);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	68db      	ldr	r3, [r3, #12]
 80012e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80012e8:	613b      	str	r3, [r7, #16]

	if(temp1 && temp2 )
 80012ea:	697b      	ldr	r3, [r7, #20]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d055      	beq.n	800139c <USART_IRQHandling+0x144>
 80012f0:	693b      	ldr	r3, [r7, #16]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d052      	beq.n	800139c <USART_IRQHandling+0x144>
	{
		//this interrupt is because of TXE

		if(pUSARTHandle->TxBusyState == USART_BUSY_IN_TX)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80012fc:	2b02      	cmp	r3, #2
 80012fe:	d14d      	bne.n	800139c <USART_IRQHandling+0x144>
		{
			//Keep sending data until Txlen reaches to zero
			if(pUSARTHandle->TxLen > 0)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	69db      	ldr	r3, [r3, #28]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d03d      	beq.n	8001384 <USART_IRQHandling+0x12c>
			{
				//Check the USART_WordLength item for 9BIT or 8BIT in a frame
				if(pUSARTHandle->USART_Config.USART_WordLength == USART_WORDLEN_9BITS)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	7c1b      	ldrb	r3, [r3, #16]
 800130c:	2b01      	cmp	r3, #1
 800130e:	d129      	bne.n	8001364 <USART_IRQHandling+0x10c>
				{
					//if 9BIT , load the DR with 2bytes masking the bits other than first 9 bits
					pdata = (uint16_t*) pUSARTHandle->pTxBuffer;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	695b      	ldr	r3, [r3, #20]
 8001314:	60fb      	str	r3, [r7, #12]

					//loading only first 9 bits , so we have to mask with the value 0x01FF
					pUSARTHandle->pUSARTx->DR = (*pdata & (uint16_t)0x01FF);
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	881b      	ldrh	r3, [r3, #0]
 800131a:	461a      	mov	r2, r3
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001324:	605a      	str	r2, [r3, #4]

					//check for USART_ParityControl
					if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	7c5b      	ldrb	r3, [r3, #17]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d10f      	bne.n	800134e <USART_IRQHandling+0xf6>
					{
						//No parity is used in this transfer , so, 9bits of user data will be sent
						//Implement the code to increment pTxBuffer twice
						pUSARTHandle->pTxBuffer++;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	695b      	ldr	r3, [r3, #20]
 8001332:	1c5a      	adds	r2, r3, #1
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	615a      	str	r2, [r3, #20]
						pUSARTHandle->pTxBuffer++;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	695b      	ldr	r3, [r3, #20]
 800133c:	1c5a      	adds	r2, r3, #1
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	615a      	str	r2, [r3, #20]

						//Implement the code to decrement the length
						pUSARTHandle->TxLen -= 2;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	69db      	ldr	r3, [r3, #28]
 8001346:	1e9a      	subs	r2, r3, #2
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	61da      	str	r2, [r3, #28]
 800134c:	e01a      	b.n	8001384 <USART_IRQHandling+0x12c>
					}
					else
					{
						//Parity bit is used in this transfer . so , 8bits of user data will be sent
						//The 9th bit will be replaced by parity bit by the hardware
						pUSARTHandle->pTxBuffer++;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	695b      	ldr	r3, [r3, #20]
 8001352:	1c5a      	adds	r2, r3, #1
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	615a      	str	r2, [r3, #20]

						//Implement the code to decrement the length
						pUSARTHandle->TxLen -= 1;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	69db      	ldr	r3, [r3, #28]
 800135c:	1e5a      	subs	r2, r3, #1
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	61da      	str	r2, [r3, #28]
 8001362:	e00f      	b.n	8001384 <USART_IRQHandling+0x12c>
					}
				}
				else
				{
					//This is 8bit data transfer
					pUSARTHandle->pUSARTx->DR = (*pUSARTHandle->pTxBuffer  & (uint8_t)0xFF);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	695b      	ldr	r3, [r3, #20]
 8001368:	781a      	ldrb	r2, [r3, #0]
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	605a      	str	r2, [r3, #4]

					//Implement the code to increment the buffer address
					pUSARTHandle->pTxBuffer++;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	695b      	ldr	r3, [r3, #20]
 8001374:	1c5a      	adds	r2, r3, #1
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	615a      	str	r2, [r3, #20]

					//Implement the code to decrement the length
					pUSARTHandle->TxLen-=1;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	69db      	ldr	r3, [r3, #28]
 800137e:	1e5a      	subs	r2, r3, #1
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	61da      	str	r2, [r3, #28]
				}

			}
			if (pUSARTHandle->TxLen == 0 )
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	69db      	ldr	r3, [r3, #28]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d107      	bne.n	800139c <USART_IRQHandling+0x144>
			{
				//TxLen is zero
				//Implement the code to clear the TXEIE bit (disable interrupt for TXE flag )
				pUSARTHandle->pUSARTx->CR1 &= ~( 1 << USART_CR1_TXEIE);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	68da      	ldr	r2, [r3, #12]
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800139a:	60da      	str	r2, [r3, #12]
		}
	}

/*************************Check for RXNE flag ********************************************/

	temp1 = pUSARTHandle->pUSARTx->SR & ( 1 << USART_SR_RXNE);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f003 0320 	and.w	r3, r3, #32
 80013a6:	617b      	str	r3, [r7, #20]
	temp2 = pUSARTHandle->pUSARTx->CR1 & ( 1 << USART_CR1_RXNEIE);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	68db      	ldr	r3, [r3, #12]
 80013ae:	f003 0320 	and.w	r3, r3, #32
 80013b2:	613b      	str	r3, [r7, #16]


	if(temp1 && temp2 )
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d073      	beq.n	80014a2 <USART_IRQHandling+0x24a>
 80013ba:	693b      	ldr	r3, [r7, #16]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d070      	beq.n	80014a2 <USART_IRQHandling+0x24a>
	{
		//this interrupt is because of rxne
		//this interrupt is because of txe
		if(pUSARTHandle->RxBusyState == USART_BUSY_IN_RX)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80013c6:	2b01      	cmp	r3, #1
 80013c8:	d16b      	bne.n	80014a2 <USART_IRQHandling+0x24a>
		{
			//TXE is set so send data
			if(pUSARTHandle->RxLen > 0)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6a1b      	ldr	r3, [r3, #32]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d053      	beq.n	800147a <USART_IRQHandling+0x222>
			{
				//Check the USART_WordLength to decide whether we are going to receive 9bit of data in a frame or 8 bit
				if(pUSARTHandle->USART_Config.USART_WordLength == USART_WORDLEN_9BITS)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	7c1b      	ldrb	r3, [r3, #16]
 80013d6:	2b01      	cmp	r3, #1
 80013d8:	d12f      	bne.n	800143a <USART_IRQHandling+0x1e2>
				{
					//We are going to receive 9bit data in a frame

					//Now, check are we using USART_ParityControl control or not
					if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	7c5b      	ldrb	r3, [r3, #17]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d119      	bne.n	8001416 <USART_IRQHandling+0x1be>
					{
						//No parity is used. so, all 9bits will be of user data

						//read only first 9 bits so mask the DR with 0x01FF
						*((uint16_t*) pUSARTHandle->pRxBuffer) = (pUSARTHandle->pUSARTx->DR  & (uint16_t)0x01FF);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	b29a      	uxth	r2, r3
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	699b      	ldr	r3, [r3, #24]
 80013ee:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80013f2:	b292      	uxth	r2, r2
 80013f4:	801a      	strh	r2, [r3, #0]

						//Now increment the pRxBuffer two times
						pUSARTHandle->pRxBuffer++;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	699b      	ldr	r3, [r3, #24]
 80013fa:	1c5a      	adds	r2, r3, #1
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	619a      	str	r2, [r3, #24]
						pUSARTHandle->pRxBuffer++;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	699b      	ldr	r3, [r3, #24]
 8001404:	1c5a      	adds	r2, r3, #1
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	619a      	str	r2, [r3, #24]

						//Implement the code to decrement the length
						pUSARTHandle->RxLen-=2;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6a1b      	ldr	r3, [r3, #32]
 800140e:	1e9a      	subs	r2, r3, #2
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	621a      	str	r2, [r3, #32]
 8001414:	e031      	b.n	800147a <USART_IRQHandling+0x222>
					}
					else
					{
						//Parity is used. so, 8bits will be of user data and 1 bit is parity
						*pUSARTHandle->pRxBuffer = (pUSARTHandle->pUSARTx->DR  & (uint8_t)0xFF);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	685a      	ldr	r2, [r3, #4]
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	699b      	ldr	r3, [r3, #24]
 8001420:	b2d2      	uxtb	r2, r2
 8001422:	701a      	strb	r2, [r3, #0]

						 //Now increment the pRxBuffer
						pUSARTHandle->pRxBuffer++;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	699b      	ldr	r3, [r3, #24]
 8001428:	1c5a      	adds	r2, r3, #1
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	619a      	str	r2, [r3, #24]

						 //Implement the code to decrement the length
						pUSARTHandle->RxLen-=1;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6a1b      	ldr	r3, [r3, #32]
 8001432:	1e5a      	subs	r2, r3, #1
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	621a      	str	r2, [r3, #32]
 8001438:	e01f      	b.n	800147a <USART_IRQHandling+0x222>
				else
				{
					//We are going to receive 8bit data in a frame

					//Now, check are we using USART_ParityControl control or not
					if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	7c5b      	ldrb	r3, [r3, #17]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d107      	bne.n	8001452 <USART_IRQHandling+0x1fa>
					{
						//No parity is used , so all 8bits will be of user data

						//read 8 bits from DR
						*pUSARTHandle->pRxBuffer = (uint8_t) (pUSARTHandle->pUSARTx->DR  & (uint8_t)0xFF);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	685a      	ldr	r2, [r3, #4]
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	699b      	ldr	r3, [r3, #24]
 800144c:	b2d2      	uxtb	r2, r2
 800144e:	701a      	strb	r2, [r3, #0]
 8001450:	e009      	b.n	8001466 <USART_IRQHandling+0x20e>
					else
					{
						//Parity is used, so , 7 bits will be of user data and 1 bit is parity

						//read only 7 bits , hence mask the DR with 0X7F
						*pUSARTHandle->pRxBuffer = (uint8_t) (pUSARTHandle->pUSARTx->DR  & (uint8_t)0x7F);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	b2da      	uxtb	r2, r3
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	699b      	ldr	r3, [r3, #24]
 800145e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001462:	b2d2      	uxtb	r2, r2
 8001464:	701a      	strb	r2, [r3, #0]

					}

					//Now , increment the pRxBuffer
					pUSARTHandle->pRxBuffer++;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	699b      	ldr	r3, [r3, #24]
 800146a:	1c5a      	adds	r2, r3, #1
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	619a      	str	r2, [r3, #24]

					//Implement the code to decrement the length
					pUSARTHandle->RxLen-=1;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6a1b      	ldr	r3, [r3, #32]
 8001474:	1e5a      	subs	r2, r3, #1
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	621a      	str	r2, [r3, #32]
				}


			}//if of >0

			if(! pUSARTHandle->RxLen)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6a1b      	ldr	r3, [r3, #32]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d10f      	bne.n	80014a2 <USART_IRQHandling+0x24a>
			{
				//disable the rxne
				pUSARTHandle->pUSARTx->CR1 &= ~( 1 << USART_CR1_RXNEIE );
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	68da      	ldr	r2, [r3, #12]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f022 0220 	bic.w	r2, r2, #32
 8001490:	60da      	str	r2, [r3, #12]
				pUSARTHandle->RxBusyState = USART_READY;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2200      	movs	r2, #0
 8001496:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
				USART_ApplicationEventCallback(pUSARTHandle,USART_EVENT_RX_CMPLT);
 800149a:	2101      	movs	r1, #1
 800149c:	6878      	ldr	r0, [r7, #4]
 800149e:	f7fe fff7 	bl	8000490 <USART_ApplicationEventCallback>

/*************************Check for CTS flag ********************************************/
//Note : CTS feature is not applicable for UART4 and UART5

	//Implement the code to check the status of CTS bit in the SR
	temp1 = pUSARTHandle->pUSARTx->SR & ( 1 << USART_SR_CTS);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80014ac:	617b      	str	r3, [r7, #20]

	//Implement the code to check the state of CTSE bit in CR1
	temp2 = pUSARTHandle->pUSARTx->CR3 & ( 1 << USART_CR3_CTSE);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	695b      	ldr	r3, [r3, #20]
 80014b4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80014b8:	613b      	str	r3, [r7, #16]

	//Implement the code to check the state of CTSIE bit in CR3 (This bit is not available for UART4 & UART5.)
	temp3 = pUSARTHandle->pUSARTx->CR3 & ( 1 << USART_CR3_CTSIE);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	695b      	ldr	r3, [r3, #20]
 80014c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80014c4:	60bb      	str	r3, [r7, #8]


	if(temp1  && temp2 )
 80014c6:	697b      	ldr	r3, [r7, #20]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d00e      	beq.n	80014ea <USART_IRQHandling+0x292>
 80014cc:	693b      	ldr	r3, [r7, #16]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d00b      	beq.n	80014ea <USART_IRQHandling+0x292>
	{
		//Implement the code to clear the CTS flag in SR
		pUSARTHandle->pUSARTx->SR &= ~(1 << USART_SR_CTS);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	681a      	ldr	r2, [r3, #0]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80014e0:	601a      	str	r2, [r3, #0]

		//this interrupt is because of cts
		USART_ApplicationEventCallback(pUSARTHandle,USART_EVENT_CTS);
 80014e2:	2103      	movs	r1, #3
 80014e4:	6878      	ldr	r0, [r7, #4]
 80014e6:	f7fe ffd3 	bl	8000490 <USART_ApplicationEventCallback>
	}

/*************************Check for IDLE detection flag ********************************************/

	//Implement the code to check the status of IDLE flag bit in the SR
	temp1 = pUSARTHandle->pUSARTx->SR & ( 1 << USART_SR_IDLE);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f003 0310 	and.w	r3, r3, #16
 80014f4:	617b      	str	r3, [r7, #20]

	//Implement the code to check the state of IDLEIE bit in CR1
	temp2 = pUSARTHandle->pUSARTx->CR1 & ( 1 << USART_CR1_IDLEIE);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	68db      	ldr	r3, [r3, #12]
 80014fc:	f003 0310 	and.w	r3, r3, #16
 8001500:	613b      	str	r3, [r7, #16]


	if(temp1 && temp2)
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d00f      	beq.n	8001528 <USART_IRQHandling+0x2d0>
 8001508:	693b      	ldr	r3, [r7, #16]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d00c      	beq.n	8001528 <USART_IRQHandling+0x2d0>
	{
		//Implement the code to clear the IDLE flag. Refer to the RM to understand the clear sequence
		temp1 = pUSARTHandle->pUSARTx->SR &= ~( 1 << USART_SR_IDLE);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	687a      	ldr	r2, [r7, #4]
 8001516:	6812      	ldr	r2, [r2, #0]
 8001518:	f023 0310 	bic.w	r3, r3, #16
 800151c:	6013      	str	r3, [r2, #0]
 800151e:	617b      	str	r3, [r7, #20]

		//this interrupt is because of idle
		USART_ApplicationEventCallback(pUSARTHandle,USART_EVENT_IDLE);
 8001520:	2102      	movs	r1, #2
 8001522:	6878      	ldr	r0, [r7, #4]
 8001524:	f7fe ffb4 	bl	8000490 <USART_ApplicationEventCallback>
	}

/*************************Check for Overrun detection flag ********************************************/

	//Implement the code to check the status of ORE flag  in the SR
	temp1 = pUSARTHandle->pUSARTx->SR & USART_SR_ORE;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f003 0303 	and.w	r3, r3, #3
 8001532:	617b      	str	r3, [r7, #20]

	//Implement the code to check the status of RXNEIE  bit in the CR1
	temp2 = pUSARTHandle->pUSARTx->CR1 & USART_CR1_RXNEIE;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	68db      	ldr	r3, [r3, #12]
 800153a:	f003 0305 	and.w	r3, r3, #5
 800153e:	613b      	str	r3, [r7, #16]


	if(temp1  && temp2 )
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d006      	beq.n	8001554 <USART_IRQHandling+0x2fc>
 8001546:	693b      	ldr	r3, [r7, #16]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d003      	beq.n	8001554 <USART_IRQHandling+0x2fc>
	{
		//Need not to clear the ORE flag here, instead give an api for the application to clear the ORE flag .

		//this interrupt is because of Overrun error
		USART_ApplicationEventCallback(pUSARTHandle,USART_ERR_ORE);
 800154c:	2107      	movs	r1, #7
 800154e:	6878      	ldr	r0, [r7, #4]
 8001550:	f7fe ff9e 	bl	8000490 <USART_ApplicationEventCallback>

//Noise Flag, Overrun error and Framing Error in multibuffer communication
//We dont discuss multibuffer communication in this course. please refer to the RM
//The blow code will get executed in only if multibuffer mode is used.

	temp2 =  pUSARTHandle->pUSARTx->CR3 & ( 1 << USART_CR3_EIE) ;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	695b      	ldr	r3, [r3, #20]
 800155a:	f003 0301 	and.w	r3, r3, #1
 800155e:	613b      	str	r3, [r7, #16]

	if(temp2 )
 8001560:	693b      	ldr	r3, [r7, #16]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d01e      	beq.n	80015a4 <USART_IRQHandling+0x34c>
	{
		temp1 = pUSARTHandle->pUSARTx->SR;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	617b      	str	r3, [r7, #20]
		if(temp1 & ( 1 << USART_SR_FE))
 800156e:	697b      	ldr	r3, [r7, #20]
 8001570:	f003 0302 	and.w	r3, r3, #2
 8001574:	2b00      	cmp	r3, #0
 8001576:	d003      	beq.n	8001580 <USART_IRQHandling+0x328>
			/*
				This bit is set by hardware when a de-synchronization, excessive noise or a break character
				is detected. It is cleared by a software sequence (an read to the USART_SR register
				followed by a read to the USART_DR register).
			*/
			USART_ApplicationEventCallback(pUSARTHandle,USART_ERR_FE);
 8001578:	2105      	movs	r1, #5
 800157a:	6878      	ldr	r0, [r7, #4]
 800157c:	f7fe ff88 	bl	8000490 <USART_ApplicationEventCallback>
		}

		if(temp1 & ( 1 << USART_SR_NE) )
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	f003 0304 	and.w	r3, r3, #4
 8001586:	2b00      	cmp	r3, #0
 8001588:	d003      	beq.n	8001592 <USART_IRQHandling+0x33a>
			/*
				This bit is set by hardware when noise is detected on a received frame. It is cleared by a
				software sequence (an read to the USART_SR register followed by a read to the
				USART_DR register).
			*/
			USART_ApplicationEventCallback(pUSARTHandle,USART_ERR_NE);
 800158a:	2106      	movs	r1, #6
 800158c:	6878      	ldr	r0, [r7, #4]
 800158e:	f7fe ff7f 	bl	8000490 <USART_ApplicationEventCallback>
		}

		if(temp1 & ( 1 << USART_SR_ORE) )
 8001592:	697b      	ldr	r3, [r7, #20]
 8001594:	f003 0308 	and.w	r3, r3, #8
 8001598:	2b00      	cmp	r3, #0
 800159a:	d003      	beq.n	80015a4 <USART_IRQHandling+0x34c>
		{
			USART_ApplicationEventCallback(pUSARTHandle,USART_ERR_ORE);
 800159c:	2107      	movs	r1, #7
 800159e:	6878      	ldr	r0, [r7, #4]
 80015a0:	f7fe ff76 	bl	8000490 <USART_ApplicationEventCallback>
		}
	}


}
 80015a4:	bf00      	nop
 80015a6:	3718      	adds	r7, #24
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}

080015ac <USART_PeripheralControl>:
 * @return								- None
 *
 * @note								- None
 *****************************************************************************************************************/
void USART_PeripheralControl(USART_RegDef_t *pUSARTx, uint8_t EnOrDi)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b083      	sub	sp, #12
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
 80015b4:	460b      	mov	r3, r1
 80015b6:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 80015b8:	78fb      	ldrb	r3, [r7, #3]
 80015ba:	2b01      	cmp	r3, #1
 80015bc:	d106      	bne.n	80015cc <USART_PeripheralControl+0x20>
	{
		pUSARTx->CR1 |= (1 << USART_CR1_UE);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	68db      	ldr	r3, [r3, #12]
 80015c2:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	60da      	str	r2, [r3, #12]
	}
	else
	{
		pUSARTx->CR1 &= ~(1 << USART_CR1_UE);
	}
}
 80015ca:	e005      	b.n	80015d8 <USART_PeripheralControl+0x2c>
		pUSARTx->CR1 &= ~(1 << USART_CR1_UE);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	68db      	ldr	r3, [r3, #12]
 80015d0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	60da      	str	r2, [r3, #12]
}
 80015d8:	bf00      	nop
 80015da:	370c      	adds	r7, #12
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr

080015e4 <std>:
 80015e4:	2300      	movs	r3, #0
 80015e6:	b510      	push	{r4, lr}
 80015e8:	4604      	mov	r4, r0
 80015ea:	e9c0 3300 	strd	r3, r3, [r0]
 80015ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80015f2:	6083      	str	r3, [r0, #8]
 80015f4:	8181      	strh	r1, [r0, #12]
 80015f6:	6643      	str	r3, [r0, #100]	@ 0x64
 80015f8:	81c2      	strh	r2, [r0, #14]
 80015fa:	6183      	str	r3, [r0, #24]
 80015fc:	4619      	mov	r1, r3
 80015fe:	2208      	movs	r2, #8
 8001600:	305c      	adds	r0, #92	@ 0x5c
 8001602:	f000 f9f9 	bl	80019f8 <memset>
 8001606:	4b0d      	ldr	r3, [pc, #52]	@ (800163c <std+0x58>)
 8001608:	6263      	str	r3, [r4, #36]	@ 0x24
 800160a:	4b0d      	ldr	r3, [pc, #52]	@ (8001640 <std+0x5c>)
 800160c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800160e:	4b0d      	ldr	r3, [pc, #52]	@ (8001644 <std+0x60>)
 8001610:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8001612:	4b0d      	ldr	r3, [pc, #52]	@ (8001648 <std+0x64>)
 8001614:	6323      	str	r3, [r4, #48]	@ 0x30
 8001616:	4b0d      	ldr	r3, [pc, #52]	@ (800164c <std+0x68>)
 8001618:	6224      	str	r4, [r4, #32]
 800161a:	429c      	cmp	r4, r3
 800161c:	d006      	beq.n	800162c <std+0x48>
 800161e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8001622:	4294      	cmp	r4, r2
 8001624:	d002      	beq.n	800162c <std+0x48>
 8001626:	33d0      	adds	r3, #208	@ 0xd0
 8001628:	429c      	cmp	r4, r3
 800162a:	d105      	bne.n	8001638 <std+0x54>
 800162c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8001630:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001634:	f000 ba58 	b.w	8001ae8 <__retarget_lock_init_recursive>
 8001638:	bd10      	pop	{r4, pc}
 800163a:	bf00      	nop
 800163c:	08001849 	.word	0x08001849
 8001640:	0800186b 	.word	0x0800186b
 8001644:	080018a3 	.word	0x080018a3
 8001648:	080018c7 	.word	0x080018c7
 800164c:	200004c8 	.word	0x200004c8

08001650 <stdio_exit_handler>:
 8001650:	4a02      	ldr	r2, [pc, #8]	@ (800165c <stdio_exit_handler+0xc>)
 8001652:	4903      	ldr	r1, [pc, #12]	@ (8001660 <stdio_exit_handler+0x10>)
 8001654:	4803      	ldr	r0, [pc, #12]	@ (8001664 <stdio_exit_handler+0x14>)
 8001656:	f000 b869 	b.w	800172c <_fwalk_sglue>
 800165a:	bf00      	nop
 800165c:	20000020 	.word	0x20000020
 8001660:	08002389 	.word	0x08002389
 8001664:	20000030 	.word	0x20000030

08001668 <cleanup_stdio>:
 8001668:	6841      	ldr	r1, [r0, #4]
 800166a:	4b0c      	ldr	r3, [pc, #48]	@ (800169c <cleanup_stdio+0x34>)
 800166c:	4299      	cmp	r1, r3
 800166e:	b510      	push	{r4, lr}
 8001670:	4604      	mov	r4, r0
 8001672:	d001      	beq.n	8001678 <cleanup_stdio+0x10>
 8001674:	f000 fe88 	bl	8002388 <_fflush_r>
 8001678:	68a1      	ldr	r1, [r4, #8]
 800167a:	4b09      	ldr	r3, [pc, #36]	@ (80016a0 <cleanup_stdio+0x38>)
 800167c:	4299      	cmp	r1, r3
 800167e:	d002      	beq.n	8001686 <cleanup_stdio+0x1e>
 8001680:	4620      	mov	r0, r4
 8001682:	f000 fe81 	bl	8002388 <_fflush_r>
 8001686:	68e1      	ldr	r1, [r4, #12]
 8001688:	4b06      	ldr	r3, [pc, #24]	@ (80016a4 <cleanup_stdio+0x3c>)
 800168a:	4299      	cmp	r1, r3
 800168c:	d004      	beq.n	8001698 <cleanup_stdio+0x30>
 800168e:	4620      	mov	r0, r4
 8001690:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001694:	f000 be78 	b.w	8002388 <_fflush_r>
 8001698:	bd10      	pop	{r4, pc}
 800169a:	bf00      	nop
 800169c:	200004c8 	.word	0x200004c8
 80016a0:	20000530 	.word	0x20000530
 80016a4:	20000598 	.word	0x20000598

080016a8 <global_stdio_init.part.0>:
 80016a8:	b510      	push	{r4, lr}
 80016aa:	4b0b      	ldr	r3, [pc, #44]	@ (80016d8 <global_stdio_init.part.0+0x30>)
 80016ac:	4c0b      	ldr	r4, [pc, #44]	@ (80016dc <global_stdio_init.part.0+0x34>)
 80016ae:	4a0c      	ldr	r2, [pc, #48]	@ (80016e0 <global_stdio_init.part.0+0x38>)
 80016b0:	601a      	str	r2, [r3, #0]
 80016b2:	4620      	mov	r0, r4
 80016b4:	2200      	movs	r2, #0
 80016b6:	2104      	movs	r1, #4
 80016b8:	f7ff ff94 	bl	80015e4 <std>
 80016bc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80016c0:	2201      	movs	r2, #1
 80016c2:	2109      	movs	r1, #9
 80016c4:	f7ff ff8e 	bl	80015e4 <std>
 80016c8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80016cc:	2202      	movs	r2, #2
 80016ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80016d2:	2112      	movs	r1, #18
 80016d4:	f7ff bf86 	b.w	80015e4 <std>
 80016d8:	20000600 	.word	0x20000600
 80016dc:	200004c8 	.word	0x200004c8
 80016e0:	08001651 	.word	0x08001651

080016e4 <__sfp_lock_acquire>:
 80016e4:	4801      	ldr	r0, [pc, #4]	@ (80016ec <__sfp_lock_acquire+0x8>)
 80016e6:	f000 ba00 	b.w	8001aea <__retarget_lock_acquire_recursive>
 80016ea:	bf00      	nop
 80016ec:	20000609 	.word	0x20000609

080016f0 <__sfp_lock_release>:
 80016f0:	4801      	ldr	r0, [pc, #4]	@ (80016f8 <__sfp_lock_release+0x8>)
 80016f2:	f000 b9fb 	b.w	8001aec <__retarget_lock_release_recursive>
 80016f6:	bf00      	nop
 80016f8:	20000609 	.word	0x20000609

080016fc <__sinit>:
 80016fc:	b510      	push	{r4, lr}
 80016fe:	4604      	mov	r4, r0
 8001700:	f7ff fff0 	bl	80016e4 <__sfp_lock_acquire>
 8001704:	6a23      	ldr	r3, [r4, #32]
 8001706:	b11b      	cbz	r3, 8001710 <__sinit+0x14>
 8001708:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800170c:	f7ff bff0 	b.w	80016f0 <__sfp_lock_release>
 8001710:	4b04      	ldr	r3, [pc, #16]	@ (8001724 <__sinit+0x28>)
 8001712:	6223      	str	r3, [r4, #32]
 8001714:	4b04      	ldr	r3, [pc, #16]	@ (8001728 <__sinit+0x2c>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d1f5      	bne.n	8001708 <__sinit+0xc>
 800171c:	f7ff ffc4 	bl	80016a8 <global_stdio_init.part.0>
 8001720:	e7f2      	b.n	8001708 <__sinit+0xc>
 8001722:	bf00      	nop
 8001724:	08001669 	.word	0x08001669
 8001728:	20000600 	.word	0x20000600

0800172c <_fwalk_sglue>:
 800172c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001730:	4607      	mov	r7, r0
 8001732:	4688      	mov	r8, r1
 8001734:	4614      	mov	r4, r2
 8001736:	2600      	movs	r6, #0
 8001738:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800173c:	f1b9 0901 	subs.w	r9, r9, #1
 8001740:	d505      	bpl.n	800174e <_fwalk_sglue+0x22>
 8001742:	6824      	ldr	r4, [r4, #0]
 8001744:	2c00      	cmp	r4, #0
 8001746:	d1f7      	bne.n	8001738 <_fwalk_sglue+0xc>
 8001748:	4630      	mov	r0, r6
 800174a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800174e:	89ab      	ldrh	r3, [r5, #12]
 8001750:	2b01      	cmp	r3, #1
 8001752:	d907      	bls.n	8001764 <_fwalk_sglue+0x38>
 8001754:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001758:	3301      	adds	r3, #1
 800175a:	d003      	beq.n	8001764 <_fwalk_sglue+0x38>
 800175c:	4629      	mov	r1, r5
 800175e:	4638      	mov	r0, r7
 8001760:	47c0      	blx	r8
 8001762:	4306      	orrs	r6, r0
 8001764:	3568      	adds	r5, #104	@ 0x68
 8001766:	e7e9      	b.n	800173c <_fwalk_sglue+0x10>

08001768 <iprintf>:
 8001768:	b40f      	push	{r0, r1, r2, r3}
 800176a:	b507      	push	{r0, r1, r2, lr}
 800176c:	4906      	ldr	r1, [pc, #24]	@ (8001788 <iprintf+0x20>)
 800176e:	ab04      	add	r3, sp, #16
 8001770:	6808      	ldr	r0, [r1, #0]
 8001772:	f853 2b04 	ldr.w	r2, [r3], #4
 8001776:	6881      	ldr	r1, [r0, #8]
 8001778:	9301      	str	r3, [sp, #4]
 800177a:	f000 fadb 	bl	8001d34 <_vfiprintf_r>
 800177e:	b003      	add	sp, #12
 8001780:	f85d eb04 	ldr.w	lr, [sp], #4
 8001784:	b004      	add	sp, #16
 8001786:	4770      	bx	lr
 8001788:	2000002c 	.word	0x2000002c

0800178c <_puts_r>:
 800178c:	6a03      	ldr	r3, [r0, #32]
 800178e:	b570      	push	{r4, r5, r6, lr}
 8001790:	6884      	ldr	r4, [r0, #8]
 8001792:	4605      	mov	r5, r0
 8001794:	460e      	mov	r6, r1
 8001796:	b90b      	cbnz	r3, 800179c <_puts_r+0x10>
 8001798:	f7ff ffb0 	bl	80016fc <__sinit>
 800179c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800179e:	07db      	lsls	r3, r3, #31
 80017a0:	d405      	bmi.n	80017ae <_puts_r+0x22>
 80017a2:	89a3      	ldrh	r3, [r4, #12]
 80017a4:	0598      	lsls	r0, r3, #22
 80017a6:	d402      	bmi.n	80017ae <_puts_r+0x22>
 80017a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80017aa:	f000 f99e 	bl	8001aea <__retarget_lock_acquire_recursive>
 80017ae:	89a3      	ldrh	r3, [r4, #12]
 80017b0:	0719      	lsls	r1, r3, #28
 80017b2:	d502      	bpl.n	80017ba <_puts_r+0x2e>
 80017b4:	6923      	ldr	r3, [r4, #16]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d135      	bne.n	8001826 <_puts_r+0x9a>
 80017ba:	4621      	mov	r1, r4
 80017bc:	4628      	mov	r0, r5
 80017be:	f000 f8c5 	bl	800194c <__swsetup_r>
 80017c2:	b380      	cbz	r0, 8001826 <_puts_r+0x9a>
 80017c4:	f04f 35ff 	mov.w	r5, #4294967295
 80017c8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80017ca:	07da      	lsls	r2, r3, #31
 80017cc:	d405      	bmi.n	80017da <_puts_r+0x4e>
 80017ce:	89a3      	ldrh	r3, [r4, #12]
 80017d0:	059b      	lsls	r3, r3, #22
 80017d2:	d402      	bmi.n	80017da <_puts_r+0x4e>
 80017d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80017d6:	f000 f989 	bl	8001aec <__retarget_lock_release_recursive>
 80017da:	4628      	mov	r0, r5
 80017dc:	bd70      	pop	{r4, r5, r6, pc}
 80017de:	2b00      	cmp	r3, #0
 80017e0:	da04      	bge.n	80017ec <_puts_r+0x60>
 80017e2:	69a2      	ldr	r2, [r4, #24]
 80017e4:	429a      	cmp	r2, r3
 80017e6:	dc17      	bgt.n	8001818 <_puts_r+0x8c>
 80017e8:	290a      	cmp	r1, #10
 80017ea:	d015      	beq.n	8001818 <_puts_r+0x8c>
 80017ec:	6823      	ldr	r3, [r4, #0]
 80017ee:	1c5a      	adds	r2, r3, #1
 80017f0:	6022      	str	r2, [r4, #0]
 80017f2:	7019      	strb	r1, [r3, #0]
 80017f4:	68a3      	ldr	r3, [r4, #8]
 80017f6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80017fa:	3b01      	subs	r3, #1
 80017fc:	60a3      	str	r3, [r4, #8]
 80017fe:	2900      	cmp	r1, #0
 8001800:	d1ed      	bne.n	80017de <_puts_r+0x52>
 8001802:	2b00      	cmp	r3, #0
 8001804:	da11      	bge.n	800182a <_puts_r+0x9e>
 8001806:	4622      	mov	r2, r4
 8001808:	210a      	movs	r1, #10
 800180a:	4628      	mov	r0, r5
 800180c:	f000 f85f 	bl	80018ce <__swbuf_r>
 8001810:	3001      	adds	r0, #1
 8001812:	d0d7      	beq.n	80017c4 <_puts_r+0x38>
 8001814:	250a      	movs	r5, #10
 8001816:	e7d7      	b.n	80017c8 <_puts_r+0x3c>
 8001818:	4622      	mov	r2, r4
 800181a:	4628      	mov	r0, r5
 800181c:	f000 f857 	bl	80018ce <__swbuf_r>
 8001820:	3001      	adds	r0, #1
 8001822:	d1e7      	bne.n	80017f4 <_puts_r+0x68>
 8001824:	e7ce      	b.n	80017c4 <_puts_r+0x38>
 8001826:	3e01      	subs	r6, #1
 8001828:	e7e4      	b.n	80017f4 <_puts_r+0x68>
 800182a:	6823      	ldr	r3, [r4, #0]
 800182c:	1c5a      	adds	r2, r3, #1
 800182e:	6022      	str	r2, [r4, #0]
 8001830:	220a      	movs	r2, #10
 8001832:	701a      	strb	r2, [r3, #0]
 8001834:	e7ee      	b.n	8001814 <_puts_r+0x88>
	...

08001838 <puts>:
 8001838:	4b02      	ldr	r3, [pc, #8]	@ (8001844 <puts+0xc>)
 800183a:	4601      	mov	r1, r0
 800183c:	6818      	ldr	r0, [r3, #0]
 800183e:	f7ff bfa5 	b.w	800178c <_puts_r>
 8001842:	bf00      	nop
 8001844:	2000002c 	.word	0x2000002c

08001848 <__sread>:
 8001848:	b510      	push	{r4, lr}
 800184a:	460c      	mov	r4, r1
 800184c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001850:	f000 f8fc 	bl	8001a4c <_read_r>
 8001854:	2800      	cmp	r0, #0
 8001856:	bfab      	itete	ge
 8001858:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800185a:	89a3      	ldrhlt	r3, [r4, #12]
 800185c:	181b      	addge	r3, r3, r0
 800185e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8001862:	bfac      	ite	ge
 8001864:	6563      	strge	r3, [r4, #84]	@ 0x54
 8001866:	81a3      	strhlt	r3, [r4, #12]
 8001868:	bd10      	pop	{r4, pc}

0800186a <__swrite>:
 800186a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800186e:	461f      	mov	r7, r3
 8001870:	898b      	ldrh	r3, [r1, #12]
 8001872:	05db      	lsls	r3, r3, #23
 8001874:	4605      	mov	r5, r0
 8001876:	460c      	mov	r4, r1
 8001878:	4616      	mov	r6, r2
 800187a:	d505      	bpl.n	8001888 <__swrite+0x1e>
 800187c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001880:	2302      	movs	r3, #2
 8001882:	2200      	movs	r2, #0
 8001884:	f000 f8d0 	bl	8001a28 <_lseek_r>
 8001888:	89a3      	ldrh	r3, [r4, #12]
 800188a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800188e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001892:	81a3      	strh	r3, [r4, #12]
 8001894:	4632      	mov	r2, r6
 8001896:	463b      	mov	r3, r7
 8001898:	4628      	mov	r0, r5
 800189a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800189e:	f000 b8e7 	b.w	8001a70 <_write_r>

080018a2 <__sseek>:
 80018a2:	b510      	push	{r4, lr}
 80018a4:	460c      	mov	r4, r1
 80018a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80018aa:	f000 f8bd 	bl	8001a28 <_lseek_r>
 80018ae:	1c43      	adds	r3, r0, #1
 80018b0:	89a3      	ldrh	r3, [r4, #12]
 80018b2:	bf15      	itete	ne
 80018b4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80018b6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80018ba:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80018be:	81a3      	strheq	r3, [r4, #12]
 80018c0:	bf18      	it	ne
 80018c2:	81a3      	strhne	r3, [r4, #12]
 80018c4:	bd10      	pop	{r4, pc}

080018c6 <__sclose>:
 80018c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80018ca:	f000 b89d 	b.w	8001a08 <_close_r>

080018ce <__swbuf_r>:
 80018ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018d0:	460e      	mov	r6, r1
 80018d2:	4614      	mov	r4, r2
 80018d4:	4605      	mov	r5, r0
 80018d6:	b118      	cbz	r0, 80018e0 <__swbuf_r+0x12>
 80018d8:	6a03      	ldr	r3, [r0, #32]
 80018da:	b90b      	cbnz	r3, 80018e0 <__swbuf_r+0x12>
 80018dc:	f7ff ff0e 	bl	80016fc <__sinit>
 80018e0:	69a3      	ldr	r3, [r4, #24]
 80018e2:	60a3      	str	r3, [r4, #8]
 80018e4:	89a3      	ldrh	r3, [r4, #12]
 80018e6:	071a      	lsls	r2, r3, #28
 80018e8:	d501      	bpl.n	80018ee <__swbuf_r+0x20>
 80018ea:	6923      	ldr	r3, [r4, #16]
 80018ec:	b943      	cbnz	r3, 8001900 <__swbuf_r+0x32>
 80018ee:	4621      	mov	r1, r4
 80018f0:	4628      	mov	r0, r5
 80018f2:	f000 f82b 	bl	800194c <__swsetup_r>
 80018f6:	b118      	cbz	r0, 8001900 <__swbuf_r+0x32>
 80018f8:	f04f 37ff 	mov.w	r7, #4294967295
 80018fc:	4638      	mov	r0, r7
 80018fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001900:	6823      	ldr	r3, [r4, #0]
 8001902:	6922      	ldr	r2, [r4, #16]
 8001904:	1a98      	subs	r0, r3, r2
 8001906:	6963      	ldr	r3, [r4, #20]
 8001908:	b2f6      	uxtb	r6, r6
 800190a:	4283      	cmp	r3, r0
 800190c:	4637      	mov	r7, r6
 800190e:	dc05      	bgt.n	800191c <__swbuf_r+0x4e>
 8001910:	4621      	mov	r1, r4
 8001912:	4628      	mov	r0, r5
 8001914:	f000 fd38 	bl	8002388 <_fflush_r>
 8001918:	2800      	cmp	r0, #0
 800191a:	d1ed      	bne.n	80018f8 <__swbuf_r+0x2a>
 800191c:	68a3      	ldr	r3, [r4, #8]
 800191e:	3b01      	subs	r3, #1
 8001920:	60a3      	str	r3, [r4, #8]
 8001922:	6823      	ldr	r3, [r4, #0]
 8001924:	1c5a      	adds	r2, r3, #1
 8001926:	6022      	str	r2, [r4, #0]
 8001928:	701e      	strb	r6, [r3, #0]
 800192a:	6962      	ldr	r2, [r4, #20]
 800192c:	1c43      	adds	r3, r0, #1
 800192e:	429a      	cmp	r2, r3
 8001930:	d004      	beq.n	800193c <__swbuf_r+0x6e>
 8001932:	89a3      	ldrh	r3, [r4, #12]
 8001934:	07db      	lsls	r3, r3, #31
 8001936:	d5e1      	bpl.n	80018fc <__swbuf_r+0x2e>
 8001938:	2e0a      	cmp	r6, #10
 800193a:	d1df      	bne.n	80018fc <__swbuf_r+0x2e>
 800193c:	4621      	mov	r1, r4
 800193e:	4628      	mov	r0, r5
 8001940:	f000 fd22 	bl	8002388 <_fflush_r>
 8001944:	2800      	cmp	r0, #0
 8001946:	d0d9      	beq.n	80018fc <__swbuf_r+0x2e>
 8001948:	e7d6      	b.n	80018f8 <__swbuf_r+0x2a>
	...

0800194c <__swsetup_r>:
 800194c:	b538      	push	{r3, r4, r5, lr}
 800194e:	4b29      	ldr	r3, [pc, #164]	@ (80019f4 <__swsetup_r+0xa8>)
 8001950:	4605      	mov	r5, r0
 8001952:	6818      	ldr	r0, [r3, #0]
 8001954:	460c      	mov	r4, r1
 8001956:	b118      	cbz	r0, 8001960 <__swsetup_r+0x14>
 8001958:	6a03      	ldr	r3, [r0, #32]
 800195a:	b90b      	cbnz	r3, 8001960 <__swsetup_r+0x14>
 800195c:	f7ff fece 	bl	80016fc <__sinit>
 8001960:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001964:	0719      	lsls	r1, r3, #28
 8001966:	d422      	bmi.n	80019ae <__swsetup_r+0x62>
 8001968:	06da      	lsls	r2, r3, #27
 800196a:	d407      	bmi.n	800197c <__swsetup_r+0x30>
 800196c:	2209      	movs	r2, #9
 800196e:	602a      	str	r2, [r5, #0]
 8001970:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001974:	81a3      	strh	r3, [r4, #12]
 8001976:	f04f 30ff 	mov.w	r0, #4294967295
 800197a:	e033      	b.n	80019e4 <__swsetup_r+0x98>
 800197c:	0758      	lsls	r0, r3, #29
 800197e:	d512      	bpl.n	80019a6 <__swsetup_r+0x5a>
 8001980:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001982:	b141      	cbz	r1, 8001996 <__swsetup_r+0x4a>
 8001984:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001988:	4299      	cmp	r1, r3
 800198a:	d002      	beq.n	8001992 <__swsetup_r+0x46>
 800198c:	4628      	mov	r0, r5
 800198e:	f000 f8af 	bl	8001af0 <_free_r>
 8001992:	2300      	movs	r3, #0
 8001994:	6363      	str	r3, [r4, #52]	@ 0x34
 8001996:	89a3      	ldrh	r3, [r4, #12]
 8001998:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800199c:	81a3      	strh	r3, [r4, #12]
 800199e:	2300      	movs	r3, #0
 80019a0:	6063      	str	r3, [r4, #4]
 80019a2:	6923      	ldr	r3, [r4, #16]
 80019a4:	6023      	str	r3, [r4, #0]
 80019a6:	89a3      	ldrh	r3, [r4, #12]
 80019a8:	f043 0308 	orr.w	r3, r3, #8
 80019ac:	81a3      	strh	r3, [r4, #12]
 80019ae:	6923      	ldr	r3, [r4, #16]
 80019b0:	b94b      	cbnz	r3, 80019c6 <__swsetup_r+0x7a>
 80019b2:	89a3      	ldrh	r3, [r4, #12]
 80019b4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80019b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80019bc:	d003      	beq.n	80019c6 <__swsetup_r+0x7a>
 80019be:	4621      	mov	r1, r4
 80019c0:	4628      	mov	r0, r5
 80019c2:	f000 fd2f 	bl	8002424 <__smakebuf_r>
 80019c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80019ca:	f013 0201 	ands.w	r2, r3, #1
 80019ce:	d00a      	beq.n	80019e6 <__swsetup_r+0x9a>
 80019d0:	2200      	movs	r2, #0
 80019d2:	60a2      	str	r2, [r4, #8]
 80019d4:	6962      	ldr	r2, [r4, #20]
 80019d6:	4252      	negs	r2, r2
 80019d8:	61a2      	str	r2, [r4, #24]
 80019da:	6922      	ldr	r2, [r4, #16]
 80019dc:	b942      	cbnz	r2, 80019f0 <__swsetup_r+0xa4>
 80019de:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80019e2:	d1c5      	bne.n	8001970 <__swsetup_r+0x24>
 80019e4:	bd38      	pop	{r3, r4, r5, pc}
 80019e6:	0799      	lsls	r1, r3, #30
 80019e8:	bf58      	it	pl
 80019ea:	6962      	ldrpl	r2, [r4, #20]
 80019ec:	60a2      	str	r2, [r4, #8]
 80019ee:	e7f4      	b.n	80019da <__swsetup_r+0x8e>
 80019f0:	2000      	movs	r0, #0
 80019f2:	e7f7      	b.n	80019e4 <__swsetup_r+0x98>
 80019f4:	2000002c 	.word	0x2000002c

080019f8 <memset>:
 80019f8:	4402      	add	r2, r0
 80019fa:	4603      	mov	r3, r0
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d100      	bne.n	8001a02 <memset+0xa>
 8001a00:	4770      	bx	lr
 8001a02:	f803 1b01 	strb.w	r1, [r3], #1
 8001a06:	e7f9      	b.n	80019fc <memset+0x4>

08001a08 <_close_r>:
 8001a08:	b538      	push	{r3, r4, r5, lr}
 8001a0a:	4d06      	ldr	r5, [pc, #24]	@ (8001a24 <_close_r+0x1c>)
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	4604      	mov	r4, r0
 8001a10:	4608      	mov	r0, r1
 8001a12:	602b      	str	r3, [r5, #0]
 8001a14:	f7fe fdb8 	bl	8000588 <_close>
 8001a18:	1c43      	adds	r3, r0, #1
 8001a1a:	d102      	bne.n	8001a22 <_close_r+0x1a>
 8001a1c:	682b      	ldr	r3, [r5, #0]
 8001a1e:	b103      	cbz	r3, 8001a22 <_close_r+0x1a>
 8001a20:	6023      	str	r3, [r4, #0]
 8001a22:	bd38      	pop	{r3, r4, r5, pc}
 8001a24:	20000604 	.word	0x20000604

08001a28 <_lseek_r>:
 8001a28:	b538      	push	{r3, r4, r5, lr}
 8001a2a:	4d07      	ldr	r5, [pc, #28]	@ (8001a48 <_lseek_r+0x20>)
 8001a2c:	4604      	mov	r4, r0
 8001a2e:	4608      	mov	r0, r1
 8001a30:	4611      	mov	r1, r2
 8001a32:	2200      	movs	r2, #0
 8001a34:	602a      	str	r2, [r5, #0]
 8001a36:	461a      	mov	r2, r3
 8001a38:	f7fe fdcd 	bl	80005d6 <_lseek>
 8001a3c:	1c43      	adds	r3, r0, #1
 8001a3e:	d102      	bne.n	8001a46 <_lseek_r+0x1e>
 8001a40:	682b      	ldr	r3, [r5, #0]
 8001a42:	b103      	cbz	r3, 8001a46 <_lseek_r+0x1e>
 8001a44:	6023      	str	r3, [r4, #0]
 8001a46:	bd38      	pop	{r3, r4, r5, pc}
 8001a48:	20000604 	.word	0x20000604

08001a4c <_read_r>:
 8001a4c:	b538      	push	{r3, r4, r5, lr}
 8001a4e:	4d07      	ldr	r5, [pc, #28]	@ (8001a6c <_read_r+0x20>)
 8001a50:	4604      	mov	r4, r0
 8001a52:	4608      	mov	r0, r1
 8001a54:	4611      	mov	r1, r2
 8001a56:	2200      	movs	r2, #0
 8001a58:	602a      	str	r2, [r5, #0]
 8001a5a:	461a      	mov	r2, r3
 8001a5c:	f7fe fd5b 	bl	8000516 <_read>
 8001a60:	1c43      	adds	r3, r0, #1
 8001a62:	d102      	bne.n	8001a6a <_read_r+0x1e>
 8001a64:	682b      	ldr	r3, [r5, #0]
 8001a66:	b103      	cbz	r3, 8001a6a <_read_r+0x1e>
 8001a68:	6023      	str	r3, [r4, #0]
 8001a6a:	bd38      	pop	{r3, r4, r5, pc}
 8001a6c:	20000604 	.word	0x20000604

08001a70 <_write_r>:
 8001a70:	b538      	push	{r3, r4, r5, lr}
 8001a72:	4d07      	ldr	r5, [pc, #28]	@ (8001a90 <_write_r+0x20>)
 8001a74:	4604      	mov	r4, r0
 8001a76:	4608      	mov	r0, r1
 8001a78:	4611      	mov	r1, r2
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	602a      	str	r2, [r5, #0]
 8001a7e:	461a      	mov	r2, r3
 8001a80:	f7fe fd66 	bl	8000550 <_write>
 8001a84:	1c43      	adds	r3, r0, #1
 8001a86:	d102      	bne.n	8001a8e <_write_r+0x1e>
 8001a88:	682b      	ldr	r3, [r5, #0]
 8001a8a:	b103      	cbz	r3, 8001a8e <_write_r+0x1e>
 8001a8c:	6023      	str	r3, [r4, #0]
 8001a8e:	bd38      	pop	{r3, r4, r5, pc}
 8001a90:	20000604 	.word	0x20000604

08001a94 <__errno>:
 8001a94:	4b01      	ldr	r3, [pc, #4]	@ (8001a9c <__errno+0x8>)
 8001a96:	6818      	ldr	r0, [r3, #0]
 8001a98:	4770      	bx	lr
 8001a9a:	bf00      	nop
 8001a9c:	2000002c 	.word	0x2000002c

08001aa0 <__libc_init_array>:
 8001aa0:	b570      	push	{r4, r5, r6, lr}
 8001aa2:	4d0d      	ldr	r5, [pc, #52]	@ (8001ad8 <__libc_init_array+0x38>)
 8001aa4:	4c0d      	ldr	r4, [pc, #52]	@ (8001adc <__libc_init_array+0x3c>)
 8001aa6:	1b64      	subs	r4, r4, r5
 8001aa8:	10a4      	asrs	r4, r4, #2
 8001aaa:	2600      	movs	r6, #0
 8001aac:	42a6      	cmp	r6, r4
 8001aae:	d109      	bne.n	8001ac4 <__libc_init_array+0x24>
 8001ab0:	4d0b      	ldr	r5, [pc, #44]	@ (8001ae0 <__libc_init_array+0x40>)
 8001ab2:	4c0c      	ldr	r4, [pc, #48]	@ (8001ae4 <__libc_init_array+0x44>)
 8001ab4:	f000 fd24 	bl	8002500 <_init>
 8001ab8:	1b64      	subs	r4, r4, r5
 8001aba:	10a4      	asrs	r4, r4, #2
 8001abc:	2600      	movs	r6, #0
 8001abe:	42a6      	cmp	r6, r4
 8001ac0:	d105      	bne.n	8001ace <__libc_init_array+0x2e>
 8001ac2:	bd70      	pop	{r4, r5, r6, pc}
 8001ac4:	f855 3b04 	ldr.w	r3, [r5], #4
 8001ac8:	4798      	blx	r3
 8001aca:	3601      	adds	r6, #1
 8001acc:	e7ee      	b.n	8001aac <__libc_init_array+0xc>
 8001ace:	f855 3b04 	ldr.w	r3, [r5], #4
 8001ad2:	4798      	blx	r3
 8001ad4:	3601      	adds	r6, #1
 8001ad6:	e7f2      	b.n	8001abe <__libc_init_array+0x1e>
 8001ad8:	080025cc 	.word	0x080025cc
 8001adc:	080025cc 	.word	0x080025cc
 8001ae0:	080025cc 	.word	0x080025cc
 8001ae4:	080025d0 	.word	0x080025d0

08001ae8 <__retarget_lock_init_recursive>:
 8001ae8:	4770      	bx	lr

08001aea <__retarget_lock_acquire_recursive>:
 8001aea:	4770      	bx	lr

08001aec <__retarget_lock_release_recursive>:
 8001aec:	4770      	bx	lr
	...

08001af0 <_free_r>:
 8001af0:	b538      	push	{r3, r4, r5, lr}
 8001af2:	4605      	mov	r5, r0
 8001af4:	2900      	cmp	r1, #0
 8001af6:	d041      	beq.n	8001b7c <_free_r+0x8c>
 8001af8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001afc:	1f0c      	subs	r4, r1, #4
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	bfb8      	it	lt
 8001b02:	18e4      	addlt	r4, r4, r3
 8001b04:	f000 f8e0 	bl	8001cc8 <__malloc_lock>
 8001b08:	4a1d      	ldr	r2, [pc, #116]	@ (8001b80 <_free_r+0x90>)
 8001b0a:	6813      	ldr	r3, [r2, #0]
 8001b0c:	b933      	cbnz	r3, 8001b1c <_free_r+0x2c>
 8001b0e:	6063      	str	r3, [r4, #4]
 8001b10:	6014      	str	r4, [r2, #0]
 8001b12:	4628      	mov	r0, r5
 8001b14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001b18:	f000 b8dc 	b.w	8001cd4 <__malloc_unlock>
 8001b1c:	42a3      	cmp	r3, r4
 8001b1e:	d908      	bls.n	8001b32 <_free_r+0x42>
 8001b20:	6820      	ldr	r0, [r4, #0]
 8001b22:	1821      	adds	r1, r4, r0
 8001b24:	428b      	cmp	r3, r1
 8001b26:	bf01      	itttt	eq
 8001b28:	6819      	ldreq	r1, [r3, #0]
 8001b2a:	685b      	ldreq	r3, [r3, #4]
 8001b2c:	1809      	addeq	r1, r1, r0
 8001b2e:	6021      	streq	r1, [r4, #0]
 8001b30:	e7ed      	b.n	8001b0e <_free_r+0x1e>
 8001b32:	461a      	mov	r2, r3
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	b10b      	cbz	r3, 8001b3c <_free_r+0x4c>
 8001b38:	42a3      	cmp	r3, r4
 8001b3a:	d9fa      	bls.n	8001b32 <_free_r+0x42>
 8001b3c:	6811      	ldr	r1, [r2, #0]
 8001b3e:	1850      	adds	r0, r2, r1
 8001b40:	42a0      	cmp	r0, r4
 8001b42:	d10b      	bne.n	8001b5c <_free_r+0x6c>
 8001b44:	6820      	ldr	r0, [r4, #0]
 8001b46:	4401      	add	r1, r0
 8001b48:	1850      	adds	r0, r2, r1
 8001b4a:	4283      	cmp	r3, r0
 8001b4c:	6011      	str	r1, [r2, #0]
 8001b4e:	d1e0      	bne.n	8001b12 <_free_r+0x22>
 8001b50:	6818      	ldr	r0, [r3, #0]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	6053      	str	r3, [r2, #4]
 8001b56:	4408      	add	r0, r1
 8001b58:	6010      	str	r0, [r2, #0]
 8001b5a:	e7da      	b.n	8001b12 <_free_r+0x22>
 8001b5c:	d902      	bls.n	8001b64 <_free_r+0x74>
 8001b5e:	230c      	movs	r3, #12
 8001b60:	602b      	str	r3, [r5, #0]
 8001b62:	e7d6      	b.n	8001b12 <_free_r+0x22>
 8001b64:	6820      	ldr	r0, [r4, #0]
 8001b66:	1821      	adds	r1, r4, r0
 8001b68:	428b      	cmp	r3, r1
 8001b6a:	bf04      	itt	eq
 8001b6c:	6819      	ldreq	r1, [r3, #0]
 8001b6e:	685b      	ldreq	r3, [r3, #4]
 8001b70:	6063      	str	r3, [r4, #4]
 8001b72:	bf04      	itt	eq
 8001b74:	1809      	addeq	r1, r1, r0
 8001b76:	6021      	streq	r1, [r4, #0]
 8001b78:	6054      	str	r4, [r2, #4]
 8001b7a:	e7ca      	b.n	8001b12 <_free_r+0x22>
 8001b7c:	bd38      	pop	{r3, r4, r5, pc}
 8001b7e:	bf00      	nop
 8001b80:	20000610 	.word	0x20000610

08001b84 <sbrk_aligned>:
 8001b84:	b570      	push	{r4, r5, r6, lr}
 8001b86:	4e0f      	ldr	r6, [pc, #60]	@ (8001bc4 <sbrk_aligned+0x40>)
 8001b88:	460c      	mov	r4, r1
 8001b8a:	6831      	ldr	r1, [r6, #0]
 8001b8c:	4605      	mov	r5, r0
 8001b8e:	b911      	cbnz	r1, 8001b96 <sbrk_aligned+0x12>
 8001b90:	f000 fca6 	bl	80024e0 <_sbrk_r>
 8001b94:	6030      	str	r0, [r6, #0]
 8001b96:	4621      	mov	r1, r4
 8001b98:	4628      	mov	r0, r5
 8001b9a:	f000 fca1 	bl	80024e0 <_sbrk_r>
 8001b9e:	1c43      	adds	r3, r0, #1
 8001ba0:	d103      	bne.n	8001baa <sbrk_aligned+0x26>
 8001ba2:	f04f 34ff 	mov.w	r4, #4294967295
 8001ba6:	4620      	mov	r0, r4
 8001ba8:	bd70      	pop	{r4, r5, r6, pc}
 8001baa:	1cc4      	adds	r4, r0, #3
 8001bac:	f024 0403 	bic.w	r4, r4, #3
 8001bb0:	42a0      	cmp	r0, r4
 8001bb2:	d0f8      	beq.n	8001ba6 <sbrk_aligned+0x22>
 8001bb4:	1a21      	subs	r1, r4, r0
 8001bb6:	4628      	mov	r0, r5
 8001bb8:	f000 fc92 	bl	80024e0 <_sbrk_r>
 8001bbc:	3001      	adds	r0, #1
 8001bbe:	d1f2      	bne.n	8001ba6 <sbrk_aligned+0x22>
 8001bc0:	e7ef      	b.n	8001ba2 <sbrk_aligned+0x1e>
 8001bc2:	bf00      	nop
 8001bc4:	2000060c 	.word	0x2000060c

08001bc8 <_malloc_r>:
 8001bc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001bcc:	1ccd      	adds	r5, r1, #3
 8001bce:	f025 0503 	bic.w	r5, r5, #3
 8001bd2:	3508      	adds	r5, #8
 8001bd4:	2d0c      	cmp	r5, #12
 8001bd6:	bf38      	it	cc
 8001bd8:	250c      	movcc	r5, #12
 8001bda:	2d00      	cmp	r5, #0
 8001bdc:	4606      	mov	r6, r0
 8001bde:	db01      	blt.n	8001be4 <_malloc_r+0x1c>
 8001be0:	42a9      	cmp	r1, r5
 8001be2:	d904      	bls.n	8001bee <_malloc_r+0x26>
 8001be4:	230c      	movs	r3, #12
 8001be6:	6033      	str	r3, [r6, #0]
 8001be8:	2000      	movs	r0, #0
 8001bea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001bee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8001cc4 <_malloc_r+0xfc>
 8001bf2:	f000 f869 	bl	8001cc8 <__malloc_lock>
 8001bf6:	f8d8 3000 	ldr.w	r3, [r8]
 8001bfa:	461c      	mov	r4, r3
 8001bfc:	bb44      	cbnz	r4, 8001c50 <_malloc_r+0x88>
 8001bfe:	4629      	mov	r1, r5
 8001c00:	4630      	mov	r0, r6
 8001c02:	f7ff ffbf 	bl	8001b84 <sbrk_aligned>
 8001c06:	1c43      	adds	r3, r0, #1
 8001c08:	4604      	mov	r4, r0
 8001c0a:	d158      	bne.n	8001cbe <_malloc_r+0xf6>
 8001c0c:	f8d8 4000 	ldr.w	r4, [r8]
 8001c10:	4627      	mov	r7, r4
 8001c12:	2f00      	cmp	r7, #0
 8001c14:	d143      	bne.n	8001c9e <_malloc_r+0xd6>
 8001c16:	2c00      	cmp	r4, #0
 8001c18:	d04b      	beq.n	8001cb2 <_malloc_r+0xea>
 8001c1a:	6823      	ldr	r3, [r4, #0]
 8001c1c:	4639      	mov	r1, r7
 8001c1e:	4630      	mov	r0, r6
 8001c20:	eb04 0903 	add.w	r9, r4, r3
 8001c24:	f000 fc5c 	bl	80024e0 <_sbrk_r>
 8001c28:	4581      	cmp	r9, r0
 8001c2a:	d142      	bne.n	8001cb2 <_malloc_r+0xea>
 8001c2c:	6821      	ldr	r1, [r4, #0]
 8001c2e:	1a6d      	subs	r5, r5, r1
 8001c30:	4629      	mov	r1, r5
 8001c32:	4630      	mov	r0, r6
 8001c34:	f7ff ffa6 	bl	8001b84 <sbrk_aligned>
 8001c38:	3001      	adds	r0, #1
 8001c3a:	d03a      	beq.n	8001cb2 <_malloc_r+0xea>
 8001c3c:	6823      	ldr	r3, [r4, #0]
 8001c3e:	442b      	add	r3, r5
 8001c40:	6023      	str	r3, [r4, #0]
 8001c42:	f8d8 3000 	ldr.w	r3, [r8]
 8001c46:	685a      	ldr	r2, [r3, #4]
 8001c48:	bb62      	cbnz	r2, 8001ca4 <_malloc_r+0xdc>
 8001c4a:	f8c8 7000 	str.w	r7, [r8]
 8001c4e:	e00f      	b.n	8001c70 <_malloc_r+0xa8>
 8001c50:	6822      	ldr	r2, [r4, #0]
 8001c52:	1b52      	subs	r2, r2, r5
 8001c54:	d420      	bmi.n	8001c98 <_malloc_r+0xd0>
 8001c56:	2a0b      	cmp	r2, #11
 8001c58:	d917      	bls.n	8001c8a <_malloc_r+0xc2>
 8001c5a:	1961      	adds	r1, r4, r5
 8001c5c:	42a3      	cmp	r3, r4
 8001c5e:	6025      	str	r5, [r4, #0]
 8001c60:	bf18      	it	ne
 8001c62:	6059      	strne	r1, [r3, #4]
 8001c64:	6863      	ldr	r3, [r4, #4]
 8001c66:	bf08      	it	eq
 8001c68:	f8c8 1000 	streq.w	r1, [r8]
 8001c6c:	5162      	str	r2, [r4, r5]
 8001c6e:	604b      	str	r3, [r1, #4]
 8001c70:	4630      	mov	r0, r6
 8001c72:	f000 f82f 	bl	8001cd4 <__malloc_unlock>
 8001c76:	f104 000b 	add.w	r0, r4, #11
 8001c7a:	1d23      	adds	r3, r4, #4
 8001c7c:	f020 0007 	bic.w	r0, r0, #7
 8001c80:	1ac2      	subs	r2, r0, r3
 8001c82:	bf1c      	itt	ne
 8001c84:	1a1b      	subne	r3, r3, r0
 8001c86:	50a3      	strne	r3, [r4, r2]
 8001c88:	e7af      	b.n	8001bea <_malloc_r+0x22>
 8001c8a:	6862      	ldr	r2, [r4, #4]
 8001c8c:	42a3      	cmp	r3, r4
 8001c8e:	bf0c      	ite	eq
 8001c90:	f8c8 2000 	streq.w	r2, [r8]
 8001c94:	605a      	strne	r2, [r3, #4]
 8001c96:	e7eb      	b.n	8001c70 <_malloc_r+0xa8>
 8001c98:	4623      	mov	r3, r4
 8001c9a:	6864      	ldr	r4, [r4, #4]
 8001c9c:	e7ae      	b.n	8001bfc <_malloc_r+0x34>
 8001c9e:	463c      	mov	r4, r7
 8001ca0:	687f      	ldr	r7, [r7, #4]
 8001ca2:	e7b6      	b.n	8001c12 <_malloc_r+0x4a>
 8001ca4:	461a      	mov	r2, r3
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	42a3      	cmp	r3, r4
 8001caa:	d1fb      	bne.n	8001ca4 <_malloc_r+0xdc>
 8001cac:	2300      	movs	r3, #0
 8001cae:	6053      	str	r3, [r2, #4]
 8001cb0:	e7de      	b.n	8001c70 <_malloc_r+0xa8>
 8001cb2:	230c      	movs	r3, #12
 8001cb4:	6033      	str	r3, [r6, #0]
 8001cb6:	4630      	mov	r0, r6
 8001cb8:	f000 f80c 	bl	8001cd4 <__malloc_unlock>
 8001cbc:	e794      	b.n	8001be8 <_malloc_r+0x20>
 8001cbe:	6005      	str	r5, [r0, #0]
 8001cc0:	e7d6      	b.n	8001c70 <_malloc_r+0xa8>
 8001cc2:	bf00      	nop
 8001cc4:	20000610 	.word	0x20000610

08001cc8 <__malloc_lock>:
 8001cc8:	4801      	ldr	r0, [pc, #4]	@ (8001cd0 <__malloc_lock+0x8>)
 8001cca:	f7ff bf0e 	b.w	8001aea <__retarget_lock_acquire_recursive>
 8001cce:	bf00      	nop
 8001cd0:	20000608 	.word	0x20000608

08001cd4 <__malloc_unlock>:
 8001cd4:	4801      	ldr	r0, [pc, #4]	@ (8001cdc <__malloc_unlock+0x8>)
 8001cd6:	f7ff bf09 	b.w	8001aec <__retarget_lock_release_recursive>
 8001cda:	bf00      	nop
 8001cdc:	20000608 	.word	0x20000608

08001ce0 <__sfputc_r>:
 8001ce0:	6893      	ldr	r3, [r2, #8]
 8001ce2:	3b01      	subs	r3, #1
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	b410      	push	{r4}
 8001ce8:	6093      	str	r3, [r2, #8]
 8001cea:	da08      	bge.n	8001cfe <__sfputc_r+0x1e>
 8001cec:	6994      	ldr	r4, [r2, #24]
 8001cee:	42a3      	cmp	r3, r4
 8001cf0:	db01      	blt.n	8001cf6 <__sfputc_r+0x16>
 8001cf2:	290a      	cmp	r1, #10
 8001cf4:	d103      	bne.n	8001cfe <__sfputc_r+0x1e>
 8001cf6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001cfa:	f7ff bde8 	b.w	80018ce <__swbuf_r>
 8001cfe:	6813      	ldr	r3, [r2, #0]
 8001d00:	1c58      	adds	r0, r3, #1
 8001d02:	6010      	str	r0, [r2, #0]
 8001d04:	7019      	strb	r1, [r3, #0]
 8001d06:	4608      	mov	r0, r1
 8001d08:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001d0c:	4770      	bx	lr

08001d0e <__sfputs_r>:
 8001d0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d10:	4606      	mov	r6, r0
 8001d12:	460f      	mov	r7, r1
 8001d14:	4614      	mov	r4, r2
 8001d16:	18d5      	adds	r5, r2, r3
 8001d18:	42ac      	cmp	r4, r5
 8001d1a:	d101      	bne.n	8001d20 <__sfputs_r+0x12>
 8001d1c:	2000      	movs	r0, #0
 8001d1e:	e007      	b.n	8001d30 <__sfputs_r+0x22>
 8001d20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001d24:	463a      	mov	r2, r7
 8001d26:	4630      	mov	r0, r6
 8001d28:	f7ff ffda 	bl	8001ce0 <__sfputc_r>
 8001d2c:	1c43      	adds	r3, r0, #1
 8001d2e:	d1f3      	bne.n	8001d18 <__sfputs_r+0xa>
 8001d30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001d34 <_vfiprintf_r>:
 8001d34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001d38:	460d      	mov	r5, r1
 8001d3a:	b09d      	sub	sp, #116	@ 0x74
 8001d3c:	4614      	mov	r4, r2
 8001d3e:	4698      	mov	r8, r3
 8001d40:	4606      	mov	r6, r0
 8001d42:	b118      	cbz	r0, 8001d4c <_vfiprintf_r+0x18>
 8001d44:	6a03      	ldr	r3, [r0, #32]
 8001d46:	b90b      	cbnz	r3, 8001d4c <_vfiprintf_r+0x18>
 8001d48:	f7ff fcd8 	bl	80016fc <__sinit>
 8001d4c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001d4e:	07d9      	lsls	r1, r3, #31
 8001d50:	d405      	bmi.n	8001d5e <_vfiprintf_r+0x2a>
 8001d52:	89ab      	ldrh	r3, [r5, #12]
 8001d54:	059a      	lsls	r2, r3, #22
 8001d56:	d402      	bmi.n	8001d5e <_vfiprintf_r+0x2a>
 8001d58:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001d5a:	f7ff fec6 	bl	8001aea <__retarget_lock_acquire_recursive>
 8001d5e:	89ab      	ldrh	r3, [r5, #12]
 8001d60:	071b      	lsls	r3, r3, #28
 8001d62:	d501      	bpl.n	8001d68 <_vfiprintf_r+0x34>
 8001d64:	692b      	ldr	r3, [r5, #16]
 8001d66:	b99b      	cbnz	r3, 8001d90 <_vfiprintf_r+0x5c>
 8001d68:	4629      	mov	r1, r5
 8001d6a:	4630      	mov	r0, r6
 8001d6c:	f7ff fdee 	bl	800194c <__swsetup_r>
 8001d70:	b170      	cbz	r0, 8001d90 <_vfiprintf_r+0x5c>
 8001d72:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001d74:	07dc      	lsls	r4, r3, #31
 8001d76:	d504      	bpl.n	8001d82 <_vfiprintf_r+0x4e>
 8001d78:	f04f 30ff 	mov.w	r0, #4294967295
 8001d7c:	b01d      	add	sp, #116	@ 0x74
 8001d7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001d82:	89ab      	ldrh	r3, [r5, #12]
 8001d84:	0598      	lsls	r0, r3, #22
 8001d86:	d4f7      	bmi.n	8001d78 <_vfiprintf_r+0x44>
 8001d88:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001d8a:	f7ff feaf 	bl	8001aec <__retarget_lock_release_recursive>
 8001d8e:	e7f3      	b.n	8001d78 <_vfiprintf_r+0x44>
 8001d90:	2300      	movs	r3, #0
 8001d92:	9309      	str	r3, [sp, #36]	@ 0x24
 8001d94:	2320      	movs	r3, #32
 8001d96:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8001d9a:	f8cd 800c 	str.w	r8, [sp, #12]
 8001d9e:	2330      	movs	r3, #48	@ 0x30
 8001da0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8001f50 <_vfiprintf_r+0x21c>
 8001da4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8001da8:	f04f 0901 	mov.w	r9, #1
 8001dac:	4623      	mov	r3, r4
 8001dae:	469a      	mov	sl, r3
 8001db0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001db4:	b10a      	cbz	r2, 8001dba <_vfiprintf_r+0x86>
 8001db6:	2a25      	cmp	r2, #37	@ 0x25
 8001db8:	d1f9      	bne.n	8001dae <_vfiprintf_r+0x7a>
 8001dba:	ebba 0b04 	subs.w	fp, sl, r4
 8001dbe:	d00b      	beq.n	8001dd8 <_vfiprintf_r+0xa4>
 8001dc0:	465b      	mov	r3, fp
 8001dc2:	4622      	mov	r2, r4
 8001dc4:	4629      	mov	r1, r5
 8001dc6:	4630      	mov	r0, r6
 8001dc8:	f7ff ffa1 	bl	8001d0e <__sfputs_r>
 8001dcc:	3001      	adds	r0, #1
 8001dce:	f000 80a7 	beq.w	8001f20 <_vfiprintf_r+0x1ec>
 8001dd2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8001dd4:	445a      	add	r2, fp
 8001dd6:	9209      	str	r2, [sp, #36]	@ 0x24
 8001dd8:	f89a 3000 	ldrb.w	r3, [sl]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	f000 809f 	beq.w	8001f20 <_vfiprintf_r+0x1ec>
 8001de2:	2300      	movs	r3, #0
 8001de4:	f04f 32ff 	mov.w	r2, #4294967295
 8001de8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001dec:	f10a 0a01 	add.w	sl, sl, #1
 8001df0:	9304      	str	r3, [sp, #16]
 8001df2:	9307      	str	r3, [sp, #28]
 8001df4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8001df8:	931a      	str	r3, [sp, #104]	@ 0x68
 8001dfa:	4654      	mov	r4, sl
 8001dfc:	2205      	movs	r2, #5
 8001dfe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001e02:	4853      	ldr	r0, [pc, #332]	@ (8001f50 <_vfiprintf_r+0x21c>)
 8001e04:	f7fe fa0c 	bl	8000220 <memchr>
 8001e08:	9a04      	ldr	r2, [sp, #16]
 8001e0a:	b9d8      	cbnz	r0, 8001e44 <_vfiprintf_r+0x110>
 8001e0c:	06d1      	lsls	r1, r2, #27
 8001e0e:	bf44      	itt	mi
 8001e10:	2320      	movmi	r3, #32
 8001e12:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001e16:	0713      	lsls	r3, r2, #28
 8001e18:	bf44      	itt	mi
 8001e1a:	232b      	movmi	r3, #43	@ 0x2b
 8001e1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001e20:	f89a 3000 	ldrb.w	r3, [sl]
 8001e24:	2b2a      	cmp	r3, #42	@ 0x2a
 8001e26:	d015      	beq.n	8001e54 <_vfiprintf_r+0x120>
 8001e28:	9a07      	ldr	r2, [sp, #28]
 8001e2a:	4654      	mov	r4, sl
 8001e2c:	2000      	movs	r0, #0
 8001e2e:	f04f 0c0a 	mov.w	ip, #10
 8001e32:	4621      	mov	r1, r4
 8001e34:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001e38:	3b30      	subs	r3, #48	@ 0x30
 8001e3a:	2b09      	cmp	r3, #9
 8001e3c:	d94b      	bls.n	8001ed6 <_vfiprintf_r+0x1a2>
 8001e3e:	b1b0      	cbz	r0, 8001e6e <_vfiprintf_r+0x13a>
 8001e40:	9207      	str	r2, [sp, #28]
 8001e42:	e014      	b.n	8001e6e <_vfiprintf_r+0x13a>
 8001e44:	eba0 0308 	sub.w	r3, r0, r8
 8001e48:	fa09 f303 	lsl.w	r3, r9, r3
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	9304      	str	r3, [sp, #16]
 8001e50:	46a2      	mov	sl, r4
 8001e52:	e7d2      	b.n	8001dfa <_vfiprintf_r+0xc6>
 8001e54:	9b03      	ldr	r3, [sp, #12]
 8001e56:	1d19      	adds	r1, r3, #4
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	9103      	str	r1, [sp, #12]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	bfbb      	ittet	lt
 8001e60:	425b      	neglt	r3, r3
 8001e62:	f042 0202 	orrlt.w	r2, r2, #2
 8001e66:	9307      	strge	r3, [sp, #28]
 8001e68:	9307      	strlt	r3, [sp, #28]
 8001e6a:	bfb8      	it	lt
 8001e6c:	9204      	strlt	r2, [sp, #16]
 8001e6e:	7823      	ldrb	r3, [r4, #0]
 8001e70:	2b2e      	cmp	r3, #46	@ 0x2e
 8001e72:	d10a      	bne.n	8001e8a <_vfiprintf_r+0x156>
 8001e74:	7863      	ldrb	r3, [r4, #1]
 8001e76:	2b2a      	cmp	r3, #42	@ 0x2a
 8001e78:	d132      	bne.n	8001ee0 <_vfiprintf_r+0x1ac>
 8001e7a:	9b03      	ldr	r3, [sp, #12]
 8001e7c:	1d1a      	adds	r2, r3, #4
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	9203      	str	r2, [sp, #12]
 8001e82:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8001e86:	3402      	adds	r4, #2
 8001e88:	9305      	str	r3, [sp, #20]
 8001e8a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8001f60 <_vfiprintf_r+0x22c>
 8001e8e:	7821      	ldrb	r1, [r4, #0]
 8001e90:	2203      	movs	r2, #3
 8001e92:	4650      	mov	r0, sl
 8001e94:	f7fe f9c4 	bl	8000220 <memchr>
 8001e98:	b138      	cbz	r0, 8001eaa <_vfiprintf_r+0x176>
 8001e9a:	9b04      	ldr	r3, [sp, #16]
 8001e9c:	eba0 000a 	sub.w	r0, r0, sl
 8001ea0:	2240      	movs	r2, #64	@ 0x40
 8001ea2:	4082      	lsls	r2, r0
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	3401      	adds	r4, #1
 8001ea8:	9304      	str	r3, [sp, #16]
 8001eaa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001eae:	4829      	ldr	r0, [pc, #164]	@ (8001f54 <_vfiprintf_r+0x220>)
 8001eb0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8001eb4:	2206      	movs	r2, #6
 8001eb6:	f7fe f9b3 	bl	8000220 <memchr>
 8001eba:	2800      	cmp	r0, #0
 8001ebc:	d03f      	beq.n	8001f3e <_vfiprintf_r+0x20a>
 8001ebe:	4b26      	ldr	r3, [pc, #152]	@ (8001f58 <_vfiprintf_r+0x224>)
 8001ec0:	bb1b      	cbnz	r3, 8001f0a <_vfiprintf_r+0x1d6>
 8001ec2:	9b03      	ldr	r3, [sp, #12]
 8001ec4:	3307      	adds	r3, #7
 8001ec6:	f023 0307 	bic.w	r3, r3, #7
 8001eca:	3308      	adds	r3, #8
 8001ecc:	9303      	str	r3, [sp, #12]
 8001ece:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001ed0:	443b      	add	r3, r7
 8001ed2:	9309      	str	r3, [sp, #36]	@ 0x24
 8001ed4:	e76a      	b.n	8001dac <_vfiprintf_r+0x78>
 8001ed6:	fb0c 3202 	mla	r2, ip, r2, r3
 8001eda:	460c      	mov	r4, r1
 8001edc:	2001      	movs	r0, #1
 8001ede:	e7a8      	b.n	8001e32 <_vfiprintf_r+0xfe>
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	3401      	adds	r4, #1
 8001ee4:	9305      	str	r3, [sp, #20]
 8001ee6:	4619      	mov	r1, r3
 8001ee8:	f04f 0c0a 	mov.w	ip, #10
 8001eec:	4620      	mov	r0, r4
 8001eee:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001ef2:	3a30      	subs	r2, #48	@ 0x30
 8001ef4:	2a09      	cmp	r2, #9
 8001ef6:	d903      	bls.n	8001f00 <_vfiprintf_r+0x1cc>
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d0c6      	beq.n	8001e8a <_vfiprintf_r+0x156>
 8001efc:	9105      	str	r1, [sp, #20]
 8001efe:	e7c4      	b.n	8001e8a <_vfiprintf_r+0x156>
 8001f00:	fb0c 2101 	mla	r1, ip, r1, r2
 8001f04:	4604      	mov	r4, r0
 8001f06:	2301      	movs	r3, #1
 8001f08:	e7f0      	b.n	8001eec <_vfiprintf_r+0x1b8>
 8001f0a:	ab03      	add	r3, sp, #12
 8001f0c:	9300      	str	r3, [sp, #0]
 8001f0e:	462a      	mov	r2, r5
 8001f10:	4b12      	ldr	r3, [pc, #72]	@ (8001f5c <_vfiprintf_r+0x228>)
 8001f12:	a904      	add	r1, sp, #16
 8001f14:	4630      	mov	r0, r6
 8001f16:	f3af 8000 	nop.w
 8001f1a:	4607      	mov	r7, r0
 8001f1c:	1c78      	adds	r0, r7, #1
 8001f1e:	d1d6      	bne.n	8001ece <_vfiprintf_r+0x19a>
 8001f20:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001f22:	07d9      	lsls	r1, r3, #31
 8001f24:	d405      	bmi.n	8001f32 <_vfiprintf_r+0x1fe>
 8001f26:	89ab      	ldrh	r3, [r5, #12]
 8001f28:	059a      	lsls	r2, r3, #22
 8001f2a:	d402      	bmi.n	8001f32 <_vfiprintf_r+0x1fe>
 8001f2c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001f2e:	f7ff fddd 	bl	8001aec <__retarget_lock_release_recursive>
 8001f32:	89ab      	ldrh	r3, [r5, #12]
 8001f34:	065b      	lsls	r3, r3, #25
 8001f36:	f53f af1f 	bmi.w	8001d78 <_vfiprintf_r+0x44>
 8001f3a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8001f3c:	e71e      	b.n	8001d7c <_vfiprintf_r+0x48>
 8001f3e:	ab03      	add	r3, sp, #12
 8001f40:	9300      	str	r3, [sp, #0]
 8001f42:	462a      	mov	r2, r5
 8001f44:	4b05      	ldr	r3, [pc, #20]	@ (8001f5c <_vfiprintf_r+0x228>)
 8001f46:	a904      	add	r1, sp, #16
 8001f48:	4630      	mov	r0, r6
 8001f4a:	f000 f879 	bl	8002040 <_printf_i>
 8001f4e:	e7e4      	b.n	8001f1a <_vfiprintf_r+0x1e6>
 8001f50:	0800258e 	.word	0x0800258e
 8001f54:	08002598 	.word	0x08002598
 8001f58:	00000000 	.word	0x00000000
 8001f5c:	08001d0f 	.word	0x08001d0f
 8001f60:	08002594 	.word	0x08002594

08001f64 <_printf_common>:
 8001f64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001f68:	4616      	mov	r6, r2
 8001f6a:	4698      	mov	r8, r3
 8001f6c:	688a      	ldr	r2, [r1, #8]
 8001f6e:	690b      	ldr	r3, [r1, #16]
 8001f70:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8001f74:	4293      	cmp	r3, r2
 8001f76:	bfb8      	it	lt
 8001f78:	4613      	movlt	r3, r2
 8001f7a:	6033      	str	r3, [r6, #0]
 8001f7c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8001f80:	4607      	mov	r7, r0
 8001f82:	460c      	mov	r4, r1
 8001f84:	b10a      	cbz	r2, 8001f8a <_printf_common+0x26>
 8001f86:	3301      	adds	r3, #1
 8001f88:	6033      	str	r3, [r6, #0]
 8001f8a:	6823      	ldr	r3, [r4, #0]
 8001f8c:	0699      	lsls	r1, r3, #26
 8001f8e:	bf42      	ittt	mi
 8001f90:	6833      	ldrmi	r3, [r6, #0]
 8001f92:	3302      	addmi	r3, #2
 8001f94:	6033      	strmi	r3, [r6, #0]
 8001f96:	6825      	ldr	r5, [r4, #0]
 8001f98:	f015 0506 	ands.w	r5, r5, #6
 8001f9c:	d106      	bne.n	8001fac <_printf_common+0x48>
 8001f9e:	f104 0a19 	add.w	sl, r4, #25
 8001fa2:	68e3      	ldr	r3, [r4, #12]
 8001fa4:	6832      	ldr	r2, [r6, #0]
 8001fa6:	1a9b      	subs	r3, r3, r2
 8001fa8:	42ab      	cmp	r3, r5
 8001faa:	dc26      	bgt.n	8001ffa <_printf_common+0x96>
 8001fac:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8001fb0:	6822      	ldr	r2, [r4, #0]
 8001fb2:	3b00      	subs	r3, #0
 8001fb4:	bf18      	it	ne
 8001fb6:	2301      	movne	r3, #1
 8001fb8:	0692      	lsls	r2, r2, #26
 8001fba:	d42b      	bmi.n	8002014 <_printf_common+0xb0>
 8001fbc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8001fc0:	4641      	mov	r1, r8
 8001fc2:	4638      	mov	r0, r7
 8001fc4:	47c8      	blx	r9
 8001fc6:	3001      	adds	r0, #1
 8001fc8:	d01e      	beq.n	8002008 <_printf_common+0xa4>
 8001fca:	6823      	ldr	r3, [r4, #0]
 8001fcc:	6922      	ldr	r2, [r4, #16]
 8001fce:	f003 0306 	and.w	r3, r3, #6
 8001fd2:	2b04      	cmp	r3, #4
 8001fd4:	bf02      	ittt	eq
 8001fd6:	68e5      	ldreq	r5, [r4, #12]
 8001fd8:	6833      	ldreq	r3, [r6, #0]
 8001fda:	1aed      	subeq	r5, r5, r3
 8001fdc:	68a3      	ldr	r3, [r4, #8]
 8001fde:	bf0c      	ite	eq
 8001fe0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001fe4:	2500      	movne	r5, #0
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	bfc4      	itt	gt
 8001fea:	1a9b      	subgt	r3, r3, r2
 8001fec:	18ed      	addgt	r5, r5, r3
 8001fee:	2600      	movs	r6, #0
 8001ff0:	341a      	adds	r4, #26
 8001ff2:	42b5      	cmp	r5, r6
 8001ff4:	d11a      	bne.n	800202c <_printf_common+0xc8>
 8001ff6:	2000      	movs	r0, #0
 8001ff8:	e008      	b.n	800200c <_printf_common+0xa8>
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	4652      	mov	r2, sl
 8001ffe:	4641      	mov	r1, r8
 8002000:	4638      	mov	r0, r7
 8002002:	47c8      	blx	r9
 8002004:	3001      	adds	r0, #1
 8002006:	d103      	bne.n	8002010 <_printf_common+0xac>
 8002008:	f04f 30ff 	mov.w	r0, #4294967295
 800200c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002010:	3501      	adds	r5, #1
 8002012:	e7c6      	b.n	8001fa2 <_printf_common+0x3e>
 8002014:	18e1      	adds	r1, r4, r3
 8002016:	1c5a      	adds	r2, r3, #1
 8002018:	2030      	movs	r0, #48	@ 0x30
 800201a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800201e:	4422      	add	r2, r4
 8002020:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002024:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002028:	3302      	adds	r3, #2
 800202a:	e7c7      	b.n	8001fbc <_printf_common+0x58>
 800202c:	2301      	movs	r3, #1
 800202e:	4622      	mov	r2, r4
 8002030:	4641      	mov	r1, r8
 8002032:	4638      	mov	r0, r7
 8002034:	47c8      	blx	r9
 8002036:	3001      	adds	r0, #1
 8002038:	d0e6      	beq.n	8002008 <_printf_common+0xa4>
 800203a:	3601      	adds	r6, #1
 800203c:	e7d9      	b.n	8001ff2 <_printf_common+0x8e>
	...

08002040 <_printf_i>:
 8002040:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002044:	7e0f      	ldrb	r7, [r1, #24]
 8002046:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002048:	2f78      	cmp	r7, #120	@ 0x78
 800204a:	4691      	mov	r9, r2
 800204c:	4680      	mov	r8, r0
 800204e:	460c      	mov	r4, r1
 8002050:	469a      	mov	sl, r3
 8002052:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8002056:	d807      	bhi.n	8002068 <_printf_i+0x28>
 8002058:	2f62      	cmp	r7, #98	@ 0x62
 800205a:	d80a      	bhi.n	8002072 <_printf_i+0x32>
 800205c:	2f00      	cmp	r7, #0
 800205e:	f000 80d2 	beq.w	8002206 <_printf_i+0x1c6>
 8002062:	2f58      	cmp	r7, #88	@ 0x58
 8002064:	f000 80b9 	beq.w	80021da <_printf_i+0x19a>
 8002068:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800206c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002070:	e03a      	b.n	80020e8 <_printf_i+0xa8>
 8002072:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8002076:	2b15      	cmp	r3, #21
 8002078:	d8f6      	bhi.n	8002068 <_printf_i+0x28>
 800207a:	a101      	add	r1, pc, #4	@ (adr r1, 8002080 <_printf_i+0x40>)
 800207c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002080:	080020d9 	.word	0x080020d9
 8002084:	080020ed 	.word	0x080020ed
 8002088:	08002069 	.word	0x08002069
 800208c:	08002069 	.word	0x08002069
 8002090:	08002069 	.word	0x08002069
 8002094:	08002069 	.word	0x08002069
 8002098:	080020ed 	.word	0x080020ed
 800209c:	08002069 	.word	0x08002069
 80020a0:	08002069 	.word	0x08002069
 80020a4:	08002069 	.word	0x08002069
 80020a8:	08002069 	.word	0x08002069
 80020ac:	080021ed 	.word	0x080021ed
 80020b0:	08002117 	.word	0x08002117
 80020b4:	080021a7 	.word	0x080021a7
 80020b8:	08002069 	.word	0x08002069
 80020bc:	08002069 	.word	0x08002069
 80020c0:	0800220f 	.word	0x0800220f
 80020c4:	08002069 	.word	0x08002069
 80020c8:	08002117 	.word	0x08002117
 80020cc:	08002069 	.word	0x08002069
 80020d0:	08002069 	.word	0x08002069
 80020d4:	080021af 	.word	0x080021af
 80020d8:	6833      	ldr	r3, [r6, #0]
 80020da:	1d1a      	adds	r2, r3, #4
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	6032      	str	r2, [r6, #0]
 80020e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80020e4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80020e8:	2301      	movs	r3, #1
 80020ea:	e09d      	b.n	8002228 <_printf_i+0x1e8>
 80020ec:	6833      	ldr	r3, [r6, #0]
 80020ee:	6820      	ldr	r0, [r4, #0]
 80020f0:	1d19      	adds	r1, r3, #4
 80020f2:	6031      	str	r1, [r6, #0]
 80020f4:	0606      	lsls	r6, r0, #24
 80020f6:	d501      	bpl.n	80020fc <_printf_i+0xbc>
 80020f8:	681d      	ldr	r5, [r3, #0]
 80020fa:	e003      	b.n	8002104 <_printf_i+0xc4>
 80020fc:	0645      	lsls	r5, r0, #25
 80020fe:	d5fb      	bpl.n	80020f8 <_printf_i+0xb8>
 8002100:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002104:	2d00      	cmp	r5, #0
 8002106:	da03      	bge.n	8002110 <_printf_i+0xd0>
 8002108:	232d      	movs	r3, #45	@ 0x2d
 800210a:	426d      	negs	r5, r5
 800210c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002110:	4859      	ldr	r0, [pc, #356]	@ (8002278 <_printf_i+0x238>)
 8002112:	230a      	movs	r3, #10
 8002114:	e011      	b.n	800213a <_printf_i+0xfa>
 8002116:	6821      	ldr	r1, [r4, #0]
 8002118:	6833      	ldr	r3, [r6, #0]
 800211a:	0608      	lsls	r0, r1, #24
 800211c:	f853 5b04 	ldr.w	r5, [r3], #4
 8002120:	d402      	bmi.n	8002128 <_printf_i+0xe8>
 8002122:	0649      	lsls	r1, r1, #25
 8002124:	bf48      	it	mi
 8002126:	b2ad      	uxthmi	r5, r5
 8002128:	2f6f      	cmp	r7, #111	@ 0x6f
 800212a:	4853      	ldr	r0, [pc, #332]	@ (8002278 <_printf_i+0x238>)
 800212c:	6033      	str	r3, [r6, #0]
 800212e:	bf14      	ite	ne
 8002130:	230a      	movne	r3, #10
 8002132:	2308      	moveq	r3, #8
 8002134:	2100      	movs	r1, #0
 8002136:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800213a:	6866      	ldr	r6, [r4, #4]
 800213c:	60a6      	str	r6, [r4, #8]
 800213e:	2e00      	cmp	r6, #0
 8002140:	bfa2      	ittt	ge
 8002142:	6821      	ldrge	r1, [r4, #0]
 8002144:	f021 0104 	bicge.w	r1, r1, #4
 8002148:	6021      	strge	r1, [r4, #0]
 800214a:	b90d      	cbnz	r5, 8002150 <_printf_i+0x110>
 800214c:	2e00      	cmp	r6, #0
 800214e:	d04b      	beq.n	80021e8 <_printf_i+0x1a8>
 8002150:	4616      	mov	r6, r2
 8002152:	fbb5 f1f3 	udiv	r1, r5, r3
 8002156:	fb03 5711 	mls	r7, r3, r1, r5
 800215a:	5dc7      	ldrb	r7, [r0, r7]
 800215c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002160:	462f      	mov	r7, r5
 8002162:	42bb      	cmp	r3, r7
 8002164:	460d      	mov	r5, r1
 8002166:	d9f4      	bls.n	8002152 <_printf_i+0x112>
 8002168:	2b08      	cmp	r3, #8
 800216a:	d10b      	bne.n	8002184 <_printf_i+0x144>
 800216c:	6823      	ldr	r3, [r4, #0]
 800216e:	07df      	lsls	r7, r3, #31
 8002170:	d508      	bpl.n	8002184 <_printf_i+0x144>
 8002172:	6923      	ldr	r3, [r4, #16]
 8002174:	6861      	ldr	r1, [r4, #4]
 8002176:	4299      	cmp	r1, r3
 8002178:	bfde      	ittt	le
 800217a:	2330      	movle	r3, #48	@ 0x30
 800217c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002180:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002184:	1b92      	subs	r2, r2, r6
 8002186:	6122      	str	r2, [r4, #16]
 8002188:	f8cd a000 	str.w	sl, [sp]
 800218c:	464b      	mov	r3, r9
 800218e:	aa03      	add	r2, sp, #12
 8002190:	4621      	mov	r1, r4
 8002192:	4640      	mov	r0, r8
 8002194:	f7ff fee6 	bl	8001f64 <_printf_common>
 8002198:	3001      	adds	r0, #1
 800219a:	d14a      	bne.n	8002232 <_printf_i+0x1f2>
 800219c:	f04f 30ff 	mov.w	r0, #4294967295
 80021a0:	b004      	add	sp, #16
 80021a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80021a6:	6823      	ldr	r3, [r4, #0]
 80021a8:	f043 0320 	orr.w	r3, r3, #32
 80021ac:	6023      	str	r3, [r4, #0]
 80021ae:	4833      	ldr	r0, [pc, #204]	@ (800227c <_printf_i+0x23c>)
 80021b0:	2778      	movs	r7, #120	@ 0x78
 80021b2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80021b6:	6823      	ldr	r3, [r4, #0]
 80021b8:	6831      	ldr	r1, [r6, #0]
 80021ba:	061f      	lsls	r7, r3, #24
 80021bc:	f851 5b04 	ldr.w	r5, [r1], #4
 80021c0:	d402      	bmi.n	80021c8 <_printf_i+0x188>
 80021c2:	065f      	lsls	r7, r3, #25
 80021c4:	bf48      	it	mi
 80021c6:	b2ad      	uxthmi	r5, r5
 80021c8:	6031      	str	r1, [r6, #0]
 80021ca:	07d9      	lsls	r1, r3, #31
 80021cc:	bf44      	itt	mi
 80021ce:	f043 0320 	orrmi.w	r3, r3, #32
 80021d2:	6023      	strmi	r3, [r4, #0]
 80021d4:	b11d      	cbz	r5, 80021de <_printf_i+0x19e>
 80021d6:	2310      	movs	r3, #16
 80021d8:	e7ac      	b.n	8002134 <_printf_i+0xf4>
 80021da:	4827      	ldr	r0, [pc, #156]	@ (8002278 <_printf_i+0x238>)
 80021dc:	e7e9      	b.n	80021b2 <_printf_i+0x172>
 80021de:	6823      	ldr	r3, [r4, #0]
 80021e0:	f023 0320 	bic.w	r3, r3, #32
 80021e4:	6023      	str	r3, [r4, #0]
 80021e6:	e7f6      	b.n	80021d6 <_printf_i+0x196>
 80021e8:	4616      	mov	r6, r2
 80021ea:	e7bd      	b.n	8002168 <_printf_i+0x128>
 80021ec:	6833      	ldr	r3, [r6, #0]
 80021ee:	6825      	ldr	r5, [r4, #0]
 80021f0:	6961      	ldr	r1, [r4, #20]
 80021f2:	1d18      	adds	r0, r3, #4
 80021f4:	6030      	str	r0, [r6, #0]
 80021f6:	062e      	lsls	r6, r5, #24
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	d501      	bpl.n	8002200 <_printf_i+0x1c0>
 80021fc:	6019      	str	r1, [r3, #0]
 80021fe:	e002      	b.n	8002206 <_printf_i+0x1c6>
 8002200:	0668      	lsls	r0, r5, #25
 8002202:	d5fb      	bpl.n	80021fc <_printf_i+0x1bc>
 8002204:	8019      	strh	r1, [r3, #0]
 8002206:	2300      	movs	r3, #0
 8002208:	6123      	str	r3, [r4, #16]
 800220a:	4616      	mov	r6, r2
 800220c:	e7bc      	b.n	8002188 <_printf_i+0x148>
 800220e:	6833      	ldr	r3, [r6, #0]
 8002210:	1d1a      	adds	r2, r3, #4
 8002212:	6032      	str	r2, [r6, #0]
 8002214:	681e      	ldr	r6, [r3, #0]
 8002216:	6862      	ldr	r2, [r4, #4]
 8002218:	2100      	movs	r1, #0
 800221a:	4630      	mov	r0, r6
 800221c:	f7fe f800 	bl	8000220 <memchr>
 8002220:	b108      	cbz	r0, 8002226 <_printf_i+0x1e6>
 8002222:	1b80      	subs	r0, r0, r6
 8002224:	6060      	str	r0, [r4, #4]
 8002226:	6863      	ldr	r3, [r4, #4]
 8002228:	6123      	str	r3, [r4, #16]
 800222a:	2300      	movs	r3, #0
 800222c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002230:	e7aa      	b.n	8002188 <_printf_i+0x148>
 8002232:	6923      	ldr	r3, [r4, #16]
 8002234:	4632      	mov	r2, r6
 8002236:	4649      	mov	r1, r9
 8002238:	4640      	mov	r0, r8
 800223a:	47d0      	blx	sl
 800223c:	3001      	adds	r0, #1
 800223e:	d0ad      	beq.n	800219c <_printf_i+0x15c>
 8002240:	6823      	ldr	r3, [r4, #0]
 8002242:	079b      	lsls	r3, r3, #30
 8002244:	d413      	bmi.n	800226e <_printf_i+0x22e>
 8002246:	68e0      	ldr	r0, [r4, #12]
 8002248:	9b03      	ldr	r3, [sp, #12]
 800224a:	4298      	cmp	r0, r3
 800224c:	bfb8      	it	lt
 800224e:	4618      	movlt	r0, r3
 8002250:	e7a6      	b.n	80021a0 <_printf_i+0x160>
 8002252:	2301      	movs	r3, #1
 8002254:	4632      	mov	r2, r6
 8002256:	4649      	mov	r1, r9
 8002258:	4640      	mov	r0, r8
 800225a:	47d0      	blx	sl
 800225c:	3001      	adds	r0, #1
 800225e:	d09d      	beq.n	800219c <_printf_i+0x15c>
 8002260:	3501      	adds	r5, #1
 8002262:	68e3      	ldr	r3, [r4, #12]
 8002264:	9903      	ldr	r1, [sp, #12]
 8002266:	1a5b      	subs	r3, r3, r1
 8002268:	42ab      	cmp	r3, r5
 800226a:	dcf2      	bgt.n	8002252 <_printf_i+0x212>
 800226c:	e7eb      	b.n	8002246 <_printf_i+0x206>
 800226e:	2500      	movs	r5, #0
 8002270:	f104 0619 	add.w	r6, r4, #25
 8002274:	e7f5      	b.n	8002262 <_printf_i+0x222>
 8002276:	bf00      	nop
 8002278:	0800259f 	.word	0x0800259f
 800227c:	080025b0 	.word	0x080025b0

08002280 <__sflush_r>:
 8002280:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002284:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002288:	0716      	lsls	r6, r2, #28
 800228a:	4605      	mov	r5, r0
 800228c:	460c      	mov	r4, r1
 800228e:	d454      	bmi.n	800233a <__sflush_r+0xba>
 8002290:	684b      	ldr	r3, [r1, #4]
 8002292:	2b00      	cmp	r3, #0
 8002294:	dc02      	bgt.n	800229c <__sflush_r+0x1c>
 8002296:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8002298:	2b00      	cmp	r3, #0
 800229a:	dd48      	ble.n	800232e <__sflush_r+0xae>
 800229c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800229e:	2e00      	cmp	r6, #0
 80022a0:	d045      	beq.n	800232e <__sflush_r+0xae>
 80022a2:	2300      	movs	r3, #0
 80022a4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80022a8:	682f      	ldr	r7, [r5, #0]
 80022aa:	6a21      	ldr	r1, [r4, #32]
 80022ac:	602b      	str	r3, [r5, #0]
 80022ae:	d030      	beq.n	8002312 <__sflush_r+0x92>
 80022b0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80022b2:	89a3      	ldrh	r3, [r4, #12]
 80022b4:	0759      	lsls	r1, r3, #29
 80022b6:	d505      	bpl.n	80022c4 <__sflush_r+0x44>
 80022b8:	6863      	ldr	r3, [r4, #4]
 80022ba:	1ad2      	subs	r2, r2, r3
 80022bc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80022be:	b10b      	cbz	r3, 80022c4 <__sflush_r+0x44>
 80022c0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80022c2:	1ad2      	subs	r2, r2, r3
 80022c4:	2300      	movs	r3, #0
 80022c6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80022c8:	6a21      	ldr	r1, [r4, #32]
 80022ca:	4628      	mov	r0, r5
 80022cc:	47b0      	blx	r6
 80022ce:	1c43      	adds	r3, r0, #1
 80022d0:	89a3      	ldrh	r3, [r4, #12]
 80022d2:	d106      	bne.n	80022e2 <__sflush_r+0x62>
 80022d4:	6829      	ldr	r1, [r5, #0]
 80022d6:	291d      	cmp	r1, #29
 80022d8:	d82b      	bhi.n	8002332 <__sflush_r+0xb2>
 80022da:	4a2a      	ldr	r2, [pc, #168]	@ (8002384 <__sflush_r+0x104>)
 80022dc:	410a      	asrs	r2, r1
 80022de:	07d6      	lsls	r6, r2, #31
 80022e0:	d427      	bmi.n	8002332 <__sflush_r+0xb2>
 80022e2:	2200      	movs	r2, #0
 80022e4:	6062      	str	r2, [r4, #4]
 80022e6:	04d9      	lsls	r1, r3, #19
 80022e8:	6922      	ldr	r2, [r4, #16]
 80022ea:	6022      	str	r2, [r4, #0]
 80022ec:	d504      	bpl.n	80022f8 <__sflush_r+0x78>
 80022ee:	1c42      	adds	r2, r0, #1
 80022f0:	d101      	bne.n	80022f6 <__sflush_r+0x76>
 80022f2:	682b      	ldr	r3, [r5, #0]
 80022f4:	b903      	cbnz	r3, 80022f8 <__sflush_r+0x78>
 80022f6:	6560      	str	r0, [r4, #84]	@ 0x54
 80022f8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80022fa:	602f      	str	r7, [r5, #0]
 80022fc:	b1b9      	cbz	r1, 800232e <__sflush_r+0xae>
 80022fe:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002302:	4299      	cmp	r1, r3
 8002304:	d002      	beq.n	800230c <__sflush_r+0x8c>
 8002306:	4628      	mov	r0, r5
 8002308:	f7ff fbf2 	bl	8001af0 <_free_r>
 800230c:	2300      	movs	r3, #0
 800230e:	6363      	str	r3, [r4, #52]	@ 0x34
 8002310:	e00d      	b.n	800232e <__sflush_r+0xae>
 8002312:	2301      	movs	r3, #1
 8002314:	4628      	mov	r0, r5
 8002316:	47b0      	blx	r6
 8002318:	4602      	mov	r2, r0
 800231a:	1c50      	adds	r0, r2, #1
 800231c:	d1c9      	bne.n	80022b2 <__sflush_r+0x32>
 800231e:	682b      	ldr	r3, [r5, #0]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d0c6      	beq.n	80022b2 <__sflush_r+0x32>
 8002324:	2b1d      	cmp	r3, #29
 8002326:	d001      	beq.n	800232c <__sflush_r+0xac>
 8002328:	2b16      	cmp	r3, #22
 800232a:	d11e      	bne.n	800236a <__sflush_r+0xea>
 800232c:	602f      	str	r7, [r5, #0]
 800232e:	2000      	movs	r0, #0
 8002330:	e022      	b.n	8002378 <__sflush_r+0xf8>
 8002332:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002336:	b21b      	sxth	r3, r3
 8002338:	e01b      	b.n	8002372 <__sflush_r+0xf2>
 800233a:	690f      	ldr	r7, [r1, #16]
 800233c:	2f00      	cmp	r7, #0
 800233e:	d0f6      	beq.n	800232e <__sflush_r+0xae>
 8002340:	0793      	lsls	r3, r2, #30
 8002342:	680e      	ldr	r6, [r1, #0]
 8002344:	bf08      	it	eq
 8002346:	694b      	ldreq	r3, [r1, #20]
 8002348:	600f      	str	r7, [r1, #0]
 800234a:	bf18      	it	ne
 800234c:	2300      	movne	r3, #0
 800234e:	eba6 0807 	sub.w	r8, r6, r7
 8002352:	608b      	str	r3, [r1, #8]
 8002354:	f1b8 0f00 	cmp.w	r8, #0
 8002358:	dde9      	ble.n	800232e <__sflush_r+0xae>
 800235a:	6a21      	ldr	r1, [r4, #32]
 800235c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800235e:	4643      	mov	r3, r8
 8002360:	463a      	mov	r2, r7
 8002362:	4628      	mov	r0, r5
 8002364:	47b0      	blx	r6
 8002366:	2800      	cmp	r0, #0
 8002368:	dc08      	bgt.n	800237c <__sflush_r+0xfc>
 800236a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800236e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002372:	81a3      	strh	r3, [r4, #12]
 8002374:	f04f 30ff 	mov.w	r0, #4294967295
 8002378:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800237c:	4407      	add	r7, r0
 800237e:	eba8 0800 	sub.w	r8, r8, r0
 8002382:	e7e7      	b.n	8002354 <__sflush_r+0xd4>
 8002384:	dfbffffe 	.word	0xdfbffffe

08002388 <_fflush_r>:
 8002388:	b538      	push	{r3, r4, r5, lr}
 800238a:	690b      	ldr	r3, [r1, #16]
 800238c:	4605      	mov	r5, r0
 800238e:	460c      	mov	r4, r1
 8002390:	b913      	cbnz	r3, 8002398 <_fflush_r+0x10>
 8002392:	2500      	movs	r5, #0
 8002394:	4628      	mov	r0, r5
 8002396:	bd38      	pop	{r3, r4, r5, pc}
 8002398:	b118      	cbz	r0, 80023a2 <_fflush_r+0x1a>
 800239a:	6a03      	ldr	r3, [r0, #32]
 800239c:	b90b      	cbnz	r3, 80023a2 <_fflush_r+0x1a>
 800239e:	f7ff f9ad 	bl	80016fc <__sinit>
 80023a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d0f3      	beq.n	8002392 <_fflush_r+0xa>
 80023aa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80023ac:	07d0      	lsls	r0, r2, #31
 80023ae:	d404      	bmi.n	80023ba <_fflush_r+0x32>
 80023b0:	0599      	lsls	r1, r3, #22
 80023b2:	d402      	bmi.n	80023ba <_fflush_r+0x32>
 80023b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80023b6:	f7ff fb98 	bl	8001aea <__retarget_lock_acquire_recursive>
 80023ba:	4628      	mov	r0, r5
 80023bc:	4621      	mov	r1, r4
 80023be:	f7ff ff5f 	bl	8002280 <__sflush_r>
 80023c2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80023c4:	07da      	lsls	r2, r3, #31
 80023c6:	4605      	mov	r5, r0
 80023c8:	d4e4      	bmi.n	8002394 <_fflush_r+0xc>
 80023ca:	89a3      	ldrh	r3, [r4, #12]
 80023cc:	059b      	lsls	r3, r3, #22
 80023ce:	d4e1      	bmi.n	8002394 <_fflush_r+0xc>
 80023d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80023d2:	f7ff fb8b 	bl	8001aec <__retarget_lock_release_recursive>
 80023d6:	e7dd      	b.n	8002394 <_fflush_r+0xc>

080023d8 <__swhatbuf_r>:
 80023d8:	b570      	push	{r4, r5, r6, lr}
 80023da:	460c      	mov	r4, r1
 80023dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80023e0:	2900      	cmp	r1, #0
 80023e2:	b096      	sub	sp, #88	@ 0x58
 80023e4:	4615      	mov	r5, r2
 80023e6:	461e      	mov	r6, r3
 80023e8:	da0d      	bge.n	8002406 <__swhatbuf_r+0x2e>
 80023ea:	89a3      	ldrh	r3, [r4, #12]
 80023ec:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80023f0:	f04f 0100 	mov.w	r1, #0
 80023f4:	bf14      	ite	ne
 80023f6:	2340      	movne	r3, #64	@ 0x40
 80023f8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80023fc:	2000      	movs	r0, #0
 80023fe:	6031      	str	r1, [r6, #0]
 8002400:	602b      	str	r3, [r5, #0]
 8002402:	b016      	add	sp, #88	@ 0x58
 8002404:	bd70      	pop	{r4, r5, r6, pc}
 8002406:	466a      	mov	r2, sp
 8002408:	f000 f848 	bl	800249c <_fstat_r>
 800240c:	2800      	cmp	r0, #0
 800240e:	dbec      	blt.n	80023ea <__swhatbuf_r+0x12>
 8002410:	9901      	ldr	r1, [sp, #4]
 8002412:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8002416:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800241a:	4259      	negs	r1, r3
 800241c:	4159      	adcs	r1, r3
 800241e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002422:	e7eb      	b.n	80023fc <__swhatbuf_r+0x24>

08002424 <__smakebuf_r>:
 8002424:	898b      	ldrh	r3, [r1, #12]
 8002426:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002428:	079d      	lsls	r5, r3, #30
 800242a:	4606      	mov	r6, r0
 800242c:	460c      	mov	r4, r1
 800242e:	d507      	bpl.n	8002440 <__smakebuf_r+0x1c>
 8002430:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8002434:	6023      	str	r3, [r4, #0]
 8002436:	6123      	str	r3, [r4, #16]
 8002438:	2301      	movs	r3, #1
 800243a:	6163      	str	r3, [r4, #20]
 800243c:	b003      	add	sp, #12
 800243e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002440:	ab01      	add	r3, sp, #4
 8002442:	466a      	mov	r2, sp
 8002444:	f7ff ffc8 	bl	80023d8 <__swhatbuf_r>
 8002448:	9f00      	ldr	r7, [sp, #0]
 800244a:	4605      	mov	r5, r0
 800244c:	4639      	mov	r1, r7
 800244e:	4630      	mov	r0, r6
 8002450:	f7ff fbba 	bl	8001bc8 <_malloc_r>
 8002454:	b948      	cbnz	r0, 800246a <__smakebuf_r+0x46>
 8002456:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800245a:	059a      	lsls	r2, r3, #22
 800245c:	d4ee      	bmi.n	800243c <__smakebuf_r+0x18>
 800245e:	f023 0303 	bic.w	r3, r3, #3
 8002462:	f043 0302 	orr.w	r3, r3, #2
 8002466:	81a3      	strh	r3, [r4, #12]
 8002468:	e7e2      	b.n	8002430 <__smakebuf_r+0xc>
 800246a:	89a3      	ldrh	r3, [r4, #12]
 800246c:	6020      	str	r0, [r4, #0]
 800246e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002472:	81a3      	strh	r3, [r4, #12]
 8002474:	9b01      	ldr	r3, [sp, #4]
 8002476:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800247a:	b15b      	cbz	r3, 8002494 <__smakebuf_r+0x70>
 800247c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002480:	4630      	mov	r0, r6
 8002482:	f000 f81d 	bl	80024c0 <_isatty_r>
 8002486:	b128      	cbz	r0, 8002494 <__smakebuf_r+0x70>
 8002488:	89a3      	ldrh	r3, [r4, #12]
 800248a:	f023 0303 	bic.w	r3, r3, #3
 800248e:	f043 0301 	orr.w	r3, r3, #1
 8002492:	81a3      	strh	r3, [r4, #12]
 8002494:	89a3      	ldrh	r3, [r4, #12]
 8002496:	431d      	orrs	r5, r3
 8002498:	81a5      	strh	r5, [r4, #12]
 800249a:	e7cf      	b.n	800243c <__smakebuf_r+0x18>

0800249c <_fstat_r>:
 800249c:	b538      	push	{r3, r4, r5, lr}
 800249e:	4d07      	ldr	r5, [pc, #28]	@ (80024bc <_fstat_r+0x20>)
 80024a0:	2300      	movs	r3, #0
 80024a2:	4604      	mov	r4, r0
 80024a4:	4608      	mov	r0, r1
 80024a6:	4611      	mov	r1, r2
 80024a8:	602b      	str	r3, [r5, #0]
 80024aa:	f7fe f879 	bl	80005a0 <_fstat>
 80024ae:	1c43      	adds	r3, r0, #1
 80024b0:	d102      	bne.n	80024b8 <_fstat_r+0x1c>
 80024b2:	682b      	ldr	r3, [r5, #0]
 80024b4:	b103      	cbz	r3, 80024b8 <_fstat_r+0x1c>
 80024b6:	6023      	str	r3, [r4, #0]
 80024b8:	bd38      	pop	{r3, r4, r5, pc}
 80024ba:	bf00      	nop
 80024bc:	20000604 	.word	0x20000604

080024c0 <_isatty_r>:
 80024c0:	b538      	push	{r3, r4, r5, lr}
 80024c2:	4d06      	ldr	r5, [pc, #24]	@ (80024dc <_isatty_r+0x1c>)
 80024c4:	2300      	movs	r3, #0
 80024c6:	4604      	mov	r4, r0
 80024c8:	4608      	mov	r0, r1
 80024ca:	602b      	str	r3, [r5, #0]
 80024cc:	f7fe f878 	bl	80005c0 <_isatty>
 80024d0:	1c43      	adds	r3, r0, #1
 80024d2:	d102      	bne.n	80024da <_isatty_r+0x1a>
 80024d4:	682b      	ldr	r3, [r5, #0]
 80024d6:	b103      	cbz	r3, 80024da <_isatty_r+0x1a>
 80024d8:	6023      	str	r3, [r4, #0]
 80024da:	bd38      	pop	{r3, r4, r5, pc}
 80024dc:	20000604 	.word	0x20000604

080024e0 <_sbrk_r>:
 80024e0:	b538      	push	{r3, r4, r5, lr}
 80024e2:	4d06      	ldr	r5, [pc, #24]	@ (80024fc <_sbrk_r+0x1c>)
 80024e4:	2300      	movs	r3, #0
 80024e6:	4604      	mov	r4, r0
 80024e8:	4608      	mov	r0, r1
 80024ea:	602b      	str	r3, [r5, #0]
 80024ec:	f7fe f880 	bl	80005f0 <_sbrk>
 80024f0:	1c43      	adds	r3, r0, #1
 80024f2:	d102      	bne.n	80024fa <_sbrk_r+0x1a>
 80024f4:	682b      	ldr	r3, [r5, #0]
 80024f6:	b103      	cbz	r3, 80024fa <_sbrk_r+0x1a>
 80024f8:	6023      	str	r3, [r4, #0]
 80024fa:	bd38      	pop	{r3, r4, r5, pc}
 80024fc:	20000604 	.word	0x20000604

08002500 <_init>:
 8002500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002502:	bf00      	nop
 8002504:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002506:	bc08      	pop	{r3}
 8002508:	469e      	mov	lr, r3
 800250a:	4770      	bx	lr

0800250c <_fini>:
 800250c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800250e:	bf00      	nop
 8002510:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002512:	bc08      	pop	{r3}
 8002514:	469e      	mov	lr, r3
 8002516:	4770      	bx	lr
